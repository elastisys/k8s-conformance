  I0824 11:27:06.871021      22 e2e.go:117] Starting e2e run "bbcca8eb-24e0-4d75-b303-9fbce3207588" on Ginkgo node 1
  Aug 24 11:27:06.897: INFO: Enabling in-tree volume drivers
Running Suite: Kubernetes e2e suite - /usr/local/bin
====================================================
Random Seed: 1692876426 - will randomize all specs

Will run 380 of 7387 specs
------------------------------
[ReportBeforeSuite] 
test/e2e/e2e_test.go:153
[ReportBeforeSuite] PASSED [0.000 seconds]
------------------------------
[SynchronizedBeforeSuite] 
test/e2e/e2e.go:77
  Aug 24 11:27:07.067: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  Aug 24 11:27:07.068: INFO: Waiting up to 30m0s for all (but 0) nodes to be schedulable
  Aug 24 11:27:07.144: INFO: Waiting up to 5m0s for all daemonsets in namespace 'kube-system' to start
  Aug 24 11:27:07.160: INFO: 2 / 2 pods ready in namespace 'kube-system' in daemonset 'cilium' (0 seconds elapsed)
  Aug 24 11:27:07.160: INFO: 2 / 2 pods ready in namespace 'kube-system' in daemonset 'csi-node' (0 seconds elapsed)
  Aug 24 11:27:07.160: INFO: 2 / 2 pods ready in namespace 'kube-system' in daemonset 'konnectivity-agent' (0 seconds elapsed)
  Aug 24 11:27:07.160: INFO: 2 / 2 pods ready in namespace 'kube-system' in daemonset 'kube-proxy' (0 seconds elapsed)
  Aug 24 11:27:07.160: INFO: e2e test version: v1.28.0
  Aug 24 11:27:07.163: INFO: kube-apiserver version: v1.28.0
  Aug 24 11:27:07.163: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  Aug 24 11:27:07.173: INFO: Cluster IP family: ipv4
[SynchronizedBeforeSuite] PASSED [0.106 seconds]
------------------------------
SSSSSS
------------------------------
[sig-apps] Daemon set [Serial] should update pod when spec was updated and update strategy is RollingUpdate [Conformance]
test/e2e/apps/daemon_set.go:385
  STEP: Creating a kubernetes client @ 08/24/23 11:27:07.49
  Aug 24 11:27:07.490: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename daemonsets @ 08/24/23 11:27:07.49
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 11:27:07.522
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 11:27:07.528
  Aug 24 11:27:07.577: INFO: Creating simple daemon set daemon-set
  STEP: Check that daemon pods launch on every node of the cluster. @ 08/24/23 11:27:07.59
  Aug 24 11:27:07.608: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 0
  Aug 24 11:27:07.608: INFO: Node scw-conformance-default-2af6d8b4c6264cc5b9e5e6 is running 0 daemon pod, expected 1
  Aug 24 11:27:08.627: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 0
  Aug 24 11:27:08.627: INFO: Node scw-conformance-default-2af6d8b4c6264cc5b9e5e6 is running 0 daemon pod, expected 1
  Aug 24 11:27:09.627: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 0
  Aug 24 11:27:09.627: INFO: Node scw-conformance-default-2af6d8b4c6264cc5b9e5e6 is running 0 daemon pod, expected 1
  Aug 24 11:27:10.641: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 0
  Aug 24 11:27:10.641: INFO: Node scw-conformance-default-2af6d8b4c6264cc5b9e5e6 is running 0 daemon pod, expected 1
  Aug 24 11:27:11.628: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 0
  Aug 24 11:27:11.628: INFO: Node scw-conformance-default-2af6d8b4c6264cc5b9e5e6 is running 0 daemon pod, expected 1
  Aug 24 11:27:12.628: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 1
  Aug 24 11:27:12.628: INFO: Node scw-conformance-default-ecf11ec729064adba7e270 is running 0 daemon pod, expected 1
  Aug 24 11:27:13.628: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 1
  Aug 24 11:27:13.628: INFO: Node scw-conformance-default-ecf11ec729064adba7e270 is running 0 daemon pod, expected 1
  Aug 24 11:27:14.629: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 2
  Aug 24 11:27:14.629: INFO: Number of running nodes: 2, number of available pods: 2 in daemonset daemon-set
  STEP: Update daemon pods image. @ 08/24/23 11:27:14.665
  STEP: Check that daemon pods images are updated. @ 08/24/23 11:27:14.69
  Aug 24 11:27:14.699: INFO: Wrong image for pod: daemon-set-kdgz2. Expected: registry.k8s.io/e2e-test-images/agnhost:2.45, got: registry.k8s.io/e2e-test-images/httpd:2.4.38-4.
  Aug 24 11:27:14.699: INFO: Wrong image for pod: daemon-set-lhhf4. Expected: registry.k8s.io/e2e-test-images/agnhost:2.45, got: registry.k8s.io/e2e-test-images/httpd:2.4.38-4.
  Aug 24 11:27:15.757: INFO: Wrong image for pod: daemon-set-lhhf4. Expected: registry.k8s.io/e2e-test-images/agnhost:2.45, got: registry.k8s.io/e2e-test-images/httpd:2.4.38-4.
  Aug 24 11:27:15.757: INFO: Pod daemon-set-xq2t7 is not available
  Aug 24 11:27:16.721: INFO: Wrong image for pod: daemon-set-lhhf4. Expected: registry.k8s.io/e2e-test-images/agnhost:2.45, got: registry.k8s.io/e2e-test-images/httpd:2.4.38-4.
  Aug 24 11:27:16.721: INFO: Pod daemon-set-xq2t7 is not available
  Aug 24 11:27:17.723: INFO: Wrong image for pod: daemon-set-lhhf4. Expected: registry.k8s.io/e2e-test-images/agnhost:2.45, got: registry.k8s.io/e2e-test-images/httpd:2.4.38-4.
  Aug 24 11:27:17.723: INFO: Pod daemon-set-xq2t7 is not available
  Aug 24 11:27:18.723: INFO: Wrong image for pod: daemon-set-lhhf4. Expected: registry.k8s.io/e2e-test-images/agnhost:2.45, got: registry.k8s.io/e2e-test-images/httpd:2.4.38-4.
  Aug 24 11:27:18.723: INFO: Pod daemon-set-xq2t7 is not available
  Aug 24 11:27:19.722: INFO: Wrong image for pod: daemon-set-lhhf4. Expected: registry.k8s.io/e2e-test-images/agnhost:2.45, got: registry.k8s.io/e2e-test-images/httpd:2.4.38-4.
  Aug 24 11:27:19.722: INFO: Pod daemon-set-xq2t7 is not available
  Aug 24 11:27:21.722: INFO: Pod daemon-set-tb8tj is not available
  STEP: Check that daemon pods are still running on every node of the cluster. @ 08/24/23 11:27:21.731
  Aug 24 11:27:21.756: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 1
  Aug 24 11:27:21.756: INFO: Node scw-conformance-default-ecf11ec729064adba7e270 is running 0 daemon pod, expected 1
  Aug 24 11:27:22.779: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 1
  Aug 24 11:27:22.779: INFO: Node scw-conformance-default-ecf11ec729064adba7e270 is running 0 daemon pod, expected 1
  Aug 24 11:27:23.777: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 1
  Aug 24 11:27:23.777: INFO: Node scw-conformance-default-ecf11ec729064adba7e270 is running 0 daemon pod, expected 1
  Aug 24 11:27:24.776: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 1
  Aug 24 11:27:24.776: INFO: Node scw-conformance-default-ecf11ec729064adba7e270 is running 0 daemon pod, expected 1
  Aug 24 11:27:25.777: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 2
  Aug 24 11:27:25.777: INFO: Number of running nodes: 2, number of available pods: 2 in daemonset daemon-set
  STEP: Deleting DaemonSet "daemon-set" @ 08/24/23 11:27:25.819
  STEP: deleting DaemonSet.extensions daemon-set in namespace daemonsets-1034, will wait for the garbage collector to delete the pods @ 08/24/23 11:27:25.819
  Aug 24 11:27:25.893: INFO: Deleting DaemonSet.extensions daemon-set took: 14.250539ms
  Aug 24 11:27:25.993: INFO: Terminating DaemonSet.extensions daemon-set pods took: 100.228599ms
  Aug 24 11:27:28.103: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 0
  Aug 24 11:27:28.103: INFO: Number of running nodes: 0, number of available pods: 0 in daemonset daemon-set
  Aug 24 11:27:28.111: INFO: daemonset: {"kind":"DaemonSetList","apiVersion":"apps/v1","metadata":{"resourceVersion":"3404833517"},"items":null}

  Aug 24 11:27:28.124: INFO: pods: {"kind":"PodList","apiVersion":"v1","metadata":{"resourceVersion":"3404833517"},"items":null}

  Aug 24 11:27:28.151: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "daemonsets-1034" for this suite. @ 08/24/23 11:27:28.161
• [20.687 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-node] ConfigMap should fail to create ConfigMap with empty key [Conformance]
test/e2e/common/node/configmap.go:138
  STEP: Creating a kubernetes client @ 08/24/23 11:27:28.179
  Aug 24 11:27:28.180: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename configmap @ 08/24/23 11:27:28.181
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 11:27:28.214
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 11:27:28.221
  STEP: Creating configMap that has name configmap-test-emptyKey-f10f7c35-0338-49c9-9a33-1ed2776d137c @ 08/24/23 11:27:28.229
  Aug 24 11:27:28.233: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "configmap-2291" for this suite. @ 08/24/23 11:27:28.245
• [0.081 seconds]
------------------------------
SSSSSSSSSSSSSSSS
------------------------------
[sig-node] Probing container should be restarted with a /healthz http liveness probe [NodeConformance] [Conformance]
test/e2e/common/node/container_probe.go:168
  STEP: Creating a kubernetes client @ 08/24/23 11:27:28.262
  Aug 24 11:27:28.262: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename container-probe @ 08/24/23 11:27:28.264
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 11:27:28.294
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 11:27:28.3
  STEP: Creating pod liveness-d8e77842-a7dc-4d3a-9982-f86ee35151c0 in namespace container-probe-4274 @ 08/24/23 11:27:28.307
  STEP: checking the pod's current state and verifying that restartCount is present @ 08/24/23 11:27:30.34
  Aug 24 11:27:30.349: INFO: Initial restart count of pod liveness-d8e77842-a7dc-4d3a-9982-f86ee35151c0 is 0
  Aug 24 11:27:30.361: INFO: Get pod liveness-d8e77842-a7dc-4d3a-9982-f86ee35151c0 in namespace container-probe-4274
  Aug 24 11:27:32.372: INFO: Get pod liveness-d8e77842-a7dc-4d3a-9982-f86ee35151c0 in namespace container-probe-4274
  Aug 24 11:27:34.381: INFO: Get pod liveness-d8e77842-a7dc-4d3a-9982-f86ee35151c0 in namespace container-probe-4274
  Aug 24 11:27:36.392: INFO: Get pod liveness-d8e77842-a7dc-4d3a-9982-f86ee35151c0 in namespace container-probe-4274
  Aug 24 11:27:38.404: INFO: Get pod liveness-d8e77842-a7dc-4d3a-9982-f86ee35151c0 in namespace container-probe-4274
  Aug 24 11:27:40.412: INFO: Get pod liveness-d8e77842-a7dc-4d3a-9982-f86ee35151c0 in namespace container-probe-4274
  Aug 24 11:27:42.421: INFO: Get pod liveness-d8e77842-a7dc-4d3a-9982-f86ee35151c0 in namespace container-probe-4274
  Aug 24 11:27:44.435: INFO: Get pod liveness-d8e77842-a7dc-4d3a-9982-f86ee35151c0 in namespace container-probe-4274
  Aug 24 11:27:46.445: INFO: Get pod liveness-d8e77842-a7dc-4d3a-9982-f86ee35151c0 in namespace container-probe-4274
  Aug 24 11:27:48.456: INFO: Get pod liveness-d8e77842-a7dc-4d3a-9982-f86ee35151c0 in namespace container-probe-4274
  Aug 24 11:27:50.466: INFO: Get pod liveness-d8e77842-a7dc-4d3a-9982-f86ee35151c0 in namespace container-probe-4274
  Aug 24 11:27:50.467: INFO: Restart count of pod container-probe-4274/liveness-d8e77842-a7dc-4d3a-9982-f86ee35151c0 is now 1 (20.1175936s elapsed)
  Aug 24 11:27:50.467: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: deleting the pod @ 08/24/23 11:27:50.478
  STEP: Destroying namespace "container-probe-4274" for this suite. @ 08/24/23 11:27:50.507
• [22.258 seconds]
------------------------------
SSSSSS
------------------------------
[sig-network] Services should be able to switch session affinity for NodePort service [LinuxOnly] [Conformance]
test/e2e/network/service.go:2224
  STEP: Creating a kubernetes client @ 08/24/23 11:27:50.52
  Aug 24 11:27:50.520: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename services @ 08/24/23 11:27:50.521
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 11:27:50.57
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 11:27:50.577
  STEP: creating service in namespace services-8663 @ 08/24/23 11:27:50.584
  STEP: creating service affinity-nodeport-transition in namespace services-8663 @ 08/24/23 11:27:50.584
  STEP: creating replication controller affinity-nodeport-transition in namespace services-8663 @ 08/24/23 11:27:50.619
  I0824 11:27:50.650510      22 runners.go:197] Created replication controller with name: affinity-nodeport-transition, namespace: services-8663, replica count: 3
  I0824 11:27:53.701604      22 runners.go:197] affinity-nodeport-transition Pods: 3 out of 3 created, 3 running, 0 pending, 0 waiting, 0 inactive, 0 terminating, 0 unknown, 0 runningButNotReady 
  Aug 24 11:27:53.727: INFO: Creating new exec pod
  Aug 24 11:27:56.765: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1002171096 --namespace=services-8663 exec execpod-affinity7gcjw -- /bin/sh -x -c echo hostName | nc -v -t -w 2 affinity-nodeport-transition 80'
  Aug 24 11:27:57.052: INFO: stderr: "+ echo hostName\n+ nc -v -t -w 2 affinity-nodeport-transition 80\nConnection to affinity-nodeport-transition 80 port [tcp/http] succeeded!\n"
  Aug 24 11:27:57.052: INFO: stdout: "HTTP/1.1 400 Bad Request\r\nContent-Type: text/plain; charset=utf-8\r\nConnection: close\r\n\r\n400 Bad Request"
  Aug 24 11:27:57.053: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1002171096 --namespace=services-8663 exec execpod-affinity7gcjw -- /bin/sh -x -c echo hostName | nc -v -t -w 2 10.96.193.170 80'
  Aug 24 11:27:57.297: INFO: stderr: "+ + ncecho -v -t hostName -w\n 2 10.96.193.170 80\nConnection to 10.96.193.170 80 port [tcp/http] succeeded!\n"
  Aug 24 11:27:57.297: INFO: stdout: "HTTP/1.1 400 Bad Request\r\nContent-Type: text/plain; charset=utf-8\r\nConnection: close\r\n\r\n400 Bad Request"
  Aug 24 11:27:57.297: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1002171096 --namespace=services-8663 exec execpod-affinity7gcjw -- /bin/sh -x -c echo hostName | nc -v -t -w 2 172.16.36.3 32581'
  Aug 24 11:27:57.521: INFO: stderr: "+ echo hostName\n+ nc -v -t -w 2 172.16.36.3 32581\nConnection to 172.16.36.3 32581 port [tcp/*] succeeded!\n"
  Aug 24 11:27:57.521: INFO: stdout: "HTTP/1.1 400 Bad Request\r\nContent-Type: text/plain; charset=utf-8\r\nConnection: close\r\n\r\n400 Bad Request"
  Aug 24 11:27:57.521: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1002171096 --namespace=services-8663 exec execpod-affinity7gcjw -- /bin/sh -x -c echo hostName | nc -v -t -w 2 172.16.36.2 32581'
  Aug 24 11:27:58.353: INFO: stderr: "+ echo hostName\n+ nc -v -t -w 2 172.16.36.2 32581\nConnection to 172.16.36.2 32581 port [tcp/*] succeeded!\n"
  Aug 24 11:27:58.353: INFO: stdout: "HTTP/1.1 400 Bad Request\r\nContent-Type: text/plain; charset=utf-8\r\nConnection: close\r\n\r\n400 Bad Request"
  Aug 24 11:27:58.374: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1002171096 --namespace=services-8663 exec execpod-affinity7gcjw -- /bin/sh -x -c for i in $(seq 0 15); do echo; curl -q -s --connect-timeout 2 http://172.16.36.3:32581/ ; done'
  Aug 24 11:27:58.721: INFO: stderr: "+ seq 0 15\n+ echo\n+ curl -q -s --connect-timeout 2 http://172.16.36.3:32581/\n+ echo\n+ curl -q -s --connect-timeout 2 http://172.16.36.3:32581/\n+ echo\n+ curl -q -s --connect-timeout 2 http://172.16.36.3:32581/\n+ echo\n+ curl -q -s --connect-timeout 2 http://172.16.36.3:32581/\n+ echo\n+ curl -q -s --connect-timeout 2 http://172.16.36.3:32581/\n+ echo\n+ curl -q -s --connect-timeout 2 http://172.16.36.3:32581/\n+ echo\n+ curl -q -s --connect-timeout 2 http://172.16.36.3:32581/\n+ echo\n+ curl -q -s --connect-timeout 2 http://172.16.36.3:32581/\n+ echo\n+ curl -q -s --connect-timeout 2 http://172.16.36.3:32581/\n+ echo\n+ curl -q -s --connect-timeout 2 http://172.16.36.3:32581/\n+ echo\n+ curl -q -s --connect-timeout 2 http://172.16.36.3:32581/\n+ echo\n+ curl -q -s --connect-timeout 2 http://172.16.36.3:32581/\n+ echo\n+ curl -q -s --connect-timeout 2 http://172.16.36.3:32581/\n+ echo\n+ curl -q -s --connect-timeout 2 http://172.16.36.3:32581/\n+ echo\n+ curl -q -s --connect-timeout 2 http://172.16.36.3:32581/\n+ echo\n+ curl -q -s --connect-timeout 2 http://172.16.36.3:32581/\n"
  Aug 24 11:27:58.721: INFO: stdout: "\naffinity-nodeport-transition-dv47g\naffinity-nodeport-transition-sjlpq\naffinity-nodeport-transition-dv47g\naffinity-nodeport-transition-sjlpq\naffinity-nodeport-transition-dv47g\naffinity-nodeport-transition-sjlpq\naffinity-nodeport-transition-sjlpq\naffinity-nodeport-transition-dv47g\naffinity-nodeport-transition-dv47g\naffinity-nodeport-transition-sjlpq\naffinity-nodeport-transition-kfrf4\naffinity-nodeport-transition-dv47g\naffinity-nodeport-transition-dv47g\naffinity-nodeport-transition-dv47g\naffinity-nodeport-transition-kfrf4\naffinity-nodeport-transition-sjlpq"
  Aug 24 11:27:58.721: INFO: Received response from host: affinity-nodeport-transition-dv47g
  Aug 24 11:27:58.721: INFO: Received response from host: affinity-nodeport-transition-sjlpq
  Aug 24 11:27:58.721: INFO: Received response from host: affinity-nodeport-transition-dv47g
  Aug 24 11:27:58.721: INFO: Received response from host: affinity-nodeport-transition-sjlpq
  Aug 24 11:27:58.722: INFO: Received response from host: affinity-nodeport-transition-dv47g
  Aug 24 11:27:58.722: INFO: Received response from host: affinity-nodeport-transition-sjlpq
  Aug 24 11:27:58.722: INFO: Received response from host: affinity-nodeport-transition-sjlpq
  Aug 24 11:27:58.722: INFO: Received response from host: affinity-nodeport-transition-dv47g
  Aug 24 11:27:58.722: INFO: Received response from host: affinity-nodeport-transition-dv47g
  Aug 24 11:27:58.722: INFO: Received response from host: affinity-nodeport-transition-sjlpq
  Aug 24 11:27:58.722: INFO: Received response from host: affinity-nodeport-transition-kfrf4
  Aug 24 11:27:58.722: INFO: Received response from host: affinity-nodeport-transition-dv47g
  Aug 24 11:27:58.722: INFO: Received response from host: affinity-nodeport-transition-dv47g
  Aug 24 11:27:58.722: INFO: Received response from host: affinity-nodeport-transition-dv47g
  Aug 24 11:27:58.722: INFO: Received response from host: affinity-nodeport-transition-kfrf4
  Aug 24 11:27:58.722: INFO: Received response from host: affinity-nodeport-transition-sjlpq
  Aug 24 11:27:58.742: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1002171096 --namespace=services-8663 exec execpod-affinity7gcjw -- /bin/sh -x -c for i in $(seq 0 15); do echo; curl -q -s --connect-timeout 2 http://172.16.36.3:32581/ ; done'
  Aug 24 11:27:59.091: INFO: stderr: "+ seq 0 15\n+ echo\n+ curl -q -s --connect-timeout 2 http://172.16.36.3:32581/\n+ echo\n+ curl -q -s --connect-timeout 2 http://172.16.36.3:32581/\n+ echo\n+ curl -q -s --connect-timeout 2 http://172.16.36.3:32581/\n+ echo\n+ curl -q -s --connect-timeout 2 http://172.16.36.3:32581/\n+ echo\n+ curl -q -s --connect-timeout 2 http://172.16.36.3:32581/\n+ echo\n+ curl -q -s --connect-timeout 2 http://172.16.36.3:32581/\n+ echo\n+ curl -q -s --connect-timeout 2 http://172.16.36.3:32581/\n+ echo\n+ curl -q -s --connect-timeout 2 http://172.16.36.3:32581/\n+ echo\n+ curl -q -s --connect-timeout 2 http://172.16.36.3:32581/\n+ echo\n+ curl -q -s --connect-timeout 2 http://172.16.36.3:32581/\n+ echo\n+ curl -q -s --connect-timeout 2 http://172.16.36.3:32581/\n+ echo\n+ curl -q -s --connect-timeout 2 http://172.16.36.3:32581/\n+ echo\n+ curl -q -s --connect-timeout 2 http://172.16.36.3:32581/\n+ echo\n+ curl -q -s --connect-timeout 2 http://172.16.36.3:32581/\n+ echo\n+ curl -q -s --connect-timeout 2 http://172.16.36.3:32581/\n+ echo\n+ curl -q -s --connect-timeout 2 http://172.16.36.3:32581/\n"
  Aug 24 11:27:59.091: INFO: stdout: "\naffinity-nodeport-transition-kfrf4\naffinity-nodeport-transition-kfrf4\naffinity-nodeport-transition-kfrf4\naffinity-nodeport-transition-kfrf4\naffinity-nodeport-transition-kfrf4\naffinity-nodeport-transition-kfrf4\naffinity-nodeport-transition-kfrf4\naffinity-nodeport-transition-kfrf4\naffinity-nodeport-transition-kfrf4\naffinity-nodeport-transition-kfrf4\naffinity-nodeport-transition-kfrf4\naffinity-nodeport-transition-kfrf4\naffinity-nodeport-transition-kfrf4\naffinity-nodeport-transition-kfrf4\naffinity-nodeport-transition-kfrf4\naffinity-nodeport-transition-kfrf4"
  Aug 24 11:27:59.091: INFO: Received response from host: affinity-nodeport-transition-kfrf4
  Aug 24 11:27:59.091: INFO: Received response from host: affinity-nodeport-transition-kfrf4
  Aug 24 11:27:59.091: INFO: Received response from host: affinity-nodeport-transition-kfrf4
  Aug 24 11:27:59.091: INFO: Received response from host: affinity-nodeport-transition-kfrf4
  Aug 24 11:27:59.091: INFO: Received response from host: affinity-nodeport-transition-kfrf4
  Aug 24 11:27:59.091: INFO: Received response from host: affinity-nodeport-transition-kfrf4
  Aug 24 11:27:59.091: INFO: Received response from host: affinity-nodeport-transition-kfrf4
  Aug 24 11:27:59.091: INFO: Received response from host: affinity-nodeport-transition-kfrf4
  Aug 24 11:27:59.091: INFO: Received response from host: affinity-nodeport-transition-kfrf4
  Aug 24 11:27:59.091: INFO: Received response from host: affinity-nodeport-transition-kfrf4
  Aug 24 11:27:59.091: INFO: Received response from host: affinity-nodeport-transition-kfrf4
  Aug 24 11:27:59.091: INFO: Received response from host: affinity-nodeport-transition-kfrf4
  Aug 24 11:27:59.091: INFO: Received response from host: affinity-nodeport-transition-kfrf4
  Aug 24 11:27:59.091: INFO: Received response from host: affinity-nodeport-transition-kfrf4
  Aug 24 11:27:59.091: INFO: Received response from host: affinity-nodeport-transition-kfrf4
  Aug 24 11:27:59.091: INFO: Received response from host: affinity-nodeport-transition-kfrf4
  Aug 24 11:27:59.091: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  Aug 24 11:27:59.102: INFO: Cleaning up the exec pod
  STEP: deleting ReplicationController affinity-nodeport-transition in namespace services-8663, will wait for the garbage collector to delete the pods @ 08/24/23 11:27:59.132
  Aug 24 11:27:59.207: INFO: Deleting ReplicationController affinity-nodeport-transition took: 15.944327ms
  Aug 24 11:27:59.308: INFO: Terminating ReplicationController affinity-nodeport-transition pods took: 100.604518ms
  STEP: Destroying namespace "services-8663" for this suite. @ 08/24/23 11:28:02.658
• [12.153 seconds]
------------------------------
SSSSSSSSSSS
------------------------------
[sig-api-machinery] FieldValidation should create/apply a valid CR for CRD with validation schema [Conformance]
test/e2e/apimachinery/field_validation.go:168
  STEP: Creating a kubernetes client @ 08/24/23 11:28:02.674
  Aug 24 11:28:02.674: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename field-validation @ 08/24/23 11:28:02.675
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 11:28:02.708
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 11:28:02.715
  Aug 24 11:28:02.722: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  W0824 11:28:05.368130      22 warnings.go:70] unknown field "alpha"
  W0824 11:28:05.368152      22 warnings.go:70] unknown field "beta"
  W0824 11:28:05.368155      22 warnings.go:70] unknown field "delta"
  W0824 11:28:05.368159      22 warnings.go:70] unknown field "epsilon"
  W0824 11:28:05.368162      22 warnings.go:70] unknown field "gamma"
  Aug 24 11:28:05.939: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "field-validation-2787" for this suite. @ 08/24/23 11:28:05.98
• [3.319 seconds]
------------------------------
SSSSS
------------------------------
[sig-api-machinery] Namespaces [Serial] should apply changes to a namespace status [Conformance]
test/e2e/apimachinery/namespace.go:303
  STEP: Creating a kubernetes client @ 08/24/23 11:28:05.994
  Aug 24 11:28:05.994: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename namespaces @ 08/24/23 11:28:05.995
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 11:28:06.031
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 11:28:06.038
  STEP: Read namespace status @ 08/24/23 11:28:06.045
  Aug 24 11:28:06.053: INFO: Status: v1.NamespaceStatus{Phase:"Active", Conditions:[]v1.NamespaceCondition(nil)}
  STEP: Patch namespace status @ 08/24/23 11:28:06.053
  Aug 24 11:28:06.065: INFO: Status.Condition: v1.NamespaceCondition{Type:"StatusPatch", Status:"True", LastTransitionTime:time.Date(1, time.January, 1, 0, 0, 0, 0, time.UTC), Reason:"E2E", Message:"Patched by an e2e test"}
  STEP: Update namespace status @ 08/24/23 11:28:06.065
  Aug 24 11:28:06.084: INFO: Status.Condition: v1.NamespaceCondition{Type:"StatusUpdate", Status:"True", LastTransitionTime:time.Date(1, time.January, 1, 0, 0, 0, 0, time.UTC), Reason:"E2E", Message:"Updated by an e2e test"}
  Aug 24 11:28:06.084: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "namespaces-3360" for this suite. @ 08/24/23 11:28:06.093
• [0.115 seconds]
------------------------------
SSSSSSSSSSSS
------------------------------
[sig-apps] ReplicationController should adopt matching pods on creation [Conformance]
test/e2e/apps/rc.go:94
  STEP: Creating a kubernetes client @ 08/24/23 11:28:06.11
  Aug 24 11:28:06.110: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename replication-controller @ 08/24/23 11:28:06.111
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 11:28:06.141
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 11:28:06.15
  STEP: Given a Pod with a 'name' label pod-adoption is created @ 08/24/23 11:28:06.156
  STEP: When a replication controller with a matching selector is created @ 08/24/23 11:28:08.214
  STEP: Then the orphan pod is adopted @ 08/24/23 11:28:08.236
  Aug 24 11:28:09.254: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "replication-controller-6031" for this suite. @ 08/24/23 11:28:09.266
• [3.172 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-cli] Kubectl client Kubectl server-side dry-run should check if kubectl can dry-run update Pods [Conformance]
test/e2e/kubectl/kubectl.go:1027
  STEP: Creating a kubernetes client @ 08/24/23 11:28:09.284
  Aug 24 11:28:09.284: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename kubectl @ 08/24/23 11:28:09.285
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 11:28:09.311
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 11:28:09.316
  STEP: running the image registry.k8s.io/e2e-test-images/httpd:2.4.38-4 @ 08/24/23 11:28:09.35
  Aug 24 11:28:09.350: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1002171096 --namespace=kubectl-2085 run e2e-test-httpd-pod --image=registry.k8s.io/e2e-test-images/httpd:2.4.38-4 --pod-running-timeout=2m0s --labels=run=e2e-test-httpd-pod'
  Aug 24 11:28:09.492: INFO: stderr: ""
  Aug 24 11:28:09.492: INFO: stdout: "pod/e2e-test-httpd-pod created\n"
  STEP: replace the image in the pod with server-side dry-run @ 08/24/23 11:28:09.492
  Aug 24 11:28:09.492: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1002171096 --namespace=kubectl-2085 patch pod e2e-test-httpd-pod -p {"spec":{"containers":[{"name": "e2e-test-httpd-pod","image": "registry.k8s.io/e2e-test-images/busybox:1.29-4"}]}} --dry-run=server'
  Aug 24 11:28:09.624: INFO: stderr: ""
  Aug 24 11:28:09.624: INFO: stdout: "pod/e2e-test-httpd-pod patched\n"
  STEP: verifying the pod e2e-test-httpd-pod has the right image registry.k8s.io/e2e-test-images/httpd:2.4.38-4 @ 08/24/23 11:28:09.624
  Aug 24 11:28:09.640: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1002171096 --namespace=kubectl-2085 delete pods e2e-test-httpd-pod'
  Aug 24 11:28:11.685: INFO: stderr: ""
  Aug 24 11:28:11.685: INFO: stdout: "pod \"e2e-test-httpd-pod\" deleted\n"
  Aug 24 11:28:11.685: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "kubectl-2085" for this suite. @ 08/24/23 11:28:11.695
• [2.478 seconds]
------------------------------
S
------------------------------
[sig-node] Lease lease API should be available [Conformance]
test/e2e/common/node/lease.go:72
  STEP: Creating a kubernetes client @ 08/24/23 11:28:11.762
  Aug 24 11:28:11.762: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename lease-test @ 08/24/23 11:28:11.763
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 11:28:11.793
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 11:28:11.85
  Aug 24 11:28:12.036: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "lease-test-3796" for this suite. @ 08/24/23 11:28:12.045
• [0.299 seconds]
------------------------------
SSS
------------------------------
[sig-api-machinery] CustomResourcePublishOpenAPI [Privileged:ClusterAdmin] works for CRD without validation schema [Conformance]
test/e2e/apimachinery/crd_publish_openapi.go:153
  STEP: Creating a kubernetes client @ 08/24/23 11:28:12.061
  Aug 24 11:28:12.061: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename crd-publish-openapi @ 08/24/23 11:28:12.062
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 11:28:12.092
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 11:28:12.099
  Aug 24 11:28:12.107: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: kubectl validation (kubectl create and apply) allows request with any unknown properties @ 08/24/23 11:28:13.832
  Aug 24 11:28:13.832: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1002171096 --namespace=crd-publish-openapi-2324 --namespace=crd-publish-openapi-2324 create -f -'
  Aug 24 11:28:16.342: INFO: stderr: ""
  Aug 24 11:28:16.342: INFO: stdout: "e2e-test-crd-publish-openapi-8731-crd.crd-publish-openapi-test-empty.example.com/test-cr created\n"
  Aug 24 11:28:16.342: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1002171096 --namespace=crd-publish-openapi-2324 --namespace=crd-publish-openapi-2324 delete e2e-test-crd-publish-openapi-8731-crds test-cr'
  Aug 24 11:28:16.477: INFO: stderr: ""
  Aug 24 11:28:16.477: INFO: stdout: "e2e-test-crd-publish-openapi-8731-crd.crd-publish-openapi-test-empty.example.com \"test-cr\" deleted\n"
  Aug 24 11:28:16.477: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1002171096 --namespace=crd-publish-openapi-2324 --namespace=crd-publish-openapi-2324 apply -f -'
  Aug 24 11:28:16.735: INFO: stderr: ""
  Aug 24 11:28:16.735: INFO: stdout: "e2e-test-crd-publish-openapi-8731-crd.crd-publish-openapi-test-empty.example.com/test-cr created\n"
  Aug 24 11:28:16.735: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1002171096 --namespace=crd-publish-openapi-2324 --namespace=crd-publish-openapi-2324 delete e2e-test-crd-publish-openapi-8731-crds test-cr'
  Aug 24 11:28:16.828: INFO: stderr: ""
  Aug 24 11:28:16.828: INFO: stdout: "e2e-test-crd-publish-openapi-8731-crd.crd-publish-openapi-test-empty.example.com \"test-cr\" deleted\n"
  STEP: kubectl explain works to explain CR without validation schema @ 08/24/23 11:28:16.828
  Aug 24 11:28:16.829: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1002171096 --namespace=crd-publish-openapi-2324 explain e2e-test-crd-publish-openapi-8731-crds'
  Aug 24 11:28:17.078: INFO: stderr: ""
  Aug 24 11:28:17.078: INFO: stdout: "GROUP:      crd-publish-openapi-test-empty.example.com\nKIND:       e2e-test-crd-publish-openapi-8731-crd\nVERSION:    v1\n\nDESCRIPTION:\n    <empty>\nFIELDS:\n  apiVersion\t<string>\n    APIVersion defines the versioned schema of this representation of an object.\n    Servers should convert recognized schemas to the latest internal value, and\n    may reject unrecognized values. More info:\n    https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources\n\n  kind\t<string>\n    Kind is a string value representing the REST resource this object\n    represents. Servers may infer this from the endpoint the client submits\n    requests to. Cannot be updated. In CamelCase. More info:\n    https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\n\n  metadata\t<ObjectMeta>\n    Standard object's metadata. More info:\n    https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata\n\n\n"
  Aug 24 11:28:19.478: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "crd-publish-openapi-2324" for this suite. @ 08/24/23 11:28:19.502
• [7.459 seconds]
------------------------------
SS
------------------------------
[sig-apps] StatefulSet Basic StatefulSet functionality [StatefulSetBasic] should perform canary updates and phased rolling updates of template modifications [Conformance]
test/e2e/apps/statefulset.go:329
  STEP: Creating a kubernetes client @ 08/24/23 11:28:19.521
  Aug 24 11:28:19.521: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename statefulset @ 08/24/23 11:28:19.522
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 11:28:19.553
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 11:28:19.56
  STEP: Creating service test in namespace statefulset-1619 @ 08/24/23 11:28:19.567
  STEP: Creating a new StatefulSet @ 08/24/23 11:28:19.578
  Aug 24 11:28:19.603: INFO: Found 0 stateful pods, waiting for 3
  Aug 24 11:28:29.618: INFO: Waiting for pod ss2-0 to enter Running - Ready=true, currently Running - Ready=true
  Aug 24 11:28:29.618: INFO: Waiting for pod ss2-1 to enter Running - Ready=true, currently Running - Ready=true
  Aug 24 11:28:29.618: INFO: Waiting for pod ss2-2 to enter Running - Ready=true, currently Running - Ready=true
  STEP: Updating stateful set template: update image from registry.k8s.io/e2e-test-images/httpd:2.4.38-4 to registry.k8s.io/e2e-test-images/httpd:2.4.39-4 @ 08/24/23 11:28:29.65
  Aug 24 11:28:29.685: INFO: Updating stateful set ss2
  STEP: Creating a new revision @ 08/24/23 11:28:29.685
  STEP: Not applying an update when the partition is greater than the number of replicas @ 08/24/23 11:28:39.726
  STEP: Performing a canary update @ 08/24/23 11:28:39.726
  Aug 24 11:28:39.760: INFO: Updating stateful set ss2
  Aug 24 11:28:39.777: INFO: Waiting for Pod statefulset-1619/ss2-2 to have revision ss2-5459d8585b update revision ss2-7b6c9599d5
  STEP: Restoring Pods to the correct revision when they are deleted @ 08/24/23 11:28:49.799
  Aug 24 11:28:49.865: INFO: Found 1 stateful pods, waiting for 3
  Aug 24 11:28:59.880: INFO: Waiting for pod ss2-0 to enter Running - Ready=true, currently Running - Ready=true
  Aug 24 11:28:59.880: INFO: Waiting for pod ss2-1 to enter Running - Ready=true, currently Running - Ready=true
  Aug 24 11:28:59.880: INFO: Waiting for pod ss2-2 to enter Running - Ready=true, currently Running - Ready=true
  STEP: Performing a phased rolling update @ 08/24/23 11:28:59.899
  Aug 24 11:28:59.931: INFO: Updating stateful set ss2
  Aug 24 11:28:59.951: INFO: Waiting for Pod statefulset-1619/ss2-1 to have revision ss2-5459d8585b update revision ss2-7b6c9599d5
  Aug 24 11:29:10.007: INFO: Updating stateful set ss2
  Aug 24 11:29:10.025: INFO: Waiting for StatefulSet statefulset-1619/ss2 to complete update
  Aug 24 11:29:10.026: INFO: Waiting for Pod statefulset-1619/ss2-0 to have revision ss2-5459d8585b update revision ss2-7b6c9599d5
  Aug 24 11:29:20.048: INFO: Deleting all statefulset in ns statefulset-1619
  Aug 24 11:29:20.056: INFO: Scaling statefulset ss2 to 0
  Aug 24 11:29:30.096: INFO: Waiting for statefulset status.replicas updated to 0
  Aug 24 11:29:30.103: INFO: Deleting statefulset ss2
  Aug 24 11:29:30.136: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "statefulset-1619" for this suite. @ 08/24/23 11:29:30.145
• [70.639 seconds]
------------------------------
SSSSSSSSSSSS
------------------------------
[sig-node] Security Context When creating a pod with privileged should run the container as unprivileged when false [LinuxOnly] [NodeConformance] [Conformance]
test/e2e/common/node/security_context.go:528
  STEP: Creating a kubernetes client @ 08/24/23 11:29:30.161
  Aug 24 11:29:30.161: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename security-context-test @ 08/24/23 11:29:30.162
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 11:29:30.189
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 11:29:30.195
  Aug 24 11:29:34.298: INFO: Got logs for pod "busybox-privileged-false-8d2dbb51-b1c0-4583-99e2-5f039a7f149d": "ip: RTNETLINK answers: Operation not permitted\n"
  Aug 24 11:29:34.298: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "security-context-test-3621" for this suite. @ 08/24/23 11:29:34.313
• [4.169 seconds]
------------------------------
[sig-api-machinery] CustomResourceDefinition resources [Privileged:ClusterAdmin] should include custom resource definition resources in discovery documents [Conformance]
test/e2e/apimachinery/custom_resource_definition.go:198
  STEP: Creating a kubernetes client @ 08/24/23 11:29:34.33
  Aug 24 11:29:34.330: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename custom-resource-definition @ 08/24/23 11:29:34.331
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 11:29:34.363
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 11:29:34.37
  STEP: fetching the /apis discovery document @ 08/24/23 11:29:34.376
  STEP: finding the apiextensions.k8s.io API group in the /apis discovery document @ 08/24/23 11:29:34.379
  STEP: finding the apiextensions.k8s.io/v1 API group/version in the /apis discovery document @ 08/24/23 11:29:34.379
  STEP: fetching the /apis/apiextensions.k8s.io discovery document @ 08/24/23 11:29:34.379
  STEP: finding the apiextensions.k8s.io/v1 API group/version in the /apis/apiextensions.k8s.io discovery document @ 08/24/23 11:29:34.382
  STEP: fetching the /apis/apiextensions.k8s.io/v1 discovery document @ 08/24/23 11:29:34.382
  STEP: finding customresourcedefinitions resources in the /apis/apiextensions.k8s.io/v1 discovery document @ 08/24/23 11:29:34.385
  Aug 24 11:29:34.385: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "custom-resource-definition-6592" for this suite. @ 08/24/23 11:29:34.394
• [0.086 seconds]
------------------------------
SSSSSSSS
------------------------------
[sig-storage] ConfigMap optional updates should be reflected in volume [NodeConformance] [Conformance]
test/e2e/common/storage/configmap_volume.go:240
  STEP: Creating a kubernetes client @ 08/24/23 11:29:34.416
  Aug 24 11:29:34.416: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename configmap @ 08/24/23 11:29:34.417
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 11:29:34.45
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 11:29:34.456
  STEP: Creating configMap with name cm-test-opt-del-39e2fefd-b4eb-4586-954e-49d7feee760f @ 08/24/23 11:29:34.472
  STEP: Creating configMap with name cm-test-opt-upd-306dc807-b0a2-4e0d-9adb-ecdc9703487e @ 08/24/23 11:29:34.483
  STEP: Creating the pod @ 08/24/23 11:29:34.495
  STEP: Deleting configmap cm-test-opt-del-39e2fefd-b4eb-4586-954e-49d7feee760f @ 08/24/23 11:29:36.608
  STEP: Updating configmap cm-test-opt-upd-306dc807-b0a2-4e0d-9adb-ecdc9703487e @ 08/24/23 11:29:36.624
  STEP: Creating configMap with name cm-test-opt-create-6b9a0efb-7de1-4332-93a1-71924c663f8f @ 08/24/23 11:29:36.636
  STEP: waiting to observe update in volume @ 08/24/23 11:29:36.645
  Aug 24 11:30:55.603: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "configmap-5342" for this suite. @ 08/24/23 11:30:55.613
• [81.210 seconds]
------------------------------
SSS
------------------------------
[sig-api-machinery] ResourceQuota should create a ResourceQuota and ensure its status is promptly calculated. [Conformance]
test/e2e/apimachinery/resource_quota.go:76
  STEP: Creating a kubernetes client @ 08/24/23 11:30:55.627
  Aug 24 11:30:55.627: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename resourcequota @ 08/24/23 11:30:55.628
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 11:30:55.657
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 11:30:55.664
  STEP: Counting existing ResourceQuota @ 08/24/23 11:30:55.671
  STEP: Creating a ResourceQuota @ 08/24/23 11:31:00.686
  STEP: Ensuring resource quota status is calculated @ 08/24/23 11:31:00.701
  Aug 24 11:31:02.715: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "resourcequota-866" for this suite. @ 08/24/23 11:31:02.729
• [7.118 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-storage] Projected secret should be consumable from pods in volume as non-root with defaultMode and fsGroup set [LinuxOnly] [NodeConformance] [Conformance]
test/e2e/common/storage/projected_secret.go:67
  STEP: Creating a kubernetes client @ 08/24/23 11:31:02.747
  Aug 24 11:31:02.747: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename projected @ 08/24/23 11:31:02.748
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 11:31:02.777
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 11:31:02.784
  STEP: Creating projection with secret that has name projected-secret-test-83626f6d-aca3-43c6-abdb-3261797939c7 @ 08/24/23 11:31:02.79
  STEP: Creating a pod to test consume secrets @ 08/24/23 11:31:02.799
  STEP: Saw pod success @ 08/24/23 11:31:06.846
  Aug 24 11:31:06.855: INFO: Trying to get logs from node scw-conformance-default-2af6d8b4c6264cc5b9e5e6 pod pod-projected-secrets-ac2558f1-db96-4f1b-be27-89e2bea98d69 container projected-secret-volume-test: <nil>
  STEP: delete the pod @ 08/24/23 11:31:06.874
  Aug 24 11:31:06.908: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "projected-7719" for this suite. @ 08/24/23 11:31:06.918
• [4.209 seconds]
------------------------------
SSSSSSSSSSSSSSSSSS
------------------------------
[sig-node] Container Lifecycle Hook when create a pod with lifecycle hook should execute poststart exec hook properly [NodeConformance] [Conformance]
test/e2e/common/node/lifecycle_hook.go:135
  STEP: Creating a kubernetes client @ 08/24/23 11:31:06.956
  Aug 24 11:31:06.956: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename container-lifecycle-hook @ 08/24/23 11:31:06.958
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 11:31:06.987
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 11:31:06.993
  STEP: create the container to handle the HTTPGet hook request. @ 08/24/23 11:31:07.009
  STEP: create the pod with lifecycle hook @ 08/24/23 11:31:09.097
  STEP: check poststart hook @ 08/24/23 11:31:11.136
  STEP: delete the pod with lifecycle hook @ 08/24/23 11:31:11.186
  Aug 24 11:31:13.221: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "container-lifecycle-hook-2793" for this suite. @ 08/24/23 11:31:13.23
• [6.287 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-storage] Projected configMap should be consumable in multiple volumes in the same pod [NodeConformance] [Conformance]
test/e2e/common/storage/projected_configmap.go:375
  STEP: Creating a kubernetes client @ 08/24/23 11:31:13.248
  Aug 24 11:31:13.248: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename projected @ 08/24/23 11:31:13.25
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 11:31:13.278
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 11:31:13.285
  STEP: Creating configMap with name projected-configmap-test-volume-030e1b9c-5247-4663-843c-70292c3a5892 @ 08/24/23 11:31:13.291
  STEP: Creating a pod to test consume configMaps @ 08/24/23 11:31:13.299
  STEP: Saw pod success @ 08/24/23 11:31:17.392
  Aug 24 11:31:17.400: INFO: Trying to get logs from node scw-conformance-default-2af6d8b4c6264cc5b9e5e6 pod pod-projected-configmaps-54510f47-b859-4b16-90ad-9876572191d9 container projected-configmap-volume-test: <nil>
  STEP: delete the pod @ 08/24/23 11:31:17.418
  Aug 24 11:31:17.458: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "projected-113" for this suite. @ 08/24/23 11:31:17.469
• [4.236 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-storage] EmptyDir volumes pod should support shared volumes between containers [Conformance]
test/e2e/common/storage/empty_dir.go:227
  STEP: Creating a kubernetes client @ 08/24/23 11:31:17.485
  Aug 24 11:31:17.485: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename emptydir @ 08/24/23 11:31:17.486
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 11:31:17.52
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 11:31:17.526
  STEP: Creating Pod @ 08/24/23 11:31:17.533
  STEP: Reading file content from the nginx-container @ 08/24/23 11:31:19.576
  Aug 24 11:31:19.576: INFO: ExecWithOptions {Command:[/bin/sh -c cat /usr/share/volumeshare/shareddata.txt] Namespace:emptydir-555 PodName:pod-sharedvolume-afe57722-4b1a-4dda-85b2-d17f3da945a2 ContainerName:busybox-main-container Stdin:<nil> CaptureStdout:true CaptureStderr:true PreserveWhitespace:false Quiet:false}
  Aug 24 11:31:19.576: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  Aug 24 11:31:19.576: INFO: ExecWithOptions: Clientset creation
  Aug 24 11:31:19.576: INFO: ExecWithOptions: execute(POST https://10.96.0.1:443/api/v1/namespaces/emptydir-555/pods/pod-sharedvolume-afe57722-4b1a-4dda-85b2-d17f3da945a2/exec?command=%2Fbin%2Fsh&command=-c&command=cat+%2Fusr%2Fshare%2Fvolumeshare%2Fshareddata.txt&container=busybox-main-container&container=busybox-main-container&stderr=true&stdout=true)
  Aug 24 11:31:19.694: INFO: Exec stderr: ""
  Aug 24 11:31:19.694: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "emptydir-555" for this suite. @ 08/24/23 11:31:19.705
• [2.235 seconds]
------------------------------
SSSSSSSSS
------------------------------
[sig-node] Container Lifecycle Hook when create a pod with lifecycle hook should execute prestop exec hook properly [NodeConformance] [Conformance]
test/e2e/common/node/lifecycle_hook.go:152
  STEP: Creating a kubernetes client @ 08/24/23 11:31:19.721
  Aug 24 11:31:19.721: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename container-lifecycle-hook @ 08/24/23 11:31:19.722
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 11:31:19.752
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 11:31:19.759
  STEP: create the container to handle the HTTPGet hook request. @ 08/24/23 11:31:19.776
  STEP: create the pod with lifecycle hook @ 08/24/23 11:31:21.824
  STEP: delete the pod with lifecycle hook @ 08/24/23 11:31:23.87
  STEP: check prestop hook @ 08/24/23 11:31:27.914
  Aug 24 11:31:27.935: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "container-lifecycle-hook-1552" for this suite. @ 08/24/23 11:31:27.945
• [8.241 seconds]
------------------------------
SSSSSSSSSSSSSSS
------------------------------
[sig-node] Secrets should patch a secret [Conformance]
test/e2e/common/node/secrets.go:154
  STEP: Creating a kubernetes client @ 08/24/23 11:31:27.963
  Aug 24 11:31:27.963: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename secrets @ 08/24/23 11:31:27.964
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 11:31:27.997
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 11:31:28.003
  STEP: creating a secret @ 08/24/23 11:31:28.011
  STEP: listing secrets in all namespaces to ensure that there are more than zero @ 08/24/23 11:31:28.022
  STEP: patching the secret @ 08/24/23 11:31:28.032
  STEP: deleting the secret using a LabelSelector @ 08/24/23 11:31:28.053
  STEP: listing secrets in all namespaces, searching for label name and value in patch @ 08/24/23 11:31:28.072
  Aug 24 11:31:28.083: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "secrets-8919" for this suite. @ 08/24/23 11:31:28.093
• [0.148 seconds]
------------------------------
SSSSSSSSSSSSSSSSSS
------------------------------
[sig-storage] EmptyDir volumes should support (non-root,0777,default) [LinuxOnly] [NodeConformance] [Conformance]
test/e2e/common/storage/empty_dir.go:217
  STEP: Creating a kubernetes client @ 08/24/23 11:31:28.115
  Aug 24 11:31:28.115: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename emptydir @ 08/24/23 11:31:28.117
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 11:31:28.146
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 11:31:28.153
  STEP: Creating a pod to test emptydir 0777 on node default medium @ 08/24/23 11:31:28.161
  STEP: Saw pod success @ 08/24/23 11:31:32.209
  Aug 24 11:31:32.222: INFO: Trying to get logs from node scw-conformance-default-2af6d8b4c6264cc5b9e5e6 pod pod-85532c58-07bd-4116-b35b-b10d5be7ec29 container test-container: <nil>
  STEP: delete the pod @ 08/24/23 11:31:32.247
  Aug 24 11:31:32.290: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "emptydir-4035" for this suite. @ 08/24/23 11:31:32.299
• [4.199 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-scheduling] SchedulerPredicates [Serial] validates that NodeSelector is respected if not matching  [Conformance]
test/e2e/scheduling/predicates.go:444
  STEP: Creating a kubernetes client @ 08/24/23 11:31:32.315
  Aug 24 11:31:32.315: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename sched-pred @ 08/24/23 11:31:32.316
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 11:31:32.345
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 11:31:32.352
  Aug 24 11:31:32.358: INFO: Waiting up to 1m0s for all (but 0) nodes to be ready
  Aug 24 11:31:32.378: INFO: Waiting for terminating namespaces to be deleted...
  Aug 24 11:31:32.385: INFO: 
  Logging pods the apiserver thinks is on node scw-conformance-default-2af6d8b4c6264cc5b9e5e6 before test
  Aug 24 11:31:32.400: INFO: pod-handle-http-request from container-lifecycle-hook-1552 started at 2023-08-24 11:31:19 +0000 UTC (2 container statuses recorded)
  Aug 24 11:31:32.400: INFO: 	Container container-handle-http-request ready: true, restart count 0
  Aug 24 11:31:32.400: INFO: 	Container container-handle-https-request ready: true, restart count 0
  Aug 24 11:31:32.400: INFO: cilium-operator-9686c5f57-bbxb6 from kube-system started at 2023-08-24 11:03:43 +0000 UTC (1 container statuses recorded)
  Aug 24 11:31:32.400: INFO: 	Container cilium-operator ready: true, restart count 0
  Aug 24 11:31:32.400: INFO: cilium-qxsf5 from kube-system started at 2023-08-24 11:03:43 +0000 UTC (1 container statuses recorded)
  Aug 24 11:31:32.400: INFO: 	Container cilium-agent ready: true, restart count 0
  Aug 24 11:31:32.400: INFO: csi-node-tq6l2 from kube-system started at 2023-08-24 11:03:43 +0000 UTC (2 container statuses recorded)
  Aug 24 11:31:32.400: INFO: 	Container csi-node-driver-registrar ready: true, restart count 0
  Aug 24 11:31:32.400: INFO: 	Container csi-plugin ready: true, restart count 0
  Aug 24 11:31:32.400: INFO: konnectivity-agent-9q7n8 from kube-system started at 2023-08-24 11:03:43 +0000 UTC (1 container statuses recorded)
  Aug 24 11:31:32.400: INFO: 	Container konnectivity-agent ready: true, restart count 0
  Aug 24 11:31:32.400: INFO: kube-proxy-qdvkw from kube-system started at 2023-08-24 11:03:43 +0000 UTC (1 container statuses recorded)
  Aug 24 11:31:32.401: INFO: 	Container kube-proxy ready: true, restart count 0
  Aug 24 11:31:32.401: INFO: sonobuoy from sonobuoy started at 2023-08-24 11:26:49 +0000 UTC (1 container statuses recorded)
  Aug 24 11:31:32.401: INFO: 	Container kube-sonobuoy ready: true, restart count 0
  Aug 24 11:31:32.401: INFO: sonobuoy-systemd-logs-daemon-set-02ba39604ea741df-p7qf6 from sonobuoy started at 2023-08-24 11:26:53 +0000 UTC (2 container statuses recorded)
  Aug 24 11:31:32.401: INFO: 	Container sonobuoy-worker ready: true, restart count 0
  Aug 24 11:31:32.401: INFO: 	Container systemd-logs ready: true, restart count 0
  Aug 24 11:31:32.401: INFO: 
  Logging pods the apiserver thinks is on node scw-conformance-default-ecf11ec729064adba7e270 before test
  Aug 24 11:31:32.417: INFO: cilium-x494p from kube-system started at 2023-08-24 11:03:51 +0000 UTC (1 container statuses recorded)
  Aug 24 11:31:32.417: INFO: 	Container cilium-agent ready: true, restart count 0
  Aug 24 11:31:32.417: INFO: coredns-76f9d8b48f-l47wj from kube-system started at 2023-08-24 11:04:12 +0000 UTC (1 container statuses recorded)
  Aug 24 11:31:32.417: INFO: 	Container coredns ready: true, restart count 0
  Aug 24 11:31:32.417: INFO: csi-node-mj9jp from kube-system started at 2023-08-24 11:03:51 +0000 UTC (2 container statuses recorded)
  Aug 24 11:31:32.417: INFO: 	Container csi-node-driver-registrar ready: true, restart count 0
  Aug 24 11:31:32.417: INFO: 	Container csi-plugin ready: true, restart count 0
  Aug 24 11:31:32.417: INFO: konnectivity-agent-hbwxf from kube-system started at 2023-08-24 11:03:51 +0000 UTC (1 container statuses recorded)
  Aug 24 11:31:32.417: INFO: 	Container konnectivity-agent ready: true, restart count 0
  Aug 24 11:31:32.417: INFO: kube-proxy-k7xlb from kube-system started at 2023-08-24 11:03:51 +0000 UTC (1 container statuses recorded)
  Aug 24 11:31:32.417: INFO: 	Container kube-proxy ready: true, restart count 0
  Aug 24 11:31:32.417: INFO: metrics-server-66786fb-88mmf from kube-system started at 2023-08-24 11:04:12 +0000 UTC (1 container statuses recorded)
  Aug 24 11:31:32.417: INFO: 	Container metrics-server ready: true, restart count 0
  Aug 24 11:31:32.417: INFO: sonobuoy-e2e-job-e6e5c8fdb4f14afe from sonobuoy started at 2023-08-24 11:26:53 +0000 UTC (2 container statuses recorded)
  Aug 24 11:31:32.417: INFO: 	Container e2e ready: true, restart count 0
  Aug 24 11:31:32.417: INFO: 	Container sonobuoy-worker ready: true, restart count 0
  Aug 24 11:31:32.417: INFO: sonobuoy-systemd-logs-daemon-set-02ba39604ea741df-kpkc8 from sonobuoy started at 2023-08-24 11:26:53 +0000 UTC (2 container statuses recorded)
  Aug 24 11:31:32.417: INFO: 	Container sonobuoy-worker ready: true, restart count 0
  Aug 24 11:31:32.417: INFO: 	Container systemd-logs ready: true, restart count 0
  STEP: Trying to schedule Pod with nonempty NodeSelector. @ 08/24/23 11:31:32.418
  STEP: Considering event: 
  Type = [Warning], Name = [restricted-pod.177e4e61eef451ae], Reason = [FailedScheduling], Message = [0/2 nodes are available: 2 node(s) didn't match Pod's node affinity/selector. preemption: 0/2 nodes are available: 2 Preemption is not helpful for scheduling..] @ 08/24/23 11:31:32.478
  Aug 24 11:31:33.471: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "sched-pred-1364" for this suite. @ 08/24/23 11:31:33.48
• [1.178 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-storage] Downward API volume should provide podname only [NodeConformance] [Conformance]
test/e2e/common/storage/downwardapi_volume.go:54
  STEP: Creating a kubernetes client @ 08/24/23 11:31:33.494
  Aug 24 11:31:33.494: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename downward-api @ 08/24/23 11:31:33.494
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 11:31:33.559
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 11:31:33.564
  STEP: Creating a pod to test downward API volume plugin @ 08/24/23 11:31:33.571
  STEP: Saw pod success @ 08/24/23 11:31:37.616
  Aug 24 11:31:37.623: INFO: Trying to get logs from node scw-conformance-default-2af6d8b4c6264cc5b9e5e6 pod downwardapi-volume-4a7a841a-1c86-4d41-aa76-19f74cbfbdfa container client-container: <nil>
  STEP: delete the pod @ 08/24/23 11:31:37.642
  Aug 24 11:31:37.674: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "downward-api-471" for this suite. @ 08/24/23 11:31:37.685
• [4.205 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-node] Secrets should fail to create secret due to empty secret key [Conformance]
test/e2e/common/node/secrets.go:140
  STEP: Creating a kubernetes client @ 08/24/23 11:31:37.703
  Aug 24 11:31:37.703: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename secrets @ 08/24/23 11:31:37.704
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 11:31:37.759
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 11:31:37.766
  STEP: Creating projection with secret that has name secret-emptykey-test-6305a3c1-044e-4fd1-8d67-725c42d0ed4d @ 08/24/23 11:31:37.773
  Aug 24 11:31:37.777: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "secrets-11" for this suite. @ 08/24/23 11:31:37.787
• [0.097 seconds]
------------------------------
SSSSSSSSSSSSSS
------------------------------
[sig-node] Downward API should provide pod name, namespace and IP address as env vars [NodeConformance] [Conformance]
test/e2e/common/node/downwardapi.go:45
  STEP: Creating a kubernetes client @ 08/24/23 11:31:37.801
  Aug 24 11:31:37.801: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename downward-api @ 08/24/23 11:31:37.802
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 11:31:37.869
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 11:31:37.876
  STEP: Creating a pod to test downward api env vars @ 08/24/23 11:31:37.882
  STEP: Saw pod success @ 08/24/23 11:31:41.97
  Aug 24 11:31:41.980: INFO: Trying to get logs from node scw-conformance-default-2af6d8b4c6264cc5b9e5e6 pod downward-api-493025c7-eaa9-4fea-8d30-b10ba0f7091e container dapi-container: <nil>
  STEP: delete the pod @ 08/24/23 11:31:41.999
  Aug 24 11:31:42.031: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "downward-api-9341" for this suite. @ 08/24/23 11:31:42.041
• [4.255 seconds]
------------------------------
SSSSSSSSSSS
------------------------------
[sig-api-machinery] CustomResourcePublishOpenAPI [Privileged:ClusterAdmin] updates the published spec when one version gets renamed [Conformance]
test/e2e/apimachinery/crd_publish_openapi.go:391
  STEP: Creating a kubernetes client @ 08/24/23 11:31:42.056
  Aug 24 11:31:42.056: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename crd-publish-openapi @ 08/24/23 11:31:42.057
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 11:31:42.087
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 11:31:42.093
  STEP: set up a multi version CRD @ 08/24/23 11:31:42.099
  Aug 24 11:31:42.100: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: rename a version @ 08/24/23 11:31:48.308
  STEP: check the new version name is served @ 08/24/23 11:31:48.342
  STEP: check the old version name is removed @ 08/24/23 11:31:49.618
  STEP: check the other version is not changed @ 08/24/23 11:31:50.559
  Aug 24 11:31:54.924: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "crd-publish-openapi-5185" for this suite. @ 08/24/23 11:31:54.946
• [12.904 seconds]
------------------------------
SSSSSSSSSSSSSSS
------------------------------
[sig-network] Services should serve a basic endpoint from pods  [Conformance]
test/e2e/network/service.go:785
  STEP: Creating a kubernetes client @ 08/24/23 11:31:54.961
  Aug 24 11:31:54.961: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename services @ 08/24/23 11:31:54.962
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 11:31:54.993
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 11:31:55
  STEP: creating service endpoint-test2 in namespace services-2113 @ 08/24/23 11:31:55.006
  STEP: waiting up to 3m0s for service endpoint-test2 in namespace services-2113 to expose endpoints map[] @ 08/24/23 11:31:55.027
  Aug 24 11:31:55.035: INFO: Failed go get Endpoints object: endpoints "endpoint-test2" not found
  Aug 24 11:31:56.056: INFO: successfully validated that service endpoint-test2 in namespace services-2113 exposes endpoints map[]
  STEP: Creating pod pod1 in namespace services-2113 @ 08/24/23 11:31:56.057
  STEP: waiting up to 3m0s for service endpoint-test2 in namespace services-2113 to expose endpoints map[pod1:[80]] @ 08/24/23 11:31:58.104
  Aug 24 11:31:58.133: INFO: successfully validated that service endpoint-test2 in namespace services-2113 exposes endpoints map[pod1:[80]]
  STEP: Checking if the Service forwards traffic to pod1 @ 08/24/23 11:31:58.133
  Aug 24 11:31:58.133: INFO: Creating new exec pod
  Aug 24 11:32:01.163: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1002171096 --namespace=services-2113 exec execpodgb4dn -- /bin/sh -x -c echo hostName | nc -v -t -w 2 endpoint-test2 80'
  Aug 24 11:32:01.409: INFO: stderr: "+ echo hostName\n+ nc -v -t -w 2 endpoint-test2 80\nConnection to endpoint-test2 80 port [tcp/http] succeeded!\n"
  Aug 24 11:32:01.409: INFO: stdout: "HTTP/1.1 400 Bad Request\r\nContent-Type: text/plain; charset=utf-8\r\nConnection: close\r\n\r\n400 Bad Request"
  Aug 24 11:32:01.409: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1002171096 --namespace=services-2113 exec execpodgb4dn -- /bin/sh -x -c echo hostName | nc -v -t -w 2 10.96.6.27 80'
  Aug 24 11:32:01.628: INFO: stderr: "+ echo hostName\n+ nc -v -t -w 2 10.96.6.27 80\nConnection to 10.96.6.27 80 port [tcp/http] succeeded!\n"
  Aug 24 11:32:01.628: INFO: stdout: "HTTP/1.1 400 Bad Request\r\nContent-Type: text/plain; charset=utf-8\r\nConnection: close\r\n\r\n400 Bad Request"
  STEP: Creating pod pod2 in namespace services-2113 @ 08/24/23 11:32:01.628
  STEP: waiting up to 3m0s for service endpoint-test2 in namespace services-2113 to expose endpoints map[pod1:[80] pod2:[80]] @ 08/24/23 11:32:03.667
  Aug 24 11:32:03.702: INFO: successfully validated that service endpoint-test2 in namespace services-2113 exposes endpoints map[pod1:[80] pod2:[80]]
  STEP: Checking if the Service forwards traffic to pod1 and pod2 @ 08/24/23 11:32:03.702
  Aug 24 11:32:04.702: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1002171096 --namespace=services-2113 exec execpodgb4dn -- /bin/sh -x -c echo hostName | nc -v -t -w 2 endpoint-test2 80'
  Aug 24 11:32:04.937: INFO: stderr: "+ + nc -vecho -t hostName -w\n 2 endpoint-test2 80\nConnection to endpoint-test2 80 port [tcp/http] succeeded!\n"
  Aug 24 11:32:04.937: INFO: stdout: "HTTP/1.1 400 Bad Request\r\nContent-Type: text/plain; charset=utf-8\r\nConnection: close\r\n\r\n400 Bad Request"
  Aug 24 11:32:04.937: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1002171096 --namespace=services-2113 exec execpodgb4dn -- /bin/sh -x -c echo hostName | nc -v -t -w 2 10.96.6.27 80'
  Aug 24 11:32:05.158: INFO: stderr: "+ echo hostName\n+ nc -v -t -w 2 10.96.6.27 80\nConnection to 10.96.6.27 80 port [tcp/http] succeeded!\n"
  Aug 24 11:32:05.158: INFO: stdout: "HTTP/1.1 400 Bad Request\r\nContent-Type: text/plain; charset=utf-8\r\nConnection: close\r\n\r\n400 Bad Request"
  STEP: Deleting pod pod1 in namespace services-2113 @ 08/24/23 11:32:05.158
  STEP: waiting up to 3m0s for service endpoint-test2 in namespace services-2113 to expose endpoints map[pod2:[80]] @ 08/24/23 11:32:05.206
  Aug 24 11:32:05.249: INFO: successfully validated that service endpoint-test2 in namespace services-2113 exposes endpoints map[pod2:[80]]
  STEP: Checking if the Service forwards traffic to pod2 @ 08/24/23 11:32:05.249
  Aug 24 11:32:06.250: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1002171096 --namespace=services-2113 exec execpodgb4dn -- /bin/sh -x -c echo hostName | nc -v -t -w 2 endpoint-test2 80'
  Aug 24 11:32:06.496: INFO: stderr: "+ echo hostName\n+ nc -v -t -w 2 endpoint-test2 80\nConnection to endpoint-test2 80 port [tcp/http] succeeded!\n"
  Aug 24 11:32:06.496: INFO: stdout: "HTTP/1.1 400 Bad Request\r\nContent-Type: text/plain; charset=utf-8\r\nConnection: close\r\n\r\n400 Bad Request"
  Aug 24 11:32:06.497: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1002171096 --namespace=services-2113 exec execpodgb4dn -- /bin/sh -x -c echo hostName | nc -v -t -w 2 10.96.6.27 80'
  Aug 24 11:32:06.735: INFO: stderr: "+ echo hostName\n+ nc -v -t -w 2 10.96.6.27 80\nConnection to 10.96.6.27 80 port [tcp/http] succeeded!\n"
  Aug 24 11:32:06.735: INFO: stdout: "HTTP/1.1 400 Bad Request\r\nContent-Type: text/plain; charset=utf-8\r\nConnection: close\r\n\r\n400 Bad Request"
  STEP: Deleting pod pod2 in namespace services-2113 @ 08/24/23 11:32:06.735
  STEP: waiting up to 3m0s for service endpoint-test2 in namespace services-2113 to expose endpoints map[] @ 08/24/23 11:32:06.761
  Aug 24 11:32:06.789: INFO: successfully validated that service endpoint-test2 in namespace services-2113 exposes endpoints map[]
  Aug 24 11:32:06.789: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "services-2113" for this suite. @ 08/24/23 11:32:06.891
• [11.946 seconds]
------------------------------
[sig-node] Pods should patch a pod status [Conformance]
test/e2e/common/node/pods.go:1084
  STEP: Creating a kubernetes client @ 08/24/23 11:32:06.907
  Aug 24 11:32:06.907: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename pods @ 08/24/23 11:32:06.908
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 11:32:06.959
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 11:32:06.966
  STEP: Create a pod @ 08/24/23 11:32:06.974
  STEP: patching /status @ 08/24/23 11:32:09.015
  Aug 24 11:32:09.031: INFO: Status Message: "Patched by e2e test" and Reason: "E2E"
  Aug 24 11:32:09.032: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "pods-2694" for this suite. @ 08/24/23 11:32:09.045
• [2.154 seconds]
------------------------------
SSS
------------------------------
[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should mutate custom resource with pruning [Conformance]
test/e2e/apimachinery/webhook.go:332
  STEP: Creating a kubernetes client @ 08/24/23 11:32:09.062
  Aug 24 11:32:09.062: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename webhook @ 08/24/23 11:32:09.063
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 11:32:09.1
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 11:32:09.106
  STEP: Setting up server cert @ 08/24/23 11:32:09.157
  STEP: Create role binding to let webhook read extension-apiserver-authentication @ 08/24/23 11:32:09.346
  STEP: Deploying the webhook pod @ 08/24/23 11:32:09.364
  STEP: Wait for the deployment to be ready @ 08/24/23 11:32:09.386
  Aug 24 11:32:09.405: INFO: deployment "sample-webhook-deployment" doesn't have the required revision set
  STEP: Deploying the webhook service @ 08/24/23 11:32:11.431
  STEP: Verifying the service has paired with the endpoint @ 08/24/23 11:32:11.455
  Aug 24 11:32:12.456: INFO: Waiting for amount of service:e2e-test-webhook endpoints to be 1
  Aug 24 11:32:12.473: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Registering the mutating webhook for custom resource e2e-test-webhook-8552-crds.webhook.example.com via the AdmissionRegistration API @ 08/24/23 11:32:12.999
  STEP: Creating a custom resource that should be mutated by the webhook @ 08/24/23 11:32:13.05
  Aug 24 11:32:15.222: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "webhook-7747" for this suite. @ 08/24/23 11:32:15.98
  STEP: Destroying namespace "webhook-markers-693" for this suite. @ 08/24/23 11:32:15.996
• [6.948 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-node] Variable Expansion should verify that a failing subpath expansion can be modified during the lifecycle of a container [Slow] [Conformance]
test/e2e/common/node/expansion.go:228
  STEP: Creating a kubernetes client @ 08/24/23 11:32:16.011
  Aug 24 11:32:16.011: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename var-expansion @ 08/24/23 11:32:16.012
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 11:32:16.058
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 11:32:16.065
  STEP: creating the pod with failed condition @ 08/24/23 11:32:16.072
  STEP: updating the pod @ 08/24/23 11:34:16.1
  Aug 24 11:34:16.627: INFO: Successfully updated pod "var-expansion-908ec549-1df7-4233-8c4d-cc364a1dc17c"
  STEP: waiting for pod running @ 08/24/23 11:34:16.627
  STEP: deleting the pod gracefully @ 08/24/23 11:34:18.647
  Aug 24 11:34:18.647: INFO: Deleting pod "var-expansion-908ec549-1df7-4233-8c4d-cc364a1dc17c" in namespace "var-expansion-9843"
  Aug 24 11:34:18.664: INFO: Wait up to 5m0s for pod "var-expansion-908ec549-1df7-4233-8c4d-cc364a1dc17c" to be fully deleted
  Aug 24 11:34:50.905: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "var-expansion-9843" for this suite. @ 08/24/23 11:34:50.915
• [154.919 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-cli] Kubectl logs logs should be able to retrieve and filter logs  [Conformance]
test/e2e/kubectl/logs.go:114
  STEP: Creating a kubernetes client @ 08/24/23 11:34:50.932
  Aug 24 11:34:50.932: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename kubectl-logs @ 08/24/23 11:34:50.933
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 11:34:50.963
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 11:34:50.969
  STEP: creating an pod @ 08/24/23 11:34:50.976
  Aug 24 11:34:50.976: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1002171096 --namespace=kubectl-logs-8299 run logs-generator --image=registry.k8s.io/e2e-test-images/agnhost:2.45 --restart=Never --pod-running-timeout=2m0s -- logs-generator --log-lines-total 100 --run-duration 20s'
  Aug 24 11:34:51.092: INFO: stderr: ""
  Aug 24 11:34:51.092: INFO: stdout: "pod/logs-generator created\n"
  STEP: Waiting for log generator to start. @ 08/24/23 11:34:51.092
  Aug 24 11:34:51.092: INFO: Waiting up to 5m0s for 1 pods to be running and ready, or succeeded: [logs-generator]
  Aug 24 11:34:53.113: INFO: Wanted all 1 pods to be running and ready, or succeeded. Result: true. Pods: [logs-generator]
  STEP: checking for a matching strings @ 08/24/23 11:34:53.114
  Aug 24 11:34:53.114: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1002171096 --namespace=kubectl-logs-8299 logs logs-generator logs-generator'
  Aug 24 11:34:53.293: INFO: stderr: ""
  Aug 24 11:34:53.293: INFO: stdout: "I0824 11:34:51.982831       1 logs_generator.go:76] 0 GET /api/v1/namespaces/ns/pods/p76 232\nI0824 11:34:52.183018       1 logs_generator.go:76] 1 POST /api/v1/namespaces/kube-system/pods/tkpg 522\nI0824 11:34:52.383708       1 logs_generator.go:76] 2 POST /api/v1/namespaces/ns/pods/kfn9 488\nI0824 11:34:52.583031       1 logs_generator.go:76] 3 POST /api/v1/namespaces/ns/pods/htq 547\nI0824 11:34:52.783456       1 logs_generator.go:76] 4 GET /api/v1/namespaces/default/pods/x7c6 563\nI0824 11:34:52.983902       1 logs_generator.go:76] 5 PUT /api/v1/namespaces/ns/pods/mmq2 330\nI0824 11:34:53.183294       1 logs_generator.go:76] 6 PUT /api/v1/namespaces/default/pods/gzl6 582\n"
  STEP: limiting log lines @ 08/24/23 11:34:53.293
  Aug 24 11:34:53.293: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1002171096 --namespace=kubectl-logs-8299 logs logs-generator logs-generator --tail=1'
  Aug 24 11:34:53.430: INFO: stderr: ""
  Aug 24 11:34:53.430: INFO: stdout: "I0824 11:34:53.383573       1 logs_generator.go:76] 7 PUT /api/v1/namespaces/default/pods/tnm 242\n"
  Aug 24 11:34:53.430: INFO: got output "I0824 11:34:53.383573       1 logs_generator.go:76] 7 PUT /api/v1/namespaces/default/pods/tnm 242\n"
  STEP: limiting log bytes @ 08/24/23 11:34:53.43
  Aug 24 11:34:53.430: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1002171096 --namespace=kubectl-logs-8299 logs logs-generator logs-generator --limit-bytes=1'
  Aug 24 11:34:53.573: INFO: stderr: ""
  Aug 24 11:34:53.573: INFO: stdout: "I"
  Aug 24 11:34:53.573: INFO: got output "I"
  STEP: exposing timestamps @ 08/24/23 11:34:53.574
  Aug 24 11:34:53.574: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1002171096 --namespace=kubectl-logs-8299 logs logs-generator logs-generator --tail=1 --timestamps'
  Aug 24 11:34:53.714: INFO: stderr: ""
  Aug 24 11:34:53.714: INFO: stdout: "2023-08-24T11:34:53.583102641Z I0824 11:34:53.582915       1 logs_generator.go:76] 8 POST /api/v1/namespaces/default/pods/7cx 327\n"
  Aug 24 11:34:53.714: INFO: got output "2023-08-24T11:34:53.583102641Z I0824 11:34:53.582915       1 logs_generator.go:76] 8 POST /api/v1/namespaces/default/pods/7cx 327\n"
  STEP: restricting to a time range @ 08/24/23 11:34:53.715
  Aug 24 11:34:56.216: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1002171096 --namespace=kubectl-logs-8299 logs logs-generator logs-generator --since=1s'
  Aug 24 11:34:56.343: INFO: stderr: ""
  Aug 24 11:34:56.343: INFO: stdout: "I0824 11:34:55.383518       1 logs_generator.go:76] 17 GET /api/v1/namespaces/ns/pods/rjng 283\nI0824 11:34:55.583930       1 logs_generator.go:76] 18 POST /api/v1/namespaces/default/pods/wp4b 227\nI0824 11:34:55.783428       1 logs_generator.go:76] 19 GET /api/v1/namespaces/kube-system/pods/w9j 295\nI0824 11:34:55.983821       1 logs_generator.go:76] 20 POST /api/v1/namespaces/default/pods/nvb 536\nI0824 11:34:56.183239       1 logs_generator.go:76] 21 GET /api/v1/namespaces/kube-system/pods/jgp 523\n"
  Aug 24 11:34:56.343: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1002171096 --namespace=kubectl-logs-8299 logs logs-generator logs-generator --since=24h'
  Aug 24 11:34:56.467: INFO: stderr: ""
  Aug 24 11:34:56.467: INFO: stdout: "I0824 11:34:51.982831       1 logs_generator.go:76] 0 GET /api/v1/namespaces/ns/pods/p76 232\nI0824 11:34:52.183018       1 logs_generator.go:76] 1 POST /api/v1/namespaces/kube-system/pods/tkpg 522\nI0824 11:34:52.383708       1 logs_generator.go:76] 2 POST /api/v1/namespaces/ns/pods/kfn9 488\nI0824 11:34:52.583031       1 logs_generator.go:76] 3 POST /api/v1/namespaces/ns/pods/htq 547\nI0824 11:34:52.783456       1 logs_generator.go:76] 4 GET /api/v1/namespaces/default/pods/x7c6 563\nI0824 11:34:52.983902       1 logs_generator.go:76] 5 PUT /api/v1/namespaces/ns/pods/mmq2 330\nI0824 11:34:53.183294       1 logs_generator.go:76] 6 PUT /api/v1/namespaces/default/pods/gzl6 582\nI0824 11:34:53.383573       1 logs_generator.go:76] 7 PUT /api/v1/namespaces/default/pods/tnm 242\nI0824 11:34:53.582915       1 logs_generator.go:76] 8 POST /api/v1/namespaces/default/pods/7cx 327\nI0824 11:34:53.783332       1 logs_generator.go:76] 9 PUT /api/v1/namespaces/default/pods/l6ft 598\nI0824 11:34:53.983783       1 logs_generator.go:76] 10 GET /api/v1/namespaces/kube-system/pods/mnrv 483\nI0824 11:34:54.183118       1 logs_generator.go:76] 11 GET /api/v1/namespaces/ns/pods/xjv2 423\nI0824 11:34:54.383530       1 logs_generator.go:76] 12 POST /api/v1/namespaces/ns/pods/l76g 352\nI0824 11:34:54.583955       1 logs_generator.go:76] 13 POST /api/v1/namespaces/default/pods/bwbn 402\nI0824 11:34:54.783338       1 logs_generator.go:76] 14 PUT /api/v1/namespaces/default/pods/dxfm 588\nI0824 11:34:54.983723       1 logs_generator.go:76] 15 PUT /api/v1/namespaces/kube-system/pods/n2h6 381\nI0824 11:34:55.183065       1 logs_generator.go:76] 16 POST /api/v1/namespaces/default/pods/dqvf 239\nI0824 11:34:55.383518       1 logs_generator.go:76] 17 GET /api/v1/namespaces/ns/pods/rjng 283\nI0824 11:34:55.583930       1 logs_generator.go:76] 18 POST /api/v1/namespaces/default/pods/wp4b 227\nI0824 11:34:55.783428       1 logs_generator.go:76] 19 GET /api/v1/namespaces/kube-system/pods/w9j 295\nI0824 11:34:55.983821       1 logs_generator.go:76] 20 POST /api/v1/namespaces/default/pods/nvb 536\nI0824 11:34:56.183239       1 logs_generator.go:76] 21 GET /api/v1/namespaces/kube-system/pods/jgp 523\nI0824 11:34:56.383631       1 logs_generator.go:76] 22 PUT /api/v1/namespaces/ns/pods/c7lw 563\n"
  Aug 24 11:34:56.468: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1002171096 --namespace=kubectl-logs-8299 delete pod logs-generator'
  Aug 24 11:34:57.733: INFO: stderr: ""
  Aug 24 11:34:57.733: INFO: stdout: "pod \"logs-generator\" deleted\n"
  Aug 24 11:34:57.733: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "kubectl-logs-8299" for this suite. @ 08/24/23 11:34:57.742
• [6.824 seconds]
------------------------------
SSSS
------------------------------
[sig-api-machinery] Garbage collector should delete RS created by deployment when not orphaning [Conformance]
test/e2e/apimachinery/garbage_collector.go:479
  STEP: Creating a kubernetes client @ 08/24/23 11:34:57.756
  Aug 24 11:34:57.756: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename gc @ 08/24/23 11:34:57.758
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 11:34:57.783
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 11:34:57.789
  STEP: create the deployment @ 08/24/23 11:34:57.795
  W0824 11:34:57.806284      22 warnings.go:70] metadata.name: this is used in Pod names and hostnames, which can result in surprising behavior; a DNS label is recommended: [must not contain dots]
  STEP: Wait for the Deployment to create new ReplicaSet @ 08/24/23 11:34:57.806
  STEP: delete the deployment @ 08/24/23 11:34:58.322
  STEP: wait for all rs to be garbage collected @ 08/24/23 11:34:58.337
  STEP: expected 0 rs, got 1 rs @ 08/24/23 11:34:58.357
  STEP: expected 0 pods, got 2 pods @ 08/24/23 11:34:58.367
  STEP: Gathering metrics @ 08/24/23 11:34:58.892
  W0824 11:34:58.907908      22 metrics_grabber.go:152] Can't find kube-controller-manager pod. Grabbing metrics from kube-controller-manager is disabled.
  Aug 24 11:34:58.907: INFO: For apiserver_request_total:
  For apiserver_request_latency_seconds:
  For apiserver_init_events_total:
  For garbage_collector_attempt_to_delete_queue_latency:
  For garbage_collector_attempt_to_delete_work_duration:
  For garbage_collector_attempt_to_orphan_queue_latency:
  For garbage_collector_attempt_to_orphan_work_duration:
  For garbage_collector_dirty_processing_latency_microseconds:
  For garbage_collector_event_processing_latency_microseconds:
  For garbage_collector_graph_changes_queue_latency:
  For garbage_collector_graph_changes_work_duration:
  For garbage_collector_orphan_processing_latency_microseconds:
  For namespace_queue_latency:
  For namespace_queue_latency_sum:
  For namespace_queue_latency_count:
  For namespace_retries:
  For namespace_work_duration:
  For namespace_work_duration_sum:
  For namespace_work_duration_count:
  For function_duration_seconds:
  For errors_total:
  For evicted_pods_total:

  Aug 24 11:34:58.908: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "gc-8229" for this suite. @ 08/24/23 11:34:58.916
• [1.174 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-storage] EmptyDir volumes should support (non-root,0666,default) [LinuxOnly] [NodeConformance] [Conformance]
test/e2e/common/storage/empty_dir.go:207
  STEP: Creating a kubernetes client @ 08/24/23 11:34:58.932
  Aug 24 11:34:58.932: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename emptydir @ 08/24/23 11:34:58.933
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 11:34:58.963
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 11:34:58.971
  STEP: Creating a pod to test emptydir 0666 on node default medium @ 08/24/23 11:34:58.978
  STEP: Saw pod success @ 08/24/23 11:35:03.033
  Aug 24 11:35:03.038: INFO: Trying to get logs from node scw-conformance-default-2af6d8b4c6264cc5b9e5e6 pod pod-e8b7a1b1-84ad-47f2-9d9a-9f09b6b7518b container test-container: <nil>
  STEP: delete the pod @ 08/24/23 11:35:03.06
  Aug 24 11:35:03.090: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "emptydir-4326" for this suite. @ 08/24/23 11:35:03.1
• [4.226 seconds]
------------------------------
SSSS
------------------------------
[sig-auth] ServiceAccounts should run through the lifecycle of a ServiceAccount [Conformance]
test/e2e/auth/service_accounts.go:647
  STEP: Creating a kubernetes client @ 08/24/23 11:35:03.158
  Aug 24 11:35:03.158: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename svcaccounts @ 08/24/23 11:35:03.158
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 11:35:03.19
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 11:35:03.196
  STEP: creating a ServiceAccount @ 08/24/23 11:35:03.201
  STEP: watching for the ServiceAccount to be added @ 08/24/23 11:35:03.262
  STEP: patching the ServiceAccount @ 08/24/23 11:35:03.271
  STEP: finding ServiceAccount in list of all ServiceAccounts (by LabelSelector) @ 08/24/23 11:35:03.308
  STEP: deleting the ServiceAccount @ 08/24/23 11:35:03.317
  Aug 24 11:35:03.371: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "svcaccounts-5179" for this suite. @ 08/24/23 11:35:03.378
• [0.234 seconds]
------------------------------
SSSSSS
------------------------------
[sig-network] Services should provide secure master service  [Conformance]
test/e2e/network/service.go:775
  STEP: Creating a kubernetes client @ 08/24/23 11:35:03.392
  Aug 24 11:35:03.392: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename services @ 08/24/23 11:35:03.393
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 11:35:03.454
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 11:35:03.459
  Aug 24 11:35:03.474: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "services-5116" for this suite. @ 08/24/23 11:35:03.484
• [0.105 seconds]
------------------------------
S
------------------------------
[sig-network] Service endpoints latency should not be very high  [Conformance]
test/e2e/network/service_latency.go:59
  STEP: Creating a kubernetes client @ 08/24/23 11:35:03.498
  Aug 24 11:35:03.498: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename svc-latency @ 08/24/23 11:35:03.498
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 11:35:03.563
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 11:35:03.571
  Aug 24 11:35:03.578: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: creating replication controller svc-latency-rc in namespace svc-latency-419 @ 08/24/23 11:35:03.578
  I0824 11:35:03.590505      22 runners.go:197] Created replication controller with name: svc-latency-rc, namespace: svc-latency-419, replica count: 1
  I0824 11:35:04.642107      22 runners.go:197] svc-latency-rc Pods: 1 out of 1 created, 0 running, 1 pending, 0 waiting, 0 inactive, 0 terminating, 0 unknown, 0 runningButNotReady 
  I0824 11:35:05.642479      22 runners.go:197] svc-latency-rc Pods: 1 out of 1 created, 0 running, 1 pending, 0 waiting, 0 inactive, 0 terminating, 0 unknown, 0 runningButNotReady 
  I0824 11:35:06.642803      22 runners.go:197] svc-latency-rc Pods: 1 out of 1 created, 1 running, 0 pending, 0 waiting, 0 inactive, 0 terminating, 0 unknown, 0 runningButNotReady 
  Aug 24 11:35:06.768: INFO: Created: latency-svc-zzjr9
  Aug 24 11:35:06.782: INFO: Got endpoints: latency-svc-zzjr9 [39.056361ms]
  Aug 24 11:35:06.809: INFO: Created: latency-svc-ctn58
  Aug 24 11:35:06.819: INFO: Got endpoints: latency-svc-ctn58 [36.207538ms]
  Aug 24 11:35:06.850: INFO: Created: latency-svc-lxt6b
  Aug 24 11:35:06.861: INFO: Got endpoints: latency-svc-lxt6b [79.221407ms]
  Aug 24 11:35:06.864: INFO: Created: latency-svc-2zfkw
  Aug 24 11:35:06.874: INFO: Got endpoints: latency-svc-2zfkw [91.091873ms]
  Aug 24 11:35:06.875: INFO: Created: latency-svc-8tqvx
  Aug 24 11:35:06.950: INFO: Got endpoints: latency-svc-8tqvx [167.203126ms]
  Aug 24 11:35:06.956: INFO: Created: latency-svc-l9c2x
  Aug 24 11:35:06.964: INFO: Got endpoints: latency-svc-l9c2x [181.385031ms]
  Aug 24 11:35:06.971: INFO: Created: latency-svc-7czzh
  Aug 24 11:35:06.983: INFO: Created: latency-svc-k9dql
  Aug 24 11:35:06.983: INFO: Got endpoints: latency-svc-7czzh [200.408709ms]
  Aug 24 11:35:07.049: INFO: Got endpoints: latency-svc-k9dql [267.433198ms]
  Aug 24 11:35:07.050: INFO: Created: latency-svc-9jtzm
  Aug 24 11:35:07.061: INFO: Got endpoints: latency-svc-9jtzm [278.050698ms]
  Aug 24 11:35:07.064: INFO: Created: latency-svc-fcjtp
  Aug 24 11:35:07.075: INFO: Got endpoints: latency-svc-fcjtp [292.009433ms]
  Aug 24 11:35:07.076: INFO: Created: latency-svc-hcd9k
  Aug 24 11:35:07.150: INFO: Got endpoints: latency-svc-hcd9k [367.517322ms]
  Aug 24 11:35:07.150: INFO: Created: latency-svc-fxvkz
  Aug 24 11:35:07.159: INFO: Got endpoints: latency-svc-fxvkz [376.197793ms]
  Aug 24 11:35:07.163: INFO: Created: latency-svc-r4b56
  Aug 24 11:35:07.174: INFO: Got endpoints: latency-svc-r4b56 [391.312994ms]
  Aug 24 11:35:07.174: INFO: Created: latency-svc-dgh7b
  Aug 24 11:35:07.194: INFO: Created: latency-svc-8mp69
  Aug 24 11:35:07.248: INFO: Got endpoints: latency-svc-dgh7b [466.154399ms]
  Aug 24 11:35:07.258: INFO: Got endpoints: latency-svc-8mp69 [475.359562ms]
  Aug 24 11:35:07.264: INFO: Created: latency-svc-vdjmg
  Aug 24 11:35:07.273: INFO: Got endpoints: latency-svc-vdjmg [490.718133ms]
  Aug 24 11:35:07.276: INFO: Created: latency-svc-26zsl
  Aug 24 11:35:07.349: INFO: Got endpoints: latency-svc-26zsl [530.574377ms]
  Aug 24 11:35:07.350: INFO: Created: latency-svc-xhhhs
  Aug 24 11:35:07.362: INFO: Got endpoints: latency-svc-xhhhs [499.891005ms]
  Aug 24 11:35:07.367: INFO: Created: latency-svc-dqk7j
  Aug 24 11:35:07.376: INFO: Got endpoints: latency-svc-dqk7j [502.038406ms]
  Aug 24 11:35:07.378: INFO: Created: latency-svc-jbf4z
  Aug 24 11:35:07.459: INFO: Got endpoints: latency-svc-jbf4z [509.733121ms]
  Aug 24 11:35:07.461: INFO: Created: latency-svc-sx5wt
  Aug 24 11:35:07.465: INFO: Got endpoints: latency-svc-sx5wt [500.86819ms]
  Aug 24 11:35:07.481: INFO: Created: latency-svc-vqbzv
  Aug 24 11:35:07.482: INFO: Created: latency-svc-lq26d
  Aug 24 11:35:07.549: INFO: Got endpoints: latency-svc-vqbzv [566.506083ms]
  Aug 24 11:35:07.549: INFO: Got endpoints: latency-svc-lq26d [89.958326ms]
  Aug 24 11:35:07.557: INFO: Created: latency-svc-bxh82
  Aug 24 11:35:07.566: INFO: Got endpoints: latency-svc-bxh82 [505.220571ms]
  Aug 24 11:35:07.572: INFO: Created: latency-svc-qjd4z
  Aug 24 11:35:07.580: INFO: Got endpoints: latency-svc-qjd4z [505.001059ms]
  Aug 24 11:35:07.582: INFO: Created: latency-svc-m4x5j
  Aug 24 11:35:07.657: INFO: Got endpoints: latency-svc-m4x5j [506.556106ms]
  Aug 24 11:35:07.658: INFO: Created: latency-svc-j7vbt
  Aug 24 11:35:07.667: INFO: Got endpoints: latency-svc-j7vbt [508.627756ms]
  Aug 24 11:35:07.670: INFO: Created: latency-svc-mzrq5
  Aug 24 11:35:07.677: INFO: Got endpoints: latency-svc-mzrq5 [502.792128ms]
  Aug 24 11:35:07.750: INFO: Created: latency-svc-gkxwr
  Aug 24 11:35:07.765: INFO: Got endpoints: latency-svc-gkxwr [516.200761ms]
  Aug 24 11:35:07.765: INFO: Created: latency-svc-xzlpf
  Aug 24 11:35:07.774: INFO: Got endpoints: latency-svc-xzlpf [516.535713ms]
  Aug 24 11:35:07.778: INFO: Created: latency-svc-mqxcp
  Aug 24 11:35:07.856: INFO: Created: latency-svc-f5k6g
  Aug 24 11:35:07.862: INFO: Got endpoints: latency-svc-mqxcp [588.93189ms]
  Aug 24 11:35:07.867: INFO: Got endpoints: latency-svc-f5k6g [518.01922ms]
  Aug 24 11:35:07.871: INFO: Created: latency-svc-47gqv
  Aug 24 11:35:07.880: INFO: Got endpoints: latency-svc-47gqv [518.384312ms]
  Aug 24 11:35:07.949: INFO: Created: latency-svc-2rvlg
  Aug 24 11:35:07.957: INFO: Created: latency-svc-q7lrl
  Aug 24 11:35:07.959: INFO: Got endpoints: latency-svc-2rvlg [583.041491ms]
  Aug 24 11:35:07.966: INFO: Got endpoints: latency-svc-q7lrl [915.948454ms]
  Aug 24 11:35:07.971: INFO: Created: latency-svc-hwd6n
  Aug 24 11:35:08.050: INFO: Got endpoints: latency-svc-hwd6n [584.98165ms]
  Aug 24 11:35:08.050: INFO: Created: latency-svc-pcd7q
  Aug 24 11:35:08.063: INFO: Got endpoints: latency-svc-pcd7q [513.444379ms]
  Aug 24 11:35:08.065: INFO: Created: latency-svc-ws2kx
  Aug 24 11:35:08.074: INFO: Got endpoints: latency-svc-ws2kx [524.809262ms]
  Aug 24 11:35:08.079: INFO: Created: latency-svc-jrdfg
  Aug 24 11:35:08.150: INFO: Created: latency-svc-dssw7
  Aug 24 11:35:08.155: INFO: Created: latency-svc-zc6gp
  Aug 24 11:35:08.174: INFO: Created: latency-svc-6ls5k
  Aug 24 11:35:08.175: INFO: Got endpoints: latency-svc-jrdfg [609.322183ms]
  Aug 24 11:35:08.184: INFO: Got endpoints: latency-svc-dssw7 [604.005938ms]
  Aug 24 11:35:08.188: INFO: Got endpoints: latency-svc-zc6gp [530.999361ms]
  Aug 24 11:35:08.250: INFO: Created: latency-svc-dfk6l
  Aug 24 11:35:08.265: INFO: Created: latency-svc-8lnr7
  Aug 24 11:35:08.280: INFO: Got endpoints: latency-svc-6ls5k [611.838735ms]
  Aug 24 11:35:08.283: INFO: Got endpoints: latency-svc-dfk6l [606.272899ms]
  Aug 24 11:35:08.284: INFO: Created: latency-svc-zpwd8
  Aug 24 11:35:08.285: INFO: Got endpoints: latency-svc-8lnr7 [520.528982ms]
  Aug 24 11:35:08.357: INFO: Created: latency-svc-t988c
  Aug 24 11:35:08.368: INFO: Created: latency-svc-bv22v
  Aug 24 11:35:08.380: INFO: Got endpoints: latency-svc-bv22v [512.634035ms]
  Aug 24 11:35:08.380: INFO: Got endpoints: latency-svc-zpwd8 [605.632566ms]
  Aug 24 11:35:08.380: INFO: Got endpoints: latency-svc-t988c [517.732367ms]
  Aug 24 11:35:08.449: INFO: Created: latency-svc-9qqdt
  Aug 24 11:35:08.456: INFO: Created: latency-svc-lz9qp
  Aug 24 11:35:08.459: INFO: Got endpoints: latency-svc-9qqdt [578.857151ms]
  Aug 24 11:35:08.463: INFO: Created: latency-svc-xx5d6
  Aug 24 11:35:08.550: INFO: Got endpoints: latency-svc-lz9qp [590.979619ms]
  Aug 24 11:35:08.559: INFO: Got endpoints: latency-svc-xx5d6 [592.876687ms]
  Aug 24 11:35:08.560: INFO: Created: latency-svc-pqkpx
  Aug 24 11:35:08.570: INFO: Got endpoints: latency-svc-pqkpx [519.876049ms]
  Aug 24 11:35:08.650: INFO: Created: latency-svc-r5tnx
  Aug 24 11:35:08.662: INFO: Got endpoints: latency-svc-r5tnx [599.185387ms]
  Aug 24 11:35:08.663: INFO: Created: latency-svc-nzdtv
  Aug 24 11:35:08.675: INFO: Got endpoints: latency-svc-nzdtv [600.935135ms]
  Aug 24 11:35:08.678: INFO: Created: latency-svc-5b8v5
  Aug 24 11:35:08.759: INFO: Got endpoints: latency-svc-5b8v5 [584.000187ms]
  Aug 24 11:35:08.764: INFO: Created: latency-svc-2nr28
  Aug 24 11:35:08.773: INFO: Got endpoints: latency-svc-2nr28 [589.01001ms]
  Aug 24 11:35:08.855: INFO: Created: latency-svc-xtpg8
  Aug 24 11:35:08.864: INFO: Got endpoints: latency-svc-xtpg8 [580.899633ms]
  Aug 24 11:35:08.949: INFO: Created: latency-svc-lv9n7
  Aug 24 11:35:08.956: INFO: Got endpoints: latency-svc-lv9n7 [675.569711ms]
  Aug 24 11:35:08.956: INFO: Created: latency-svc-w4qrt
  Aug 24 11:35:08.965: INFO: Got endpoints: latency-svc-w4qrt [679.372108ms]
  Aug 24 11:35:08.969: INFO: Created: latency-svc-s85jn
  Aug 24 11:35:09.059: INFO: Got endpoints: latency-svc-s85jn [678.567975ms]
  Aug 24 11:35:09.060: INFO: Created: latency-svc-fn55q
  Aug 24 11:35:09.068: INFO: Got endpoints: latency-svc-fn55q [687.677395ms]
  Aug 24 11:35:09.072: INFO: Created: latency-svc-9dktb
  Aug 24 11:35:09.156: INFO: Got endpoints: latency-svc-9dktb [775.615974ms]
  Aug 24 11:35:09.157: INFO: Created: latency-svc-9qh7f
  Aug 24 11:35:09.166: INFO: Got endpoints: latency-svc-9qh7f [707.021136ms]
  Aug 24 11:35:09.249: INFO: Created: latency-svc-8vbgl
  Aug 24 11:35:09.258: INFO: Created: latency-svc-tz62h
  Aug 24 11:35:09.258: INFO: Got endpoints: latency-svc-8vbgl [708.294662ms]
  Aug 24 11:35:09.268: INFO: Got endpoints: latency-svc-tz62h [709.392006ms]
  Aug 24 11:35:09.349: INFO: Created: latency-svc-g6z2c
  Aug 24 11:35:09.357: INFO: Created: latency-svc-2zlbn
  Aug 24 11:35:09.357: INFO: Got endpoints: latency-svc-g6z2c [787.693541ms]
  Aug 24 11:35:09.364: INFO: Created: latency-svc-58nxc
  Aug 24 11:35:09.366: INFO: Got endpoints: latency-svc-2zlbn [703.773841ms]
  Aug 24 11:35:09.450: INFO: Got endpoints: latency-svc-58nxc [774.378898ms]
  Aug 24 11:35:09.450: INFO: Created: latency-svc-kmd92
  Aug 24 11:35:09.451: INFO: Created: latency-svc-qvtjj
  Aug 24 11:35:09.468: INFO: Got endpoints: latency-svc-qvtjj [707.710269ms]
  Aug 24 11:35:09.471: INFO: Got endpoints: latency-svc-kmd92 [1.283189885s]
  Aug 24 11:35:09.476: INFO: Created: latency-svc-6lmd5
  Aug 24 11:35:09.555: INFO: Created: latency-svc-ktrps
  Aug 24 11:35:09.564: INFO: Got endpoints: latency-svc-6lmd5 [790.696553ms]
  Aug 24 11:35:09.566: INFO: Got endpoints: latency-svc-ktrps [701.49136ms]
  Aug 24 11:35:09.650: INFO: Created: latency-svc-q4trp
  Aug 24 11:35:09.662: INFO: Got endpoints: latency-svc-q4trp [706.355692ms]
  Aug 24 11:35:09.665: INFO: Created: latency-svc-pjqfz
  Aug 24 11:35:09.750: INFO: Created: latency-svc-m6f2b
  Aug 24 11:35:09.750: INFO: Got endpoints: latency-svc-pjqfz [784.895275ms]
  Aug 24 11:35:09.760: INFO: Got endpoints: latency-svc-m6f2b [700.600985ms]
  Aug 24 11:35:09.764: INFO: Created: latency-svc-mhk8w
  Aug 24 11:35:09.850: INFO: Got endpoints: latency-svc-mhk8w [781.678422ms]
  Aug 24 11:35:09.858: INFO: Created: latency-svc-n4xpm
  Aug 24 11:35:09.866: INFO: Got endpoints: latency-svc-n4xpm [710.166229ms]
  Aug 24 11:35:09.868: INFO: Created: latency-svc-hmdbk
  Aug 24 11:35:09.956: INFO: Created: latency-svc-lk2g8
  Aug 24 11:35:09.959: INFO: Got endpoints: latency-svc-hmdbk [792.295961ms]
  Aug 24 11:35:09.977: INFO: Got endpoints: latency-svc-lk2g8 [718.484557ms]
  Aug 24 11:35:10.048: INFO: Created: latency-svc-dvz86
  Aug 24 11:35:10.049: INFO: Got endpoints: latency-svc-dvz86 [780.474714ms]
  Aug 24 11:35:10.449: INFO: Created: latency-svc-pzcbk
  Aug 24 11:35:10.449: INFO: Created: latency-svc-4x299
  Aug 24 11:35:10.450: INFO: Created: latency-svc-j6kcb
  Aug 24 11:35:10.450: INFO: Created: latency-svc-jnw25
  Aug 24 11:35:10.451: INFO: Created: latency-svc-8dxl6
  Aug 24 11:35:10.451: INFO: Created: latency-svc-bqcl7
  Aug 24 11:35:10.451: INFO: Created: latency-svc-8xf28
  Aug 24 11:35:10.452: INFO: Created: latency-svc-q6ffz
  Aug 24 11:35:10.452: INFO: Created: latency-svc-qpp65
  Aug 24 11:35:10.454: INFO: Created: latency-svc-n75wq
  Aug 24 11:35:10.455: INFO: Created: latency-svc-7p776
  Aug 24 11:35:10.455: INFO: Got endpoints: latency-svc-jnw25 [888.816897ms]
  Aug 24 11:35:10.455: INFO: Created: latency-svc-zr2v9
  Aug 24 11:35:10.455: INFO: Created: latency-svc-99szd
  Aug 24 11:35:10.456: INFO: Created: latency-svc-td9xq
  Aug 24 11:35:10.460: INFO: Got endpoints: latency-svc-8xf28 [798.409658ms]
  Aug 24 11:35:10.550: INFO: Created: latency-svc-fqtxd
  Aug 24 11:35:10.550: INFO: Got endpoints: latency-svc-8dxl6 [1.099664073s]
  Aug 24 11:35:10.550: INFO: Got endpoints: latency-svc-pzcbk [1.192677274s]
  Aug 24 11:35:10.554: INFO: Got endpoints: latency-svc-q6ffz [989.804694ms]
  Aug 24 11:35:10.559: INFO: Got endpoints: latency-svc-bqcl7 [510.069083ms]
  Aug 24 11:35:10.650: INFO: Got endpoints: latency-svc-td9xq [1.179003572s]
  Aug 24 11:35:10.651: INFO: Created: latency-svc-9rbn5
  Aug 24 11:35:10.651: INFO: Got endpoints: latency-svc-zr2v9 [900.983484ms]
  Aug 24 11:35:10.651: INFO: Got endpoints: latency-svc-qpp65 [1.28446847s]
  Aug 24 11:35:10.651: INFO: Got endpoints: latency-svc-99szd [891.171499ms]
  Aug 24 11:35:10.751: INFO: Got endpoints: latency-svc-7p776 [901.314476ms]
  Aug 24 11:35:10.751: INFO: Got endpoints: latency-svc-n75wq [1.283652367s]
  Aug 24 11:35:10.751: INFO: Created: latency-svc-42djx
  Aug 24 11:35:10.751: INFO: Got endpoints: latency-svc-4x299 [885.20377ms]
  Aug 24 11:35:10.752: INFO: Got endpoints: latency-svc-j6kcb [792.962653ms]
  Aug 24 11:35:10.760: INFO: Got endpoints: latency-svc-fqtxd [783.682541ms]
  Aug 24 11:35:10.762: INFO: Got endpoints: latency-svc-9rbn5 [307.145473ms]
  Aug 24 11:35:10.855: INFO: Created: latency-svc-cwq5p
  Aug 24 11:35:10.857: INFO: Got endpoints: latency-svc-42djx [396.074414ms]
  Aug 24 11:35:10.867: INFO: Created: latency-svc-dtzfc
  Aug 24 11:35:10.868: INFO: Got endpoints: latency-svc-cwq5p [318.183234ms]
  Aug 24 11:35:10.950: INFO: Created: latency-svc-5p5hq
  Aug 24 11:35:10.964: INFO: Got endpoints: latency-svc-dtzfc [413.780697ms]
  Aug 24 11:35:10.964: INFO: Got endpoints: latency-svc-5p5hq [410.0047ms]
  Aug 24 11:35:11.050: INFO: Created: latency-svc-c4q8p
  Aug 24 11:35:11.063: INFO: Got endpoints: latency-svc-c4q8p [504.397366ms]
  Aug 24 11:35:11.071: INFO: Created: latency-svc-j9xv5
  Aug 24 11:35:11.150: INFO: Got endpoints: latency-svc-j9xv5 [498.420098ms]
  Aug 24 11:35:11.177: INFO: Created: latency-svc-fwcj8
  Aug 24 11:35:11.249: INFO: Created: latency-svc-cf6bq
  Aug 24 11:35:11.255: INFO: Got endpoints: latency-svc-fwcj8 [603.941038ms]
  Aug 24 11:35:11.264: INFO: Got endpoints: latency-svc-cf6bq [612.096286ms]
  Aug 24 11:35:11.267: INFO: Created: latency-svc-nj59t
  Aug 24 11:35:11.350: INFO: Got endpoints: latency-svc-nj59t [598.639783ms]
  Aug 24 11:35:11.358: INFO: Created: latency-svc-trkvp
  Aug 24 11:35:11.366: INFO: Got endpoints: latency-svc-trkvp [613.951494ms]
  Aug 24 11:35:11.372: INFO: Created: latency-svc-897w7
  Aug 24 11:35:11.456: INFO: Created: latency-svc-5w8l6
  Aug 24 11:35:11.456: INFO: Got endpoints: latency-svc-897w7 [704.374583ms]
  Aug 24 11:35:11.466: INFO: Got endpoints: latency-svc-5w8l6 [714.083497ms]
  Aug 24 11:35:11.551: INFO: Created: latency-svc-rqxr6
  Aug 24 11:35:11.560: INFO: Got endpoints: latency-svc-rqxr6 [799.447852ms]
  Aug 24 11:35:11.561: INFO: Created: latency-svc-9jc57
  Aug 24 11:35:11.648: INFO: Created: latency-svc-vfrlf
  Aug 24 11:35:11.649: INFO: Got endpoints: latency-svc-9jc57 [887.25926ms]
  Aug 24 11:35:11.660: INFO: Created: latency-svc-qnxtm
  Aug 24 11:35:11.663: INFO: Got endpoints: latency-svc-vfrlf [806.723267ms]
  Aug 24 11:35:11.758: INFO: Got endpoints: latency-svc-qnxtm [889.397609ms]
  Aug 24 11:35:11.758: INFO: Created: latency-svc-csf2d
  Aug 24 11:35:11.772: INFO: Got endpoints: latency-svc-csf2d [808.073932ms]
  Aug 24 11:35:11.772: INFO: Created: latency-svc-qxfgs
  Aug 24 11:35:11.858: INFO: Created: latency-svc-bzdkc
  Aug 24 11:35:11.859: INFO: Got endpoints: latency-svc-qxfgs [895.583439ms]
  Aug 24 11:35:11.870: INFO: Got endpoints: latency-svc-bzdkc [806.020134ms]
  Aug 24 11:35:11.949: INFO: Created: latency-svc-s4qr9
  Aug 24 11:35:11.950: INFO: Created: latency-svc-tlsvw
  Aug 24 11:35:11.957: INFO: Created: latency-svc-8hmxg
  Aug 24 11:35:11.959: INFO: Got endpoints: latency-svc-tlsvw [1.30854961s]
  Aug 24 11:35:11.961: INFO: Got endpoints: latency-svc-s4qr9 [811.430779ms]
  Aug 24 11:35:11.968: INFO: Got endpoints: latency-svc-8hmxg [712.600029ms]
  Aug 24 11:35:11.972: INFO: Created: latency-svc-c97lg
  Aug 24 11:35:12.067: INFO: Got endpoints: latency-svc-c97lg [803.182759ms]
  Aug 24 11:35:12.268: INFO: Created: latency-svc-4dz46
  Aug 24 11:35:12.270: INFO: Created: latency-svc-x82bc
  Aug 24 11:35:12.271: INFO: Created: latency-svc-slh6v
  Aug 24 11:35:12.271: INFO: Created: latency-svc-n6pn7
  Aug 24 11:35:12.275: INFO: Created: latency-svc-vrqw9
  Aug 24 11:35:12.275: INFO: Created: latency-svc-gdx9w
  Aug 24 11:35:12.275: INFO: Created: latency-svc-67784
  Aug 24 11:35:12.275: INFO: Created: latency-svc-gk5q8
  Aug 24 11:35:12.275: INFO: Created: latency-svc-4k4wj
  Aug 24 11:35:12.275: INFO: Created: latency-svc-llbbd
  Aug 24 11:35:12.348: INFO: Created: latency-svc-rxqjq
  Aug 24 11:35:12.349: INFO: Created: latency-svc-vx5t2
  Aug 24 11:35:12.349: INFO: Created: latency-svc-4mb6k
  Aug 24 11:35:12.349: INFO: Created: latency-svc-kjg55
  Aug 24 11:35:12.349: INFO: Created: latency-svc-tlgq6
  Aug 24 11:35:12.351: INFO: Got endpoints: latency-svc-4dz46 [701.441487ms]
  Aug 24 11:35:12.351: INFO: Got endpoints: latency-svc-vrqw9 [579.299222ms]
  Aug 24 11:35:12.351: INFO: Got endpoints: latency-svc-slh6v [791.445544ms]
  Aug 24 11:35:12.351: INFO: Got endpoints: latency-svc-gdx9w [885.216139ms]
  Aug 24 11:35:12.353: INFO: Got endpoints: latency-svc-x82bc [286.112064ms]
  Aug 24 11:35:12.451: INFO: Got endpoints: latency-svc-kjg55 [1.101117056s]
  Aug 24 11:35:12.452: INFO: Got endpoints: latency-svc-n6pn7 [483.575788ms]
  Aug 24 11:35:12.452: INFO: Got endpoints: latency-svc-gk5q8 [492.510819ms]
  Aug 24 11:35:12.455: INFO: Got endpoints: latency-svc-4k4wj [1.088171147s]
  Aug 24 11:35:12.551: INFO: Got endpoints: latency-svc-4mb6k [1.094869479s]
  Aug 24 11:35:12.551: INFO: Created: latency-svc-2qxhs
  Aug 24 11:35:12.551: INFO: Got endpoints: latency-svc-tlgq6 [793.053812ms]
  Aug 24 11:35:12.552: INFO: Got endpoints: latency-svc-vx5t2 [888.593475ms]
  Aug 24 11:35:12.552: INFO: Got endpoints: latency-svc-llbbd [682.49368ms]
  Aug 24 11:35:12.552: INFO: Got endpoints: latency-svc-67784 [591.277588ms]
  Aug 24 11:35:12.562: INFO: Got endpoints: latency-svc-rxqjq [702.571592ms]
  Aug 24 11:35:12.566: INFO: Got endpoints: latency-svc-2qxhs [214.121323ms]
  Aug 24 11:35:12.651: INFO: Created: latency-svc-9mnsk
  Aug 24 11:35:12.752: INFO: Created: latency-svc-wr97t
  Aug 24 11:35:12.858: INFO: Got endpoints: latency-svc-9mnsk [507.315129ms]
  Aug 24 11:35:12.958: INFO: Got endpoints: latency-svc-wr97t [405.90896ms]
  Aug 24 11:35:13.051: INFO: Created: latency-svc-gzx2q
  Aug 24 11:35:13.249: INFO: Created: latency-svc-h8fw4
  Aug 24 11:35:13.349: INFO: Got endpoints: latency-svc-h8fw4 [996.0331ms]
  Aug 24 11:35:13.354: INFO: Got endpoints: latency-svc-gzx2q [1.002513871s]
  Aug 24 11:35:13.449: INFO: Created: latency-svc-7vf99
  Aug 24 11:35:13.449: INFO: Got endpoints: latency-svc-7vf99 [896.538341ms]
  Aug 24 11:35:13.456: INFO: Created: latency-svc-bh6d8
  Aug 24 11:35:13.456: INFO: Created: latency-svc-xmsrl
  Aug 24 11:35:13.550: INFO: Created: latency-svc-bc8ql
  Aug 24 11:35:13.556: INFO: Got endpoints: latency-svc-bh6d8 [1.104614665s]
  Aug 24 11:35:13.557: INFO: Got endpoints: latency-svc-xmsrl [1.10557007s]
  Aug 24 11:35:13.562: INFO: Got endpoints: latency-svc-bc8ql [1.109605968s]
  Aug 24 11:35:13.564: INFO: Created: latency-svc-vjl8p
  Aug 24 11:35:13.656: INFO: Created: latency-svc-gn6ht
  Aug 24 11:35:13.661: INFO: Got endpoints: latency-svc-vjl8p [1.206091215s]
  Aug 24 11:35:13.665: INFO: Got endpoints: latency-svc-gn6ht [1.113942227s]
  Aug 24 11:35:13.748: INFO: Created: latency-svc-p2v9n
  Aug 24 11:35:13.755: INFO: Got endpoints: latency-svc-p2v9n [1.20335031s]
  Aug 24 11:35:13.758: INFO: Created: latency-svc-hktxr
  Aug 24 11:35:13.768: INFO: Got endpoints: latency-svc-hktxr [1.416092037s]
  Aug 24 11:35:13.772: INFO: Created: latency-svc-hf9qk
  Aug 24 11:35:13.850: INFO: Got endpoints: latency-svc-hf9qk [1.298687883s]
  Aug 24 11:35:13.851: INFO: Created: latency-svc-dj9j8
  Aug 24 11:35:13.860: INFO: Got endpoints: latency-svc-dj9j8 [1.297636908s]
  Aug 24 11:35:13.866: INFO: Created: latency-svc-29cg4
  Aug 24 11:35:13.957: INFO: Got endpoints: latency-svc-29cg4 [1.391863462s]
  Aug 24 11:35:13.958: INFO: Created: latency-svc-lm77r
  Aug 24 11:35:13.966: INFO: Got endpoints: latency-svc-lm77r [1.007099742s]
  Aug 24 11:35:13.970: INFO: Created: latency-svc-b4ct5
  Aug 24 11:35:13.980: INFO: Got endpoints: latency-svc-b4ct5 [1.120609427s]
  Aug 24 11:35:14.268: INFO: Created: latency-svc-c6cl5
  Aug 24 11:35:14.270: INFO: Created: latency-svc-wg2wx
  Aug 24 11:35:14.273: INFO: Created: latency-svc-kms54
  Aug 24 11:35:14.275: INFO: Created: latency-svc-csh2p
  Aug 24 11:35:14.275: INFO: Created: latency-svc-zcg77
  Aug 24 11:35:14.276: INFO: Created: latency-svc-sz5tn
  Aug 24 11:35:14.276: INFO: Created: latency-svc-9lzkr
  Aug 24 11:35:14.277: INFO: Created: latency-svc-k2dnt
  Aug 24 11:35:14.277: INFO: Created: latency-svc-qzhh9
  Aug 24 11:35:14.348: INFO: Got endpoints: latency-svc-c6cl5 [390.81704ms]
  Aug 24 11:35:14.349: INFO: Got endpoints: latency-svc-wg2wx [499.152101ms]
  Aug 24 11:35:14.351: INFO: Created: latency-svc-bbwts
  Aug 24 11:35:14.353: INFO: Created: latency-svc-mhlrx
  Aug 24 11:35:14.353: INFO: Created: latency-svc-w9g2q
  Aug 24 11:35:14.353: INFO: Created: latency-svc-kqb54
  Aug 24 11:35:14.353: INFO: Created: latency-svc-w9rr7
  Aug 24 11:35:14.354: INFO: Created: latency-svc-vvpm8
  Aug 24 11:35:14.355: INFO: Got endpoints: latency-svc-kms54 [494.590279ms]
  Aug 24 11:35:14.355: INFO: Got endpoints: latency-svc-csh2p [1.00005565s]
  Aug 24 11:35:14.451: INFO: Got endpoints: latency-svc-zcg77 [895.300884ms]
  Aug 24 11:35:14.452: INFO: Got endpoints: latency-svc-w9g2q [696.156613ms]
  Aug 24 11:35:14.452: INFO: Got endpoints: latency-svc-k2dnt [889.760099ms]
  Aug 24 11:35:14.458: INFO: Got endpoints: latency-svc-sz5tn [792.901181ms]
  Aug 24 11:35:14.459: INFO: Got endpoints: latency-svc-bbwts [1.010411747s]
  Aug 24 11:35:14.463: INFO: Got endpoints: latency-svc-qzhh9 [1.113405586s]
  Aug 24 11:35:14.550: INFO: Created: latency-svc-mnslb
  Aug 24 11:35:14.551: INFO: Got endpoints: latency-svc-9lzkr [993.237677ms]
  Aug 24 11:35:14.551: INFO: Got endpoints: latency-svc-vvpm8 [782.889374ms]
  Aug 24 11:35:14.551: INFO: Got endpoints: latency-svc-kqb54 [571.435745ms]
  Aug 24 11:35:14.560: INFO: Got endpoints: latency-svc-w9rr7 [594.391402ms]
  Aug 24 11:35:14.562: INFO: Got endpoints: latency-svc-mnslb [212.956765ms]
  Aug 24 11:35:14.562: INFO: Got endpoints: latency-svc-mhlrx [901.410991ms]
  Aug 24 11:35:14.566: INFO: Created: latency-svc-w492p
  Aug 24 11:35:14.664: INFO: Got endpoints: latency-svc-w492p [315.110987ms]
  Aug 24 11:35:14.664: INFO: Created: latency-svc-x85dn
  Aug 24 11:35:14.665: INFO: Got endpoints: latency-svc-x85dn [310.027885ms]
  Aug 24 11:35:14.669: INFO: Created: latency-svc-lphww
  Aug 24 11:35:14.678: INFO: Got endpoints: latency-svc-lphww [322.768934ms]
  Aug 24 11:35:14.749: INFO: Created: latency-svc-tpnh2
  Aug 24 11:35:14.765: INFO: Created: latency-svc-lbd8s
  Aug 24 11:35:14.776: INFO: Created: latency-svc-gxzkb
  Aug 24 11:35:14.779: INFO: Got endpoints: latency-svc-lbd8s [327.367346ms]
  Aug 24 11:35:14.786: INFO: Created: latency-svc-wnbvw
  Aug 24 11:35:14.849: INFO: Created: latency-svc-sw648
  Aug 24 11:35:14.854: INFO: Created: latency-svc-ks994
  Aug 24 11:35:14.875: INFO: Got endpoints: latency-svc-tpnh2 [424.019623ms]
  Aug 24 11:35:14.875: INFO: Created: latency-svc-gmd8q
  Aug 24 11:35:14.875: INFO: Got endpoints: latency-svc-gxzkb [423.750691ms]
  Aug 24 11:35:14.879: INFO: Got endpoints: latency-svc-ks994 [416.540127ms]
  Aug 24 11:35:14.949: INFO: Got endpoints: latency-svc-wnbvw [491.406724ms]
  Aug 24 11:35:14.949: INFO: Got endpoints: latency-svc-sw648 [490.014557ms]
  Aug 24 11:35:14.954: INFO: Created: latency-svc-mhwql
  Aug 24 11:35:14.967: INFO: Created: latency-svc-bmmzg
  Aug 24 11:35:14.978: INFO: Got endpoints: latency-svc-mhwql [427.52931ms]
  Aug 24 11:35:14.980: INFO: Got endpoints: latency-svc-gmd8q [428.817865ms]
  Aug 24 11:35:14.980: INFO: Got endpoints: latency-svc-bmmzg [429.066787ms]
  Aug 24 11:35:15.050: INFO: Created: latency-svc-f55rm
  Aug 24 11:35:15.059: INFO: Got endpoints: latency-svc-f55rm [496.060287ms]
  Aug 24 11:35:15.062: INFO: Created: latency-svc-z77bj
  Aug 24 11:35:15.073: INFO: Created: latency-svc-t5psv
  Aug 24 11:35:15.076: INFO: Got endpoints: latency-svc-z77bj [515.422196ms]
  Aug 24 11:35:15.083: INFO: Got endpoints: latency-svc-t5psv [520.711821ms]
  Aug 24 11:35:15.100: INFO: Created: latency-svc-ttql9
  Aug 24 11:35:15.158: INFO: Created: latency-svc-bn629
  Aug 24 11:35:15.164: INFO: Got endpoints: latency-svc-ttql9 [499.375872ms]
  Aug 24 11:35:15.169: INFO: Created: latency-svc-zlj62
  Aug 24 11:35:15.249: INFO: Got endpoints: latency-svc-bn629 [585.329528ms]
  Aug 24 11:35:15.253: INFO: Got endpoints: latency-svc-zlj62 [575.412372ms]
  Aug 24 11:35:15.260: INFO: Created: latency-svc-vfdt6
  Aug 24 11:35:15.271: INFO: Got endpoints: latency-svc-vfdt6 [491.926945ms]
  Aug 24 11:35:15.272: INFO: Created: latency-svc-hcrs6
  Aug 24 11:35:15.350: INFO: Got endpoints: latency-svc-hcrs6 [474.519957ms]
  Aug 24 11:35:15.351: INFO: Created: latency-svc-xd2wq
  Aug 24 11:35:15.362: INFO: Got endpoints: latency-svc-xd2wq [486.196361ms]
  Aug 24 11:35:15.363: INFO: Created: latency-svc-pmqkf
  Aug 24 11:35:15.377: INFO: Got endpoints: latency-svc-pmqkf [497.33651ms]
  Aug 24 11:35:15.378: INFO: Created: latency-svc-cjf4x
  Aug 24 11:35:15.386: INFO: Got endpoints: latency-svc-cjf4x [436.227599ms]
  Aug 24 11:35:15.450: INFO: Created: latency-svc-dfv5j
  Aug 24 11:35:15.462: INFO: Got endpoints: latency-svc-dfv5j [511.762009ms]
  Aug 24 11:35:15.464: INFO: Created: latency-svc-cpb62
  Aug 24 11:35:15.473: INFO: Got endpoints: latency-svc-cpb62 [494.53935ms]
  Aug 24 11:35:15.477: INFO: Created: latency-svc-68dlm
  Aug 24 11:35:15.485: INFO: Got endpoints: latency-svc-68dlm [504.759906ms]
  Aug 24 11:35:15.550: INFO: Created: latency-svc-qpqbg
  Aug 24 11:35:15.559: INFO: Got endpoints: latency-svc-qpqbg [578.510119ms]
  Aug 24 11:35:15.564: INFO: Created: latency-svc-9wvjw
  Aug 24 11:35:15.572: INFO: Got endpoints: latency-svc-9wvjw [513.652808ms]
  Aug 24 11:35:15.575: INFO: Created: latency-svc-fbhrm
  Aug 24 11:35:15.650: INFO: Got endpoints: latency-svc-fbhrm [574.092448ms]
  Aug 24 11:35:15.650: INFO: Created: latency-svc-dn9fk
  Aug 24 11:35:15.661: INFO: Got endpoints: latency-svc-dn9fk [578.195037ms]
  Aug 24 11:35:15.664: INFO: Created: latency-svc-8pxwz
  Aug 24 11:35:15.674: INFO: Got endpoints: latency-svc-8pxwz [509.87656ms]
  Aug 24 11:35:15.678: INFO: Created: latency-svc-4nw6t
  Aug 24 11:35:15.749: INFO: Got endpoints: latency-svc-4nw6t [499.977096ms]
  Aug 24 11:35:15.750: INFO: Created: latency-svc-c2sqp
  Aug 24 11:35:15.760: INFO: Got endpoints: latency-svc-c2sqp [506.584947ms]
  Aug 24 11:35:15.763: INFO: Created: latency-svc-vr6mw
  Aug 24 11:35:15.772: INFO: Got endpoints: latency-svc-vr6mw [500.423827ms]
  Aug 24 11:35:15.772: INFO: Latencies: [36.207538ms 79.221407ms 89.958326ms 91.091873ms 167.203126ms 181.385031ms 200.408709ms 212.956765ms 214.121323ms 267.433198ms 278.050698ms 286.112064ms 292.009433ms 307.145473ms 310.027885ms 315.110987ms 318.183234ms 322.768934ms 327.367346ms 367.517322ms 376.197793ms 390.81704ms 391.312994ms 396.074414ms 405.90896ms 410.0047ms 413.780697ms 416.540127ms 423.750691ms 424.019623ms 427.52931ms 428.817865ms 429.066787ms 436.227599ms 466.154399ms 474.519957ms 475.359562ms 483.575788ms 486.196361ms 490.014557ms 490.718133ms 491.406724ms 491.926945ms 492.510819ms 494.53935ms 494.590279ms 496.060287ms 497.33651ms 498.420098ms 499.152101ms 499.375872ms 499.891005ms 499.977096ms 500.423827ms 500.86819ms 502.038406ms 502.792128ms 504.397366ms 504.759906ms 505.001059ms 505.220571ms 506.556106ms 506.584947ms 507.315129ms 508.627756ms 509.733121ms 509.87656ms 510.069083ms 511.762009ms 512.634035ms 513.444379ms 513.652808ms 515.422196ms 516.200761ms 516.535713ms 517.732367ms 518.01922ms 518.384312ms 519.876049ms 520.528982ms 520.711821ms 524.809262ms 530.574377ms 530.999361ms 566.506083ms 571.435745ms 574.092448ms 575.412372ms 578.195037ms 578.510119ms 578.857151ms 579.299222ms 580.899633ms 583.041491ms 584.000187ms 584.98165ms 585.329528ms 588.93189ms 589.01001ms 590.979619ms 591.277588ms 592.876687ms 594.391402ms 598.639783ms 599.185387ms 600.935135ms 603.941038ms 604.005938ms 605.632566ms 606.272899ms 609.322183ms 611.838735ms 612.096286ms 613.951494ms 675.569711ms 678.567975ms 679.372108ms 682.49368ms 687.677395ms 696.156613ms 700.600985ms 701.441487ms 701.49136ms 702.571592ms 703.773841ms 704.374583ms 706.355692ms 707.021136ms 707.710269ms 708.294662ms 709.392006ms 710.166229ms 712.600029ms 714.083497ms 718.484557ms 774.378898ms 775.615974ms 780.474714ms 781.678422ms 782.889374ms 783.682541ms 784.895275ms 787.693541ms 790.696553ms 791.445544ms 792.295961ms 792.901181ms 792.962653ms 793.053812ms 798.409658ms 799.447852ms 803.182759ms 806.020134ms 806.723267ms 808.073932ms 811.430779ms 885.20377ms 885.216139ms 887.25926ms 888.593475ms 888.816897ms 889.397609ms 889.760099ms 891.171499ms 895.300884ms 895.583439ms 896.538341ms 900.983484ms 901.314476ms 901.410991ms 915.948454ms 989.804694ms 993.237677ms 996.0331ms 1.00005565s 1.002513871s 1.007099742s 1.010411747s 1.088171147s 1.094869479s 1.099664073s 1.101117056s 1.104614665s 1.10557007s 1.109605968s 1.113405586s 1.113942227s 1.120609427s 1.179003572s 1.192677274s 1.20335031s 1.206091215s 1.283189885s 1.283652367s 1.28446847s 1.297636908s 1.298687883s 1.30854961s 1.391863462s 1.416092037s]
  Aug 24 11:35:15.772: INFO: 50 %ile: 591.277588ms
  Aug 24 11:35:15.772: INFO: 90 %ile: 1.099664073s
  Aug 24 11:35:15.772: INFO: 99 %ile: 1.391863462s
  Aug 24 11:35:15.772: INFO: Total sample count: 200
  Aug 24 11:35:15.772: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "svc-latency-419" for this suite. @ 08/24/23 11:35:15.783
• [12.303 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-network] Networking Granular Checks: Pods should function for node-pod communication: http [LinuxOnly] [NodeConformance] [Conformance]
test/e2e/common/network/networking.go:107
  STEP: Creating a kubernetes client @ 08/24/23 11:35:15.803
  Aug 24 11:35:15.803: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename pod-network-test @ 08/24/23 11:35:15.804
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 11:35:15.861
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 11:35:15.867
  STEP: Performing setup for networking test in namespace pod-network-test-5060 @ 08/24/23 11:35:15.873
  STEP: creating a selector @ 08/24/23 11:35:15.874
  STEP: Creating the service pods in kubernetes @ 08/24/23 11:35:15.874
  Aug 24 11:35:15.874: INFO: Waiting up to 10m0s for all (but 0) nodes to be schedulable
  STEP: Creating test pods @ 08/24/23 11:35:28.073
  Aug 24 11:35:30.294: INFO: Setting MaxTries for pod polling to 34 for networking test based on endpoint count 2
  Aug 24 11:35:30.294: INFO: Going to poll 10.100.0.209 on port 8083 at least 0 times, with a maximum of 34 tries before failing
  Aug 24 11:35:30.302: INFO: ExecWithOptions {Command:[/bin/sh -c curl -g -q -s --max-time 15 --connect-timeout 1 http://10.100.0.209:8083/hostName | grep -v '^\s*$'] Namespace:pod-network-test-5060 PodName:host-test-container-pod ContainerName:agnhost-container Stdin:<nil> CaptureStdout:true CaptureStderr:true PreserveWhitespace:false Quiet:false}
  Aug 24 11:35:30.302: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  Aug 24 11:35:30.302: INFO: ExecWithOptions: Clientset creation
  Aug 24 11:35:30.303: INFO: ExecWithOptions: execute(POST https://10.96.0.1:443/api/v1/namespaces/pod-network-test-5060/pods/host-test-container-pod/exec?command=%2Fbin%2Fsh&command=-c&command=curl+-g+-q+-s+--max-time+15+--connect-timeout+1+http%3A%2F%2F10.100.0.209%3A8083%2FhostName+%7C+grep+-v+%27%5E%5Cs%2A%24%27&container=agnhost-container&container=agnhost-container&stderr=true&stdout=true)
  Aug 24 11:35:30.549: INFO: Found all 1 expected endpoints: [netserver-0]
  Aug 24 11:35:30.549: INFO: Going to poll 10.100.1.134 on port 8083 at least 0 times, with a maximum of 34 tries before failing
  Aug 24 11:35:30.559: INFO: ExecWithOptions {Command:[/bin/sh -c curl -g -q -s --max-time 15 --connect-timeout 1 http://10.100.1.134:8083/hostName | grep -v '^\s*$'] Namespace:pod-network-test-5060 PodName:host-test-container-pod ContainerName:agnhost-container Stdin:<nil> CaptureStdout:true CaptureStderr:true PreserveWhitespace:false Quiet:false}
  Aug 24 11:35:30.559: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  Aug 24 11:35:30.560: INFO: ExecWithOptions: Clientset creation
  Aug 24 11:35:30.560: INFO: ExecWithOptions: execute(POST https://10.96.0.1:443/api/v1/namespaces/pod-network-test-5060/pods/host-test-container-pod/exec?command=%2Fbin%2Fsh&command=-c&command=curl+-g+-q+-s+--max-time+15+--connect-timeout+1+http%3A%2F%2F10.100.1.134%3A8083%2FhostName+%7C+grep+-v+%27%5E%5Cs%2A%24%27&container=agnhost-container&container=agnhost-container&stderr=true&stdout=true)
  Aug 24 11:35:30.950: INFO: Found all 1 expected endpoints: [netserver-1]
  Aug 24 11:35:30.950: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "pod-network-test-5060" for this suite. @ 08/24/23 11:35:31.051
• [15.447 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-network] Services should serve multiport endpoints from pods  [Conformance]
test/e2e/network/service.go:846
  STEP: Creating a kubernetes client @ 08/24/23 11:35:31.252
  Aug 24 11:35:31.252: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename services @ 08/24/23 11:35:31.254
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 11:35:31.657
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 11:35:31.664
  STEP: creating service multi-endpoint-test in namespace services-3785 @ 08/24/23 11:35:31.67
  STEP: waiting up to 3m0s for service multi-endpoint-test in namespace services-3785 to expose endpoints map[] @ 08/24/23 11:35:31.776
  Aug 24 11:35:31.784: INFO: Failed go get Endpoints object: endpoints "multi-endpoint-test" not found
  Aug 24 11:35:32.794: INFO: Failed go get Endpoints object: endpoints "multi-endpoint-test" not found
  Aug 24 11:35:33.792: INFO: Failed go get Endpoints object: endpoints "multi-endpoint-test" not found
  Aug 24 11:35:34.793: INFO: Failed go get Endpoints object: endpoints "multi-endpoint-test" not found
  Aug 24 11:35:35.807: INFO: successfully validated that service multi-endpoint-test in namespace services-3785 exposes endpoints map[]
  STEP: Creating pod pod1 in namespace services-3785 @ 08/24/23 11:35:35.807
  STEP: waiting up to 3m0s for service multi-endpoint-test in namespace services-3785 to expose endpoints map[pod1:[100]] @ 08/24/23 11:35:37.85
  Aug 24 11:35:37.878: INFO: successfully validated that service multi-endpoint-test in namespace services-3785 exposes endpoints map[pod1:[100]]
  STEP: Creating pod pod2 in namespace services-3785 @ 08/24/23 11:35:37.878
  STEP: waiting up to 3m0s for service multi-endpoint-test in namespace services-3785 to expose endpoints map[pod1:[100] pod2:[101]] @ 08/24/23 11:35:39.976
  Aug 24 11:35:40.015: INFO: successfully validated that service multi-endpoint-test in namespace services-3785 exposes endpoints map[pod1:[100] pod2:[101]]
  STEP: Checking if the Service forwards traffic to pods @ 08/24/23 11:35:40.015
  Aug 24 11:35:40.015: INFO: Creating new exec pod
  Aug 24 11:35:43.071: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1002171096 --namespace=services-3785 exec execpoddj4jh -- /bin/sh -x -c echo hostName | nc -v -t -w 2 multi-endpoint-test 80'
  Aug 24 11:35:43.302: INFO: stderr: "+ echo hostName\n+ nc -v -t -w 2 multi-endpoint-test 80\nConnection to multi-endpoint-test 80 port [tcp/http] succeeded!\n"
  Aug 24 11:35:43.302: INFO: stdout: "HTTP/1.1 400 Bad Request\r\nContent-Type: text/plain; charset=utf-8\r\nConnection: close\r\n\r\n400 Bad Request"
  Aug 24 11:35:43.302: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1002171096 --namespace=services-3785 exec execpoddj4jh -- /bin/sh -x -c echo hostName | nc -v -t -w 2 10.96.47.174 80'
  Aug 24 11:35:43.543: INFO: stderr: "+ echo hostName\n+ nc -v -t -w 2 10.96.47.174 80\nConnection to 10.96.47.174 80 port [tcp/http] succeeded!\n"
  Aug 24 11:35:43.543: INFO: stdout: "HTTP/1.1 400 Bad Request\r\nContent-Type: text/plain; charset=utf-8\r\nConnection: close\r\n\r\n400 Bad Request"
  Aug 24 11:35:43.543: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1002171096 --namespace=services-3785 exec execpoddj4jh -- /bin/sh -x -c echo hostName | nc -v -t -w 2 multi-endpoint-test 81'
  Aug 24 11:35:43.741: INFO: stderr: "+ echo hostName\n+ nc -v -t -w 2 multi-endpoint-test 81\nConnection to multi-endpoint-test 81 port [tcp/*] succeeded!\n"
  Aug 24 11:35:43.742: INFO: stdout: "HTTP/1.1 400 Bad Request\r\nContent-Type: text/plain; charset=utf-8\r\nConnection: close\r\n\r\n400 Bad Request"
  Aug 24 11:35:43.742: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1002171096 --namespace=services-3785 exec execpoddj4jh -- /bin/sh -x -c echo hostName | nc -v -t -w 2 10.96.47.174 81'
  Aug 24 11:35:43.997: INFO: stderr: "+ echo hostName\n+ nc -v -t -w 2 10.96.47.174 81\nConnection to 10.96.47.174 81 port [tcp/*] succeeded!\n"
  Aug 24 11:35:43.997: INFO: stdout: "HTTP/1.1 400 Bad Request\r\nContent-Type: text/plain; charset=utf-8\r\nConnection: close\r\n\r\n400 Bad Request"
  STEP: Deleting pod pod1 in namespace services-3785 @ 08/24/23 11:35:43.998
  STEP: waiting up to 3m0s for service multi-endpoint-test in namespace services-3785 to expose endpoints map[pod2:[101]] @ 08/24/23 11:35:44.03
  Aug 24 11:35:44.067: INFO: successfully validated that service multi-endpoint-test in namespace services-3785 exposes endpoints map[pod2:[101]]
  STEP: Deleting pod pod2 in namespace services-3785 @ 08/24/23 11:35:44.067
  STEP: waiting up to 3m0s for service multi-endpoint-test in namespace services-3785 to expose endpoints map[] @ 08/24/23 11:35:44.149
  Aug 24 11:35:44.172: INFO: successfully validated that service multi-endpoint-test in namespace services-3785 exposes endpoints map[]
  Aug 24 11:35:44.172: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "services-3785" for this suite. @ 08/24/23 11:35:44.215
• [13.008 seconds]
------------------------------
SSSSSS
------------------------------
[sig-node] Secrets should be consumable from pods in env vars [NodeConformance] [Conformance]
test/e2e/common/node/secrets.go:46
  STEP: Creating a kubernetes client @ 08/24/23 11:35:44.261
  Aug 24 11:35:44.261: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename secrets @ 08/24/23 11:35:44.262
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 11:35:44.293
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 11:35:44.299
  STEP: Creating secret with name secret-test-a3f175b1-1d3a-4eae-8470-d24346f049a5 @ 08/24/23 11:35:44.306
  STEP: Creating a pod to test consume secrets @ 08/24/23 11:35:44.319
  STEP: Saw pod success @ 08/24/23 11:35:48.375
  Aug 24 11:35:48.384: INFO: Trying to get logs from node scw-conformance-default-2af6d8b4c6264cc5b9e5e6 pod pod-secrets-13c04a66-e26b-466c-86d2-e8e20e4d5c44 container secret-env-test: <nil>
  STEP: delete the pod @ 08/24/23 11:35:48.403
  Aug 24 11:35:48.434: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "secrets-1588" for this suite. @ 08/24/23 11:35:48.444
• [4.200 seconds]
------------------------------
SSS
------------------------------
[sig-node] Pods Extended Pods Set QOS Class should be set on Pods with matching resource requests and limits for memory and cpu [Conformance]
test/e2e/node/pods.go:163
  STEP: Creating a kubernetes client @ 08/24/23 11:35:48.461
  Aug 24 11:35:48.462: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename pods @ 08/24/23 11:35:48.463
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 11:35:48.49
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 11:35:48.498
  STEP: creating the pod @ 08/24/23 11:35:48.505
  STEP: submitting the pod to kubernetes @ 08/24/23 11:35:48.505
  STEP: verifying QOS class is set on the pod @ 08/24/23 11:35:48.525
  Aug 24 11:35:48.535: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "pods-5275" for this suite. @ 08/24/23 11:35:48.55
• [0.104 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-auth] ServiceAccounts should mount an API token into pods  [Conformance]
test/e2e/auth/service_accounts.go:78
  STEP: Creating a kubernetes client @ 08/24/23 11:35:48.57
  Aug 24 11:35:48.570: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename svcaccounts @ 08/24/23 11:35:48.571
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 11:35:48.602
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 11:35:48.652
  STEP: reading a file in the container @ 08/24/23 11:35:52.722
  Aug 24 11:35:52.722: INFO: Running '/usr/local/bin/kubectl exec --namespace=svcaccounts-4441 pod-service-account-dfa94f7b-806c-4ac9-98b5-73030087dd32 -c=test -- cat /var/run/secrets/kubernetes.io/serviceaccount/token'
  STEP: reading a file in the container @ 08/24/23 11:35:52.995
  Aug 24 11:35:52.995: INFO: Running '/usr/local/bin/kubectl exec --namespace=svcaccounts-4441 pod-service-account-dfa94f7b-806c-4ac9-98b5-73030087dd32 -c=test -- cat /var/run/secrets/kubernetes.io/serviceaccount/ca.crt'
  STEP: reading a file in the container @ 08/24/23 11:35:53.24
  Aug 24 11:35:53.240: INFO: Running '/usr/local/bin/kubectl exec --namespace=svcaccounts-4441 pod-service-account-dfa94f7b-806c-4ac9-98b5-73030087dd32 -c=test -- cat /var/run/secrets/kubernetes.io/serviceaccount/namespace'
  Aug 24 11:35:53.511: INFO: Got root ca configmap in namespace "svcaccounts-4441"
  Aug 24 11:35:53.516: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "svcaccounts-4441" for this suite. @ 08/24/23 11:35:53.524
• [4.969 seconds]
------------------------------
[sig-storage] Secrets should be consumable from pods in volume [NodeConformance] [Conformance]
test/e2e/common/storage/secrets_volume.go:47
  STEP: Creating a kubernetes client @ 08/24/23 11:35:53.538
  Aug 24 11:35:53.538: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename secrets @ 08/24/23 11:35:53.539
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 11:35:53.57
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 11:35:53.576
  STEP: Creating secret with name secret-test-26599a15-1e9c-44b2-852c-0088b8fda864 @ 08/24/23 11:35:53.583
  STEP: Creating a pod to test consume secrets @ 08/24/23 11:35:53.591
  STEP: Saw pod success @ 08/24/23 11:35:57.687
  Aug 24 11:35:57.696: INFO: Trying to get logs from node scw-conformance-default-2af6d8b4c6264cc5b9e5e6 pod pod-secrets-76e36741-61c9-4269-879e-dddd41a54e44 container secret-volume-test: <nil>
  STEP: delete the pod @ 08/24/23 11:35:57.713
  Aug 24 11:35:57.747: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "secrets-8843" for this suite. @ 08/24/23 11:35:57.756
• [4.231 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-storage] Downward API volume should provide node allocatable (cpu) as default cpu limit if the limit is not set [NodeConformance] [Conformance]
test/e2e/common/storage/downwardapi_volume.go:250
  STEP: Creating a kubernetes client @ 08/24/23 11:35:57.771
  Aug 24 11:35:57.771: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename downward-api @ 08/24/23 11:35:57.772
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 11:35:57.804
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 11:35:57.81
  STEP: Creating a pod to test downward API volume plugin @ 08/24/23 11:35:57.816
  STEP: Saw pod success @ 08/24/23 11:36:02.069
  Aug 24 11:36:02.078: INFO: Trying to get logs from node scw-conformance-default-2af6d8b4c6264cc5b9e5e6 pod downwardapi-volume-c1f63912-73ae-44c3-8c57-cadd3c8b1de7 container client-container: <nil>
  STEP: delete the pod @ 08/24/23 11:36:02.094
  Aug 24 11:36:02.125: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "downward-api-7957" for this suite. @ 08/24/23 11:36:02.135
• [4.379 seconds]
------------------------------
SSSSSSSSSSS
------------------------------
[sig-api-machinery] FieldValidation should detect unknown and duplicate fields of a typed object [Conformance]
test/e2e/apimachinery/field_validation.go:64
  STEP: Creating a kubernetes client @ 08/24/23 11:36:02.15
  Aug 24 11:36:02.150: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename field-validation @ 08/24/23 11:36:02.151
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 11:36:02.181
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 11:36:02.191
  STEP: apply creating a deployment @ 08/24/23 11:36:02.198
  Aug 24 11:36:02.201: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "field-validation-8522" for this suite. @ 08/24/23 11:36:02.242
• [0.107 seconds]
------------------------------
SSSSSSSSSSSS
------------------------------
[sig-storage] Projected secret should be consumable from pods in volume with mappings and Item Mode set [LinuxOnly] [NodeConformance] [Conformance]
test/e2e/common/storage/projected_secret.go:88
  STEP: Creating a kubernetes client @ 08/24/23 11:36:02.258
  Aug 24 11:36:02.258: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename projected @ 08/24/23 11:36:02.259
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 11:36:02.288
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 11:36:02.294
  STEP: Creating projection with secret that has name projected-secret-test-map-644e7bf1-e02c-4e51-9889-4bb61e7c9621 @ 08/24/23 11:36:02.301
  STEP: Creating a pod to test consume secrets @ 08/24/23 11:36:02.311
  STEP: Saw pod success @ 08/24/23 11:36:06.356
  Aug 24 11:36:06.363: INFO: Trying to get logs from node scw-conformance-default-2af6d8b4c6264cc5b9e5e6 pod pod-projected-secrets-7f939529-cb88-488a-8f42-7c84f71dca88 container projected-secret-volume-test: <nil>
  STEP: delete the pod @ 08/24/23 11:36:06.38
  Aug 24 11:36:06.414: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "projected-4779" for this suite. @ 08/24/23 11:36:06.423
• [4.178 seconds]
------------------------------
SSSSSSSSSSSS
------------------------------
[sig-storage] Projected downwardAPI should provide container's cpu request [NodeConformance] [Conformance]
test/e2e/common/storage/projected_downwardapi.go:222
  STEP: Creating a kubernetes client @ 08/24/23 11:36:06.436
  Aug 24 11:36:06.436: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename projected @ 08/24/23 11:36:06.438
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 11:36:06.465
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 11:36:06.471
  STEP: Creating a pod to test downward API volume plugin @ 08/24/23 11:36:06.478
  STEP: Saw pod success @ 08/24/23 11:36:10.525
  Aug 24 11:36:10.533: INFO: Trying to get logs from node scw-conformance-default-2af6d8b4c6264cc5b9e5e6 pod downwardapi-volume-5c83dbcf-2cbb-4a07-98a5-53563c279316 container client-container: <nil>
  STEP: delete the pod @ 08/24/23 11:36:10.55
  Aug 24 11:36:10.586: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "projected-6793" for this suite. @ 08/24/23 11:36:10.595
• [4.172 seconds]
------------------------------
[sig-cli] Kubectl client Proxy server should support --unix-socket=/path  [Conformance]
test/e2e/kubectl/kubectl.go:1806
  STEP: Creating a kubernetes client @ 08/24/23 11:36:10.608
  Aug 24 11:36:10.608: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename kubectl @ 08/24/23 11:36:10.609
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 11:36:10.636
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 11:36:10.649
  STEP: Starting the proxy @ 08/24/23 11:36:10.655
  Aug 24 11:36:10.656: INFO: Asynchronously running '/usr/local/bin/kubectl kubectl --kubeconfig=/tmp/kubeconfig-1002171096 --namespace=kubectl-1195 proxy --unix-socket=/tmp/kubectl-proxy-unix1561852342/test'
  STEP: retrieving proxy /api/ output @ 08/24/23 11:36:10.72
  Aug 24 11:36:10.721: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "kubectl-1195" for this suite. @ 08/24/23 11:36:10.732
• [0.137 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-storage] Projected downwardAPI should provide container's memory request [NodeConformance] [Conformance]
test/e2e/common/storage/projected_downwardapi.go:236
  STEP: Creating a kubernetes client @ 08/24/23 11:36:10.746
  Aug 24 11:36:10.746: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename projected @ 08/24/23 11:36:10.747
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 11:36:10.779
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 11:36:10.786
  STEP: Creating a pod to test downward API volume plugin @ 08/24/23 11:36:10.792
  STEP: Saw pod success @ 08/24/23 11:36:14.842
  Aug 24 11:36:14.849: INFO: Trying to get logs from node scw-conformance-default-2af6d8b4c6264cc5b9e5e6 pod downwardapi-volume-2f1dd3de-d612-4949-88f6-73ff153ffdab container client-container: <nil>
  STEP: delete the pod @ 08/24/23 11:36:14.863
  Aug 24 11:36:14.894: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "projected-6082" for this suite. @ 08/24/23 11:36:14.903
• [4.170 seconds]
------------------------------
SSSSSS
------------------------------
[sig-api-machinery] Garbage collector should not delete dependents that have both valid owner and owner that's waiting for dependents to be deleted [Conformance]
test/e2e/apimachinery/garbage_collector.go:713
  STEP: Creating a kubernetes client @ 08/24/23 11:36:14.917
  Aug 24 11:36:14.917: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename gc @ 08/24/23 11:36:14.918
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 11:36:14.945
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 11:36:14.952
  STEP: create the rc1 @ 08/24/23 11:36:14.967
  STEP: create the rc2 @ 08/24/23 11:36:14.978
  STEP: set half of pods created by rc simpletest-rc-to-be-deleted to have rc simpletest-rc-to-stay as owner as well @ 08/24/23 11:36:21.058
  STEP: delete the rc simpletest-rc-to-be-deleted @ 08/24/23 11:36:25.949
  STEP: wait for the rc to be deleted @ 08/24/23 11:36:25.971
  Aug 24 11:36:31.262: INFO: 83 pods remaining
  Aug 24 11:36:31.262: INFO: 68 pods has nil DeletionTimestamp
  Aug 24 11:36:31.262: INFO: 
  Aug 24 11:36:36.000: INFO: 67 pods remaining
  Aug 24 11:36:36.000: INFO: 50 pods has nil DeletionTimestamp
  Aug 24 11:36:36.000: INFO: 
  STEP: Gathering metrics @ 08/24/23 11:36:41.002
  W0824 11:36:41.052580      22 metrics_grabber.go:152] Can't find kube-controller-manager pod. Grabbing metrics from kube-controller-manager is disabled.
  Aug 24 11:36:41.052: INFO: For apiserver_request_total:
  For apiserver_request_latency_seconds:
  For apiserver_init_events_total:
  For garbage_collector_attempt_to_delete_queue_latency:
  For garbage_collector_attempt_to_delete_work_duration:
  For garbage_collector_attempt_to_orphan_queue_latency:
  For garbage_collector_attempt_to_orphan_work_duration:
  For garbage_collector_dirty_processing_latency_microseconds:
  For garbage_collector_event_processing_latency_microseconds:
  For garbage_collector_graph_changes_queue_latency:
  For garbage_collector_graph_changes_work_duration:
  For garbage_collector_orphan_processing_latency_microseconds:
  For namespace_queue_latency:
  For namespace_queue_latency_sum:
  For namespace_queue_latency_count:
  For namespace_retries:
  For namespace_work_duration:
  For namespace_work_duration_sum:
  For namespace_work_duration_count:
  For function_duration_seconds:
  For errors_total:
  For evicted_pods_total:

  Aug 24 11:36:41.052: INFO: Deleting pod "simpletest-rc-to-be-deleted-2c2zj" in namespace "gc-2209"
  Aug 24 11:36:41.101: INFO: Deleting pod "simpletest-rc-to-be-deleted-2nwgg" in namespace "gc-2209"
  Aug 24 11:36:41.123: INFO: Deleting pod "simpletest-rc-to-be-deleted-2qfm7" in namespace "gc-2209"
  Aug 24 11:36:41.162: INFO: Deleting pod "simpletest-rc-to-be-deleted-4dbbs" in namespace "gc-2209"
  Aug 24 11:36:41.249: INFO: Deleting pod "simpletest-rc-to-be-deleted-4pghr" in namespace "gc-2209"
  Aug 24 11:36:41.269: INFO: Deleting pod "simpletest-rc-to-be-deleted-4vk6b" in namespace "gc-2209"
  Aug 24 11:36:41.371: INFO: Deleting pod "simpletest-rc-to-be-deleted-55vzt" in namespace "gc-2209"
  Aug 24 11:36:41.457: INFO: Deleting pod "simpletest-rc-to-be-deleted-56tcq" in namespace "gc-2209"
  Aug 24 11:36:41.549: INFO: Deleting pod "simpletest-rc-to-be-deleted-5bgl8" in namespace "gc-2209"
  Aug 24 11:36:41.576: INFO: Deleting pod "simpletest-rc-to-be-deleted-5bqm9" in namespace "gc-2209"
  Aug 24 11:36:41.671: INFO: Deleting pod "simpletest-rc-to-be-deleted-5gwlw" in namespace "gc-2209"
  Aug 24 11:36:41.775: INFO: Deleting pod "simpletest-rc-to-be-deleted-5mw9r" in namespace "gc-2209"
  Aug 24 11:36:41.874: INFO: Deleting pod "simpletest-rc-to-be-deleted-5n5sf" in namespace "gc-2209"
  Aug 24 11:36:41.978: INFO: Deleting pod "simpletest-rc-to-be-deleted-655p9" in namespace "gc-2209"
  Aug 24 11:36:42.068: INFO: Deleting pod "simpletest-rc-to-be-deleted-6ncr2" in namespace "gc-2209"
  Aug 24 11:36:42.160: INFO: Deleting pod "simpletest-rc-to-be-deleted-7sr8z" in namespace "gc-2209"
  Aug 24 11:36:42.264: INFO: Deleting pod "simpletest-rc-to-be-deleted-82zbt" in namespace "gc-2209"
  Aug 24 11:36:42.363: INFO: Deleting pod "simpletest-rc-to-be-deleted-842p4" in namespace "gc-2209"
  Aug 24 11:36:42.456: INFO: Deleting pod "simpletest-rc-to-be-deleted-8ltrt" in namespace "gc-2209"
  Aug 24 11:36:42.481: INFO: Deleting pod "simpletest-rc-to-be-deleted-8m7p7" in namespace "gc-2209"
  Aug 24 11:36:42.569: INFO: Deleting pod "simpletest-rc-to-be-deleted-8xspt" in namespace "gc-2209"
  Aug 24 11:36:42.660: INFO: Deleting pod "simpletest-rc-to-be-deleted-96wsc" in namespace "gc-2209"
  Aug 24 11:36:42.765: INFO: Deleting pod "simpletest-rc-to-be-deleted-9tw8w" in namespace "gc-2209"
  Aug 24 11:36:42.850: INFO: Deleting pod "simpletest-rc-to-be-deleted-b5qjh" in namespace "gc-2209"
  Aug 24 11:36:42.949: INFO: Deleting pod "simpletest-rc-to-be-deleted-bnfnc" in namespace "gc-2209"
  Aug 24 11:36:42.979: INFO: Deleting pod "simpletest-rc-to-be-deleted-c72sl" in namespace "gc-2209"
  Aug 24 11:36:43.067: INFO: Deleting pod "simpletest-rc-to-be-deleted-ck7ng" in namespace "gc-2209"
  Aug 24 11:36:43.349: INFO: Deleting pod "simpletest-rc-to-be-deleted-crl7g" in namespace "gc-2209"
  Aug 24 11:36:43.656: INFO: Deleting pod "simpletest-rc-to-be-deleted-cxs7b" in namespace "gc-2209"
  Aug 24 11:36:44.050: INFO: Deleting pod "simpletest-rc-to-be-deleted-d6dwp" in namespace "gc-2209"
  Aug 24 11:36:44.349: INFO: Deleting pod "simpletest-rc-to-be-deleted-dhwkp" in namespace "gc-2209"
  Aug 24 11:36:44.449: INFO: Deleting pod "simpletest-rc-to-be-deleted-dm6lj" in namespace "gc-2209"
  Aug 24 11:36:44.476: INFO: Deleting pod "simpletest-rc-to-be-deleted-fdgmq" in namespace "gc-2209"
  Aug 24 11:36:44.570: INFO: Deleting pod "simpletest-rc-to-be-deleted-fw4xq" in namespace "gc-2209"
  Aug 24 11:36:44.676: INFO: Deleting pod "simpletest-rc-to-be-deleted-g2vzf" in namespace "gc-2209"
  Aug 24 11:36:44.765: INFO: Deleting pod "simpletest-rc-to-be-deleted-gdf6p" in namespace "gc-2209"
  Aug 24 11:36:44.855: INFO: Deleting pod "simpletest-rc-to-be-deleted-gzp5j" in namespace "gc-2209"
  Aug 24 11:36:44.955: INFO: Deleting pod "simpletest-rc-to-be-deleted-gzpmq" in namespace "gc-2209"
  Aug 24 11:36:44.975: INFO: Deleting pod "simpletest-rc-to-be-deleted-h6mq7" in namespace "gc-2209"
  Aug 24 11:36:45.087: INFO: Deleting pod "simpletest-rc-to-be-deleted-hb7d2" in namespace "gc-2209"
  Aug 24 11:36:45.176: INFO: Deleting pod "simpletest-rc-to-be-deleted-hp88k" in namespace "gc-2209"
  Aug 24 11:36:45.349: INFO: Deleting pod "simpletest-rc-to-be-deleted-hwzwt" in namespace "gc-2209"
  Aug 24 11:36:45.377: INFO: Deleting pod "simpletest-rc-to-be-deleted-jn9zx" in namespace "gc-2209"
  Aug 24 11:36:45.475: INFO: Deleting pod "simpletest-rc-to-be-deleted-jwbm6" in namespace "gc-2209"
  Aug 24 11:36:45.570: INFO: Deleting pod "simpletest-rc-to-be-deleted-k9zcj" in namespace "gc-2209"
  Aug 24 11:36:45.668: INFO: Deleting pod "simpletest-rc-to-be-deleted-kjw88" in namespace "gc-2209"
  Aug 24 11:36:45.761: INFO: Deleting pod "simpletest-rc-to-be-deleted-kqznk" in namespace "gc-2209"
  Aug 24 11:36:45.856: INFO: Deleting pod "simpletest-rc-to-be-deleted-lcn9b" in namespace "gc-2209"
  Aug 24 11:36:45.955: INFO: Deleting pod "simpletest-rc-to-be-deleted-lgzpg" in namespace "gc-2209"
  Aug 24 11:36:46.049: INFO: Deleting pod "simpletest-rc-to-be-deleted-lm2xg" in namespace "gc-2209"
  Aug 24 11:36:46.149: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "gc-2209" for this suite. @ 08/24/23 11:36:46.158
• [31.253 seconds]
------------------------------
SS
------------------------------
[sig-node] InitContainer [NodeConformance] should invoke init containers on a RestartNever pod [Conformance]
test/e2e/common/node/init_container.go:178
  STEP: Creating a kubernetes client @ 08/24/23 11:36:46.17
  Aug 24 11:36:46.170: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename init-container @ 08/24/23 11:36:46.17
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 11:36:46.273
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 11:36:46.279
  STEP: creating the pod @ 08/24/23 11:36:46.35
  Aug 24 11:36:46.350: INFO: PodSpec: initContainers in spec.initContainers
  Aug 24 11:36:50.971: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "init-container-5266" for this suite. @ 08/24/23 11:36:50.985
• [4.830 seconds]
------------------------------
SSS
------------------------------
[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should honor timeout [Conformance]
test/e2e/apimachinery/webhook.go:371
  STEP: Creating a kubernetes client @ 08/24/23 11:36:51
  Aug 24 11:36:51.000: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename webhook @ 08/24/23 11:36:51.002
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 11:36:51.031
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 11:36:51.038
  STEP: Setting up server cert @ 08/24/23 11:36:51.087
  STEP: Create role binding to let webhook read extension-apiserver-authentication @ 08/24/23 11:36:51.449
  STEP: Deploying the webhook pod @ 08/24/23 11:36:51.478
  STEP: Wait for the deployment to be ready @ 08/24/23 11:36:51.506
  Aug 24 11:36:51.550: INFO: deployment "sample-webhook-deployment" doesn't have the required revision set
  STEP: Deploying the webhook service @ 08/24/23 11:36:53.575
  STEP: Verifying the service has paired with the endpoint @ 08/24/23 11:36:53.6
  Aug 24 11:36:54.601: INFO: Waiting for amount of service:e2e-test-webhook endpoints to be 1
  STEP: Setting timeout (1s) shorter than webhook latency (5s) @ 08/24/23 11:36:54.618
  STEP: Registering slow webhook via the AdmissionRegistration API @ 08/24/23 11:36:54.619
  STEP: Request fails when timeout (1s) is shorter than slow webhook latency (5s) @ 08/24/23 11:36:54.663
  STEP: Having no error when timeout is shorter than webhook latency and failure policy is ignore @ 08/24/23 11:36:55.688
  STEP: Registering slow webhook via the AdmissionRegistration API @ 08/24/23 11:36:55.688
  STEP: Having no error when timeout is longer than webhook latency @ 08/24/23 11:36:56.759
  STEP: Registering slow webhook via the AdmissionRegistration API @ 08/24/23 11:36:56.759
  STEP: Having no error when timeout is empty (defaulted to 10s in v1) @ 08/24/23 11:37:01.853
  STEP: Registering slow webhook via the AdmissionRegistration API @ 08/24/23 11:37:01.853
  Aug 24 11:37:06.919: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "webhook-8090" for this suite. @ 08/24/23 11:37:07.065
  STEP: Destroying namespace "webhook-markers-1957" for this suite. @ 08/24/23 11:37:07.078
• [16.149 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-apps] ReplicaSet Replace and Patch tests [Conformance]
test/e2e/apps/replica_set.go:154
  STEP: Creating a kubernetes client @ 08/24/23 11:37:07.151
  Aug 24 11:37:07.151: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename replicaset @ 08/24/23 11:37:07.151
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 11:37:07.182
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 11:37:07.188
  Aug 24 11:37:07.221: INFO: Pod name sample-pod: Found 0 pods out of 1
  Aug 24 11:37:12.230: INFO: Pod name sample-pod: Found 1 pods out of 1
  STEP: ensuring each pod is running @ 08/24/23 11:37:12.23
  STEP: Scaling up "test-rs" replicaset  @ 08/24/23 11:37:12.231
  Aug 24 11:37:12.261: INFO: Updating replica set "test-rs"
  STEP: patching the ReplicaSet @ 08/24/23 11:37:12.261
  Aug 24 11:37:12.283: INFO: observed ReplicaSet test-rs in namespace replicaset-1181 with ReadyReplicas 1, AvailableReplicas 1
  Aug 24 11:37:12.371: INFO: observed ReplicaSet test-rs in namespace replicaset-1181 with ReadyReplicas 1, AvailableReplicas 1
  Aug 24 11:37:12.458: INFO: observed ReplicaSet test-rs in namespace replicaset-1181 with ReadyReplicas 1, AvailableReplicas 1
  Aug 24 11:37:12.470: INFO: observed ReplicaSet test-rs in namespace replicaset-1181 with ReadyReplicas 1, AvailableReplicas 1
  Aug 24 11:37:13.403: INFO: observed ReplicaSet test-rs in namespace replicaset-1181 with ReadyReplicas 2, AvailableReplicas 2
  Aug 24 11:37:13.910: INFO: observed Replicaset test-rs in namespace replicaset-1181 with ReadyReplicas 3 found true
  Aug 24 11:37:13.910: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "replicaset-1181" for this suite. @ 08/24/23 11:37:13.92
• [6.784 seconds]
------------------------------
SS
------------------------------
[sig-storage] EmptyDir volumes should support (non-root,0644,tmpfs) [LinuxOnly] [NodeConformance] [Conformance]
test/e2e/common/storage/empty_dir.go:127
  STEP: Creating a kubernetes client @ 08/24/23 11:37:13.935
  Aug 24 11:37:13.935: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename emptydir @ 08/24/23 11:37:13.936
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 11:37:13.965
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 11:37:13.971
  STEP: Creating a pod to test emptydir 0644 on tmpfs @ 08/24/23 11:37:13.977
  STEP: Saw pod success @ 08/24/23 11:37:18.025
  Aug 24 11:37:18.034: INFO: Trying to get logs from node scw-conformance-default-2af6d8b4c6264cc5b9e5e6 pod pod-0c66bd9e-5e08-4ec4-991f-7e0388d4ff54 container test-container: <nil>
  STEP: delete the pod @ 08/24/23 11:37:18.052
  Aug 24 11:37:18.091: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "emptydir-5454" for this suite. @ 08/24/23 11:37:18.1
• [4.180 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-apps] Daemon set [Serial] should run and stop simple daemon [Conformance]
test/e2e/apps/daemon_set.go:177
  STEP: Creating a kubernetes client @ 08/24/23 11:37:18.119
  Aug 24 11:37:18.119: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename daemonsets @ 08/24/23 11:37:18.12
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 11:37:18.152
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 11:37:18.159
  STEP: Creating simple DaemonSet "daemon-set" @ 08/24/23 11:37:18.208
  STEP: Check that daemon pods launch on every node of the cluster. @ 08/24/23 11:37:18.22
  Aug 24 11:37:18.238: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 0
  Aug 24 11:37:18.238: INFO: Node scw-conformance-default-2af6d8b4c6264cc5b9e5e6 is running 0 daemon pod, expected 1
  Aug 24 11:37:19.264: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 0
  Aug 24 11:37:19.264: INFO: Node scw-conformance-default-2af6d8b4c6264cc5b9e5e6 is running 0 daemon pod, expected 1
  Aug 24 11:37:20.550: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 2
  Aug 24 11:37:20.550: INFO: Number of running nodes: 2, number of available pods: 2 in daemonset daemon-set
  STEP: Stop a daemon pod, check that the daemon pod is revived. @ 08/24/23 11:37:20.655
  Aug 24 11:37:20.765: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 1
  Aug 24 11:37:20.765: INFO: Node scw-conformance-default-ecf11ec729064adba7e270 is running 0 daemon pod, expected 1
  Aug 24 11:37:21.783: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 1
  Aug 24 11:37:21.784: INFO: Node scw-conformance-default-ecf11ec729064adba7e270 is running 0 daemon pod, expected 1
  Aug 24 11:37:22.786: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 2
  Aug 24 11:37:22.786: INFO: Number of running nodes: 2, number of available pods: 2 in daemonset daemon-set
  STEP: Deleting DaemonSet "daemon-set" @ 08/24/23 11:37:22.795
  STEP: deleting DaemonSet.extensions daemon-set in namespace daemonsets-2214, will wait for the garbage collector to delete the pods @ 08/24/23 11:37:22.795
  Aug 24 11:37:22.870: INFO: Deleting DaemonSet.extensions daemon-set took: 16.652077ms
  Aug 24 11:37:22.971: INFO: Terminating DaemonSet.extensions daemon-set pods took: 100.9613ms
  Aug 24 11:37:24.478: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 0
  Aug 24 11:37:24.478: INFO: Number of running nodes: 0, number of available pods: 0 in daemonset daemon-set
  Aug 24 11:37:24.487: INFO: daemonset: {"kind":"DaemonSetList","apiVersion":"apps/v1","metadata":{"resourceVersion":"3404865303"},"items":null}

  Aug 24 11:37:24.495: INFO: pods: {"kind":"PodList","apiVersion":"v1","metadata":{"resourceVersion":"3404865303"},"items":null}

  Aug 24 11:37:24.523: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "daemonsets-2214" for this suite. @ 08/24/23 11:37:24.532
• [6.428 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-api-machinery] CustomResourceDefinition resources [Privileged:ClusterAdmin] Simple CustomResourceDefinition listing custom resource definition objects works  [Conformance]
test/e2e/apimachinery/custom_resource_definition.go:85
  STEP: Creating a kubernetes client @ 08/24/23 11:37:24.548
  Aug 24 11:37:24.548: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename custom-resource-definition @ 08/24/23 11:37:24.549
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 11:37:24.581
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 11:37:24.587
  Aug 24 11:37:24.594: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  Aug 24 11:37:31.464: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "custom-resource-definition-6839" for this suite. @ 08/24/23 11:37:31.474
• [6.940 seconds]
------------------------------
SSSSSSSSSSSSSS
------------------------------
[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] patching/updating a validating webhook should work [Conformance]
test/e2e/apimachinery/webhook.go:403
  STEP: Creating a kubernetes client @ 08/24/23 11:37:31.49
  Aug 24 11:37:31.490: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename webhook @ 08/24/23 11:37:31.491
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 11:37:31.539
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 11:37:31.546
  STEP: Setting up server cert @ 08/24/23 11:37:31.612
  STEP: Create role binding to let webhook read extension-apiserver-authentication @ 08/24/23 11:37:32.139
  STEP: Deploying the webhook pod @ 08/24/23 11:37:32.157
  STEP: Wait for the deployment to be ready @ 08/24/23 11:37:32.188
  Aug 24 11:37:32.203: INFO: deployment "sample-webhook-deployment" doesn't have the required revision set
  STEP: Deploying the webhook service @ 08/24/23 11:37:34.227
  STEP: Verifying the service has paired with the endpoint @ 08/24/23 11:37:34.251
  Aug 24 11:37:35.251: INFO: Waiting for amount of service:e2e-test-webhook endpoints to be 1
  STEP: Creating a validating webhook configuration @ 08/24/23 11:37:35.268
  STEP: Creating a configMap that does not comply to the validation webhook rules @ 08/24/23 11:37:35.307
  STEP: Updating a validating webhook configuration's rules to not include the create operation @ 08/24/23 11:37:35.34
  STEP: Creating a configMap that does not comply to the validation webhook rules @ 08/24/23 11:37:35.364
  STEP: Patching a validating webhook configuration's rules to include the create operation @ 08/24/23 11:37:35.388
  STEP: Creating a configMap that does not comply to the validation webhook rules @ 08/24/23 11:37:35.401
  Aug 24 11:37:35.427: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "webhook-6041" for this suite. @ 08/24/23 11:37:35.555
  STEP: Destroying namespace "webhook-markers-3201" for this suite. @ 08/24/23 11:37:35.573
• [4.099 seconds]
------------------------------
SSSSS
------------------------------
[sig-storage] ConfigMap should be immutable if `immutable` field is set [Conformance]
test/e2e/common/storage/configmap_volume.go:504
  STEP: Creating a kubernetes client @ 08/24/23 11:37:35.589
  Aug 24 11:37:35.589: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename configmap @ 08/24/23 11:37:35.59
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 11:37:35.66
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 11:37:35.666
  Aug 24 11:37:35.810: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "configmap-6773" for this suite. @ 08/24/23 11:37:35.82
• [0.245 seconds]
------------------------------
SSSSSSSSSSSSSSS
------------------------------
[sig-network] HostPort validates that there is no conflict between pods with same hostPort but different hostIP and protocol [LinuxOnly] [Conformance]
test/e2e/network/hostport.go:63
  STEP: Creating a kubernetes client @ 08/24/23 11:37:35.834
  Aug 24 11:37:35.834: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename hostport @ 08/24/23 11:37:35.835
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 11:37:35.864
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 11:37:35.871
  STEP: Trying to create a pod(pod1) with hostport 54323 and hostIP 127.0.0.1 and expect scheduled @ 08/24/23 11:37:35.886
  STEP: Trying to create another pod(pod2) with hostport 54323 but hostIP 172.16.36.3 on the node which pod1 resides and expect scheduled @ 08/24/23 11:37:37.925
  STEP: Trying to create a third pod(pod3) with hostport 54323, hostIP 172.16.36.3 but use UDP protocol on the node which pod2 resides @ 08/24/23 11:37:39.959
  STEP: checking connectivity from pod e2e-host-exec to serverIP: 127.0.0.1, port: 54323 @ 08/24/23 11:37:44.027
  Aug 24 11:37:44.027: INFO: ExecWithOptions {Command:[/bin/sh -c curl -g --connect-timeout 5 --interface 172.16.36.3 http://127.0.0.1:54323/hostname] Namespace:hostport-3802 PodName:e2e-host-exec ContainerName:e2e-host-exec Stdin:<nil> CaptureStdout:true CaptureStderr:true PreserveWhitespace:false Quiet:false}
  Aug 24 11:37:44.027: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  Aug 24 11:37:44.028: INFO: ExecWithOptions: Clientset creation
  Aug 24 11:37:44.028: INFO: ExecWithOptions: execute(POST https://10.96.0.1:443/api/v1/namespaces/hostport-3802/pods/e2e-host-exec/exec?command=%2Fbin%2Fsh&command=-c&command=curl+-g+--connect-timeout+5+--interface+172.16.36.3+http%3A%2F%2F127.0.0.1%3A54323%2Fhostname&container=e2e-host-exec&container=e2e-host-exec&stderr=true&stdout=true)
  STEP: checking connectivity from pod e2e-host-exec to serverIP: 172.16.36.3, port: 54323 @ 08/24/23 11:37:44.162
  Aug 24 11:37:44.162: INFO: ExecWithOptions {Command:[/bin/sh -c curl -g --connect-timeout 5 http://172.16.36.3:54323/hostname] Namespace:hostport-3802 PodName:e2e-host-exec ContainerName:e2e-host-exec Stdin:<nil> CaptureStdout:true CaptureStderr:true PreserveWhitespace:false Quiet:false}
  Aug 24 11:37:44.162: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  Aug 24 11:37:44.163: INFO: ExecWithOptions: Clientset creation
  Aug 24 11:37:44.163: INFO: ExecWithOptions: execute(POST https://10.96.0.1:443/api/v1/namespaces/hostport-3802/pods/e2e-host-exec/exec?command=%2Fbin%2Fsh&command=-c&command=curl+-g+--connect-timeout+5+http%3A%2F%2F172.16.36.3%3A54323%2Fhostname&container=e2e-host-exec&container=e2e-host-exec&stderr=true&stdout=true)
  STEP: checking connectivity from pod e2e-host-exec to serverIP: 172.16.36.3, port: 54323 UDP @ 08/24/23 11:37:44.297
  Aug 24 11:37:44.297: INFO: ExecWithOptions {Command:[/bin/sh -c echo hostname | nc -u -w 5 172.16.36.3 54323] Namespace:hostport-3802 PodName:e2e-host-exec ContainerName:e2e-host-exec Stdin:<nil> CaptureStdout:true CaptureStderr:true PreserveWhitespace:false Quiet:false}
  Aug 24 11:37:44.297: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  Aug 24 11:37:44.297: INFO: ExecWithOptions: Clientset creation
  Aug 24 11:37:44.297: INFO: ExecWithOptions: execute(POST https://10.96.0.1:443/api/v1/namespaces/hostport-3802/pods/e2e-host-exec/exec?command=%2Fbin%2Fsh&command=-c&command=echo+hostname+%7C+nc+-u+-w+5+172.16.36.3+54323&container=e2e-host-exec&container=e2e-host-exec&stderr=true&stdout=true)
  Aug 24 11:37:50.105: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "hostport-3802" for this suite. @ 08/24/23 11:37:50.118
• [14.295 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should be able to deny attaching pod [Conformance]
test/e2e/apimachinery/webhook.go:210
  STEP: Creating a kubernetes client @ 08/24/23 11:37:50.133
  Aug 24 11:37:50.133: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename webhook @ 08/24/23 11:37:50.134
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 11:37:50.161
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 11:37:50.167
  STEP: Setting up server cert @ 08/24/23 11:37:50.21
  STEP: Create role binding to let webhook read extension-apiserver-authentication @ 08/24/23 11:37:50.551
  STEP: Deploying the webhook pod @ 08/24/23 11:37:50.561
  STEP: Wait for the deployment to be ready @ 08/24/23 11:37:50.584
  Aug 24 11:37:50.601: INFO: deployment "sample-webhook-deployment" doesn't have the required revision set
  STEP: Deploying the webhook service @ 08/24/23 11:37:52.629
  STEP: Verifying the service has paired with the endpoint @ 08/24/23 11:37:52.651
  Aug 24 11:37:53.651: INFO: Waiting for amount of service:e2e-test-webhook endpoints to be 1
  STEP: Registering the webhook via the AdmissionRegistration API @ 08/24/23 11:37:53.668
  STEP: create a pod @ 08/24/23 11:37:53.711
  STEP: 'kubectl attach' the pod, should be denied by the webhook @ 08/24/23 11:37:57.754
  Aug 24 11:37:57.754: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1002171096 --namespace=webhook-8921 attach --namespace=webhook-8921 to-be-attached-pod -i -c=container1'
  Aug 24 11:37:57.913: INFO: rc: 1
  Aug 24 11:37:57.913: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "webhook-8921" for this suite. @ 08/24/23 11:37:58.059
  STEP: Destroying namespace "webhook-markers-6967" for this suite. @ 08/24/23 11:37:58.073
• [7.953 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-apps] Deployment RecreateDeployment should delete old pods and create new ones [Conformance]
test/e2e/apps/deployment.go:113
  STEP: Creating a kubernetes client @ 08/24/23 11:37:58.087
  Aug 24 11:37:58.087: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename deployment @ 08/24/23 11:37:58.088
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 11:37:58.18
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 11:37:58.186
  Aug 24 11:37:58.193: INFO: Creating deployment "test-recreate-deployment"
  Aug 24 11:37:58.206: INFO: Waiting deployment "test-recreate-deployment" to be updated to revision 1
  Aug 24 11:37:58.219: INFO: deployment "test-recreate-deployment" doesn't have the required revision set
  Aug 24 11:38:00.237: INFO: Waiting deployment "test-recreate-deployment" to complete
  Aug 24 11:38:00.244: INFO: Triggering a new rollout for deployment "test-recreate-deployment"
  Aug 24 11:38:00.264: INFO: Updating deployment test-recreate-deployment
  Aug 24 11:38:00.264: INFO: Watching deployment "test-recreate-deployment" to verify that new pods will not run with olds pods
  Aug 24 11:38:00.558: INFO: Deployment "test-recreate-deployment":
  (v1.Deployment) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=24) "test-recreate-deployment",
      GenerateName: (string) "",
      Namespace: (string) (len=15) "deployment-8398",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "ca221a44-f5bc-4710-82cc-0bd1f3f15740",
      ResourceVersion: (string) (len=10) "3404867117",
      Generation: (int64) 2,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63828473878,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=1) {
        (string) (len=4) "name": (string) (len=12) "sample-pod-3"
      },
      Annotations: (map[string]string) (len=1) {
        (string) (len=33) "deployment.kubernetes.io/revision": (string) (len=1) "2"
      },
      OwnerReferences: ([]v1.OwnerReference) <nil>,
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "e2e.test",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828473880,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=570) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 6c 61 62 65 6c 73  22 3a 7b 22 2e 22 3a 7b  |f:labels":{".":{|
              00000020  7d 2c 22 66 3a 6e 61 6d  65 22 3a 7b 7d 7d 7d 2c  |},"f:name":{}}},|
              00000030  22 66 3a 73 70 65 63 22  3a 7b 22 66 3a 70 72 6f  |"f:spec":{"f:pro|
              00000040  67 72 65 73 73 44 65 61  64 6c 69 6e 65 53 65 63  |gressDeadlineSec|
              00000050  6f 6e 64 73 22 3a 7b 7d  2c 22 66 3a 72 65 70 6c  |onds":{},"f:repl|
              00000060  69 63 61 73 22 3a 7b 7d  2c 22 66 3a 72 65 76 69  |icas":{},"f:revi|
              00000070  73 69 6f 6e 48 69 73 74  6f 72 79 4c 69 6d 69 74  |sionHistoryLimit|
              00000080  22 3a 7b 7d 2c 22 66 3a  73 65 6c 65 63 74 6f 72  |":{},"f:selector|
              00000090  22 3a 7b 7d 2c 22 66 3a  73 74 72 61 74 65 67 79  |":{},"f:strategy|
              000000a0  22 3a 7b 22 66 3a 74 79  70 65 22 3a 7b 7d 7d 2c  |":{"f:type":{}},|
              000000b0  22 66 3a 74 65 6d 70 6c  61 74 65 22 3a 7b 22 66  |"f:template":{"f|
              000000c0  3a 6d 65 74 61 64 61 74  61 22 3a 7b 22 66 3a 6c  |:metadata":{"f:l|
              000000d0  61 62 65 6c 73 22 3a 7b  22 2e 22 3a 7b 7d 2c 22  |abels":{".":{},"|
              000000e0  66 3a 6e 61 6d 65 22 3a  7b 7d 7d 7d 2c 22 66 3a  |f:name":{}}},"f:|
              000000f0  73 70 65 63 22 3a 7b 22  66 3a 63 6f 6e 74 61 69  |spec":{"f:contai|
              00000100  6e 65 72 73 22 3a 7b 22  6b 3a 7b 5c 22 6e 61 6d  |ners":{"k:{\"nam|
              00000110  65 5c 22 3a 5c 22 68 74  74 70 64 5c 22 7d 22 3a  |e\":\"httpd\"}":|
              00000120  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 69 6d 61 67 65  |{".":{},"f:image|
              00000130  22 3a 7b 7d 2c 22 66 3a  69 6d 61 67 65 50 75 6c  |":{},"f:imagePul|
              00000140  6c 50 6f 6c 69 63 79 22  3a 7b 7d 2c 22 66 3a 6e  |lPolicy":{},"f:n|
              00000150  61 6d 65 22 3a 7b 7d 2c  22 66 3a 72 65 73 6f 75  |ame":{},"f:resou|
              00000160  72 63 65 73 22 3a 7b 7d  2c 22 66 3a 73 65 63 75  |rces":{},"f:secu|
              00000170  72 69 74 79 43 6f 6e 74  65 78 74 22 3a 7b 7d 2c  |rityContext":{},|
              00000180  22 66 3a 74 65 72 6d 69  6e 61 74 69 6f 6e 4d 65  |"f:terminationMe|
              00000190  73 73 61 67 65 50 61 74  68 22 3a 7b 7d 2c 22 66  |ssagePath":{},"f|
              000001a0  3a 74 65 72 6d 69 6e 61  74 69 6f 6e 4d 65 73 73  |:terminationMess|
              000001b0  61 67 65 50 6f 6c 69 63  79 22 3a 7b 7d 7d 7d 2c  |agePolicy":{}}},|
              000001c0  22 66 3a 64 6e 73 50 6f  6c 69 63 79 22 3a 7b 7d  |"f:dnsPolicy":{}|
              000001d0  2c 22 66 3a 72 65 73 74  61 72 74 50 6f 6c 69 63  |,"f:restartPolic|
              000001e0  79 22 3a 7b 7d 2c 22 66  3a 73 63 68 65 64 75 6c  |y":{},"f:schedul|
              000001f0  65 72 4e 61 6d 65 22 3a  7b 7d 2c 22 66 3a 73 65  |erName":{},"f:se|
              00000200  63 75 72 69 74 79 43 6f  6e 74 65 78 74 22 3a 7b  |curityContext":{|
              00000210  7d 2c 22 66 3a 74 65 72  6d 69 6e 61 74 69 6f 6e  |},"f:termination|
              00000220  47 72 61 63 65 50 65 72  69 6f 64 53 65 63 6f 6e  |GracePeriodSecon|
              00000230  64 73 22 3a 7b 7d 7d 7d  7d 7d                    |ds":{}}}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828473880,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=495) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 61 6e 6e 6f 74 61  74 69 6f 6e 73 22 3a 7b  |f:annotations":{|
              00000020  22 2e 22 3a 7b 7d 2c 22  66 3a 64 65 70 6c 6f 79  |".":{},"f:deploy|
              00000030  6d 65 6e 74 2e 6b 75 62  65 72 6e 65 74 65 73 2e  |ment.kubernetes.|
              00000040  69 6f 2f 72 65 76 69 73  69 6f 6e 22 3a 7b 7d 7d  |io/revision":{}}|
              00000050  7d 2c 22 66 3a 73 74 61  74 75 73 22 3a 7b 22 66  |},"f:status":{"f|
              00000060  3a 63 6f 6e 64 69 74 69  6f 6e 73 22 3a 7b 22 2e  |:conditions":{".|
              00000070  22 3a 7b 7d 2c 22 6b 3a  7b 5c 22 74 79 70 65 5c  |":{},"k:{\"type\|
              00000080  22 3a 5c 22 41 76 61 69  6c 61 62 6c 65 5c 22 7d  |":\"Available\"}|
              00000090  22 3a 7b 22 2e 22 3a 7b  7d 2c 22 66 3a 6c 61 73  |":{".":{},"f:las|
              000000a0  74 54 72 61 6e 73 69 74  69 6f 6e 54 69 6d 65 22  |tTransitionTime"|
              000000b0  3a 7b 7d 2c 22 66 3a 6c  61 73 74 55 70 64 61 74  |:{},"f:lastUpdat|
              000000c0  65 54 69 6d 65 22 3a 7b  7d 2c 22 66 3a 6d 65 73  |eTime":{},"f:mes|
              000000d0  73 61 67 65 22 3a 7b 7d  2c 22 66 3a 72 65 61 73  |sage":{},"f:reas|
              000000e0  6f 6e 22 3a 7b 7d 2c 22  66 3a 73 74 61 74 75 73  |on":{},"f:status|
              000000f0  22 3a 7b 7d 2c 22 66 3a  74 79 70 65 22 3a 7b 7d  |":{},"f:type":{}|
              00000100  7d 2c 22 6b 3a 7b 5c 22  74 79 70 65 5c 22 3a 5c  |},"k:{\"type\":\|
              00000110  22 50 72 6f 67 72 65 73  73 69 6e 67 5c 22 7d 22  |"Progressing\"}"|
              00000120  3a 7b 22 2e 22 3a 7b 7d  2c 22 66 3a 6c 61 73 74  |:{".":{},"f:last|
              00000130  54 72 61 6e 73 69 74 69  6f 6e 54 69 6d 65 22 3a  |TransitionTime":|
              00000140  7b 7d 2c 22 66 3a 6c 61  73 74 55 70 64 61 74 65  |{},"f:lastUpdate|
              00000150  54 69 6d 65 22 3a 7b 7d  2c 22 66 3a 6d 65 73 73  |Time":{},"f:mess|
              00000160  61 67 65 22 3a 7b 7d 2c  22 66 3a 72 65 61 73 6f  |age":{},"f:reaso|
              00000170  6e 22 3a 7b 7d 2c 22 66  3a 73 74 61 74 75 73 22  |n":{},"f:status"|
              00000180  3a 7b 7d 2c 22 66 3a 74  79 70 65 22 3a 7b 7d 7d  |:{},"f:type":{}}|
              00000190  7d 2c 22 66 3a 6f 62 73  65 72 76 65 64 47 65 6e  |},"f:observedGen|
              000001a0  65 72 61 74 69 6f 6e 22  3a 7b 7d 2c 22 66 3a 72  |eration":{},"f:r|
              000001b0  65 70 6c 69 63 61 73 22  3a 7b 7d 2c 22 66 3a 75  |eplicas":{},"f:u|
              000001c0  6e 61 76 61 69 6c 61 62  6c 65 52 65 70 6c 69 63  |navailableReplic|
              000001d0  61 73 22 3a 7b 7d 2c 22  66 3a 75 70 64 61 74 65  |as":{},"f:update|
              000001e0  64 52 65 70 6c 69 63 61  73 22 3a 7b 7d 7d 7d     |dReplicas":{}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.DeploymentSpec) {
      Replicas: (*int32)(1),
      Selector: (*v1.LabelSelector)({
        MatchLabels: (map[string]string) (len=1) {
          (string) (len=4) "name": (string) (len=12) "sample-pod-3"
        },
        MatchExpressions: ([]v1.LabelSelectorRequirement) <nil>
      }),
      Template: (v1.PodTemplateSpec) {
        ObjectMeta: (v1.ObjectMeta) {
          Name: (string) "",
          GenerateName: (string) "",
          Namespace: (string) "",
          SelfLink: (string) "",
          UID: (types.UID) "",
          ResourceVersion: (string) "",
          Generation: (int64) 0,
          CreationTimestamp: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          DeletionTimestamp: (*v1.Time)(<nil>),
          DeletionGracePeriodSeconds: (*int64)(<nil>),
          Labels: (map[string]string) (len=1) {
            (string) (len=4) "name": (string) (len=12) "sample-pod-3"
          },
          Annotations: (map[string]string) <nil>,
          OwnerReferences: ([]v1.OwnerReference) <nil>,
          Finalizers: ([]string) <nil>,
          ManagedFields: ([]v1.ManagedFieldsEntry) <nil>
        },
        Spec: (v1.PodSpec) {
          Volumes: ([]v1.Volume) <nil>,
          InitContainers: ([]v1.Container) <nil>,
          Containers: ([]v1.Container) (len=1) {
            (v1.Container) {
              Name: (string) (len=5) "httpd",
              Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
              Command: ([]string) <nil>,
              Args: ([]string) <nil>,
              WorkingDir: (string) "",
              Ports: ([]v1.ContainerPort) <nil>,
              EnvFrom: ([]v1.EnvFromSource) <nil>,
              Env: ([]v1.EnvVar) <nil>,
              Resources: (v1.ResourceRequirements) {
                Limits: (v1.ResourceList) <nil>,
                Requests: (v1.ResourceList) <nil>,
                Claims: ([]v1.ResourceClaim) <nil>
              },
              ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
              RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
              VolumeMounts: ([]v1.VolumeMount) <nil>,
              VolumeDevices: ([]v1.VolumeDevice) <nil>,
              LivenessProbe: (*v1.Probe)(<nil>),
              ReadinessProbe: (*v1.Probe)(<nil>),
              StartupProbe: (*v1.Probe)(<nil>),
              Lifecycle: (*v1.Lifecycle)(<nil>),
              TerminationMessagePath: (string) (len=20) "/dev/termination-log",
              TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
              ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
              SecurityContext: (*v1.SecurityContext)({
                Capabilities: (*v1.Capabilities)(<nil>),
                Privileged: (*bool)(<nil>),
                SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
                WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
                RunAsUser: (*int64)(<nil>),
                RunAsGroup: (*int64)(<nil>),
                RunAsNonRoot: (*bool)(<nil>),
                ReadOnlyRootFilesystem: (*bool)(<nil>),
                AllowPrivilegeEscalation: (*bool)(<nil>),
                ProcMount: (*v1.ProcMountType)(<nil>),
                SeccompProfile: (*v1.SeccompProfile)(<nil>)
              }),
              Stdin: (bool) false,
              StdinOnce: (bool) false,
              TTY: (bool) false
            }
          },
          EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
          RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
          TerminationGracePeriodSeconds: (*int64)(0),
          ActiveDeadlineSeconds: (*int64)(<nil>),
          DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
          NodeSelector: (map[string]string) <nil>,
          ServiceAccountName: (string) "",
          DeprecatedServiceAccount: (string) "",
          AutomountServiceAccountToken: (*bool)(<nil>),
          NodeName: (string) "",
          HostNetwork: (bool) false,
          HostPID: (bool) false,
          HostIPC: (bool) false,
          ShareProcessNamespace: (*bool)(<nil>),
          SecurityContext: (*v1.PodSecurityContext)({
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            SupplementalGroups: ([]int64) <nil>,
            FSGroup: (*int64)(<nil>),
            Sysctls: ([]v1.Sysctl) <nil>,
            FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
          Hostname: (string) "",
          Subdomain: (string) "",
          Affinity: (*v1.Affinity)(<nil>),
          SchedulerName: (string) (len=17) "default-scheduler",
          Tolerations: ([]v1.Toleration) <nil>,
          HostAliases: ([]v1.HostAlias) <nil>,
          PriorityClassName: (string) "",
          Priority: (*int32)(<nil>),
          DNSConfig: (*v1.PodDNSConfig)(<nil>),
          ReadinessGates: ([]v1.PodReadinessGate) <nil>,
          RuntimeClassName: (*string)(<nil>),
          EnableServiceLinks: (*bool)(<nil>),
          PreemptionPolicy: (*v1.PreemptionPolicy)(<nil>),
          Overhead: (v1.ResourceList) <nil>,
          TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
          SetHostnameAsFQDN: (*bool)(<nil>),
          OS: (*v1.PodOS)(<nil>),
          HostUsers: (*bool)(<nil>),
          SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
          ResourceClaims: ([]v1.PodResourceClaim) <nil>
        }
      },
      Strategy: (v1.DeploymentStrategy) {
        Type: (v1.DeploymentStrategyType) (len=8) "Recreate",
        RollingUpdate: (*v1.RollingUpdateDeployment)(<nil>)
      },
      MinReadySeconds: (int32) 0,
      RevisionHistoryLimit: (*int32)(10),
      Paused: (bool) false,
      ProgressDeadlineSeconds: (*int32)(600)
    },
    Status: (v1.DeploymentStatus) {
      ObservedGeneration: (int64) 2,
      Replicas: (int32) 1,
      UpdatedReplicas: (int32) 1,
      ReadyReplicas: (int32) 0,
      AvailableReplicas: (int32) 0,
      UnavailableReplicas: (int32) 1,
      Conditions: ([]v1.DeploymentCondition) (len=2) {
        (v1.DeploymentCondition) {
          Type: (v1.DeploymentConditionType) (len=9) "Available",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastUpdateTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828473880,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828473880,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=26) "MinimumReplicasUnavailable",
          Message: (string) (len=46) "Deployment does not have minimum availability."
        },
        (v1.DeploymentCondition) {
          Type: (v1.DeploymentConditionType) (len=11) "Progressing",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastUpdateTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828473880,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828473878,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=17) "ReplicaSetUpdated",
          Message: (string) (len=63) "ReplicaSet \"test-recreate-deployment-76fb77d45\" is progressing."
        }
      },
      CollisionCount: (*int32)(<nil>)
    }
  }


  Aug 24 11:38:00.567: INFO: New ReplicaSet "test-recreate-deployment-76fb77d45" of Deployment "test-recreate-deployment":
  (v1.ReplicaSet) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=34) "test-recreate-deployment-76fb77d45",
      GenerateName: (string) "",
      Namespace: (string) (len=15) "deployment-8398",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "72257439-11a8-4286-a4fa-a000358eb578",
      ResourceVersion: (string) (len=10) "3404867111",
      Generation: (int64) 1,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63828473880,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=12) "sample-pod-3",
        (string) (len=17) "pod-template-hash": (string) (len=9) "76fb77d45"
      },
      Annotations: (map[string]string) (len=3) {
        (string) (len=41) "deployment.kubernetes.io/desired-replicas": (string) (len=1) "1",
        (string) (len=37) "deployment.kubernetes.io/max-replicas": (string) (len=1) "1",
        (string) (len=33) "deployment.kubernetes.io/revision": (string) (len=1) "2"
      },
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "Deployment",
          Name: (string) (len=24) "test-recreate-deployment",
          UID: (types.UID) (len=36) "ca221a44-f5bc-4710-82cc-0bd1f3f15740",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828473880,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=781) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 61 6e 6e 6f 74 61  74 69 6f 6e 73 22 3a 7b  |f:annotations":{|
              00000020  22 2e 22 3a 7b 7d 2c 22  66 3a 64 65 70 6c 6f 79  |".":{},"f:deploy|
              00000030  6d 65 6e 74 2e 6b 75 62  65 72 6e 65 74 65 73 2e  |ment.kubernetes.|
              00000040  69 6f 2f 64 65 73 69 72  65 64 2d 72 65 70 6c 69  |io/desired-repli|
              00000050  63 61 73 22 3a 7b 7d 2c  22 66 3a 64 65 70 6c 6f  |cas":{},"f:deplo|
              00000060  79 6d 65 6e 74 2e 6b 75  62 65 72 6e 65 74 65 73  |yment.kubernetes|
              00000070  2e 69 6f 2f 6d 61 78 2d  72 65 70 6c 69 63 61 73  |.io/max-replicas|
              00000080  22 3a 7b 7d 2c 22 66 3a  64 65 70 6c 6f 79 6d 65  |":{},"f:deployme|
              00000090  6e 74 2e 6b 75 62 65 72  6e 65 74 65 73 2e 69 6f  |nt.kubernetes.io|
              000000a0  2f 72 65 76 69 73 69 6f  6e 22 3a 7b 7d 7d 2c 22  |/revision":{}},"|
              000000b0  66 3a 6c 61 62 65 6c 73  22 3a 7b 22 2e 22 3a 7b  |f:labels":{".":{|
              000000c0  7d 2c 22 66 3a 6e 61 6d  65 22 3a 7b 7d 2c 22 66  |},"f:name":{},"f|
              000000d0  3a 70 6f 64 2d 74 65 6d  70 6c 61 74 65 2d 68 61  |:pod-template-ha|
              000000e0  73 68 22 3a 7b 7d 7d 2c  22 66 3a 6f 77 6e 65 72  |sh":{}},"f:owner|
              000000f0  52 65 66 65 72 65 6e 63  65 73 22 3a 7b 22 2e 22  |References":{"."|
              00000100  3a 7b 7d 2c 22 6b 3a 7b  5c 22 75 69 64 5c 22 3a  |:{},"k:{\"uid\":|
              00000110  5c 22 63 61 32 32 31 61  34 34 2d 66 35 62 63 2d  |\"ca221a44-f5bc-|
              00000120  34 37 31 30 2d 38 32 63  63 2d 30 62 64 31 66 33  |4710-82cc-0bd1f3|
              00000130  66 31 35 37 34 30 5c 22  7d 22 3a 7b 7d 7d 7d 2c  |f15740\"}":{}}},|
              00000140  22 66 3a 73 70 65 63 22  3a 7b 22 66 3a 72 65 70  |"f:spec":{"f:rep|
              00000150  6c 69 63 61 73 22 3a 7b  7d 2c 22 66 3a 73 65 6c  |licas":{},"f:sel|
              00000160  65 63 74 6f 72 22 3a 7b  7d 2c 22 66 3a 74 65 6d  |ector":{},"f:tem|
              00000170  70 6c 61 74 65 22 3a 7b  22 66 3a 6d 65 74 61 64  |plate":{"f:metad|
              00000180  61 74 61 22 3a 7b 22 66  3a 6c 61 62 65 6c 73 22  |ata":{"f:labels"|
              00000190  3a 7b 22 2e 22 3a 7b 7d  2c 22 66 3a 6e 61 6d 65  |:{".":{},"f:name|
              000001a0  22 3a 7b 7d 2c 22 66 3a  70 6f 64 2d 74 65 6d 70  |":{},"f:pod-temp|
              000001b0  6c 61 74 65 2d 68 61 73  68 22 3a 7b 7d 7d 7d 2c  |late-hash":{}}},|
              000001c0  22 66 3a 73 70 65 63 22  3a 7b 22 66 3a 63 6f 6e  |"f:spec":{"f:con|
              000001d0  74 61 69 6e 65 72 73 22  3a 7b 22 6b 3a 7b 5c 22  |tainers":{"k:{\"|
              000001e0  6e 61 6d 65 5c 22 3a 5c  22 68 74 74 70 64 5c 22  |name\":\"httpd\"|
              000001f0  7d 22 3a 7b 22 2e 22 3a  7b 7d 2c 22 66 3a 69 6d  |}":{".":{},"f:im|
              00000200  61 67 65 22 3a 7b 7d 2c  22 66 3a 69 6d 61 67 65  |age":{},"f:image|
              00000210  50 75 6c 6c 50 6f 6c 69  63 79 22 3a 7b 7d 2c 22  |PullPolicy":{},"|
              00000220  66 3a 6e 61 6d 65 22 3a  7b 7d 2c 22 66 3a 72 65  |f:name":{},"f:re|
              00000230  73 6f 75 72 63 65 73 22  3a 7b 7d 2c 22 66 3a 73  |sources":{},"f:s|
              00000240  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              00000250  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000260  6e 4d 65 73 73 61 67 65  50 61 74 68 22 3a 7b 7d  |nMessagePath":{}|
              00000270  2c 22 66 3a 74 65 72 6d  69 6e 61 74 69 6f 6e 4d  |,"f:terminationM|
              00000280  65 73 73 61 67 65 50 6f  6c 69 63 79 22 3a 7b 7d  |essagePolicy":{}|
              00000290  7d 7d 2c 22 66 3a 64 6e  73 50 6f 6c 69 63 79 22  |}},"f:dnsPolicy"|
              000002a0  3a 7b 7d 2c 22 66 3a 72  65 73 74 61 72 74 50 6f  |:{},"f:restartPo|
              000002b0  6c 69 63 79 22 3a 7b 7d  2c 22 66 3a 73 63 68 65  |licy":{},"f:sche|
              000002c0  64 75 6c 65 72 4e 61 6d  65 22 3a 7b 7d 2c 22 66  |dulerName":{},"f|
              000002d0  3a 73 65 63 75 72 69 74  79 43 6f 6e 74 65 78 74  |:securityContext|
              000002e0  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              000002f0  69 6f 6e 47 72 61 63 65  50 65 72 69 6f 64 53 65  |ionGracePeriodSe|
              00000300  63 6f 6e 64 73 22 3a 7b  7d 7d 7d 7d 7d           |conds":{}}}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828473880,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=84) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  66 75 6c 6c 79 4c 61 62  65 6c 65 64 52 65 70 6c  |fullyLabeledRepl|
              00000020  69 63 61 73 22 3a 7b 7d  2c 22 66 3a 6f 62 73 65  |icas":{},"f:obse|
              00000030  72 76 65 64 47 65 6e 65  72 61 74 69 6f 6e 22 3a  |rvedGeneration":|
              00000040  7b 7d 2c 22 66 3a 72 65  70 6c 69 63 61 73 22 3a  |{},"f:replicas":|
              00000050  7b 7d 7d 7d                                       |{}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.ReplicaSetSpec) {
      Replicas: (*int32)(1),
      MinReadySeconds: (int32) 0,
      Selector: (*v1.LabelSelector)({
        MatchLabels: (map[string]string) (len=2) {
          (string) (len=17) "pod-template-hash": (string) (len=9) "76fb77d45",
          (string) (len=4) "name": (string) (len=12) "sample-pod-3"
        },
        MatchExpressions: ([]v1.LabelSelectorRequirement) <nil>
      }),
      Template: (v1.PodTemplateSpec) {
        ObjectMeta: (v1.ObjectMeta) {
          Name: (string) "",
          GenerateName: (string) "",
          Namespace: (string) "",
          SelfLink: (string) "",
          UID: (types.UID) "",
          ResourceVersion: (string) "",
          Generation: (int64) 0,
          CreationTimestamp: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          DeletionTimestamp: (*v1.Time)(<nil>),
          DeletionGracePeriodSeconds: (*int64)(<nil>),
          Labels: (map[string]string) (len=2) {
            (string) (len=4) "name": (string) (len=12) "sample-pod-3",
            (string) (len=17) "pod-template-hash": (string) (len=9) "76fb77d45"
          },
          Annotations: (map[string]string) <nil>,
          OwnerReferences: ([]v1.OwnerReference) <nil>,
          Finalizers: ([]string) <nil>,
          ManagedFields: ([]v1.ManagedFieldsEntry) <nil>
        },
        Spec: (v1.PodSpec) {
          Volumes: ([]v1.Volume) <nil>,
          InitContainers: ([]v1.Container) <nil>,
          Containers: ([]v1.Container) (len=1) {
            (v1.Container) {
              Name: (string) (len=5) "httpd",
              Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
              Command: ([]string) <nil>,
              Args: ([]string) <nil>,
              WorkingDir: (string) "",
              Ports: ([]v1.ContainerPort) <nil>,
              EnvFrom: ([]v1.EnvFromSource) <nil>,
              Env: ([]v1.EnvVar) <nil>,
              Resources: (v1.ResourceRequirements) {
                Limits: (v1.ResourceList) <nil>,
                Requests: (v1.ResourceList) <nil>,
                Claims: ([]v1.ResourceClaim) <nil>
              },
              ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
              RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
              VolumeMounts: ([]v1.VolumeMount) <nil>,
              VolumeDevices: ([]v1.VolumeDevice) <nil>,
              LivenessProbe: (*v1.Probe)(<nil>),
              ReadinessProbe: (*v1.Probe)(<nil>),
              StartupProbe: (*v1.Probe)(<nil>),
              Lifecycle: (*v1.Lifecycle)(<nil>),
              TerminationMessagePath: (string) (len=20) "/dev/termination-log",
              TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
              ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
              SecurityContext: (*v1.SecurityContext)({
                Capabilities: (*v1.Capabilities)(<nil>),
                Privileged: (*bool)(<nil>),
                SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
                WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
                RunAsUser: (*int64)(<nil>),
                RunAsGroup: (*int64)(<nil>),
                RunAsNonRoot: (*bool)(<nil>),
                ReadOnlyRootFilesystem: (*bool)(<nil>),
                AllowPrivilegeEscalation: (*bool)(<nil>),
                ProcMount: (*v1.ProcMountType)(<nil>),
                SeccompProfile: (*v1.SeccompProfile)(<nil>)
              }),
              Stdin: (bool) false,
              StdinOnce: (bool) false,
              TTY: (bool) false
            }
          },
          EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
          RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
          TerminationGracePeriodSeconds: (*int64)(0),
          ActiveDeadlineSeconds: (*int64)(<nil>),
          DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
          NodeSelector: (map[string]string) <nil>,
          ServiceAccountName: (string) "",
          DeprecatedServiceAccount: (string) "",
          AutomountServiceAccountToken: (*bool)(<nil>),
          NodeName: (string) "",
          HostNetwork: (bool) false,
          HostPID: (bool) false,
          HostIPC: (bool) false,
          ShareProcessNamespace: (*bool)(<nil>),
          SecurityContext: (*v1.PodSecurityContext)({
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            SupplementalGroups: ([]int64) <nil>,
            FSGroup: (*int64)(<nil>),
            Sysctls: ([]v1.Sysctl) <nil>,
            FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
          Hostname: (string) "",
          Subdomain: (string) "",
          Affinity: (*v1.Affinity)(<nil>),
          SchedulerName: (string) (len=17) "default-scheduler",
          Tolerations: ([]v1.Toleration) <nil>,
          HostAliases: ([]v1.HostAlias) <nil>,
          PriorityClassName: (string) "",
          Priority: (*int32)(<nil>),
          DNSConfig: (*v1.PodDNSConfig)(<nil>),
          ReadinessGates: ([]v1.PodReadinessGate) <nil>,
          RuntimeClassName: (*string)(<nil>),
          EnableServiceLinks: (*bool)(<nil>),
          PreemptionPolicy: (*v1.PreemptionPolicy)(<nil>),
          Overhead: (v1.ResourceList) <nil>,
          TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
          SetHostnameAsFQDN: (*bool)(<nil>),
          OS: (*v1.PodOS)(<nil>),
          HostUsers: (*bool)(<nil>),
          SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
          ResourceClaims: ([]v1.PodResourceClaim) <nil>
        }
      }
    },
    Status: (v1.ReplicaSetStatus) {
      Replicas: (int32) 1,
      FullyLabeledReplicas: (int32) 1,
      ReadyReplicas: (int32) 0,
      AvailableReplicas: (int32) 0,
      ObservedGeneration: (int64) 1,
      Conditions: ([]v1.ReplicaSetCondition) <nil>
    }
  }

  Aug 24 11:38:00.567: INFO: All old ReplicaSets of Deployment "test-recreate-deployment":
  Aug 24 11:38:00.567: INFO: (v1.ReplicaSet) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=34) "test-recreate-deployment-dd4bc9d6d",
      GenerateName: (string) "",
      Namespace: (string) (len=15) "deployment-8398",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "63711082-ede1-43aa-bd18-8605e644d187",
      ResourceVersion: (string) (len=10) "3404867104",
      Generation: (int64) 2,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63828473878,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=12) "sample-pod-3",
        (string) (len=17) "pod-template-hash": (string) (len=9) "dd4bc9d6d"
      },
      Annotations: (map[string]string) (len=3) {
        (string) (len=41) "deployment.kubernetes.io/desired-replicas": (string) (len=1) "1",
        (string) (len=37) "deployment.kubernetes.io/max-replicas": (string) (len=1) "1",
        (string) (len=33) "deployment.kubernetes.io/revision": (string) (len=1) "1"
      },
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "Deployment",
          Name: (string) (len=24) "test-recreate-deployment",
          UID: (types.UID) (len=36) "ca221a44-f5bc-4710-82cc-0bd1f3f15740",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828473880,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=783) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 61 6e 6e 6f 74 61  74 69 6f 6e 73 22 3a 7b  |f:annotations":{|
              00000020  22 2e 22 3a 7b 7d 2c 22  66 3a 64 65 70 6c 6f 79  |".":{},"f:deploy|
              00000030  6d 65 6e 74 2e 6b 75 62  65 72 6e 65 74 65 73 2e  |ment.kubernetes.|
              00000040  69 6f 2f 64 65 73 69 72  65 64 2d 72 65 70 6c 69  |io/desired-repli|
              00000050  63 61 73 22 3a 7b 7d 2c  22 66 3a 64 65 70 6c 6f  |cas":{},"f:deplo|
              00000060  79 6d 65 6e 74 2e 6b 75  62 65 72 6e 65 74 65 73  |yment.kubernetes|
              00000070  2e 69 6f 2f 6d 61 78 2d  72 65 70 6c 69 63 61 73  |.io/max-replicas|
              00000080  22 3a 7b 7d 2c 22 66 3a  64 65 70 6c 6f 79 6d 65  |":{},"f:deployme|
              00000090  6e 74 2e 6b 75 62 65 72  6e 65 74 65 73 2e 69 6f  |nt.kubernetes.io|
              000000a0  2f 72 65 76 69 73 69 6f  6e 22 3a 7b 7d 7d 2c 22  |/revision":{}},"|
              000000b0  66 3a 6c 61 62 65 6c 73  22 3a 7b 22 2e 22 3a 7b  |f:labels":{".":{|
              000000c0  7d 2c 22 66 3a 6e 61 6d  65 22 3a 7b 7d 2c 22 66  |},"f:name":{},"f|
              000000d0  3a 70 6f 64 2d 74 65 6d  70 6c 61 74 65 2d 68 61  |:pod-template-ha|
              000000e0  73 68 22 3a 7b 7d 7d 2c  22 66 3a 6f 77 6e 65 72  |sh":{}},"f:owner|
              000000f0  52 65 66 65 72 65 6e 63  65 73 22 3a 7b 22 2e 22  |References":{"."|
              00000100  3a 7b 7d 2c 22 6b 3a 7b  5c 22 75 69 64 5c 22 3a  |:{},"k:{\"uid\":|
              00000110  5c 22 63 61 32 32 31 61  34 34 2d 66 35 62 63 2d  |\"ca221a44-f5bc-|
              00000120  34 37 31 30 2d 38 32 63  63 2d 30 62 64 31 66 33  |4710-82cc-0bd1f3|
              00000130  66 31 35 37 34 30 5c 22  7d 22 3a 7b 7d 7d 7d 2c  |f15740\"}":{}}},|
              00000140  22 66 3a 73 70 65 63 22  3a 7b 22 66 3a 72 65 70  |"f:spec":{"f:rep|
              00000150  6c 69 63 61 73 22 3a 7b  7d 2c 22 66 3a 73 65 6c  |licas":{},"f:sel|
              00000160  65 63 74 6f 72 22 3a 7b  7d 2c 22 66 3a 74 65 6d  |ector":{},"f:tem|
              00000170  70 6c 61 74 65 22 3a 7b  22 66 3a 6d 65 74 61 64  |plate":{"f:metad|
              00000180  61 74 61 22 3a 7b 22 66  3a 6c 61 62 65 6c 73 22  |ata":{"f:labels"|
              00000190  3a 7b 22 2e 22 3a 7b 7d  2c 22 66 3a 6e 61 6d 65  |:{".":{},"f:name|
              000001a0  22 3a 7b 7d 2c 22 66 3a  70 6f 64 2d 74 65 6d 70  |":{},"f:pod-temp|
              000001b0  6c 61 74 65 2d 68 61 73  68 22 3a 7b 7d 7d 7d 2c  |late-hash":{}}},|
              000001c0  22 66 3a 73 70 65 63 22  3a 7b 22 66 3a 63 6f 6e  |"f:spec":{"f:con|
              000001d0  74 61 69 6e 65 72 73 22  3a 7b 22 6b 3a 7b 5c 22  |tainers":{"k:{\"|
              000001e0  6e 61 6d 65 5c 22 3a 5c  22 61 67 6e 68 6f 73 74  |name\":\"agnhost|
              000001f0  5c 22 7d 22 3a 7b 22 2e  22 3a 7b 7d 2c 22 66 3a  |\"}":{".":{},"f:|
              00000200  69 6d 61 67 65 22 3a 7b  7d 2c 22 66 3a 69 6d 61  |image":{},"f:ima|
              00000210  67 65 50 75 6c 6c 50 6f  6c 69 63 79 22 3a 7b 7d  |gePullPolicy":{}|
              00000220  2c 22 66 3a 6e 61 6d 65  22 3a 7b 7d 2c 22 66 3a  |,"f:name":{},"f:|
              00000230  72 65 73 6f 75 72 63 65  73 22 3a 7b 7d 2c 22 66  |resources":{},"f|
              00000240  3a 73 65 63 75 72 69 74  79 43 6f 6e 74 65 78 74  |:securityContext|
              00000250  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000260  69 6f 6e 4d 65 73 73 61  67 65 50 61 74 68 22 3a  |ionMessagePath":|
              00000270  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000280  6e 4d 65 73 73 61 67 65  50 6f 6c 69 63 79 22 3a  |nMessagePolicy":|
              00000290  7b 7d 7d 7d 2c 22 66 3a  64 6e 73 50 6f 6c 69 63  |{}}},"f:dnsPolic|
              000002a0  79 22 3a 7b 7d 2c 22 66  3a 72 65 73 74 61 72 74  |y":{},"f:restart|
              000002b0  50 6f 6c 69 63 79 22 3a  7b 7d 2c 22 66 3a 73 63  |Policy":{},"f:sc|
              000002c0  68 65 64 75 6c 65 72 4e  61 6d 65 22 3a 7b 7d 2c  |hedulerName":{},|
              000002d0  22 66 3a 73 65 63 75 72  69 74 79 43 6f 6e 74 65  |"f:securityConte|
              000002e0  78 74 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |xt":{},"f:termin|
              000002f0  61 74 69 6f 6e 47 72 61  63 65 50 65 72 69 6f 64  |ationGracePeriod|
              00000300  53 65 63 6f 6e 64 73 22  3a 7b 7d 7d 7d 7d 7d     |Seconds":{}}}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828473880,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=56) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  6f 62 73 65 72 76 65 64  47 65 6e 65 72 61 74 69  |observedGenerati|
              00000020  6f 6e 22 3a 7b 7d 2c 22  66 3a 72 65 70 6c 69 63  |on":{},"f:replic|
              00000030  61 73 22 3a 7b 7d 7d 7d                           |as":{}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.ReplicaSetSpec) {
      Replicas: (*int32)(0),
      MinReadySeconds: (int32) 0,
      Selector: (*v1.LabelSelector)({
        MatchLabels: (map[string]string) (len=2) {
          (string) (len=4) "name": (string) (len=12) "sample-pod-3",
          (string) (len=17) "pod-template-hash": (string) (len=9) "dd4bc9d6d"
        },
        MatchExpressions: ([]v1.LabelSelectorRequirement) <nil>
      }),
      Template: (v1.PodTemplateSpec) {
        ObjectMeta: (v1.ObjectMeta) {
          Name: (string) "",
          GenerateName: (string) "",
          Namespace: (string) "",
          SelfLink: (string) "",
          UID: (types.UID) "",
          ResourceVersion: (string) "",
          Generation: (int64) 0,
          CreationTimestamp: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          DeletionTimestamp: (*v1.Time)(<nil>),
          DeletionGracePeriodSeconds: (*int64)(<nil>),
          Labels: (map[string]string) (len=2) {
            (string) (len=4) "name": (string) (len=12) "sample-pod-3",
            (string) (len=17) "pod-template-hash": (string) (len=9) "dd4bc9d6d"
          },
          Annotations: (map[string]string) <nil>,
          OwnerReferences: ([]v1.OwnerReference) <nil>,
          Finalizers: ([]string) <nil>,
          ManagedFields: ([]v1.ManagedFieldsEntry) <nil>
        },
        Spec: (v1.PodSpec) {
          Volumes: ([]v1.Volume) <nil>,
          InitContainers: ([]v1.Container) <nil>,
          Containers: ([]v1.Container) (len=1) {
            (v1.Container) {
              Name: (string) (len=7) "agnhost",
              Image: (string) (len=44) "registry.k8s.io/e2e-test-images/agnhost:2.45",
              Command: ([]string) <nil>,
              Args: ([]string) <nil>,
              WorkingDir: (string) "",
              Ports: ([]v1.ContainerPort) <nil>,
              EnvFrom: ([]v1.EnvFromSource) <nil>,
              Env: ([]v1.EnvVar) <nil>,
              Resources: (v1.ResourceRequirements) {
                Limits: (v1.ResourceList) <nil>,
                Requests: (v1.ResourceList) <nil>,
                Claims: ([]v1.ResourceClaim) <nil>
              },
              ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
              RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
              VolumeMounts: ([]v1.VolumeMount) <nil>,
              VolumeDevices: ([]v1.VolumeDevice) <nil>,
              LivenessProbe: (*v1.Probe)(<nil>),
              ReadinessProbe: (*v1.Probe)(<nil>),
              StartupProbe: (*v1.Probe)(<nil>),
              Lifecycle: (*v1.Lifecycle)(<nil>),
              TerminationMessagePath: (string) (len=20) "/dev/termination-log",
              TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
              ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
              SecurityContext: (*v1.SecurityContext)({
                Capabilities: (*v1.Capabilities)(<nil>),
                Privileged: (*bool)(<nil>),
                SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
                WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
                RunAsUser: (*int64)(<nil>),
                RunAsGroup: (*int64)(<nil>),
                RunAsNonRoot: (*bool)(<nil>),
                ReadOnlyRootFilesystem: (*bool)(<nil>),
                AllowPrivilegeEscalation: (*bool)(<nil>),
                ProcMount: (*v1.ProcMountType)(<nil>),
                SeccompProfile: (*v1.SeccompProfile)(<nil>)
              }),
              Stdin: (bool) false,
              StdinOnce: (bool) false,
              TTY: (bool) false
            }
          },
          EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
          RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
          TerminationGracePeriodSeconds: (*int64)(0),
          ActiveDeadlineSeconds: (*int64)(<nil>),
          DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
          NodeSelector: (map[string]string) <nil>,
          ServiceAccountName: (string) "",
          DeprecatedServiceAccount: (string) "",
          AutomountServiceAccountToken: (*bool)(<nil>),
          NodeName: (string) "",
          HostNetwork: (bool) false,
          HostPID: (bool) false,
          HostIPC: (bool) false,
          ShareProcessNamespace: (*bool)(<nil>),
          SecurityContext: (*v1.PodSecurityContext)({
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            SupplementalGroups: ([]int64) <nil>,
            FSGroup: (*int64)(<nil>),
            Sysctls: ([]v1.Sysctl) <nil>,
            FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
          Hostname: (string) "",
          Subdomain: (string) "",
          Affinity: (*v1.Affinity)(<nil>),
          SchedulerName: (string) (len=17) "default-scheduler",
          Tolerations: ([]v1.Toleration) <nil>,
          HostAliases: ([]v1.HostAlias) <nil>,
          PriorityClassName: (string) "",
          Priority: (*int32)(<nil>),
          DNSConfig: (*v1.PodDNSConfig)(<nil>),
          ReadinessGates: ([]v1.PodReadinessGate) <nil>,
          RuntimeClassName: (*string)(<nil>),
          EnableServiceLinks: (*bool)(<nil>),
          PreemptionPolicy: (*v1.PreemptionPolicy)(<nil>),
          Overhead: (v1.ResourceList) <nil>,
          TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
          SetHostnameAsFQDN: (*bool)(<nil>),
          OS: (*v1.PodOS)(<nil>),
          HostUsers: (*bool)(<nil>),
          SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
          ResourceClaims: ([]v1.PodResourceClaim) <nil>
        }
      }
    },
    Status: (v1.ReplicaSetStatus) {
      Replicas: (int32) 0,
      FullyLabeledReplicas: (int32) 0,
      ReadyReplicas: (int32) 0,
      AvailableReplicas: (int32) 0,
      ObservedGeneration: (int64) 2,
      Conditions: ([]v1.ReplicaSetCondition) <nil>
    }
  }

  Aug 24 11:38:00.576: INFO: Pod "test-recreate-deployment-76fb77d45-2j8tj" is not available:
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=40) "test-recreate-deployment-76fb77d45-2j8tj",
      GenerateName: (string) (len=35) "test-recreate-deployment-76fb77d45-",
      Namespace: (string) (len=15) "deployment-8398",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "ffd1da22-5465-46a2-9ee0-109bcff74c1e",
      ResourceVersion: (string) (len=10) "3404867114",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63828473880,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=17) "pod-template-hash": (string) (len=9) "76fb77d45",
        (string) (len=4) "name": (string) (len=12) "sample-pod-3"
      },
      Annotations: (map[string]string) <nil>,
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=34) "test-recreate-deployment-76fb77d45",
          UID: (types.UID) (len=36) "72257439-11a8-4286-a4fa-a000358eb578",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828473880,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=537) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |.":{},"f:name":{|
              00000040  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              00000050  65 2d 68 61 73 68 22 3a  7b 7d 7d 2c 22 66 3a 6f  |e-hash":{}},"f:o|
              00000060  77 6e 65 72 52 65 66 65  72 65 6e 63 65 73 22 3a  |wnerReferences":|
              00000070  7b 22 2e 22 3a 7b 7d 2c  22 6b 3a 7b 5c 22 75 69  |{".":{},"k:{\"ui|
              00000080  64 5c 22 3a 5c 22 37 32  32 35 37 34 33 39 2d 31  |d\":\"72257439-1|
              00000090  31 61 38 2d 34 32 38 36  2d 61 34 66 61 2d 61 30  |1a8-4286-a4fa-a0|
              000000a0  30 30 33 35 38 65 62 35  37 38 5c 22 7d 22 3a 7b  |00358eb578\"}":{|
              000000b0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000000c0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              000000d0  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 68 74 74  |:{\"name\":\"htt|
              000000e0  70 64 5c 22 7d 22 3a 7b  22 2e 22 3a 7b 7d 2c 22  |pd\"}":{".":{},"|
              000000f0  66 3a 69 6d 61 67 65 22  3a 7b 7d 2c 22 66 3a 69  |f:image":{},"f:i|
              00000100  6d 61 67 65 50 75 6c 6c  50 6f 6c 69 63 79 22 3a  |magePullPolicy":|
              00000110  7b 7d 2c 22 66 3a 6e 61  6d 65 22 3a 7b 7d 2c 22  |{},"f:name":{},"|
              00000120  66 3a 72 65 73 6f 75 72  63 65 73 22 3a 7b 7d 2c  |f:resources":{},|
              00000130  22 66 3a 73 65 63 75 72  69 74 79 43 6f 6e 74 65  |"f:securityConte|
              00000140  78 74 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |xt":{},"f:termin|
              00000150  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 61 74 68  |ationMessagePath|
              00000160  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000170  69 6f 6e 4d 65 73 73 61  67 65 50 6f 6c 69 63 79  |ionMessagePolicy|
              00000180  22 3a 7b 7d 7d 7d 2c 22  66 3a 64 6e 73 50 6f 6c  |":{}}},"f:dnsPol|
              00000190  69 63 79 22 3a 7b 7d 2c  22 66 3a 65 6e 61 62 6c  |icy":{},"f:enabl|
              000001a0  65 53 65 72 76 69 63 65  4c 69 6e 6b 73 22 3a 7b  |eServiceLinks":{|
              000001b0  7d 2c 22 66 3a 72 65 73  74 61 72 74 50 6f 6c 69  |},"f:restartPoli|
              000001c0  63 79 22 3a 7b 7d 2c 22  66 3a 73 63 68 65 64 75  |cy":{},"f:schedu|
              000001d0  6c 65 72 4e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 73  |lerName":{},"f:s|
              000001e0  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              000001f0  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000200  6e 47 72 61 63 65 50 65  72 69 6f 64 53 65 63 6f  |nGracePeriodSeco|
              00000210  6e 64 73 22 3a 7b 7d 7d  7d                       |nds":{}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=7) "kubelet",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828473880,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=482) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  63 6f 6e 64 69 74 69 6f  6e 73 22 3a 7b 22 6b 3a  |conditions":{"k:|
              00000020  7b 5c 22 74 79 70 65 5c  22 3a 5c 22 43 6f 6e 74  |{\"type\":\"Cont|
              00000030  61 69 6e 65 72 73 52 65  61 64 79 5c 22 7d 22 3a  |ainersReady\"}":|
              00000040  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000050  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000060  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000070  6d 65 22 3a 7b 7d 2c 22  66 3a 6d 65 73 73 61 67  |me":{},"f:messag|
              00000080  65 22 3a 7b 7d 2c 22 66  3a 72 65 61 73 6f 6e 22  |e":{},"f:reason"|
              00000090  3a 7b 7d 2c 22 66 3a 73  74 61 74 75 73 22 3a 7b  |:{},"f:status":{|
              000000a0  7d 2c 22 66 3a 74 79 70  65 22 3a 7b 7d 7d 2c 22  |},"f:type":{}},"|
              000000b0  6b 3a 7b 5c 22 74 79 70  65 5c 22 3a 5c 22 49 6e  |k:{\"type\":\"In|
              000000c0  69 74 69 61 6c 69 7a 65  64 5c 22 7d 22 3a 7b 22  |itialized\"}":{"|
              000000d0  2e 22 3a 7b 7d 2c 22 66  3a 6c 61 73 74 50 72 6f  |.":{},"f:lastPro|
              000000e0  62 65 54 69 6d 65 22 3a  7b 7d 2c 22 66 3a 6c 61  |beTime":{},"f:la|
              000000f0  73 74 54 72 61 6e 73 69  74 69 6f 6e 54 69 6d 65  |stTransitionTime|
              00000100  22 3a 7b 7d 2c 22 66 3a  73 74 61 74 75 73 22 3a  |":{},"f:status":|
              00000110  7b 7d 2c 22 66 3a 74 79  70 65 22 3a 7b 7d 7d 2c  |{},"f:type":{}},|
              00000120  22 6b 3a 7b 5c 22 74 79  70 65 5c 22 3a 5c 22 52  |"k:{\"type\":\"R|
              00000130  65 61 64 79 5c 22 7d 22  3a 7b 22 2e 22 3a 7b 7d  |eady\"}":{".":{}|
              00000140  2c 22 66 3a 6c 61 73 74  50 72 6f 62 65 54 69 6d  |,"f:lastProbeTim|
              00000150  65 22 3a 7b 7d 2c 22 66  3a 6c 61 73 74 54 72 61  |e":{},"f:lastTra|
              00000160  6e 73 69 74 69 6f 6e 54  69 6d 65 22 3a 7b 7d 2c  |nsitionTime":{},|
              00000170  22 66 3a 6d 65 73 73 61  67 65 22 3a 7b 7d 2c 22  |"f:message":{},"|
              00000180  66 3a 72 65 61 73 6f 6e  22 3a 7b 7d 2c 22 66 3a  |f:reason":{},"f:|
              00000190  73 74 61 74 75 73 22 3a  7b 7d 2c 22 66 3a 74 79  |status":{},"f:ty|
              000001a0  70 65 22 3a 7b 7d 7d 7d  2c 22 66 3a 63 6f 6e 74  |pe":{}}},"f:cont|
              000001b0  61 69 6e 65 72 53 74 61  74 75 73 65 73 22 3a 7b  |ainerStatuses":{|
              000001c0  7d 2c 22 66 3a 68 6f 73  74 49 50 22 3a 7b 7d 2c  |},"f:hostIP":{},|
              000001d0  22 66 3a 73 74 61 72 74  54 69 6d 65 22 3a 7b 7d  |"f:startTime":{}|
              000001e0  7d 7d                                             |}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-nn9c6",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  })
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=5) "httpd",
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-nn9c6",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(0),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=46) "scw-conformance-default-2af6d8b4c6264cc5b9e5e6",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Pending",
      Conditions: ([]v1.PodCondition) (len=4) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=11) "Initialized",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828473880,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=5) "Ready",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828473880,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=18) "ContainersNotReady",
          Message: (string) (len=39) "containers with unready status: [httpd]"
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=15) "ContainersReady",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828473880,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=18) "ContainersNotReady",
          Message: (string) (len=39) "containers with unready status: [httpd]"
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828473880,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) (len=11) "172.16.36.3",
      HostIPs: ([]v1.HostIP) <nil>,
      PodIP: (string) "",
      PodIPs: ([]v1.PodIP) <nil>,
      StartTime: (*v1.Time)({
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63828473880,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      }),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) (len=1) {
        (v1.ContainerStatus) {
          Name: (string) (len=5) "httpd",
          State: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)({
              Reason: (string) (len=17) "ContainerCreating",
              Message: (string) ""
            }),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          LastTerminationState: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          Ready: (bool) false,
          RestartCount: (int32) 0,
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          ImageID: (string) "",
          ContainerID: (string) "",
          Started: (*bool)(false),
          AllocatedResources: (v1.ResourceList) <nil>,
          Resources: (*v1.ResourceRequirements)(<nil>)
        }
      },
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }

  Aug 24 11:38:00.577: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "deployment-8398" for this suite. @ 08/24/23 11:38:00.591
• [2.516 seconds]
------------------------------
SSSSS
------------------------------
[sig-apps] ReplicaSet should serve a basic image on each replica with a public image  [Conformance]
test/e2e/apps/replica_set.go:111
  STEP: Creating a kubernetes client @ 08/24/23 11:38:00.603
  Aug 24 11:38:00.603: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename replicaset @ 08/24/23 11:38:00.604
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 11:38:00.635
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 11:38:00.649
  Aug 24 11:38:00.655: INFO: Creating ReplicaSet my-hostname-basic-b42c2b9a-2845-44e5-9d31-4bf0c5b2e1ef
  Aug 24 11:38:00.674: INFO: Pod name my-hostname-basic-b42c2b9a-2845-44e5-9d31-4bf0c5b2e1ef: Found 0 pods out of 1
  Aug 24 11:38:05.683: INFO: Pod name my-hostname-basic-b42c2b9a-2845-44e5-9d31-4bf0c5b2e1ef: Found 1 pods out of 1
  Aug 24 11:38:05.684: INFO: Ensuring a pod for ReplicaSet "my-hostname-basic-b42c2b9a-2845-44e5-9d31-4bf0c5b2e1ef" is running
  Aug 24 11:38:05.692: INFO: Pod "my-hostname-basic-b42c2b9a-2845-44e5-9d31-4bf0c5b2e1ef-d7vg4" is running (conditions: [{Type:Initialized Status:True LastProbeTime:0001-01-01 00:00:00 +0000 UTC LastTransitionTime:2023-08-24 11:38:00 +0000 UTC Reason: Message:} {Type:Ready Status:True LastProbeTime:0001-01-01 00:00:00 +0000 UTC LastTransitionTime:2023-08-24 11:38:02 +0000 UTC Reason: Message:} {Type:ContainersReady Status:True LastProbeTime:0001-01-01 00:00:00 +0000 UTC LastTransitionTime:2023-08-24 11:38:02 +0000 UTC Reason: Message:} {Type:PodScheduled Status:True LastProbeTime:0001-01-01 00:00:00 +0000 UTC LastTransitionTime:2023-08-24 11:38:00 +0000 UTC Reason: Message:}])
  Aug 24 11:38:05.692: INFO: Trying to dial the pod
  STEP: trying to dial each unique pod @ 08/24/23 11:38:05.692
  Aug 24 11:38:05.732: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "replicaset-4050" for this suite. @ 08/24/23 11:38:05.741
• [5.152 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-storage] Projected secret should be consumable from pods in volume with mappings [NodeConformance] [Conformance]
test/e2e/common/storage/projected_secret.go:78
  STEP: Creating a kubernetes client @ 08/24/23 11:38:05.757
  Aug 24 11:38:05.757: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename projected @ 08/24/23 11:38:05.758
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 11:38:05.791
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 11:38:05.85
  STEP: Creating projection with secret that has name projected-secret-test-map-ab0e9462-a552-4511-bb75-ad88a2f80040 @ 08/24/23 11:38:05.857
  STEP: Creating a pod to test consume secrets @ 08/24/23 11:38:05.868
  STEP: Saw pod success @ 08/24/23 11:38:09.968
  Aug 24 11:38:09.977: INFO: Trying to get logs from node scw-conformance-default-2af6d8b4c6264cc5b9e5e6 pod pod-projected-secrets-7b573165-5820-4930-b24e-4353e8f52686 container projected-secret-volume-test: <nil>
  STEP: delete the pod @ 08/24/23 11:38:09.997
  Aug 24 11:38:10.033: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "projected-675" for this suite. @ 08/24/23 11:38:10.04
• [4.296 seconds]
------------------------------
SSSSSSSSSSSSSSS
------------------------------
[sig-cli] Kubectl client Kubectl describe should check if kubectl describe prints relevant information for rc and pods  [Conformance]
test/e2e/kubectl/kubectl.go:1342
  STEP: Creating a kubernetes client @ 08/24/23 11:38:10.053
  Aug 24 11:38:10.053: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename kubectl @ 08/24/23 11:38:10.054
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 11:38:10.083
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 11:38:10.09
  Aug 24 11:38:10.097: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1002171096 --namespace=kubectl-5648 create -f -'
  Aug 24 11:38:12.482: INFO: stderr: ""
  Aug 24 11:38:12.482: INFO: stdout: "replicationcontroller/agnhost-primary created\n"
  Aug 24 11:38:12.482: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1002171096 --namespace=kubectl-5648 create -f -'
  Aug 24 11:38:12.761: INFO: stderr: ""
  Aug 24 11:38:12.761: INFO: stdout: "service/agnhost-primary created\n"
  STEP: Waiting for Agnhost primary to start. @ 08/24/23 11:38:12.761
  Aug 24 11:38:13.776: INFO: Selector matched 1 pods for map[app:agnhost]
  Aug 24 11:38:13.776: INFO: Found 0 / 1
  Aug 24 11:38:14.772: INFO: Selector matched 1 pods for map[app:agnhost]
  Aug 24 11:38:14.773: INFO: Found 1 / 1
  Aug 24 11:38:14.773: INFO: WaitFor completed with timeout 5m0s.  Pods found = 1 out of 1
  Aug 24 11:38:14.781: INFO: Selector matched 1 pods for map[app:agnhost]
  Aug 24 11:38:14.781: INFO: ForEach: Found 1 pods from the filter.  Now looping through them.
  Aug 24 11:38:14.781: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1002171096 --namespace=kubectl-5648 describe pod agnhost-primary-dl8f5'
  Aug 24 11:38:14.889: INFO: stderr: ""
  Aug 24 11:38:14.889: INFO: stdout: "Name:             agnhost-primary-dl8f5\nNamespace:        kubectl-5648\nPriority:         0\nService Account:  default\nNode:             scw-conformance-default-2af6d8b4c6264cc5b9e5e6/172.16.36.3\nStart Time:       Thu, 24 Aug 2023 11:38:12 +0000\nLabels:           app=agnhost\n                  role=primary\nAnnotations:      <none>\nStatus:           Running\nIP:               10.100.0.252\nIPs:\n  IP:           10.100.0.252\nControlled By:  ReplicationController/agnhost-primary\nContainers:\n  agnhost-primary:\n    Container ID:   containerd://c3d832e02f8e55451e5d6c8800e2d38bcb9f898775fed21d0020395dd6a8f90c\n    Image:          registry.k8s.io/e2e-test-images/agnhost:2.45\n    Image ID:       registry.k8s.io/e2e-test-images/agnhost@sha256:2c5b5b056076334e4cf431d964d102e44cbca8f1e6b16ac1e477a0ffbe6caac4\n    Port:           6379/TCP\n    Host Port:      0/TCP\n    State:          Running\n      Started:      Thu, 24 Aug 2023 11:38:13 +0000\n    Ready:          True\n    Restart Count:  0\n    Environment:    <none>\n    Mounts:\n      /var/run/secrets/kubernetes.io/serviceaccount from kube-api-access-94kdq (ro)\nConditions:\n  Type              Status\n  Initialized       True \n  Ready             True \n  ContainersReady   True \n  PodScheduled      True \nVolumes:\n  kube-api-access-94kdq:\n    Type:                    Projected (a volume that contains injected data from multiple sources)\n    TokenExpirationSeconds:  3607\n    ConfigMapName:           kube-root-ca.crt\n    ConfigMapOptional:       <nil>\n    DownwardAPI:             true\nQoS Class:                   BestEffort\nNode-Selectors:              <none>\nTolerations:                 node.kubernetes.io/not-ready:NoExecute op=Exists for 300s\n                             node.kubernetes.io/unreachable:NoExecute op=Exists for 300s\nEvents:\n  Type    Reason     Age   From               Message\n  ----    ------     ----  ----               -------\n  Normal  Scheduled  2s    default-scheduler  Successfully assigned kubectl-5648/agnhost-primary-dl8f5 to scw-conformance-default-2af6d8b4c6264cc5b9e5e6\n  Normal  Pulled     1s    kubelet            Container image \"registry.k8s.io/e2e-test-images/agnhost:2.45\" already present on machine\n  Normal  Created    1s    kubelet            Created container agnhost-primary\n  Normal  Started    1s    kubelet            Started container agnhost-primary\n"
  Aug 24 11:38:14.890: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1002171096 --namespace=kubectl-5648 describe rc agnhost-primary'
  Aug 24 11:38:14.993: INFO: stderr: ""
  Aug 24 11:38:14.993: INFO: stdout: "Name:         agnhost-primary\nNamespace:    kubectl-5648\nSelector:     app=agnhost,role=primary\nLabels:       app=agnhost\n              role=primary\nAnnotations:  <none>\nReplicas:     1 current / 1 desired\nPods Status:  1 Running / 0 Waiting / 0 Succeeded / 0 Failed\nPod Template:\n  Labels:  app=agnhost\n           role=primary\n  Containers:\n   agnhost-primary:\n    Image:        registry.k8s.io/e2e-test-images/agnhost:2.45\n    Port:         6379/TCP\n    Host Port:    0/TCP\n    Environment:  <none>\n    Mounts:       <none>\n  Volumes:        <none>\nEvents:\n  Type    Reason            Age   From                    Message\n  ----    ------            ----  ----                    -------\n  Normal  SuccessfulCreate  2s    replication-controller  Created pod: agnhost-primary-dl8f5\n"
  Aug 24 11:38:14.993: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1002171096 --namespace=kubectl-5648 describe service agnhost-primary'
  Aug 24 11:38:15.138: INFO: stderr: ""
  Aug 24 11:38:15.138: INFO: stdout: "Name:              agnhost-primary\nNamespace:         kubectl-5648\nLabels:            app=agnhost\n                   role=primary\nAnnotations:       <none>\nSelector:          app=agnhost,role=primary\nType:              ClusterIP\nIP Family Policy:  SingleStack\nIP Families:       IPv4\nIP:                10.96.126.178\nIPs:               10.96.126.178\nPort:              <unset>  6379/TCP\nTargetPort:        agnhost-server/TCP\nEndpoints:         10.100.0.252:6379\nSession Affinity:  None\nEvents:            <none>\n"
  Aug 24 11:38:15.148: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1002171096 --namespace=kubectl-5648 describe node scw-conformance-default-2af6d8b4c6264cc5b9e5e6'
  Aug 24 11:38:15.395: INFO: stderr: ""
  Aug 24 11:38:15.395: INFO: stdout: "Name:               scw-conformance-default-2af6d8b4c6264cc5b9e5e6\nRoles:              <none>\nLabels:             beta.kubernetes.io/arch=amd64\n                    beta.kubernetes.io/instance-type=DEV1-L\n                    beta.kubernetes.io/os=linux\n                    failure-domain.beta.kubernetes.io/region=fr-srr\n                    failure-domain.beta.kubernetes.io/zone=fr-srr-1\n                    k8s.scaleway.com/kapsule=609c6433-120a-4a12-8e56-1b3044f05cfc\n                    k8s.scaleway.com/managed=true\n                    k8s.scaleway.com/node=2af6d8b4-c626-4cc5-b9e5-e664aa1be5d9\n                    k8s.scaleway.com/pool=0d15e61d-518d-4060-9ab2-d597f79bc57e\n                    k8s.scaleway.com/pool-name=default\n                    k8s.scaleway.com/runtime=containerd\n                    kubernetes.io/arch=amd64\n                    kubernetes.io/hostname=scw-conformance-default-2af6d8b4c6264cc5b9e5e6\n                    kubernetes.io/os=linux\n                    node.kubernetes.io/instance-type=DEV1-L\n                    topology.csi.scaleway.com/zone=fr-srr-1\n                    topology.kubernetes.io/region=fr-srr\n                    topology.kubernetes.io/zone=fr-srr-1\nAnnotations:        csi.volume.kubernetes.io/nodeid: {\"csi.scaleway.com\":\"fr-srr-1/297dda39-79ec-4ca9-a8b2-df50f6bbb90f\"}\n                    k8s.scaleway.com/agent-version: v1.2.0\n                    network.cilium.io/ipv4-cilium-host: 10.100.0.205\n                    network.cilium.io/ipv4-health-ip: 10.100.0.10\n                    network.cilium.io/ipv4-pod-cidr: 10.100.0.0/24\n                    node.alpha.kubernetes.io/ttl: 0\n                    volumes.kubernetes.io/controller-managed-attach-detach: true\nCreationTimestamp:  Thu, 24 Aug 2023 11:03:42 +0000\nTaints:             <none>\nUnschedulable:      false\nLease:\n  HolderIdentity:  scw-conformance-default-2af6d8b4c6264cc5b9e5e6\n  AcquireTime:     <unset>\n  RenewTime:       Thu, 24 Aug 2023 11:38:06 +0000\nConditions:\n  Type                        Status  LastHeartbeatTime                 LastTransitionTime                Reason                       Message\n  ----                        ------  -----------------                 ------------------                ------                       -------\n  NetworkUnavailable          False   Thu, 24 Aug 2023 11:04:46 +0000   Thu, 24 Aug 2023 11:04:46 +0000   CiliumIsUp                   Cilium is running on this node\n  PrivateNetworkUnavailable   False   Thu, 24 Aug 2023 11:35:20 +0000   Thu, 24 Aug 2023 11:03:43 +0000   KapsuleInterfaceFound        Kapsule interface was found on this node\n  MemoryPressure              False   Thu, 24 Aug 2023 11:35:20 +0000   Thu, 24 Aug 2023 11:03:42 +0000   KubeletHasSufficientMemory   kubelet has sufficient memory available\n  DiskPressure                False   Thu, 24 Aug 2023 11:35:20 +0000   Thu, 24 Aug 2023 11:03:42 +0000   KubeletHasNoDiskPressure     kubelet has no disk pressure\n  PIDPressure                 False   Thu, 24 Aug 2023 11:35:20 +0000   Thu, 24 Aug 2023 11:03:42 +0000   KubeletHasSufficientPID      kubelet has sufficient PID available\n  Ready                       True    Thu, 24 Aug 2023 11:35:20 +0000   Thu, 24 Aug 2023 11:04:40 +0000   KubeletReady                 kubelet is posting ready status. AppArmor enabled\nAddresses:\n  Hostname:     scw-conformance-default-2af6d8b4c6264cc5b9e5e6\n  ExternalIP:   51.158.39.62\n  ExternalDNS:  297dda39-79ec-4ca9-a8b2-df50f6bbb90f.pub.instances.scw.cloud\n  InternalIP:   172.16.36.3\nCapacity:\n  cpu:                4\n  ephemeral-storage:  75524576Ki\n  hugepages-1Gi:      0\n  hugepages-2Mi:      0\n  memory:             8122084Ki\n  pods:               110\nAllocatable:\n  cpu:                3800m\n  ephemeral-storage:  58866030887\n  hugepages-1Gi:      0\n  hugepages-2Mi:      0\n  memory:             6971108Ki\n  pods:               110\nSystem Info:\n  Machine ID:                 58336965e5e89cfef40bbacb64e72db9\n  System UUID:                297dda39-79ec-4ca9-a8b2-df50f6bbb90f\n  Boot ID:                    ad791e7c-74f5-40f6-b7c0-b8bb62430979\n  Kernel Version:             5.15.0-79-generic\n  OS Image:                   Ubuntu 22.04.3 LTS 5cb74068dc\n  Operating System:           linux\n  Architecture:               amd64\n  Container Runtime Version:  containerd://1.7.3\n  Kubelet Version:            v1.28.0\n  Kube-Proxy Version:         v1.28.0\nPodCIDR:                      10.100.0.0/24\nPodCIDRs:                     10.100.0.0/24\nProviderID:                   scaleway://instance/fr-srr-1/297dda39-79ec-4ca9-a8b2-df50f6bbb90f\nNon-terminated Pods:          (8 in total)\n  Namespace                   Name                                                       CPU Requests  CPU Limits  Memory Requests  Memory Limits  Age\n  ---------                   ----                                                       ------------  ----------  ---------------  -------------  ---\n  kube-system                 cilium-operator-9686c5f57-bbxb6                            0 (0%)        0 (0%)      0 (0%)           0 (0%)         36m\n  kube-system                 cilium-qxsf5                                               100m (2%)     0 (0%)      100Mi (1%)       0 (0%)         34m\n  kube-system                 csi-node-tq6l2                                             0 (0%)        0 (0%)      0 (0%)           0 (0%)         34m\n  kube-system                 konnectivity-agent-9q7n8                                   0 (0%)        0 (0%)      0 (0%)           0 (0%)         34m\n  kube-system                 kube-proxy-qdvkw                                           0 (0%)        0 (0%)      0 (0%)           0 (0%)         34m\n  kubectl-5648                agnhost-primary-dl8f5                                      0 (0%)        0 (0%)      0 (0%)           0 (0%)         3s\n  sonobuoy                    sonobuoy                                                   0 (0%)        0 (0%)      0 (0%)           0 (0%)         11m\n  sonobuoy                    sonobuoy-systemd-logs-daemon-set-02ba39604ea741df-p7qf6    0 (0%)        0 (0%)      0 (0%)           0 (0%)         11m\nAllocated resources:\n  (Total limits may be over 100 percent, i.e., overcommitted.)\n  Resource           Requests    Limits\n  --------           --------    ------\n  cpu                100m (2%)   0 (0%)\n  memory             100Mi (1%)  0 (0%)\n  ephemeral-storage  0 (0%)      0 (0%)\n  hugepages-1Gi      0 (0%)      0 (0%)\n  hugepages-2Mi      0 (0%)      0 (0%)\nEvents:\n  Type     Reason                   Age                From                   Message\n  ----     ------                   ----               ----                   -------\n  Normal   Starting                 34m                kube-proxy             \n  Normal   Starting                 34m                kubelet                Starting kubelet.\n  Warning  InvalidDiskCapacity      34m                kubelet                invalid capacity 0 on image filesystem\n  Normal   NodeHasSufficientMemory  34m (x2 over 34m)  kubelet                Node scw-conformance-default-2af6d8b4c6264cc5b9e5e6 status is now: NodeHasSufficientMemory\n  Normal   NodeHasNoDiskPressure    34m (x2 over 34m)  kubelet                Node scw-conformance-default-2af6d8b4c6264cc5b9e5e6 status is now: NodeHasNoDiskPressure\n  Normal   NodeHasSufficientPID     34m (x2 over 34m)  kubelet                Node scw-conformance-default-2af6d8b4c6264cc5b9e5e6 status is now: NodeHasSufficientPID\n  Normal   NodeAllocatableEnforced  34m                kubelet                Updated Node Allocatable limit across pods\n  Normal   RegisteredNode           34m                node-controller        Node scw-conformance-default-2af6d8b4c6264cc5b9e5e6 event: Registered Node scw-conformance-default-2af6d8b4c6264cc5b9e5e6 in Controller\n  Normal   Synced                   34m                cloud-node-controller  Node synced successfully\n  Normal   NodeReady                33m                kubelet                Node scw-conformance-default-2af6d8b4c6264cc5b9e5e6 status is now: NodeReady\n"
  Aug 24 11:38:15.395: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1002171096 --namespace=kubectl-5648 describe namespace kubectl-5648'
  Aug 24 11:38:15.538: INFO: stderr: ""
  Aug 24 11:38:15.538: INFO: stdout: "Name:         kubectl-5648\nLabels:       e2e-framework=kubectl\n              e2e-run=bbcca8eb-24e0-4d75-b303-9fbce3207588\n              kubernetes.io/metadata.name=kubectl-5648\n              pod-security.kubernetes.io/audit=baseline\n              pod-security.kubernetes.io/enforce=baseline\n              pod-security.kubernetes.io/warn=baseline\nAnnotations:  <none>\nStatus:       Active\n\nNo resource quota.\n\nNo LimitRange resource.\n"
  Aug 24 11:38:15.538: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "kubectl-5648" for this suite. @ 08/24/23 11:38:15.549
• [5.511 seconds]
------------------------------
[sig-node] Security Context When creating a container with runAsUser should run the container with uid 65534 [LinuxOnly] [NodeConformance] [Conformance]
test/e2e/common/node/security_context.go:347
  STEP: Creating a kubernetes client @ 08/24/23 11:38:15.565
  Aug 24 11:38:15.565: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename security-context-test @ 08/24/23 11:38:15.566
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 11:38:15.595
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 11:38:15.603
  Aug 24 11:38:19.681: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "security-context-test-9660" for this suite. @ 08/24/23 11:38:19.692
• [4.145 seconds]
------------------------------
S
------------------------------
[sig-network] DNS should provide DNS for pods for Subdomain [Conformance]
test/e2e/network/dns.go:286
  STEP: Creating a kubernetes client @ 08/24/23 11:38:19.71
  Aug 24 11:38:19.710: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename dns @ 08/24/23 11:38:19.711
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 11:38:19.742
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 11:38:19.749
  STEP: Creating a test headless service @ 08/24/23 11:38:19.756
  STEP: Running these commands on wheezy: for i in `seq 1 600`; do check="$$(dig +notcp +noall +answer +search dns-querier-2.dns-test-service-2.dns-7233.svc.cluster.local A)" && test -n "$$check" && echo OK > /results/wheezy_udp@dns-querier-2.dns-test-service-2.dns-7233.svc.cluster.local;check="$$(dig +tcp +noall +answer +search dns-querier-2.dns-test-service-2.dns-7233.svc.cluster.local A)" && test -n "$$check" && echo OK > /results/wheezy_tcp@dns-querier-2.dns-test-service-2.dns-7233.svc.cluster.local;check="$$(dig +notcp +noall +answer +search dns-test-service-2.dns-7233.svc.cluster.local A)" && test -n "$$check" && echo OK > /results/wheezy_udp@dns-test-service-2.dns-7233.svc.cluster.local;check="$$(dig +tcp +noall +answer +search dns-test-service-2.dns-7233.svc.cluster.local A)" && test -n "$$check" && echo OK > /results/wheezy_tcp@dns-test-service-2.dns-7233.svc.cluster.local;sleep 1; done
   @ 08/24/23 11:38:19.768
  STEP: Running these commands on jessie: for i in `seq 1 600`; do check="$$(dig +notcp +noall +answer +search dns-querier-2.dns-test-service-2.dns-7233.svc.cluster.local A)" && test -n "$$check" && echo OK > /results/jessie_udp@dns-querier-2.dns-test-service-2.dns-7233.svc.cluster.local;check="$$(dig +tcp +noall +answer +search dns-querier-2.dns-test-service-2.dns-7233.svc.cluster.local A)" && test -n "$$check" && echo OK > /results/jessie_tcp@dns-querier-2.dns-test-service-2.dns-7233.svc.cluster.local;check="$$(dig +notcp +noall +answer +search dns-test-service-2.dns-7233.svc.cluster.local A)" && test -n "$$check" && echo OK > /results/jessie_udp@dns-test-service-2.dns-7233.svc.cluster.local;check="$$(dig +tcp +noall +answer +search dns-test-service-2.dns-7233.svc.cluster.local A)" && test -n "$$check" && echo OK > /results/jessie_tcp@dns-test-service-2.dns-7233.svc.cluster.local;sleep 1; done
   @ 08/24/23 11:38:19.768
  STEP: creating a pod to probe DNS @ 08/24/23 11:38:19.768
  STEP: submitting the pod to kubernetes @ 08/24/23 11:38:19.768
  STEP: retrieving the pod @ 08/24/23 11:38:27.842
  STEP: looking for the results for each expected name from probers @ 08/24/23 11:38:27.851
  Aug 24 11:38:27.943: INFO: DNS probes using dns-7233/dns-test-31e7562e-2258-4f15-996d-0a301fdfac14 succeeded

  Aug 24 11:38:27.944: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: deleting the pod @ 08/24/23 11:38:27.953
  STEP: deleting the test headless service @ 08/24/23 11:38:27.982
  STEP: Destroying namespace "dns-7233" for this suite. @ 08/24/23 11:38:28.049
• [8.353 seconds]
------------------------------
SSSSS
------------------------------
[sig-node] Pods should contain environment variables for services [NodeConformance] [Conformance]
test/e2e/common/node/pods.go:445
  STEP: Creating a kubernetes client @ 08/24/23 11:38:28.063
  Aug 24 11:38:28.063: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename pods @ 08/24/23 11:38:28.064
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 11:38:28.095
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 11:38:28.103
  STEP: Saw pod success @ 08/24/23 11:38:36.278
  Aug 24 11:38:36.286: INFO: Trying to get logs from node scw-conformance-default-2af6d8b4c6264cc5b9e5e6 pod client-envvars-b6d8bc4a-a5b4-4330-a344-c64007615b40 container env3cont: <nil>
  STEP: delete the pod @ 08/24/23 11:38:36.304
  Aug 24 11:38:36.340: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "pods-3301" for this suite. @ 08/24/23 11:38:36.35
• [8.300 seconds]
------------------------------
SSSSSSSSSSSSSSSSS
------------------------------
[sig-storage] Downward API volume should set mode on item file [LinuxOnly] [NodeConformance] [Conformance]
test/e2e/common/storage/downwardapi_volume.go:85
  STEP: Creating a kubernetes client @ 08/24/23 11:38:36.364
  Aug 24 11:38:36.364: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename downward-api @ 08/24/23 11:38:36.364
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 11:38:36.391
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 11:38:36.398
  STEP: Creating a pod to test downward API volume plugin @ 08/24/23 11:38:36.405
  STEP: Saw pod success @ 08/24/23 11:38:40.468
  Aug 24 11:38:40.477: INFO: Trying to get logs from node scw-conformance-default-2af6d8b4c6264cc5b9e5e6 pod downwardapi-volume-0f07a3d1-6622-4e36-9b24-e36c7dc41206 container client-container: <nil>
  STEP: delete the pod @ 08/24/23 11:38:40.498
  Aug 24 11:38:40.531: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "downward-api-7765" for this suite. @ 08/24/23 11:38:40.541
• [4.192 seconds]
------------------------------
SSSSSSSSSSSSS
------------------------------
[sig-network] Services should find a service from listing all namespaces [Conformance]
test/e2e/network/service.go:3117
  STEP: Creating a kubernetes client @ 08/24/23 11:38:40.556
  Aug 24 11:38:40.556: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename services @ 08/24/23 11:38:40.557
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 11:38:40.587
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 11:38:40.593
  STEP: fetching services @ 08/24/23 11:38:40.599
  Aug 24 11:38:40.609: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "services-5038" for this suite. @ 08/24/23 11:38:40.62
• [0.079 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-storage] Projected combined should project all components that make up the projection API [Projection][NodeConformance] [Conformance]
test/e2e/common/storage/projected_combined.go:44
  STEP: Creating a kubernetes client @ 08/24/23 11:38:40.638
  Aug 24 11:38:40.638: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename projected @ 08/24/23 11:38:40.639
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 11:38:40.668
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 11:38:40.674
  STEP: Creating configMap with name configmap-projected-all-test-volume-23e35e78-e1c4-489d-9bcd-6441c1d3df3f @ 08/24/23 11:38:40.68
  STEP: Creating secret with name secret-projected-all-test-volume-b27ff840-9065-4cf4-aa0c-c12b4529243c @ 08/24/23 11:38:40.689
  STEP: Creating a pod to test Check all projections for projected volume plugin @ 08/24/23 11:38:40.7
  STEP: Saw pod success @ 08/24/23 11:38:44.751
  Aug 24 11:38:44.761: INFO: Trying to get logs from node scw-conformance-default-2af6d8b4c6264cc5b9e5e6 pod projected-volume-8fffc741-0bbb-4a7d-986c-e4e34d7d7546 container projected-all-volume-test: <nil>
  STEP: delete the pod @ 08/24/23 11:38:44.779
  Aug 24 11:38:44.820: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "projected-8511" for this suite. @ 08/24/23 11:38:44.83
• [4.208 seconds]
------------------------------
S
------------------------------
[sig-storage] ConfigMap should be consumable in multiple volumes in the same pod [NodeConformance] [Conformance]
test/e2e/common/storage/configmap_volume.go:423
  STEP: Creating a kubernetes client @ 08/24/23 11:38:44.847
  Aug 24 11:38:44.847: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename configmap @ 08/24/23 11:38:44.848
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 11:38:44.879
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 11:38:44.886
  STEP: Creating configMap with name configmap-test-volume-ecc0785b-0a93-4c2d-a8c9-a014b804e57d @ 08/24/23 11:38:44.892
  STEP: Creating a pod to test consume configMaps @ 08/24/23 11:38:44.902
  STEP: Saw pod success @ 08/24/23 11:38:48.948
  Aug 24 11:38:48.957: INFO: Trying to get logs from node scw-conformance-default-2af6d8b4c6264cc5b9e5e6 pod pod-configmaps-bf701d6e-d2d9-471a-83ad-22e3fb35a3af container configmap-volume-test: <nil>
  STEP: delete the pod @ 08/24/23 11:38:48.978
  Aug 24 11:38:49.010: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "configmap-3102" for this suite. @ 08/24/23 11:38:49.02
• [4.191 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-network] Services should have session affinity work for NodePort service [LinuxOnly] [Conformance]
test/e2e/network/service.go:2202
  STEP: Creating a kubernetes client @ 08/24/23 11:38:49.038
  Aug 24 11:38:49.038: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename services @ 08/24/23 11:38:49.039
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 11:38:49.071
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 11:38:49.079
  STEP: creating service in namespace services-7331 @ 08/24/23 11:38:49.087
  STEP: creating service affinity-nodeport in namespace services-7331 @ 08/24/23 11:38:49.087
  STEP: creating replication controller affinity-nodeport in namespace services-7331 @ 08/24/23 11:38:49.122
  I0824 11:38:49.134376      22 runners.go:197] Created replication controller with name: affinity-nodeport, namespace: services-7331, replica count: 3
  I0824 11:38:52.185915      22 runners.go:197] affinity-nodeport Pods: 3 out of 3 created, 3 running, 0 pending, 0 waiting, 0 inactive, 0 terminating, 0 unknown, 0 runningButNotReady 
  Aug 24 11:38:52.214: INFO: Creating new exec pod
  Aug 24 11:38:57.278: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1002171096 --namespace=services-7331 exec execpod-affinityndgjd -- /bin/sh -x -c echo hostName | nc -v -t -w 2 affinity-nodeport 80'
  Aug 24 11:38:57.539: INFO: stderr: "+ echo hostName\n+ nc -v -t -w 2 affinity-nodeport 80\nConnection to affinity-nodeport 80 port [tcp/http] succeeded!\n"
  Aug 24 11:38:57.539: INFO: stdout: "HTTP/1.1 400 Bad Request\r\nContent-Type: text/plain; charset=utf-8\r\nConnection: close\r\n\r\n400 Bad Request"
  Aug 24 11:38:57.540: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1002171096 --namespace=services-7331 exec execpod-affinityndgjd -- /bin/sh -x -c echo hostName | nc -v -t -w 2 10.96.80.209 80'
  Aug 24 11:38:57.777: INFO: stderr: "+ echo hostName\n+ nc -v -t -w 2 10.96.80.209 80\nConnection to 10.96.80.209 80 port [tcp/http] succeeded!\n"
  Aug 24 11:38:57.778: INFO: stdout: "HTTP/1.1 400 Bad Request\r\nContent-Type: text/plain; charset=utf-8\r\nConnection: close\r\n\r\n400 Bad Request"
  Aug 24 11:38:57.778: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1002171096 --namespace=services-7331 exec execpod-affinityndgjd -- /bin/sh -x -c echo hostName | nc -v -t -w 2 172.16.36.3 31785'
  Aug 24 11:38:58.020: INFO: stderr: "+ echo hostName\n+ nc -v -t -w 2 172.16.36.3 31785\nConnection to 172.16.36.3 31785 port [tcp/*] succeeded!\n"
  Aug 24 11:38:58.020: INFO: stdout: "HTTP/1.1 400 Bad Request\r\nContent-Type: text/plain; charset=utf-8\r\nConnection: close\r\n\r\n400 Bad Request"
  Aug 24 11:38:58.021: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1002171096 --namespace=services-7331 exec execpod-affinityndgjd -- /bin/sh -x -c echo hostName | nc -v -t -w 2 172.16.36.2 31785'
  Aug 24 11:38:58.268: INFO: stderr: "+ echo hostName\n+ nc -v -t -w 2 172.16.36.2 31785\nConnection to 172.16.36.2 31785 port [tcp/*] succeeded!\n"
  Aug 24 11:38:58.268: INFO: stdout: "HTTP/1.1 400 Bad Request\r\nContent-Type: text/plain; charset=utf-8\r\nConnection: close\r\n\r\n400 Bad Request"
  Aug 24 11:38:58.268: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1002171096 --namespace=services-7331 exec execpod-affinityndgjd -- /bin/sh -x -c for i in $(seq 0 15); do echo; curl -q -s --connect-timeout 2 http://172.16.36.3:31785/ ; done'
  Aug 24 11:38:58.592: INFO: stderr: "+ seq 0 15\n+ echo\n+ curl -q -s --connect-timeout 2 http://172.16.36.3:31785/\n+ echo\n+ curl -q -s --connect-timeout 2 http://172.16.36.3:31785/\n+ echo\n+ curl -q -s --connect-timeout 2 http://172.16.36.3:31785/\n+ echo\n+ curl -q -s --connect-timeout 2 http://172.16.36.3:31785/\n+ echo\n+ curl -q -s --connect-timeout 2 http://172.16.36.3:31785/\n+ echo\n+ curl -q -s --connect-timeout 2 http://172.16.36.3:31785/\n+ echo\n+ curl -q -s --connect-timeout 2 http://172.16.36.3:31785/\n+ echo\n+ curl -q -s --connect-timeout 2 http://172.16.36.3:31785/\n+ echo\n+ curl -q -s --connect-timeout 2 http://172.16.36.3:31785/\n+ echo\n+ curl -q -s --connect-timeout 2 http://172.16.36.3:31785/\n+ echo\n+ curl -q -s --connect-timeout 2 http://172.16.36.3:31785/\n+ echo\n+ curl -q -s --connect-timeout 2 http://172.16.36.3:31785/\n+ echo\n+ curl -q -s --connect-timeout 2 http://172.16.36.3:31785/\n+ echo\n+ curl -q -s --connect-timeout 2 http://172.16.36.3:31785/\n+ echo\n+ curl -q -s --connect-timeout 2 http://172.16.36.3:31785/\n+ echo\n+ curl -q -s --connect-timeout 2 http://172.16.36.3:31785/\n"
  Aug 24 11:38:58.592: INFO: stdout: "\naffinity-nodeport-x2r7t\naffinity-nodeport-x2r7t\naffinity-nodeport-x2r7t\naffinity-nodeport-x2r7t\naffinity-nodeport-x2r7t\naffinity-nodeport-x2r7t\naffinity-nodeport-x2r7t\naffinity-nodeport-x2r7t\naffinity-nodeport-x2r7t\naffinity-nodeport-x2r7t\naffinity-nodeport-x2r7t\naffinity-nodeport-x2r7t\naffinity-nodeport-x2r7t\naffinity-nodeport-x2r7t\naffinity-nodeport-x2r7t\naffinity-nodeport-x2r7t"
  Aug 24 11:38:58.592: INFO: Received response from host: affinity-nodeport-x2r7t
  Aug 24 11:38:58.592: INFO: Received response from host: affinity-nodeport-x2r7t
  Aug 24 11:38:58.592: INFO: Received response from host: affinity-nodeport-x2r7t
  Aug 24 11:38:58.592: INFO: Received response from host: affinity-nodeport-x2r7t
  Aug 24 11:38:58.592: INFO: Received response from host: affinity-nodeport-x2r7t
  Aug 24 11:38:58.592: INFO: Received response from host: affinity-nodeport-x2r7t
  Aug 24 11:38:58.592: INFO: Received response from host: affinity-nodeport-x2r7t
  Aug 24 11:38:58.592: INFO: Received response from host: affinity-nodeport-x2r7t
  Aug 24 11:38:58.592: INFO: Received response from host: affinity-nodeport-x2r7t
  Aug 24 11:38:58.592: INFO: Received response from host: affinity-nodeport-x2r7t
  Aug 24 11:38:58.592: INFO: Received response from host: affinity-nodeport-x2r7t
  Aug 24 11:38:58.592: INFO: Received response from host: affinity-nodeport-x2r7t
  Aug 24 11:38:58.592: INFO: Received response from host: affinity-nodeport-x2r7t
  Aug 24 11:38:58.592: INFO: Received response from host: affinity-nodeport-x2r7t
  Aug 24 11:38:58.592: INFO: Received response from host: affinity-nodeport-x2r7t
  Aug 24 11:38:58.592: INFO: Received response from host: affinity-nodeport-x2r7t
  Aug 24 11:38:58.592: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  Aug 24 11:38:58.603: INFO: Cleaning up the exec pod
  STEP: deleting ReplicationController affinity-nodeport in namespace services-7331, will wait for the garbage collector to delete the pods @ 08/24/23 11:38:58.631
  Aug 24 11:38:58.718: INFO: Deleting ReplicationController affinity-nodeport took: 17.830134ms
  Aug 24 11:38:58.818: INFO: Terminating ReplicationController affinity-nodeport pods took: 100.441459ms
  STEP: Destroying namespace "services-7331" for this suite. @ 08/24/23 11:39:01.866
• [12.841 seconds]
------------------------------
SSSSS
------------------------------
[sig-api-machinery] FieldValidation should detect unknown metadata fields of a typed object [Conformance]
test/e2e/apimachinery/field_validation.go:117
  STEP: Creating a kubernetes client @ 08/24/23 11:39:01.879
  Aug 24 11:39:01.879: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename field-validation @ 08/24/23 11:39:01.88
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 11:39:01.919
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 11:39:01.926
  STEP: apply creating a deployment @ 08/24/23 11:39:01.932
  Aug 24 11:39:01.936: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "field-validation-9641" for this suite. @ 08/24/23 11:39:01.983
• [0.118 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-apps] DisruptionController should observe PodDisruptionBudget status updated [Conformance]
test/e2e/apps/disruption.go:141
  STEP: Creating a kubernetes client @ 08/24/23 11:39:01.999
  Aug 24 11:39:01.999: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename disruption @ 08/24/23 11:39:02.001
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 11:39:02.031
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 11:39:02.038
  STEP: Waiting for the pdb to be processed @ 08/24/23 11:39:02.057
  STEP: Waiting for all pods to be running @ 08/24/23 11:39:04.118
  Aug 24 11:39:04.157: INFO: running pods: 0 < 3
  Aug 24 11:39:06.177: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "disruption-8846" for this suite. @ 08/24/23 11:39:06.187
• [4.200 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-auth] SubjectReview should support SubjectReview API operations [Conformance]
test/e2e/auth/subjectreviews.go:50
  STEP: Creating a kubernetes client @ 08/24/23 11:39:06.205
  Aug 24 11:39:06.205: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename subjectreview @ 08/24/23 11:39:06.207
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 11:39:06.235
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 11:39:06.243
  STEP: Creating a Serviceaccount "e2e" in namespace "subjectreview-6245" @ 08/24/23 11:39:06.25
  Aug 24 11:39:06.261: INFO: saUsername: "system:serviceaccount:subjectreview-6245:e2e"
  Aug 24 11:39:06.261: INFO: saGroups: []string{"system:authenticated", "system:serviceaccounts", "system:serviceaccounts:subjectreview-6245"}
  Aug 24 11:39:06.261: INFO: saUID: "7f555474-ea87-41b8-8124-5a8c20f4f3d9"
  STEP: Creating clientset to impersonate "system:serviceaccount:subjectreview-6245:e2e" @ 08/24/23 11:39:06.261
  STEP: Creating SubjectAccessReview for "system:serviceaccount:subjectreview-6245:e2e" @ 08/24/23 11:39:06.261
  Aug 24 11:39:06.266: INFO: sarResponse Status: v1.SubjectAccessReviewStatus{Allowed:false, Denied:false, Reason:"", EvaluationError:""}
  STEP: Verifying as "system:serviceaccount:subjectreview-6245:e2e" api 'list' configmaps in "subjectreview-6245" namespace @ 08/24/23 11:39:06.267
  Aug 24 11:39:06.270: INFO: SubjectAccessReview has been verified
  STEP: Creating a LocalSubjectAccessReview for "system:serviceaccount:subjectreview-6245:e2e" @ 08/24/23 11:39:06.27
  Aug 24 11:39:06.275: INFO: lsarResponse Status: v1.SubjectAccessReviewStatus{Allowed:false, Denied:false, Reason:"", EvaluationError:""}
  Aug 24 11:39:06.275: INFO: LocalSubjectAccessReview has been verified
  Aug 24 11:39:06.275: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "subjectreview-6245" for this suite. @ 08/24/23 11:39:06.284
• [0.093 seconds]
------------------------------
SSSSSSSSSS
------------------------------
[sig-apps] Job should adopt matching orphans and release non-matching pods [Conformance]
test/e2e/apps/job.go:513
  STEP: Creating a kubernetes client @ 08/24/23 11:39:06.298
  Aug 24 11:39:06.298: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename job @ 08/24/23 11:39:06.299
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 11:39:06.328
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 11:39:06.335
  STEP: Creating a job @ 08/24/23 11:39:06.342
  STEP: Ensuring active pods == parallelism @ 08/24/23 11:39:06.357
  STEP: Orphaning one of the Job's Pods @ 08/24/23 11:39:08.368
  Aug 24 11:39:08.904: INFO: Successfully updated pod "adopt-release-fgmc5"
  STEP: Checking that the Job readopts the Pod @ 08/24/23 11:39:08.905
  STEP: Removing the labels from the Job's Pod @ 08/24/23 11:39:10.922
  Aug 24 11:39:11.449: INFO: Successfully updated pod "adopt-release-fgmc5"
  STEP: Checking that the Job releases the Pod @ 08/24/23 11:39:11.449
  Aug 24 11:39:13.469: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "job-9139" for this suite. @ 08/24/23 11:39:13.479
• [7.196 seconds]
------------------------------
SSSSSSSS
------------------------------
[sig-network] DNS should provide DNS for the cluster  [Conformance]
test/e2e/network/dns.go:50
  STEP: Creating a kubernetes client @ 08/24/23 11:39:13.495
  Aug 24 11:39:13.495: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename dns @ 08/24/23 11:39:13.496
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 11:39:13.531
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 11:39:13.538
  STEP: Running these commands on wheezy: for i in `seq 1 600`; do check="$$(dig +notcp +noall +answer +search kubernetes.default.svc.cluster.local A)" && test -n "$$check" && echo OK > /results/wheezy_udp@kubernetes.default.svc.cluster.local;check="$$(dig +tcp +noall +answer +search kubernetes.default.svc.cluster.local A)" && test -n "$$check" && echo OK > /results/wheezy_tcp@kubernetes.default.svc.cluster.local;sleep 1; done
   @ 08/24/23 11:39:13.545
  STEP: Running these commands on jessie: for i in `seq 1 600`; do check="$$(dig +notcp +noall +answer +search kubernetes.default.svc.cluster.local A)" && test -n "$$check" && echo OK > /results/jessie_udp@kubernetes.default.svc.cluster.local;check="$$(dig +tcp +noall +answer +search kubernetes.default.svc.cluster.local A)" && test -n "$$check" && echo OK > /results/jessie_tcp@kubernetes.default.svc.cluster.local;sleep 1; done
   @ 08/24/23 11:39:13.545
  STEP: creating a pod to probe DNS @ 08/24/23 11:39:13.545
  STEP: submitting the pod to kubernetes @ 08/24/23 11:39:13.545
  STEP: retrieving the pod @ 08/24/23 11:39:15.588
  STEP: looking for the results for each expected name from probers @ 08/24/23 11:39:15.597
  Aug 24 11:39:15.655: INFO: DNS probes using dns-6795/dns-test-5a6a6a81-2fbc-4bc0-9923-b8403fce9d92 succeeded

  Aug 24 11:39:15.655: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: deleting the pod @ 08/24/23 11:39:15.666
  STEP: Destroying namespace "dns-6795" for this suite. @ 08/24/23 11:39:15.697
• [2.219 seconds]
------------------------------
SSSSSSSSSSSSSSSS
------------------------------
[sig-cli] Kubectl client Kubectl version should check is all data is printed  [Conformance]
test/e2e/kubectl/kubectl.go:1674
  STEP: Creating a kubernetes client @ 08/24/23 11:39:15.714
  Aug 24 11:39:15.714: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename kubectl @ 08/24/23 11:39:15.716
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 11:39:15.771
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 11:39:15.777
  Aug 24 11:39:15.784: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1002171096 --namespace=kubectl-4502 version'
  Aug 24 11:39:15.890: INFO: stderr: ""
  Aug 24 11:39:15.890: INFO: stdout: "Client Version: v1.28.0\nKustomize Version: v5.0.4-0.20230601165947-6ce0bf390ce3\nServer Version: v1.28.0\n"
  Aug 24 11:39:15.891: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "kubectl-4502" for this suite. @ 08/24/23 11:39:15.901
• [0.203 seconds]
------------------------------
SSSSSS
------------------------------
[sig-apps] ReplicaSet should adopt matching pods on creation and release no longer matching pods [Conformance]
test/e2e/apps/replica_set.go:131
  STEP: Creating a kubernetes client @ 08/24/23 11:39:15.918
  Aug 24 11:39:15.918: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename replicaset @ 08/24/23 11:39:15.92
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 11:39:15.951
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 11:39:15.958
  STEP: Given a Pod with a 'name' label pod-adoption-release is created @ 08/24/23 11:39:15.966
  STEP: When a replicaset with a matching selector is created @ 08/24/23 11:39:18.01
  STEP: Then the orphan pod is adopted @ 08/24/23 11:39:18.02
  STEP: When the matched label of one of its pods change @ 08/24/23 11:39:19.037
  Aug 24 11:39:19.045: INFO: Pod name pod-adoption-release: Found 1 pods out of 1
  STEP: Then the pod is released @ 08/24/23 11:39:19.071
  Aug 24 11:39:20.088: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "replicaset-442" for this suite. @ 08/24/23 11:39:20.096
• [4.192 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-apps] Daemon set [Serial] should list and delete a collection of DaemonSets [Conformance]
test/e2e/apps/daemon_set.go:836
  STEP: Creating a kubernetes client @ 08/24/23 11:39:20.111
  Aug 24 11:39:20.111: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename daemonsets @ 08/24/23 11:39:20.112
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 11:39:20.141
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 11:39:20.148
  STEP: Creating simple DaemonSet "daemon-set" @ 08/24/23 11:39:20.193
  STEP: Check that daemon pods launch on every node of the cluster. @ 08/24/23 11:39:20.205
  Aug 24 11:39:20.224: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 0
  Aug 24 11:39:20.224: INFO: Node scw-conformance-default-2af6d8b4c6264cc5b9e5e6 is running 0 daemon pod, expected 1
  Aug 24 11:39:21.263: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 0
  Aug 24 11:39:21.263: INFO: Node scw-conformance-default-2af6d8b4c6264cc5b9e5e6 is running 0 daemon pod, expected 1
  Aug 24 11:39:22.242: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 2
  Aug 24 11:39:22.242: INFO: Number of running nodes: 2, number of available pods: 2 in daemonset daemon-set
  STEP: listing all DaemonSets @ 08/24/23 11:39:22.25
  STEP: DeleteCollection of the DaemonSets @ 08/24/23 11:39:22.261
  STEP: Verify that ReplicaSets have been deleted @ 08/24/23 11:39:22.281
  Aug 24 11:39:22.309: INFO: daemonset: {"kind":"DaemonSetList","apiVersion":"apps/v1","metadata":{"resourceVersion":"3404871499"},"items":null}

  Aug 24 11:39:22.349: INFO: pods: {"kind":"PodList","apiVersion":"v1","metadata":{"resourceVersion":"3404871499"},"items":[{"metadata":{"name":"daemon-set-9kmkt","generateName":"daemon-set-","namespace":"daemonsets-6676","uid":"58cc541f-99fc-42e3-aae2-1bc61e6e4a27","resourceVersion":"3404871497","creationTimestamp":"2023-08-24T11:39:20Z","deletionTimestamp":"2023-08-24T11:39:52Z","deletionGracePeriodSeconds":30,"labels":{"controller-revision-hash":"58cb6b5b65","daemonset-name":"daemon-set","pod-template-generation":"1"},"ownerReferences":[{"apiVersion":"apps/v1","kind":"DaemonSet","name":"daemon-set","uid":"1969e502-9d94-450f-9daf-98e35012923f","controller":true,"blockOwnerDeletion":true}],"managedFields":[{"manager":"kube-controller-manager","operation":"Update","apiVersion":"v1","time":"2023-08-24T11:39:20Z","fieldsType":"FieldsV1","fieldsV1":{"f:metadata":{"f:generateName":{},"f:labels":{".":{},"f:controller-revision-hash":{},"f:daemonset-name":{},"f:pod-template-generation":{}},"f:ownerReferences":{".":{},"k:{\"uid\":\"1969e502-9d94-450f-9daf-98e35012923f\"}":{}}},"f:spec":{"f:affinity":{".":{},"f:nodeAffinity":{".":{},"f:requiredDuringSchedulingIgnoredDuringExecution":{}}},"f:containers":{"k:{\"name\":\"app\"}":{".":{},"f:image":{},"f:imagePullPolicy":{},"f:name":{},"f:ports":{".":{},"k:{\"containerPort\":9376,\"protocol\":\"TCP\"}":{".":{},"f:containerPort":{},"f:protocol":{}}},"f:resources":{},"f:securityContext":{},"f:terminationMessagePath":{},"f:terminationMessagePolicy":{}}},"f:dnsPolicy":{},"f:enableServiceLinks":{},"f:restartPolicy":{},"f:schedulerName":{},"f:securityContext":{},"f:terminationGracePeriodSeconds":{},"f:tolerations":{}}}},{"manager":"kubelet","operation":"Update","apiVersion":"v1","time":"2023-08-24T11:39:21Z","fieldsType":"FieldsV1","fieldsV1":{"f:status":{"f:conditions":{"k:{\"type\":\"ContainersReady\"}":{".":{},"f:lastProbeTime":{},"f:lastTransitionTime":{},"f:status":{},"f:type":{}},"k:{\"type\":\"Initialized\"}":{".":{},"f:lastProbeTime":{},"f:lastTransitionTime":{},"f:status":{},"f:type":{}},"k:{\"type\":\"Ready\"}":{".":{},"f:lastProbeTime":{},"f:lastTransitionTime":{},"f:status":{},"f:type":{}}},"f:containerStatuses":{},"f:hostIP":{},"f:phase":{},"f:podIP":{},"f:podIPs":{".":{},"k:{\"ip\":\"10.100.0.210\"}":{".":{},"f:ip":{}}},"f:startTime":{}}},"subresource":"status"}]},"spec":{"volumes":[{"name":"kube-api-access-6skc4","projected":{"sources":[{"serviceAccountToken":{"expirationSeconds":3607,"path":"token"}},{"configMap":{"name":"kube-root-ca.crt","items":[{"key":"ca.crt","path":"ca.crt"}]}},{"downwardAPI":{"items":[{"path":"namespace","fieldRef":{"apiVersion":"v1","fieldPath":"metadata.namespace"}}]}}],"defaultMode":420}}],"containers":[{"name":"app","image":"registry.k8s.io/e2e-test-images/httpd:2.4.38-4","ports":[{"containerPort":9376,"protocol":"TCP"}],"resources":{},"volumeMounts":[{"name":"kube-api-access-6skc4","readOnly":true,"mountPath":"/var/run/secrets/kubernetes.io/serviceaccount"}],"terminationMessagePath":"/dev/termination-log","terminationMessagePolicy":"File","imagePullPolicy":"IfNotPresent","securityContext":{}}],"restartPolicy":"Always","terminationGracePeriodSeconds":30,"dnsPolicy":"ClusterFirst","serviceAccountName":"default","serviceAccount":"default","nodeName":"scw-conformance-default-2af6d8b4c6264cc5b9e5e6","securityContext":{},"affinity":{"nodeAffinity":{"requiredDuringSchedulingIgnoredDuringExecution":{"nodeSelectorTerms":[{"matchFields":[{"key":"metadata.name","operator":"In","values":["scw-conformance-default-2af6d8b4c6264cc5b9e5e6"]}]}]}}},"schedulerName":"default-scheduler","tolerations":[{"key":"node.kubernetes.io/not-ready","operator":"Exists","effect":"NoExecute"},{"key":"node.kubernetes.io/unreachable","operator":"Exists","effect":"NoExecute"},{"key":"node.kubernetes.io/disk-pressure","operator":"Exists","effect":"NoSchedule"},{"key":"node.kubernetes.io/memory-pressure","operator":"Exists","effect":"NoSchedule"},{"key":"node.kubernetes.io/pid-pressure","operator":"Exists","effect":"NoSchedule"},{"key":"node.kubernetes.io/unschedulable","operator":"Exists","effect":"NoSchedule"}],"priority":0,"enableServiceLinks":true,"preemptionPolicy":"PreemptLowerPriority"},"status":{"phase":"Running","conditions":[{"type":"Initialized","status":"True","lastProbeTime":null,"lastTransitionTime":"2023-08-24T11:39:20Z"},{"type":"Ready","status":"True","lastProbeTime":null,"lastTransitionTime":"2023-08-24T11:39:21Z"},{"type":"ContainersReady","status":"True","lastProbeTime":null,"lastTransitionTime":"2023-08-24T11:39:21Z"},{"type":"PodScheduled","status":"True","lastProbeTime":null,"lastTransitionTime":"2023-08-24T11:39:20Z"}],"hostIP":"172.16.36.3","podIP":"10.100.0.210","podIPs":[{"ip":"10.100.0.210"}],"startTime":"2023-08-24T11:39:20Z","containerStatuses":[{"name":"app","state":{"running":{"startedAt":"2023-08-24T11:39:21Z"}},"lastState":{},"ready":true,"restartCount":0,"image":"registry.k8s.io/e2e-test-images/httpd:2.4.38-4","imageID":"registry.k8s.io/e2e-test-images/httpd@sha256:148b022f5c5da426fc2f3c14b5c0867e58ef05961510c84749ac1fddcb0fef22","containerID":"containerd://377d14be69ad5d6be47dd82cc1493d1a409100c8cf0b701ce352b4f1973db682","started":true}],"qosClass":"BestEffort"}},{"metadata":{"name":"daemon-set-hdszg","generateName":"daemon-set-","namespace":"daemonsets-6676","uid":"7004e643-193c-4ffd-8397-db9ff11421bf","resourceVersion":"3404871499","creationTimestamp":"2023-08-24T11:39:20Z","deletionTimestamp":"2023-08-24T11:39:52Z","deletionGracePeriodSeconds":30,"labels":{"controller-revision-hash":"58cb6b5b65","daemonset-name":"daemon-set","pod-template-generation":"1"},"ownerReferences":[{"apiVersion":"apps/v1","kind":"DaemonSet","name":"daemon-set","uid":"1969e502-9d94-450f-9daf-98e35012923f","controller":true,"blockOwnerDeletion":true}],"managedFields":[{"manager":"kube-controller-manager","operation":"Update","apiVersion":"v1","time":"2023-08-24T11:39:20Z","fieldsType":"FieldsV1","fieldsV1":{"f:metadata":{"f:generateName":{},"f:labels":{".":{},"f:controller-revision-hash":{},"f:daemonset-name":{},"f:pod-template-generation":{}},"f:ownerReferences":{".":{},"k:{\"uid\":\"1969e502-9d94-450f-9daf-98e35012923f\"}":{}}},"f:spec":{"f:affinity":{".":{},"f:nodeAffinity":{".":{},"f:requiredDuringSchedulingIgnoredDuringExecution":{}}},"f:containers":{"k:{\"name\":\"app\"}":{".":{},"f:image":{},"f:imagePullPolicy":{},"f:name":{},"f:ports":{".":{},"k:{\"containerPort\":9376,\"protocol\":\"TCP\"}":{".":{},"f:containerPort":{},"f:protocol":{}}},"f:resources":{},"f:securityContext":{},"f:terminationMessagePath":{},"f:terminationMessagePolicy":{}}},"f:dnsPolicy":{},"f:enableServiceLinks":{},"f:restartPolicy":{},"f:schedulerName":{},"f:securityContext":{},"f:terminationGracePeriodSeconds":{},"f:tolerations":{}}}},{"manager":"kubelet","operation":"Update","apiVersion":"v1","time":"2023-08-24T11:39:21Z","fieldsType":"FieldsV1","fieldsV1":{"f:status":{"f:conditions":{"k:{\"type\":\"ContainersReady\"}":{".":{},"f:lastProbeTime":{},"f:lastTransitionTime":{},"f:status":{},"f:type":{}},"k:{\"type\":\"Initialized\"}":{".":{},"f:lastProbeTime":{},"f:lastTransitionTime":{},"f:status":{},"f:type":{}},"k:{\"type\":\"Ready\"}":{".":{},"f:lastProbeTime":{},"f:lastTransitionTime":{},"f:status":{},"f:type":{}}},"f:containerStatuses":{},"f:hostIP":{},"f:phase":{},"f:podIP":{},"f:podIPs":{".":{},"k:{\"ip\":\"10.100.1.251\"}":{".":{},"f:ip":{}}},"f:startTime":{}}},"subresource":"status"}]},"spec":{"volumes":[{"name":"kube-api-access-ltkzv","projected":{"sources":[{"serviceAccountToken":{"expirationSeconds":3607,"path":"token"}},{"configMap":{"name":"kube-root-ca.crt","items":[{"key":"ca.crt","path":"ca.crt"}]}},{"downwardAPI":{"items":[{"path":"namespace","fieldRef":{"apiVersion":"v1","fieldPath":"metadata.namespace"}}]}}],"defaultMode":420}}],"containers":[{"name":"app","image":"registry.k8s.io/e2e-test-images/httpd:2.4.38-4","ports":[{"containerPort":9376,"protocol":"TCP"}],"resources":{},"volumeMounts":[{"name":"kube-api-access-ltkzv","readOnly":true,"mountPath":"/var/run/secrets/kubernetes.io/serviceaccount"}],"terminationMessagePath":"/dev/termination-log","terminationMessagePolicy":"File","imagePullPolicy":"IfNotPresent","securityContext":{}}],"restartPolicy":"Always","terminationGracePeriodSeconds":30,"dnsPolicy":"ClusterFirst","serviceAccountName":"default","serviceAccount":"default","nodeName":"scw-conformance-default-ecf11ec729064adba7e270","securityContext":{},"affinity":{"nodeAffinity":{"requiredDuringSchedulingIgnoredDuringExecution":{"nodeSelectorTerms":[{"matchFields":[{"key":"metadata.name","operator":"In","values":["scw-conformance-default-ecf11ec729064adba7e270"]}]}]}}},"schedulerName":"default-scheduler","tolerations":[{"key":"node.kubernetes.io/not-ready","operator":"Exists","effect":"NoExecute"},{"key":"node.kubernetes.io/unreachable","operator":"Exists","effect":"NoExecute"},{"key":"node.kubernetes.io/disk-pressure","operator":"Exists","effect":"NoSchedule"},{"key":"node.kubernetes.io/memory-pressure","operator":"Exists","effect":"NoSchedule"},{"key":"node.kubernetes.io/pid-pressure","operator":"Exists","effect":"NoSchedule"},{"key":"node.kubernetes.io/unschedulable","operator":"Exists","effect":"NoSchedule"}],"priority":0,"enableServiceLinks":true,"preemptionPolicy":"PreemptLowerPriority"},"status":{"phase":"Running","conditions":[{"type":"Initialized","status":"True","lastProbeTime":null,"lastTransitionTime":"2023-08-24T11:39:20Z"},{"type":"Ready","status":"True","lastProbeTime":null,"lastTransitionTime":"2023-08-24T11:39:21Z"},{"type":"ContainersReady","status":"True","lastProbeTime":null,"lastTransitionTime":"2023-08-24T11:39:21Z"},{"type":"PodScheduled","status":"True","lastProbeTime":null,"lastTransitionTime":"2023-08-24T11:39:20Z"}],"hostIP":"172.16.36.2","podIP":"10.100.1.251","podIPs":[{"ip":"10.100.1.251"}],"startTime":"2023-08-24T11:39:20Z","containerStatuses":[{"name":"app","state":{"running":{"startedAt":"2023-08-24T11:39:21Z"}},"lastState":{},"ready":true,"restartCount":0,"image":"registry.k8s.io/e2e-test-images/httpd:2.4.38-4","imageID":"registry.k8s.io/e2e-test-images/httpd@sha256:148b022f5c5da426fc2f3c14b5c0867e58ef05961510c84749ac1fddcb0fef22","containerID":"containerd://5569e7d8cac3cf9c62a94f7c6a35392d235a04f98f970b98935e97285940a7b1","started":true}],"qosClass":"BestEffort"}}]}

  Aug 24 11:39:22.375: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "daemonsets-6676" for this suite. @ 08/24/23 11:39:22.384
• [2.289 seconds]
------------------------------
SSS
------------------------------
[sig-api-machinery] CustomResourcePublishOpenAPI [Privileged:ClusterAdmin] works for CRD preserving unknown fields in an embedded object [Conformance]
test/e2e/apimachinery/crd_publish_openapi.go:236
  STEP: Creating a kubernetes client @ 08/24/23 11:39:22.4
  Aug 24 11:39:22.400: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename crd-publish-openapi @ 08/24/23 11:39:22.402
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 11:39:22.432
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 11:39:22.449
  Aug 24 11:39:22.456: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: kubectl validation (kubectl create and apply) allows request with any unknown properties @ 08/24/23 11:39:25.28
  Aug 24 11:39:25.280: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1002171096 --namespace=crd-publish-openapi-7392 --namespace=crd-publish-openapi-7392 create -f -'
  Aug 24 11:39:28.530: INFO: stderr: ""
  Aug 24 11:39:28.530: INFO: stdout: "e2e-test-crd-publish-openapi-6732-crd.crd-publish-openapi-test-unknown-in-nested.example.com/test-cr created\n"
  Aug 24 11:39:28.530: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1002171096 --namespace=crd-publish-openapi-7392 --namespace=crd-publish-openapi-7392 delete e2e-test-crd-publish-openapi-6732-crds test-cr'
  Aug 24 11:39:28.642: INFO: stderr: ""
  Aug 24 11:39:28.642: INFO: stdout: "e2e-test-crd-publish-openapi-6732-crd.crd-publish-openapi-test-unknown-in-nested.example.com \"test-cr\" deleted\n"
  Aug 24 11:39:28.642: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1002171096 --namespace=crd-publish-openapi-7392 --namespace=crd-publish-openapi-7392 apply -f -'
  Aug 24 11:39:28.902: INFO: stderr: ""
  Aug 24 11:39:28.902: INFO: stdout: "e2e-test-crd-publish-openapi-6732-crd.crd-publish-openapi-test-unknown-in-nested.example.com/test-cr created\n"
  Aug 24 11:39:28.902: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1002171096 --namespace=crd-publish-openapi-7392 --namespace=crd-publish-openapi-7392 delete e2e-test-crd-publish-openapi-6732-crds test-cr'
  Aug 24 11:39:29.034: INFO: stderr: ""
  Aug 24 11:39:29.034: INFO: stdout: "e2e-test-crd-publish-openapi-6732-crd.crd-publish-openapi-test-unknown-in-nested.example.com \"test-cr\" deleted\n"
  STEP: kubectl explain works to explain CR @ 08/24/23 11:39:29.034
  Aug 24 11:39:29.034: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1002171096 --namespace=crd-publish-openapi-7392 explain e2e-test-crd-publish-openapi-6732-crds'
  Aug 24 11:39:29.312: INFO: stderr: ""
  Aug 24 11:39:29.312: INFO: stdout: "GROUP:      crd-publish-openapi-test-unknown-in-nested.example.com\nKIND:       e2e-test-crd-publish-openapi-6732-crd\nVERSION:    v1\n\nDESCRIPTION:\n    preserve-unknown-properties in nested field for Testing\n    \nFIELDS:\n  apiVersion\t<string>\n    APIVersion defines the versioned schema of this representation of an object.\n    Servers should convert recognized schemas to the latest internal value, and\n    may reject unrecognized values. More info:\n    https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources\n\n  kind\t<string>\n    Kind is a string value representing the REST resource this object\n    represents. Servers may infer this from the endpoint the client submits\n    requests to. Cannot be updated. In CamelCase. More info:\n    https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\n\n  metadata\t<ObjectMeta>\n    Standard object's metadata. More info:\n    https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata\n\n  spec\t<Object>\n    Specification of Waldo\n\n  status\t<Object>\n    Status of Waldo\n\n\n"
  Aug 24 11:39:31.062: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "crd-publish-openapi-7392" for this suite. @ 08/24/23 11:39:31.087
• [8.702 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-network] Services should have session affinity work for service with type clusterIP [LinuxOnly] [Conformance]
test/e2e/network/service.go:2165
  STEP: Creating a kubernetes client @ 08/24/23 11:39:31.105
  Aug 24 11:39:31.105: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename services @ 08/24/23 11:39:31.106
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 11:39:31.137
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 11:39:31.144
  STEP: creating service in namespace services-427 @ 08/24/23 11:39:31.151
  STEP: creating service affinity-clusterip in namespace services-427 @ 08/24/23 11:39:31.151
  STEP: creating replication controller affinity-clusterip in namespace services-427 @ 08/24/23 11:39:31.176
  I0824 11:39:31.188539      22 runners.go:197] Created replication controller with name: affinity-clusterip, namespace: services-427, replica count: 3
  I0824 11:39:34.239437      22 runners.go:197] affinity-clusterip Pods: 3 out of 3 created, 3 running, 0 pending, 0 waiting, 0 inactive, 0 terminating, 0 unknown, 0 runningButNotReady 
  Aug 24 11:39:34.260: INFO: Creating new exec pod
  Aug 24 11:39:37.288: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1002171096 --namespace=services-427 exec execpod-affinitylwfnt -- /bin/sh -x -c echo hostName | nc -v -t -w 2 affinity-clusterip 80'
  Aug 24 11:39:37.529: INFO: stderr: "+ echo hostName\n+ nc -v -t -w 2 affinity-clusterip 80\nConnection to affinity-clusterip 80 port [tcp/http] succeeded!\n"
  Aug 24 11:39:37.529: INFO: stdout: "HTTP/1.1 400 Bad Request\r\nContent-Type: text/plain; charset=utf-8\r\nConnection: close\r\n\r\n400 Bad Request"
  Aug 24 11:39:37.529: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1002171096 --namespace=services-427 exec execpod-affinitylwfnt -- /bin/sh -x -c echo hostName | nc -v -t -w 2 10.96.109.131 80'
  Aug 24 11:39:37.765: INFO: stderr: "+ echo hostName\n+ nc -v -t -w 2 10.96.109.131 80\nConnection to 10.96.109.131 80 port [tcp/http] succeeded!\n"
  Aug 24 11:39:37.765: INFO: stdout: "HTTP/1.1 400 Bad Request\r\nContent-Type: text/plain; charset=utf-8\r\nConnection: close\r\n\r\n400 Bad Request"
  Aug 24 11:39:37.765: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1002171096 --namespace=services-427 exec execpod-affinitylwfnt -- /bin/sh -x -c for i in $(seq 0 15); do echo; curl -q -s --connect-timeout 2 http://10.96.109.131:80/ ; done'
  Aug 24 11:39:38.129: INFO: stderr: "+ seq 0 15\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.96.109.131:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.96.109.131:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.96.109.131:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.96.109.131:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.96.109.131:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.96.109.131:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.96.109.131:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.96.109.131:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.96.109.131:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.96.109.131:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.96.109.131:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.96.109.131:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.96.109.131:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.96.109.131:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.96.109.131:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.96.109.131:80/\n"
  Aug 24 11:39:38.129: INFO: stdout: "\naffinity-clusterip-d57cp\naffinity-clusterip-d57cp\naffinity-clusterip-d57cp\naffinity-clusterip-d57cp\naffinity-clusterip-d57cp\naffinity-clusterip-d57cp\naffinity-clusterip-d57cp\naffinity-clusterip-d57cp\naffinity-clusterip-d57cp\naffinity-clusterip-d57cp\naffinity-clusterip-d57cp\naffinity-clusterip-d57cp\naffinity-clusterip-d57cp\naffinity-clusterip-d57cp\naffinity-clusterip-d57cp\naffinity-clusterip-d57cp"
  Aug 24 11:39:38.129: INFO: Received response from host: affinity-clusterip-d57cp
  Aug 24 11:39:38.129: INFO: Received response from host: affinity-clusterip-d57cp
  Aug 24 11:39:38.129: INFO: Received response from host: affinity-clusterip-d57cp
  Aug 24 11:39:38.129: INFO: Received response from host: affinity-clusterip-d57cp
  Aug 24 11:39:38.129: INFO: Received response from host: affinity-clusterip-d57cp
  Aug 24 11:39:38.129: INFO: Received response from host: affinity-clusterip-d57cp
  Aug 24 11:39:38.129: INFO: Received response from host: affinity-clusterip-d57cp
  Aug 24 11:39:38.129: INFO: Received response from host: affinity-clusterip-d57cp
  Aug 24 11:39:38.129: INFO: Received response from host: affinity-clusterip-d57cp
  Aug 24 11:39:38.129: INFO: Received response from host: affinity-clusterip-d57cp
  Aug 24 11:39:38.129: INFO: Received response from host: affinity-clusterip-d57cp
  Aug 24 11:39:38.129: INFO: Received response from host: affinity-clusterip-d57cp
  Aug 24 11:39:38.129: INFO: Received response from host: affinity-clusterip-d57cp
  Aug 24 11:39:38.129: INFO: Received response from host: affinity-clusterip-d57cp
  Aug 24 11:39:38.129: INFO: Received response from host: affinity-clusterip-d57cp
  Aug 24 11:39:38.129: INFO: Received response from host: affinity-clusterip-d57cp
  Aug 24 11:39:38.129: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  Aug 24 11:39:38.139: INFO: Cleaning up the exec pod
  STEP: deleting ReplicationController affinity-clusterip in namespace services-427, will wait for the garbage collector to delete the pods @ 08/24/23 11:39:38.164
  Aug 24 11:39:38.249: INFO: Deleting ReplicationController affinity-clusterip took: 26.445569ms
  Aug 24 11:39:38.349: INFO: Terminating ReplicationController affinity-clusterip pods took: 100.459904ms
  STEP: Destroying namespace "services-427" for this suite. @ 08/24/23 11:39:41.685
• [10.594 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-storage] Secrets should be consumable from pods in volume with mappings [NodeConformance] [Conformance]
test/e2e/common/storage/secrets_volume.go:79
  STEP: Creating a kubernetes client @ 08/24/23 11:39:41.701
  Aug 24 11:39:41.701: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename secrets @ 08/24/23 11:39:41.702
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 11:39:41.756
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 11:39:41.764
  STEP: Creating secret with name secret-test-map-f5cd9813-140b-4363-929b-e1e0f32066ef @ 08/24/23 11:39:41.771
  STEP: Creating a pod to test consume secrets @ 08/24/23 11:39:41.781
  STEP: Saw pod success @ 08/24/23 11:39:45.826
  Aug 24 11:39:45.834: INFO: Trying to get logs from node scw-conformance-default-2af6d8b4c6264cc5b9e5e6 pod pod-secrets-cac526c0-9777-4325-aaf1-af4296c5af00 container secret-volume-test: <nil>
  STEP: delete the pod @ 08/24/23 11:39:45.853
  Aug 24 11:39:45.887: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "secrets-1522" for this suite. @ 08/24/23 11:39:45.897
• [4.209 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-storage] Downward API volume should update annotations on modification [NodeConformance] [Conformance]
test/e2e/common/storage/downwardapi_volume.go:163
  STEP: Creating a kubernetes client @ 08/24/23 11:39:45.912
  Aug 24 11:39:45.912: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename downward-api @ 08/24/23 11:39:45.913
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 11:39:45.971
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 11:39:45.979
  STEP: Creating the pod @ 08/24/23 11:39:45.986
  Aug 24 11:39:48.893: INFO: Successfully updated pod "annotationupdate8a34d444-193c-4ed3-8e24-d925aec228ae"
  Aug 24 11:39:50.978: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "downward-api-7075" for this suite. @ 08/24/23 11:39:50.987
• [5.088 seconds]
------------------------------
SSSSSSSS
------------------------------
[sig-storage] ConfigMap should be consumable from pods in volume with mappings [NodeConformance] [Conformance]
test/e2e/common/storage/configmap_volume.go:89
  STEP: Creating a kubernetes client @ 08/24/23 11:39:51
  Aug 24 11:39:51.000: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename configmap @ 08/24/23 11:39:51.001
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 11:39:51.077
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 11:39:51.083
  STEP: Creating configMap with name configmap-test-volume-map-9060cf1f-c139-4096-8569-91efc4dc1d2f @ 08/24/23 11:39:51.089
  STEP: Creating a pod to test consume configMaps @ 08/24/23 11:39:51.149
  STEP: Saw pod success @ 08/24/23 11:39:55.198
  Aug 24 11:39:55.206: INFO: Trying to get logs from node scw-conformance-default-2af6d8b4c6264cc5b9e5e6 pod pod-configmaps-3217aee3-7835-4642-931c-50d982c5e4cb container agnhost-container: <nil>
  STEP: delete the pod @ 08/24/23 11:39:55.23
  Aug 24 11:39:55.265: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "configmap-5047" for this suite. @ 08/24/23 11:39:55.273
• [4.285 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-storage] ConfigMap should be consumable from pods in volume with mappings and Item mode set [LinuxOnly] [NodeConformance] [Conformance]
test/e2e/common/storage/configmap_volume.go:99
  STEP: Creating a kubernetes client @ 08/24/23 11:39:55.287
  Aug 24 11:39:55.287: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename configmap @ 08/24/23 11:39:55.288
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 11:39:55.321
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 11:39:55.351
  STEP: Creating configMap with name configmap-test-volume-map-1200e091-d2d0-4fbd-9f51-3b481758cd95 @ 08/24/23 11:39:55.357
  STEP: Creating a pod to test consume configMaps @ 08/24/23 11:39:55.367
  STEP: Saw pod success @ 08/24/23 11:39:59.416
  Aug 24 11:39:59.424: INFO: Trying to get logs from node scw-conformance-default-2af6d8b4c6264cc5b9e5e6 pod pod-configmaps-6683f4c2-71f6-48b1-bf72-f98dff211b68 container agnhost-container: <nil>
  STEP: delete the pod @ 08/24/23 11:39:59.439
  Aug 24 11:39:59.467: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "configmap-3447" for this suite. @ 08/24/23 11:39:59.477
• [4.205 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-apps] Deployment should run the lifecycle of a Deployment [Conformance]
test/e2e/apps/deployment.go:185
  STEP: Creating a kubernetes client @ 08/24/23 11:39:59.493
  Aug 24 11:39:59.493: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename deployment @ 08/24/23 11:39:59.494
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 11:39:59.521
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 11:39:59.527
  STEP: creating a Deployment @ 08/24/23 11:39:59.555
  STEP: waiting for Deployment to be created @ 08/24/23 11:39:59.566
  STEP: waiting for all Replicas to be Ready @ 08/24/23 11:39:59.57
  Aug 24 11:39:59.573: INFO: observed Deployment test-deployment in namespace deployment-3483 with ReadyReplicas 0 and labels map[test-deployment-static:true]
  Aug 24 11:39:59.573: INFO: observed Deployment test-deployment in namespace deployment-3483 with ReadyReplicas 0 and labels map[test-deployment-static:true]
  Aug 24 11:39:59.595: INFO: observed Deployment test-deployment in namespace deployment-3483 with ReadyReplicas 0 and labels map[test-deployment-static:true]
  Aug 24 11:39:59.595: INFO: observed Deployment test-deployment in namespace deployment-3483 with ReadyReplicas 0 and labels map[test-deployment-static:true]
  Aug 24 11:39:59.656: INFO: observed Deployment test-deployment in namespace deployment-3483 with ReadyReplicas 0 and labels map[test-deployment-static:true]
  Aug 24 11:39:59.656: INFO: observed Deployment test-deployment in namespace deployment-3483 with ReadyReplicas 0 and labels map[test-deployment-static:true]
  Aug 24 11:39:59.771: INFO: observed Deployment test-deployment in namespace deployment-3483 with ReadyReplicas 0 and labels map[test-deployment-static:true]
  Aug 24 11:39:59.771: INFO: observed Deployment test-deployment in namespace deployment-3483 with ReadyReplicas 0 and labels map[test-deployment-static:true]
  Aug 24 11:40:00.640: INFO: observed Deployment test-deployment in namespace deployment-3483 with ReadyReplicas 1 and labels map[test-deployment-static:true]
  Aug 24 11:40:00.641: INFO: observed Deployment test-deployment in namespace deployment-3483 with ReadyReplicas 1 and labels map[test-deployment-static:true]
  Aug 24 11:40:00.948: INFO: observed Deployment test-deployment in namespace deployment-3483 with ReadyReplicas 2 and labels map[test-deployment-static:true]
  STEP: patching the Deployment @ 08/24/23 11:40:00.948
  Aug 24 11:40:00.970: INFO: observed event type ADDED
  STEP: waiting for Replicas to scale @ 08/24/23 11:40:00.97
  Aug 24 11:40:00.974: INFO: observed Deployment test-deployment in namespace deployment-3483 with ReadyReplicas 0
  Aug 24 11:40:00.974: INFO: observed Deployment test-deployment in namespace deployment-3483 with ReadyReplicas 0
  Aug 24 11:40:00.974: INFO: observed Deployment test-deployment in namespace deployment-3483 with ReadyReplicas 0
  Aug 24 11:40:00.974: INFO: observed Deployment test-deployment in namespace deployment-3483 with ReadyReplicas 0
  Aug 24 11:40:00.974: INFO: observed Deployment test-deployment in namespace deployment-3483 with ReadyReplicas 0
  Aug 24 11:40:00.974: INFO: observed Deployment test-deployment in namespace deployment-3483 with ReadyReplicas 0
  Aug 24 11:40:00.974: INFO: observed Deployment test-deployment in namespace deployment-3483 with ReadyReplicas 0
  Aug 24 11:40:00.974: INFO: observed Deployment test-deployment in namespace deployment-3483 with ReadyReplicas 0
  Aug 24 11:40:00.974: INFO: observed Deployment test-deployment in namespace deployment-3483 with ReadyReplicas 1
  Aug 24 11:40:00.975: INFO: observed Deployment test-deployment in namespace deployment-3483 with ReadyReplicas 1
  Aug 24 11:40:00.975: INFO: observed Deployment test-deployment in namespace deployment-3483 with ReadyReplicas 2
  Aug 24 11:40:00.975: INFO: observed Deployment test-deployment in namespace deployment-3483 with ReadyReplicas 2
  Aug 24 11:40:00.975: INFO: observed Deployment test-deployment in namespace deployment-3483 with ReadyReplicas 2
  Aug 24 11:40:00.975: INFO: observed Deployment test-deployment in namespace deployment-3483 with ReadyReplicas 2
  Aug 24 11:40:00.992: INFO: observed Deployment test-deployment in namespace deployment-3483 with ReadyReplicas 2
  Aug 24 11:40:00.992: INFO: observed Deployment test-deployment in namespace deployment-3483 with ReadyReplicas 2
  Aug 24 11:40:01.071: INFO: observed Deployment test-deployment in namespace deployment-3483 with ReadyReplicas 2
  Aug 24 11:40:01.071: INFO: observed Deployment test-deployment in namespace deployment-3483 with ReadyReplicas 2
  Aug 24 11:40:01.259: INFO: observed Deployment test-deployment in namespace deployment-3483 with ReadyReplicas 1
  Aug 24 11:40:01.259: INFO: observed Deployment test-deployment in namespace deployment-3483 with ReadyReplicas 1
  Aug 24 11:40:01.275: INFO: observed Deployment test-deployment in namespace deployment-3483 with ReadyReplicas 1
  Aug 24 11:40:01.275: INFO: observed Deployment test-deployment in namespace deployment-3483 with ReadyReplicas 1
  Aug 24 11:40:02.687: INFO: observed Deployment test-deployment in namespace deployment-3483 with ReadyReplicas 2
  Aug 24 11:40:02.687: INFO: observed Deployment test-deployment in namespace deployment-3483 with ReadyReplicas 2
  Aug 24 11:40:02.786: INFO: observed Deployment test-deployment in namespace deployment-3483 with ReadyReplicas 1
  STEP: listing Deployments @ 08/24/23 11:40:02.786
  Aug 24 11:40:02.798: INFO: Found test-deployment with labels: map[test-deployment:patched test-deployment-static:true]
  STEP: updating the Deployment @ 08/24/23 11:40:02.798
  Aug 24 11:40:02.820: INFO: observed Deployment test-deployment in namespace deployment-3483 with ReadyReplicas 1
  STEP: fetching the DeploymentStatus @ 08/24/23 11:40:02.82
  Aug 24 11:40:02.831: INFO: observed Deployment test-deployment in namespace deployment-3483 with ReadyReplicas 1 and labels map[test-deployment:updated test-deployment-static:true]
  Aug 24 11:40:02.842: INFO: observed Deployment test-deployment in namespace deployment-3483 with ReadyReplicas 1 and labels map[test-deployment:updated test-deployment-static:true]
  Aug 24 11:40:02.880: INFO: observed Deployment test-deployment in namespace deployment-3483 with ReadyReplicas 1 and labels map[test-deployment:updated test-deployment-static:true]
  Aug 24 11:40:03.049: INFO: observed Deployment test-deployment in namespace deployment-3483 with ReadyReplicas 1 and labels map[test-deployment:updated test-deployment-static:true]
  Aug 24 11:40:03.064: INFO: observed Deployment test-deployment in namespace deployment-3483 with ReadyReplicas 1 and labels map[test-deployment:updated test-deployment-static:true]
  Aug 24 11:40:03.964: INFO: observed Deployment test-deployment in namespace deployment-3483 with ReadyReplicas 2 and labels map[test-deployment:updated test-deployment-static:true]
  Aug 24 11:40:04.671: INFO: observed Deployment test-deployment in namespace deployment-3483 with ReadyReplicas 3 and labels map[test-deployment:updated test-deployment-static:true]
  Aug 24 11:40:04.764: INFO: observed Deployment test-deployment in namespace deployment-3483 with ReadyReplicas 2 and labels map[test-deployment:updated test-deployment-static:true]
  Aug 24 11:40:04.870: INFO: observed Deployment test-deployment in namespace deployment-3483 with ReadyReplicas 2 and labels map[test-deployment:updated test-deployment-static:true]
  Aug 24 11:40:05.970: INFO: observed Deployment test-deployment in namespace deployment-3483 with ReadyReplicas 3 and labels map[test-deployment:updated test-deployment-static:true]
  STEP: patching the DeploymentStatus @ 08/24/23 11:40:06.049
  STEP: fetching the DeploymentStatus @ 08/24/23 11:40:06.068
  Aug 24 11:40:06.085: INFO: observed Deployment test-deployment in namespace deployment-3483 with ReadyReplicas 1
  Aug 24 11:40:06.085: INFO: observed Deployment test-deployment in namespace deployment-3483 with ReadyReplicas 1
  Aug 24 11:40:06.085: INFO: observed Deployment test-deployment in namespace deployment-3483 with ReadyReplicas 1
  Aug 24 11:40:06.085: INFO: observed Deployment test-deployment in namespace deployment-3483 with ReadyReplicas 1
  Aug 24 11:40:06.085: INFO: observed Deployment test-deployment in namespace deployment-3483 with ReadyReplicas 1
  Aug 24 11:40:06.086: INFO: observed Deployment test-deployment in namespace deployment-3483 with ReadyReplicas 2
  Aug 24 11:40:06.086: INFO: observed Deployment test-deployment in namespace deployment-3483 with ReadyReplicas 3
  Aug 24 11:40:06.086: INFO: observed Deployment test-deployment in namespace deployment-3483 with ReadyReplicas 2
  Aug 24 11:40:06.087: INFO: observed Deployment test-deployment in namespace deployment-3483 with ReadyReplicas 2
  Aug 24 11:40:06.087: INFO: observed Deployment test-deployment in namespace deployment-3483 with ReadyReplicas 3
  STEP: deleting the Deployment @ 08/24/23 11:40:06.087
  Aug 24 11:40:06.111: INFO: observed event type MODIFIED
  Aug 24 11:40:06.111: INFO: observed event type MODIFIED
  Aug 24 11:40:06.111: INFO: observed event type MODIFIED
  Aug 24 11:40:06.111: INFO: observed event type MODIFIED
  Aug 24 11:40:06.111: INFO: observed event type MODIFIED
  Aug 24 11:40:06.112: INFO: observed event type MODIFIED
  Aug 24 11:40:06.112: INFO: observed event type MODIFIED
  Aug 24 11:40:06.112: INFO: observed event type MODIFIED
  Aug 24 11:40:06.112: INFO: observed event type MODIFIED
  Aug 24 11:40:06.112: INFO: observed event type MODIFIED
  Aug 24 11:40:06.112: INFO: observed event type MODIFIED
  Aug 24 11:40:06.112: INFO: observed event type MODIFIED
  Aug 24 11:40:06.112: INFO: observed event type MODIFIED
  Aug 24 11:40:06.120: INFO: Log out all the ReplicaSets if there is no deployment created
  Aug 24 11:40:06.131: INFO: ReplicaSet "test-deployment-64fd565c98":
  (v1.ReplicaSet) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=26) "test-deployment-64fd565c98",
      GenerateName: (string) "",
      Namespace: (string) (len=15) "deployment-3483",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "77ed794d-5e02-4c3d-aa4f-e48a63b1da25",
      ResourceVersion: (string) (len=10) "3404873771",
      Generation: (int64) 4,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63828474001,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=17) "pod-template-hash": (string) (len=10) "64fd565c98",
        (string) (len=22) "test-deployment-static": (string) (len=4) "true"
      },
      Annotations: (map[string]string) (len=3) {
        (string) (len=41) "deployment.kubernetes.io/desired-replicas": (string) (len=1) "2",
        (string) (len=37) "deployment.kubernetes.io/max-replicas": (string) (len=1) "3",
        (string) (len=33) "deployment.kubernetes.io/revision": (string) (len=1) "2"
      },
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "Deployment",
          Name: (string) (len=15) "test-deployment",
          UID: (types.UID) (len=36) "e9581001-9fdf-4d9c-b5ee-ead54f80d431",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828474005,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=827) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 61 6e 6e 6f 74 61  74 69 6f 6e 73 22 3a 7b  |f:annotations":{|
              00000020  22 2e 22 3a 7b 7d 2c 22  66 3a 64 65 70 6c 6f 79  |".":{},"f:deploy|
              00000030  6d 65 6e 74 2e 6b 75 62  65 72 6e 65 74 65 73 2e  |ment.kubernetes.|
              00000040  69 6f 2f 64 65 73 69 72  65 64 2d 72 65 70 6c 69  |io/desired-repli|
              00000050  63 61 73 22 3a 7b 7d 2c  22 66 3a 64 65 70 6c 6f  |cas":{},"f:deplo|
              00000060  79 6d 65 6e 74 2e 6b 75  62 65 72 6e 65 74 65 73  |yment.kubernetes|
              00000070  2e 69 6f 2f 6d 61 78 2d  72 65 70 6c 69 63 61 73  |.io/max-replicas|
              00000080  22 3a 7b 7d 2c 22 66 3a  64 65 70 6c 6f 79 6d 65  |":{},"f:deployme|
              00000090  6e 74 2e 6b 75 62 65 72  6e 65 74 65 73 2e 69 6f  |nt.kubernetes.io|
              000000a0  2f 72 65 76 69 73 69 6f  6e 22 3a 7b 7d 7d 2c 22  |/revision":{}},"|
              000000b0  66 3a 6c 61 62 65 6c 73  22 3a 7b 22 2e 22 3a 7b  |f:labels":{".":{|
              000000c0  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              000000d0  65 2d 68 61 73 68 22 3a  7b 7d 2c 22 66 3a 74 65  |e-hash":{},"f:te|
              000000e0  73 74 2d 64 65 70 6c 6f  79 6d 65 6e 74 2d 73 74  |st-deployment-st|
              000000f0  61 74 69 63 22 3a 7b 7d  7d 2c 22 66 3a 6f 77 6e  |atic":{}},"f:own|
              00000100  65 72 52 65 66 65 72 65  6e 63 65 73 22 3a 7b 22  |erReferences":{"|
              00000110  2e 22 3a 7b 7d 2c 22 6b  3a 7b 5c 22 75 69 64 5c  |.":{},"k:{\"uid\|
              00000120  22 3a 5c 22 65 39 35 38  31 30 30 31 2d 39 66 64  |":\"e9581001-9fd|
              00000130  66 2d 34 64 39 63 2d 62  35 65 65 2d 65 61 64 35  |f-4d9c-b5ee-ead5|
              00000140  34 66 38 30 64 34 33 31  5c 22 7d 22 3a 7b 7d 7d  |4f80d431\"}":{}}|
              00000150  7d 2c 22 66 3a 73 70 65  63 22 3a 7b 22 66 3a 72  |},"f:spec":{"f:r|
              00000160  65 70 6c 69 63 61 73 22  3a 7b 7d 2c 22 66 3a 73  |eplicas":{},"f:s|
              00000170  65 6c 65 63 74 6f 72 22  3a 7b 7d 2c 22 66 3a 74  |elector":{},"f:t|
              00000180  65 6d 70 6c 61 74 65 22  3a 7b 22 66 3a 6d 65 74  |emplate":{"f:met|
              00000190  61 64 61 74 61 22 3a 7b  22 66 3a 6c 61 62 65 6c  |adata":{"f:label|
              000001a0  73 22 3a 7b 22 2e 22 3a  7b 7d 2c 22 66 3a 70 6f  |s":{".":{},"f:po|
              000001b0  64 2d 74 65 6d 70 6c 61  74 65 2d 68 61 73 68 22  |d-template-hash"|
              000001c0  3a 7b 7d 2c 22 66 3a 74  65 73 74 2d 64 65 70 6c  |:{},"f:test-depl|
              000001d0  6f 79 6d 65 6e 74 2d 73  74 61 74 69 63 22 3a 7b  |oyment-static":{|
              000001e0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000001f0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              00000200  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 74 65 73  |:{\"name\":\"tes|
              00000210  74 2d 64 65 70 6c 6f 79  6d 65 6e 74 5c 22 7d 22  |t-deployment\"}"|
              00000220  3a 7b 22 2e 22 3a 7b 7d  2c 22 66 3a 69 6d 61 67  |:{".":{},"f:imag|
              00000230  65 22 3a 7b 7d 2c 22 66  3a 69 6d 61 67 65 50 75  |e":{},"f:imagePu|
              00000240  6c 6c 50 6f 6c 69 63 79  22 3a 7b 7d 2c 22 66 3a  |llPolicy":{},"f:|
              00000250  6e 61 6d 65 22 3a 7b 7d  2c 22 66 3a 72 65 73 6f  |name":{},"f:reso|
              00000260  75 72 63 65 73 22 3a 7b  7d 2c 22 66 3a 73 65 63  |urces":{},"f:sec|
              00000270  75 72 69 74 79 43 6f 6e  74 65 78 74 22 3a 7b 7d  |urityContext":{}|
              00000280  2c 22 66 3a 74 65 72 6d  69 6e 61 74 69 6f 6e 4d  |,"f:terminationM|
              00000290  65 73 73 61 67 65 50 61  74 68 22 3a 7b 7d 2c 22  |essagePath":{},"|
              000002a0  66 3a 74 65 72 6d 69 6e  61 74 69 6f 6e 4d 65 73  |f:terminationMes|
              000002b0  73 61 67 65 50 6f 6c 69  63 79 22 3a 7b 7d 7d 7d  |sagePolicy":{}}}|
              000002c0  2c 22 66 3a 64 6e 73 50  6f 6c 69 63 79 22 3a 7b  |,"f:dnsPolicy":{|
              000002d0  7d 2c 22 66 3a 72 65 73  74 61 72 74 50 6f 6c 69  |},"f:restartPoli|
              000002e0  63 79 22 3a 7b 7d 2c 22  66 3a 73 63 68 65 64 75  |cy":{},"f:schedu|
              000002f0  6c 65 72 4e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 73  |lerName":{},"f:s|
              00000300  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              00000310  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000320  6e 47 72 61 63 65 50 65  72 69 6f 64 53 65 63 6f  |nGracePeriodSeco|
              00000330  6e 64 73 22 3a 7b 7d 7d  7d 7d 7d                 |nds":{}}}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828474005,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=56) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  6f 62 73 65 72 76 65 64  47 65 6e 65 72 61 74 69  |observedGenerati|
              00000020  6f 6e 22 3a 7b 7d 2c 22  66 3a 72 65 70 6c 69 63  |on":{},"f:replic|
              00000030  61 73 22 3a 7b 7d 7d 7d                           |as":{}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.ReplicaSetSpec) {
      Replicas: (*int32)(0),
      MinReadySeconds: (int32) 0,
      Selector: (*v1.LabelSelector)({
        MatchLabels: (map[string]string) (len=2) {
          (string) (len=17) "pod-template-hash": (string) (len=10) "64fd565c98",
          (string) (len=22) "test-deployment-static": (string) (len=4) "true"
        },
        MatchExpressions: ([]v1.LabelSelectorRequirement) <nil>
      }),
      Template: (v1.PodTemplateSpec) {
        ObjectMeta: (v1.ObjectMeta) {
          Name: (string) "",
          GenerateName: (string) "",
          Namespace: (string) "",
          SelfLink: (string) "",
          UID: (types.UID) "",
          ResourceVersion: (string) "",
          Generation: (int64) 0,
          CreationTimestamp: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          DeletionTimestamp: (*v1.Time)(<nil>),
          DeletionGracePeriodSeconds: (*int64)(<nil>),
          Labels: (map[string]string) (len=2) {
            (string) (len=22) "test-deployment-static": (string) (len=4) "true",
            (string) (len=17) "pod-template-hash": (string) (len=10) "64fd565c98"
          },
          Annotations: (map[string]string) <nil>,
          OwnerReferences: ([]v1.OwnerReference) <nil>,
          Finalizers: ([]string) <nil>,
          ManagedFields: ([]v1.ManagedFieldsEntry) <nil>
        },
        Spec: (v1.PodSpec) {
          Volumes: ([]v1.Volume) <nil>,
          InitContainers: ([]v1.Container) <nil>,
          Containers: ([]v1.Container) (len=1) {
            (v1.Container) {
              Name: (string) (len=15) "test-deployment",
              Image: (string) (len=25) "registry.k8s.io/pause:3.9",
              Command: ([]string) <nil>,
              Args: ([]string) <nil>,
              WorkingDir: (string) "",
              Ports: ([]v1.ContainerPort) <nil>,
              EnvFrom: ([]v1.EnvFromSource) <nil>,
              Env: ([]v1.EnvVar) <nil>,
              Resources: (v1.ResourceRequirements) {
                Limits: (v1.ResourceList) <nil>,
                Requests: (v1.ResourceList) <nil>,
                Claims: ([]v1.ResourceClaim) <nil>
              },
              ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
              RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
              VolumeMounts: ([]v1.VolumeMount) <nil>,
              VolumeDevices: ([]v1.VolumeDevice) <nil>,
              LivenessProbe: (*v1.Probe)(<nil>),
              ReadinessProbe: (*v1.Probe)(<nil>),
              StartupProbe: (*v1.Probe)(<nil>),
              Lifecycle: (*v1.Lifecycle)(<nil>),
              TerminationMessagePath: (string) (len=20) "/dev/termination-log",
              TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
              ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
              SecurityContext: (*v1.SecurityContext)({
                Capabilities: (*v1.Capabilities)(<nil>),
                Privileged: (*bool)(<nil>),
                SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
                WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
                RunAsUser: (*int64)(<nil>),
                RunAsGroup: (*int64)(<nil>),
                RunAsNonRoot: (*bool)(<nil>),
                ReadOnlyRootFilesystem: (*bool)(<nil>),
                AllowPrivilegeEscalation: (*bool)(<nil>),
                ProcMount: (*v1.ProcMountType)(<nil>),
                SeccompProfile: (*v1.SeccompProfile)(<nil>)
              }),
              Stdin: (bool) false,
              StdinOnce: (bool) false,
              TTY: (bool) false
            }
          },
          EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
          RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
          TerminationGracePeriodSeconds: (*int64)(2),
          ActiveDeadlineSeconds: (*int64)(<nil>),
          DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
          NodeSelector: (map[string]string) <nil>,
          ServiceAccountName: (string) "",
          DeprecatedServiceAccount: (string) "",
          AutomountServiceAccountToken: (*bool)(<nil>),
          NodeName: (string) "",
          HostNetwork: (bool) false,
          HostPID: (bool) false,
          HostIPC: (bool) false,
          ShareProcessNamespace: (*bool)(<nil>),
          SecurityContext: (*v1.PodSecurityContext)({
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            SupplementalGroups: ([]int64) <nil>,
            FSGroup: (*int64)(<nil>),
            Sysctls: ([]v1.Sysctl) <nil>,
            FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
          Hostname: (string) "",
          Subdomain: (string) "",
          Affinity: (*v1.Affinity)(<nil>),
          SchedulerName: (string) (len=17) "default-scheduler",
          Tolerations: ([]v1.Toleration) <nil>,
          HostAliases: ([]v1.HostAlias) <nil>,
          PriorityClassName: (string) "",
          Priority: (*int32)(<nil>),
          DNSConfig: (*v1.PodDNSConfig)(<nil>),
          ReadinessGates: ([]v1.PodReadinessGate) <nil>,
          RuntimeClassName: (*string)(<nil>),
          EnableServiceLinks: (*bool)(<nil>),
          PreemptionPolicy: (*v1.PreemptionPolicy)(<nil>),
          Overhead: (v1.ResourceList) <nil>,
          TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
          SetHostnameAsFQDN: (*bool)(<nil>),
          OS: (*v1.PodOS)(<nil>),
          HostUsers: (*bool)(<nil>),
          SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
          ResourceClaims: ([]v1.PodResourceClaim) <nil>
        }
      }
    },
    Status: (v1.ReplicaSetStatus) {
      Replicas: (int32) 0,
      FullyLabeledReplicas: (int32) 0,
      ReadyReplicas: (int32) 0,
      AvailableReplicas: (int32) 0,
      ObservedGeneration: (int64) 4,
      Conditions: ([]v1.ReplicaSetCondition) <nil>
    }
  }


  Aug 24 11:40:06.144: INFO: pod: "test-deployment-64fd565c98-2484g":
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=32) "test-deployment-64fd565c98-2484g",
      GenerateName: (string) (len=27) "test-deployment-64fd565c98-",
      Namespace: (string) (len=15) "deployment-3483",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "7657e7d7-4578-48a7-9256-47f272422113",
      ResourceVersion: (string) (len=10) "3404873769",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63828474002,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)({
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63828474007,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      }),
      DeletionGracePeriodSeconds: (*int64)(2),
      Labels: (map[string]string) (len=2) {
        (string) (len=17) "pod-template-hash": (string) (len=10) "64fd565c98",
        (string) (len=22) "test-deployment-static": (string) (len=4) "true"
      },
      Annotations: (map[string]string) <nil>,
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=26) "test-deployment-64fd565c98",
          UID: (types.UID) (len=36) "77ed794d-5e02-4c3d-aa4f-e48a63b1da25",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828474002,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=565) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 70 6f 64 2d 74 65 6d  |.":{},"f:pod-tem|
              00000040  70 6c 61 74 65 2d 68 61  73 68 22 3a 7b 7d 2c 22  |plate-hash":{},"|
              00000050  66 3a 74 65 73 74 2d 64  65 70 6c 6f 79 6d 65 6e  |f:test-deploymen|
              00000060  74 2d 73 74 61 74 69 63  22 3a 7b 7d 7d 2c 22 66  |t-static":{}},"f|
              00000070  3a 6f 77 6e 65 72 52 65  66 65 72 65 6e 63 65 73  |:ownerReferences|
              00000080  22 3a 7b 22 2e 22 3a 7b  7d 2c 22 6b 3a 7b 5c 22  |":{".":{},"k:{\"|
              00000090  75 69 64 5c 22 3a 5c 22  37 37 65 64 37 39 34 64  |uid\":\"77ed794d|
              000000a0  2d 35 65 30 32 2d 34 63  33 64 2d 61 61 34 66 2d  |-5e02-4c3d-aa4f-|
              000000b0  65 34 38 61 36 33 62 31  64 61 32 35 5c 22 7d 22  |e48a63b1da25\"}"|
              000000c0  3a 7b 7d 7d 7d 2c 22 66  3a 73 70 65 63 22 3a 7b  |:{}}},"f:spec":{|
              000000d0  22 66 3a 63 6f 6e 74 61  69 6e 65 72 73 22 3a 7b  |"f:containers":{|
              000000e0  22 6b 3a 7b 5c 22 6e 61  6d 65 5c 22 3a 5c 22 74  |"k:{\"name\":\"t|
              000000f0  65 73 74 2d 64 65 70 6c  6f 79 6d 65 6e 74 5c 22  |est-deployment\"|
              00000100  7d 22 3a 7b 22 2e 22 3a  7b 7d 2c 22 66 3a 69 6d  |}":{".":{},"f:im|
              00000110  61 67 65 22 3a 7b 7d 2c  22 66 3a 69 6d 61 67 65  |age":{},"f:image|
              00000120  50 75 6c 6c 50 6f 6c 69  63 79 22 3a 7b 7d 2c 22  |PullPolicy":{},"|
              00000130  66 3a 6e 61 6d 65 22 3a  7b 7d 2c 22 66 3a 72 65  |f:name":{},"f:re|
              00000140  73 6f 75 72 63 65 73 22  3a 7b 7d 2c 22 66 3a 73  |sources":{},"f:s|
              00000150  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              00000160  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000170  6e 4d 65 73 73 61 67 65  50 61 74 68 22 3a 7b 7d  |nMessagePath":{}|
              00000180  2c 22 66 3a 74 65 72 6d  69 6e 61 74 69 6f 6e 4d  |,"f:terminationM|
              00000190  65 73 73 61 67 65 50 6f  6c 69 63 79 22 3a 7b 7d  |essagePolicy":{}|
              000001a0  7d 7d 2c 22 66 3a 64 6e  73 50 6f 6c 69 63 79 22  |}},"f:dnsPolicy"|
              000001b0  3a 7b 7d 2c 22 66 3a 65  6e 61 62 6c 65 53 65 72  |:{},"f:enableSer|
              000001c0  76 69 63 65 4c 69 6e 6b  73 22 3a 7b 7d 2c 22 66  |viceLinks":{},"f|
              000001d0  3a 72 65 73 74 61 72 74  50 6f 6c 69 63 79 22 3a  |:restartPolicy":|
              000001e0  7b 7d 2c 22 66 3a 73 63  68 65 64 75 6c 65 72 4e  |{},"f:schedulerN|
              000001f0  61 6d 65 22 3a 7b 7d 2c  22 66 3a 73 65 63 75 72  |ame":{},"f:secur|
              00000200  69 74 79 43 6f 6e 74 65  78 74 22 3a 7b 7d 2c 22  |ityContext":{},"|
              00000210  66 3a 74 65 72 6d 69 6e  61 74 69 6f 6e 47 72 61  |f:terminationGra|
              00000220  63 65 50 65 72 69 6f 64  53 65 63 6f 6e 64 73 22  |cePeriodSeconds"|
              00000230  3a 7b 7d 7d 7d                                    |:{}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=7) "kubelet",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828474003,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=518) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  63 6f 6e 64 69 74 69 6f  6e 73 22 3a 7b 22 6b 3a  |conditions":{"k:|
              00000020  7b 5c 22 74 79 70 65 5c  22 3a 5c 22 43 6f 6e 74  |{\"type\":\"Cont|
              00000030  61 69 6e 65 72 73 52 65  61 64 79 5c 22 7d 22 3a  |ainersReady\"}":|
              00000040  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000050  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000060  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000070  6d 65 22 3a 7b 7d 2c 22  66 3a 73 74 61 74 75 73  |me":{},"f:status|
              00000080  22 3a 7b 7d 2c 22 66 3a  74 79 70 65 22 3a 7b 7d  |":{},"f:type":{}|
              00000090  7d 2c 22 6b 3a 7b 5c 22  74 79 70 65 5c 22 3a 5c  |},"k:{\"type\":\|
              000000a0  22 49 6e 69 74 69 61 6c  69 7a 65 64 5c 22 7d 22  |"Initialized\"}"|
              000000b0  3a 7b 22 2e 22 3a 7b 7d  2c 22 66 3a 6c 61 73 74  |:{".":{},"f:last|
              000000c0  50 72 6f 62 65 54 69 6d  65 22 3a 7b 7d 2c 22 66  |ProbeTime":{},"f|
              000000d0  3a 6c 61 73 74 54 72 61  6e 73 69 74 69 6f 6e 54  |:lastTransitionT|
              000000e0  69 6d 65 22 3a 7b 7d 2c  22 66 3a 73 74 61 74 75  |ime":{},"f:statu|
              000000f0  73 22 3a 7b 7d 2c 22 66  3a 74 79 70 65 22 3a 7b  |s":{},"f:type":{|
              00000100  7d 7d 2c 22 6b 3a 7b 5c  22 74 79 70 65 5c 22 3a  |}},"k:{\"type\":|
              00000110  5c 22 52 65 61 64 79 5c  22 7d 22 3a 7b 22 2e 22  |\"Ready\"}":{"."|
              00000120  3a 7b 7d 2c 22 66 3a 6c  61 73 74 50 72 6f 62 65  |:{},"f:lastProbe|
              00000130  54 69 6d 65 22 3a 7b 7d  2c 22 66 3a 6c 61 73 74  |Time":{},"f:last|
              00000140  54 72 61 6e 73 69 74 69  6f 6e 54 69 6d 65 22 3a  |TransitionTime":|
              00000150  7b 7d 2c 22 66 3a 73 74  61 74 75 73 22 3a 7b 7d  |{},"f:status":{}|
              00000160  2c 22 66 3a 74 79 70 65  22 3a 7b 7d 7d 7d 2c 22  |,"f:type":{}}},"|
              00000170  66 3a 63 6f 6e 74 61 69  6e 65 72 53 74 61 74 75  |f:containerStatu|
              00000180  73 65 73 22 3a 7b 7d 2c  22 66 3a 68 6f 73 74 49  |ses":{},"f:hostI|
              00000190  50 22 3a 7b 7d 2c 22 66  3a 70 68 61 73 65 22 3a  |P":{},"f:phase":|
              000001a0  7b 7d 2c 22 66 3a 70 6f  64 49 50 22 3a 7b 7d 2c  |{},"f:podIP":{},|
              000001b0  22 66 3a 70 6f 64 49 50  73 22 3a 7b 22 2e 22 3a  |"f:podIPs":{".":|
              000001c0  7b 7d 2c 22 6b 3a 7b 5c  22 69 70 5c 22 3a 5c 22  |{},"k:{\"ip\":\"|
              000001d0  31 30 2e 31 30 30 2e 31  2e 31 36 5c 22 7d 22 3a  |10.100.1.16\"}":|
              000001e0  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 69 70 22 3a 7b  |{".":{},"f:ip":{|
              000001f0  7d 7d 7d 2c 22 66 3a 73  74 61 72 74 54 69 6d 65  |}}},"f:startTime|
              00000200  22 3a 7b 7d 7d 7d                                 |":{}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-rbxc9",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  })
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=15) "test-deployment",
          Image: (string) (len=25) "registry.k8s.io/pause:3.9",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-rbxc9",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(2),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=46) "scw-conformance-default-ecf11ec729064adba7e270",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Running",
      Conditions: ([]v1.PodCondition) (len=4) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=11) "Initialized",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828474002,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=5) "Ready",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828474003,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=15) "ContainersReady",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828474003,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828474002,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) (len=11) "172.16.36.2",
      HostIPs: ([]v1.HostIP) <nil>,
      PodIP: (string) (len=11) "10.100.1.16",
      PodIPs: ([]v1.PodIP) (len=1) {
        (v1.PodIP) {
          IP: (string) (len=11) "10.100.1.16"
        }
      },
      StartTime: (*v1.Time)({
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63828474002,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      }),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) (len=1) {
        (v1.ContainerStatus) {
          Name: (string) (len=15) "test-deployment",
          State: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)({
              StartedAt: (v1.Time) {
                Time: (time.Time) {
                  wall: (uint64) 0,
                  ext: (int64) 63828474003,
                  loc: (*time.Location)(<already shown>)
                }
              }
            }),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          LastTerminationState: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          Ready: (bool) true,
          RestartCount: (int32) 0,
          Image: (string) (len=25) "registry.k8s.io/pause:3.9",
          ImageID: (string) (len=93) "registry.k8s.io/pause@sha256:7031c1b283388d2c2e09b57badb803c05ebed362dc88d84b480cc47f72a21097",
          ContainerID: (string) (len=77) "containerd://5edeb7adf9a5bf5660595c09f907d91c978250b20bf112bc923c6a4057bc77c8",
          Started: (*bool)(true),
          AllocatedResources: (v1.ResourceList) <nil>,
          Resources: (*v1.ResourceRequirements)(<nil>)
        }
      },
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }


  Aug 24 11:40:06.147: INFO: ReplicaSet "test-deployment-69d58987ff":
  (v1.ReplicaSet) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=26) "test-deployment-69d58987ff",
      GenerateName: (string) "",
      Namespace: (string) (len=15) "deployment-3483",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "cfdabdc4-d7d9-4437-9ee4-3f39cfa90b8b",
      ResourceVersion: (string) (len=10) "3404873566",
      Generation: (int64) 3,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63828473999,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=17) "pod-template-hash": (string) (len=10) "69d58987ff",
        (string) (len=22) "test-deployment-static": (string) (len=4) "true"
      },
      Annotations: (map[string]string) (len=3) {
        (string) (len=37) "deployment.kubernetes.io/max-replicas": (string) (len=1) "2",
        (string) (len=33) "deployment.kubernetes.io/revision": (string) (len=1) "1",
        (string) (len=41) "deployment.kubernetes.io/desired-replicas": (string) (len=1) "1"
      },
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "Deployment",
          Name: (string) (len=15) "test-deployment",
          UID: (types.UID) (len=36) "e9581001-9fdf-4d9c-b5ee-ead54f80d431",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828474002,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=827) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 61 6e 6e 6f 74 61  74 69 6f 6e 73 22 3a 7b  |f:annotations":{|
              00000020  22 2e 22 3a 7b 7d 2c 22  66 3a 64 65 70 6c 6f 79  |".":{},"f:deploy|
              00000030  6d 65 6e 74 2e 6b 75 62  65 72 6e 65 74 65 73 2e  |ment.kubernetes.|
              00000040  69 6f 2f 64 65 73 69 72  65 64 2d 72 65 70 6c 69  |io/desired-repli|
              00000050  63 61 73 22 3a 7b 7d 2c  22 66 3a 64 65 70 6c 6f  |cas":{},"f:deplo|
              00000060  79 6d 65 6e 74 2e 6b 75  62 65 72 6e 65 74 65 73  |yment.kubernetes|
              00000070  2e 69 6f 2f 6d 61 78 2d  72 65 70 6c 69 63 61 73  |.io/max-replicas|
              00000080  22 3a 7b 7d 2c 22 66 3a  64 65 70 6c 6f 79 6d 65  |":{},"f:deployme|
              00000090  6e 74 2e 6b 75 62 65 72  6e 65 74 65 73 2e 69 6f  |nt.kubernetes.io|
              000000a0  2f 72 65 76 69 73 69 6f  6e 22 3a 7b 7d 7d 2c 22  |/revision":{}},"|
              000000b0  66 3a 6c 61 62 65 6c 73  22 3a 7b 22 2e 22 3a 7b  |f:labels":{".":{|
              000000c0  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              000000d0  65 2d 68 61 73 68 22 3a  7b 7d 2c 22 66 3a 74 65  |e-hash":{},"f:te|
              000000e0  73 74 2d 64 65 70 6c 6f  79 6d 65 6e 74 2d 73 74  |st-deployment-st|
              000000f0  61 74 69 63 22 3a 7b 7d  7d 2c 22 66 3a 6f 77 6e  |atic":{}},"f:own|
              00000100  65 72 52 65 66 65 72 65  6e 63 65 73 22 3a 7b 22  |erReferences":{"|
              00000110  2e 22 3a 7b 7d 2c 22 6b  3a 7b 5c 22 75 69 64 5c  |.":{},"k:{\"uid\|
              00000120  22 3a 5c 22 65 39 35 38  31 30 30 31 2d 39 66 64  |":\"e9581001-9fd|
              00000130  66 2d 34 64 39 63 2d 62  35 65 65 2d 65 61 64 35  |f-4d9c-b5ee-ead5|
              00000140  34 66 38 30 64 34 33 31  5c 22 7d 22 3a 7b 7d 7d  |4f80d431\"}":{}}|
              00000150  7d 2c 22 66 3a 73 70 65  63 22 3a 7b 22 66 3a 72  |},"f:spec":{"f:r|
              00000160  65 70 6c 69 63 61 73 22  3a 7b 7d 2c 22 66 3a 73  |eplicas":{},"f:s|
              00000170  65 6c 65 63 74 6f 72 22  3a 7b 7d 2c 22 66 3a 74  |elector":{},"f:t|
              00000180  65 6d 70 6c 61 74 65 22  3a 7b 22 66 3a 6d 65 74  |emplate":{"f:met|
              00000190  61 64 61 74 61 22 3a 7b  22 66 3a 6c 61 62 65 6c  |adata":{"f:label|
              000001a0  73 22 3a 7b 22 2e 22 3a  7b 7d 2c 22 66 3a 70 6f  |s":{".":{},"f:po|
              000001b0  64 2d 74 65 6d 70 6c 61  74 65 2d 68 61 73 68 22  |d-template-hash"|
              000001c0  3a 7b 7d 2c 22 66 3a 74  65 73 74 2d 64 65 70 6c  |:{},"f:test-depl|
              000001d0  6f 79 6d 65 6e 74 2d 73  74 61 74 69 63 22 3a 7b  |oyment-static":{|
              000001e0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000001f0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              00000200  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 74 65 73  |:{\"name\":\"tes|
              00000210  74 2d 64 65 70 6c 6f 79  6d 65 6e 74 5c 22 7d 22  |t-deployment\"}"|
              00000220  3a 7b 22 2e 22 3a 7b 7d  2c 22 66 3a 69 6d 61 67  |:{".":{},"f:imag|
              00000230  65 22 3a 7b 7d 2c 22 66  3a 69 6d 61 67 65 50 75  |e":{},"f:imagePu|
              00000240  6c 6c 50 6f 6c 69 63 79  22 3a 7b 7d 2c 22 66 3a  |llPolicy":{},"f:|
              00000250  6e 61 6d 65 22 3a 7b 7d  2c 22 66 3a 72 65 73 6f  |name":{},"f:reso|
              00000260  75 72 63 65 73 22 3a 7b  7d 2c 22 66 3a 73 65 63  |urces":{},"f:sec|
              00000270  75 72 69 74 79 43 6f 6e  74 65 78 74 22 3a 7b 7d  |urityContext":{}|
              00000280  2c 22 66 3a 74 65 72 6d  69 6e 61 74 69 6f 6e 4d  |,"f:terminationM|
              00000290  65 73 73 61 67 65 50 61  74 68 22 3a 7b 7d 2c 22  |essagePath":{},"|
              000002a0  66 3a 74 65 72 6d 69 6e  61 74 69 6f 6e 4d 65 73  |f:terminationMes|
              000002b0  73 61 67 65 50 6f 6c 69  63 79 22 3a 7b 7d 7d 7d  |sagePolicy":{}}}|
              000002c0  2c 22 66 3a 64 6e 73 50  6f 6c 69 63 79 22 3a 7b  |,"f:dnsPolicy":{|
              000002d0  7d 2c 22 66 3a 72 65 73  74 61 72 74 50 6f 6c 69  |},"f:restartPoli|
              000002e0  63 79 22 3a 7b 7d 2c 22  66 3a 73 63 68 65 64 75  |cy":{},"f:schedu|
              000002f0  6c 65 72 4e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 73  |lerName":{},"f:s|
              00000300  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              00000310  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000320  6e 47 72 61 63 65 50 65  72 69 6f 64 53 65 63 6f  |nGracePeriodSeco|
              00000330  6e 64 73 22 3a 7b 7d 7d  7d 7d 7d                 |nds":{}}}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828474002,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=56) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  6f 62 73 65 72 76 65 64  47 65 6e 65 72 61 74 69  |observedGenerati|
              00000020  6f 6e 22 3a 7b 7d 2c 22  66 3a 72 65 70 6c 69 63  |on":{},"f:replic|
              00000030  61 73 22 3a 7b 7d 7d 7d                           |as":{}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.ReplicaSetSpec) {
      Replicas: (*int32)(0),
      MinReadySeconds: (int32) 0,
      Selector: (*v1.LabelSelector)({
        MatchLabels: (map[string]string) (len=2) {
          (string) (len=22) "test-deployment-static": (string) (len=4) "true",
          (string) (len=17) "pod-template-hash": (string) (len=10) "69d58987ff"
        },
        MatchExpressions: ([]v1.LabelSelectorRequirement) <nil>
      }),
      Template: (v1.PodTemplateSpec) {
        ObjectMeta: (v1.ObjectMeta) {
          Name: (string) "",
          GenerateName: (string) "",
          Namespace: (string) "",
          SelfLink: (string) "",
          UID: (types.UID) "",
          ResourceVersion: (string) "",
          Generation: (int64) 0,
          CreationTimestamp: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          DeletionTimestamp: (*v1.Time)(<nil>),
          DeletionGracePeriodSeconds: (*int64)(<nil>),
          Labels: (map[string]string) (len=2) {
            (string) (len=17) "pod-template-hash": (string) (len=10) "69d58987ff",
            (string) (len=22) "test-deployment-static": (string) (len=4) "true"
          },
          Annotations: (map[string]string) <nil>,
          OwnerReferences: ([]v1.OwnerReference) <nil>,
          Finalizers: ([]string) <nil>,
          ManagedFields: ([]v1.ManagedFieldsEntry) <nil>
        },
        Spec: (v1.PodSpec) {
          Volumes: ([]v1.Volume) <nil>,
          InitContainers: ([]v1.Container) <nil>,
          Containers: ([]v1.Container) (len=1) {
            (v1.Container) {
              Name: (string) (len=15) "test-deployment",
              Image: (string) (len=44) "registry.k8s.io/e2e-test-images/agnhost:2.45",
              Command: ([]string) <nil>,
              Args: ([]string) <nil>,
              WorkingDir: (string) "",
              Ports: ([]v1.ContainerPort) <nil>,
              EnvFrom: ([]v1.EnvFromSource) <nil>,
              Env: ([]v1.EnvVar) <nil>,
              Resources: (v1.ResourceRequirements) {
                Limits: (v1.ResourceList) <nil>,
                Requests: (v1.ResourceList) <nil>,
                Claims: ([]v1.ResourceClaim) <nil>
              },
              ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
              RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
              VolumeMounts: ([]v1.VolumeMount) <nil>,
              VolumeDevices: ([]v1.VolumeDevice) <nil>,
              LivenessProbe: (*v1.Probe)(<nil>),
              ReadinessProbe: (*v1.Probe)(<nil>),
              StartupProbe: (*v1.Probe)(<nil>),
              Lifecycle: (*v1.Lifecycle)(<nil>),
              TerminationMessagePath: (string) (len=20) "/dev/termination-log",
              TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
              ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
              SecurityContext: (*v1.SecurityContext)({
                Capabilities: (*v1.Capabilities)(<nil>),
                Privileged: (*bool)(<nil>),
                SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
                WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
                RunAsUser: (*int64)(<nil>),
                RunAsGroup: (*int64)(<nil>),
                RunAsNonRoot: (*bool)(<nil>),
                ReadOnlyRootFilesystem: (*bool)(<nil>),
                AllowPrivilegeEscalation: (*bool)(<nil>),
                ProcMount: (*v1.ProcMountType)(<nil>),
                SeccompProfile: (*v1.SeccompProfile)(<nil>)
              }),
              Stdin: (bool) false,
              StdinOnce: (bool) false,
              TTY: (bool) false
            }
          },
          EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
          RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
          TerminationGracePeriodSeconds: (*int64)(1),
          ActiveDeadlineSeconds: (*int64)(<nil>),
          DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
          NodeSelector: (map[string]string) <nil>,
          ServiceAccountName: (string) "",
          DeprecatedServiceAccount: (string) "",
          AutomountServiceAccountToken: (*bool)(<nil>),
          NodeName: (string) "",
          HostNetwork: (bool) false,
          HostPID: (bool) false,
          HostIPC: (bool) false,
          ShareProcessNamespace: (*bool)(<nil>),
          SecurityContext: (*v1.PodSecurityContext)({
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            SupplementalGroups: ([]int64) <nil>,
            FSGroup: (*int64)(<nil>),
            Sysctls: ([]v1.Sysctl) <nil>,
            FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
          Hostname: (string) "",
          Subdomain: (string) "",
          Affinity: (*v1.Affinity)(<nil>),
          SchedulerName: (string) (len=17) "default-scheduler",
          Tolerations: ([]v1.Toleration) <nil>,
          HostAliases: ([]v1.HostAlias) <nil>,
          PriorityClassName: (string) "",
          Priority: (*int32)(<nil>),
          DNSConfig: (*v1.PodDNSConfig)(<nil>),
          ReadinessGates: ([]v1.PodReadinessGate) <nil>,
          RuntimeClassName: (*string)(<nil>),
          EnableServiceLinks: (*bool)(<nil>),
          PreemptionPolicy: (*v1.PreemptionPolicy)(<nil>),
          Overhead: (v1.ResourceList) <nil>,
          TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
          SetHostnameAsFQDN: (*bool)(<nil>),
          OS: (*v1.PodOS)(<nil>),
          HostUsers: (*bool)(<nil>),
          SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
          ResourceClaims: ([]v1.PodResourceClaim) <nil>
        }
      }
    },
    Status: (v1.ReplicaSetStatus) {
      Replicas: (int32) 0,
      FullyLabeledReplicas: (int32) 0,
      ReadyReplicas: (int32) 0,
      AvailableReplicas: (int32) 0,
      ObservedGeneration: (int64) 3,
      Conditions: ([]v1.ReplicaSetCondition) <nil>
    }
  }


  Aug 24 11:40:06.157: INFO: ReplicaSet "test-deployment-79ff746c4":
  (v1.ReplicaSet) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=25) "test-deployment-79ff746c4",
      GenerateName: (string) "",
      Namespace: (string) (len=15) "deployment-3483",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "63b8a7d4-49f9-4608-a410-3a1c00f04735",
      ResourceVersion: (string) (len=10) "3404873765",
      Generation: (int64) 2,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63828474002,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=17) "pod-template-hash": (string) (len=9) "79ff746c4",
        (string) (len=22) "test-deployment-static": (string) (len=4) "true"
      },
      Annotations: (map[string]string) (len=3) {
        (string) (len=33) "deployment.kubernetes.io/revision": (string) (len=1) "3",
        (string) (len=41) "deployment.kubernetes.io/desired-replicas": (string) (len=1) "2",
        (string) (len=37) "deployment.kubernetes.io/max-replicas": (string) (len=1) "3"
      },
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "Deployment",
          Name: (string) (len=15) "test-deployment",
          UID: (types.UID) (len=36) "e9581001-9fdf-4d9c-b5ee-ead54f80d431",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828474004,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=827) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 61 6e 6e 6f 74 61  74 69 6f 6e 73 22 3a 7b  |f:annotations":{|
              00000020  22 2e 22 3a 7b 7d 2c 22  66 3a 64 65 70 6c 6f 79  |".":{},"f:deploy|
              00000030  6d 65 6e 74 2e 6b 75 62  65 72 6e 65 74 65 73 2e  |ment.kubernetes.|
              00000040  69 6f 2f 64 65 73 69 72  65 64 2d 72 65 70 6c 69  |io/desired-repli|
              00000050  63 61 73 22 3a 7b 7d 2c  22 66 3a 64 65 70 6c 6f  |cas":{},"f:deplo|
              00000060  79 6d 65 6e 74 2e 6b 75  62 65 72 6e 65 74 65 73  |yment.kubernetes|
              00000070  2e 69 6f 2f 6d 61 78 2d  72 65 70 6c 69 63 61 73  |.io/max-replicas|
              00000080  22 3a 7b 7d 2c 22 66 3a  64 65 70 6c 6f 79 6d 65  |":{},"f:deployme|
              00000090  6e 74 2e 6b 75 62 65 72  6e 65 74 65 73 2e 69 6f  |nt.kubernetes.io|
              000000a0  2f 72 65 76 69 73 69 6f  6e 22 3a 7b 7d 7d 2c 22  |/revision":{}},"|
              000000b0  66 3a 6c 61 62 65 6c 73  22 3a 7b 22 2e 22 3a 7b  |f:labels":{".":{|
              000000c0  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              000000d0  65 2d 68 61 73 68 22 3a  7b 7d 2c 22 66 3a 74 65  |e-hash":{},"f:te|
              000000e0  73 74 2d 64 65 70 6c 6f  79 6d 65 6e 74 2d 73 74  |st-deployment-st|
              000000f0  61 74 69 63 22 3a 7b 7d  7d 2c 22 66 3a 6f 77 6e  |atic":{}},"f:own|
              00000100  65 72 52 65 66 65 72 65  6e 63 65 73 22 3a 7b 22  |erReferences":{"|
              00000110  2e 22 3a 7b 7d 2c 22 6b  3a 7b 5c 22 75 69 64 5c  |.":{},"k:{\"uid\|
              00000120  22 3a 5c 22 65 39 35 38  31 30 30 31 2d 39 66 64  |":\"e9581001-9fd|
              00000130  66 2d 34 64 39 63 2d 62  35 65 65 2d 65 61 64 35  |f-4d9c-b5ee-ead5|
              00000140  34 66 38 30 64 34 33 31  5c 22 7d 22 3a 7b 7d 7d  |4f80d431\"}":{}}|
              00000150  7d 2c 22 66 3a 73 70 65  63 22 3a 7b 22 66 3a 72  |},"f:spec":{"f:r|
              00000160  65 70 6c 69 63 61 73 22  3a 7b 7d 2c 22 66 3a 73  |eplicas":{},"f:s|
              00000170  65 6c 65 63 74 6f 72 22  3a 7b 7d 2c 22 66 3a 74  |elector":{},"f:t|
              00000180  65 6d 70 6c 61 74 65 22  3a 7b 22 66 3a 6d 65 74  |emplate":{"f:met|
              00000190  61 64 61 74 61 22 3a 7b  22 66 3a 6c 61 62 65 6c  |adata":{"f:label|
              000001a0  73 22 3a 7b 22 2e 22 3a  7b 7d 2c 22 66 3a 70 6f  |s":{".":{},"f:po|
              000001b0  64 2d 74 65 6d 70 6c 61  74 65 2d 68 61 73 68 22  |d-template-hash"|
              000001c0  3a 7b 7d 2c 22 66 3a 74  65 73 74 2d 64 65 70 6c  |:{},"f:test-depl|
              000001d0  6f 79 6d 65 6e 74 2d 73  74 61 74 69 63 22 3a 7b  |oyment-static":{|
              000001e0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000001f0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              00000200  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 74 65 73  |:{\"name\":\"tes|
              00000210  74 2d 64 65 70 6c 6f 79  6d 65 6e 74 5c 22 7d 22  |t-deployment\"}"|
              00000220  3a 7b 22 2e 22 3a 7b 7d  2c 22 66 3a 69 6d 61 67  |:{".":{},"f:imag|
              00000230  65 22 3a 7b 7d 2c 22 66  3a 69 6d 61 67 65 50 75  |e":{},"f:imagePu|
              00000240  6c 6c 50 6f 6c 69 63 79  22 3a 7b 7d 2c 22 66 3a  |llPolicy":{},"f:|
              00000250  6e 61 6d 65 22 3a 7b 7d  2c 22 66 3a 72 65 73 6f  |name":{},"f:reso|
              00000260  75 72 63 65 73 22 3a 7b  7d 2c 22 66 3a 73 65 63  |urces":{},"f:sec|
              00000270  75 72 69 74 79 43 6f 6e  74 65 78 74 22 3a 7b 7d  |urityContext":{}|
              00000280  2c 22 66 3a 74 65 72 6d  69 6e 61 74 69 6f 6e 4d  |,"f:terminationM|
              00000290  65 73 73 61 67 65 50 61  74 68 22 3a 7b 7d 2c 22  |essagePath":{},"|
              000002a0  66 3a 74 65 72 6d 69 6e  61 74 69 6f 6e 4d 65 73  |f:terminationMes|
              000002b0  73 61 67 65 50 6f 6c 69  63 79 22 3a 7b 7d 7d 7d  |sagePolicy":{}}}|
              000002c0  2c 22 66 3a 64 6e 73 50  6f 6c 69 63 79 22 3a 7b  |,"f:dnsPolicy":{|
              000002d0  7d 2c 22 66 3a 72 65 73  74 61 72 74 50 6f 6c 69  |},"f:restartPoli|
              000002e0  63 79 22 3a 7b 7d 2c 22  66 3a 73 63 68 65 64 75  |cy":{},"f:schedu|
              000002f0  6c 65 72 4e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 73  |lerName":{},"f:s|
              00000300  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              00000310  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000320  6e 47 72 61 63 65 50 65  72 69 6f 64 53 65 63 6f  |nGracePeriodSeco|
              00000330  6e 64 73 22 3a 7b 7d 7d  7d 7d 7d                 |nds":{}}}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828474005,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=130) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  61 76 61 69 6c 61 62 6c  65 52 65 70 6c 69 63 61  |availableReplica|
              00000020  73 22 3a 7b 7d 2c 22 66  3a 66 75 6c 6c 79 4c 61  |s":{},"f:fullyLa|
              00000030  62 65 6c 65 64 52 65 70  6c 69 63 61 73 22 3a 7b  |beledReplicas":{|
              00000040  7d 2c 22 66 3a 6f 62 73  65 72 76 65 64 47 65 6e  |},"f:observedGen|
              00000050  65 72 61 74 69 6f 6e 22  3a 7b 7d 2c 22 66 3a 72  |eration":{},"f:r|
              00000060  65 61 64 79 52 65 70 6c  69 63 61 73 22 3a 7b 7d  |eadyReplicas":{}|
              00000070  2c 22 66 3a 72 65 70 6c  69 63 61 73 22 3a 7b 7d  |,"f:replicas":{}|
              00000080  7d 7d                                             |}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.ReplicaSetSpec) {
      Replicas: (*int32)(2),
      MinReadySeconds: (int32) 0,
      Selector: (*v1.LabelSelector)({
        MatchLabels: (map[string]string) (len=2) {
          (string) (len=17) "pod-template-hash": (string) (len=9) "79ff746c4",
          (string) (len=22) "test-deployment-static": (string) (len=4) "true"
        },
        MatchExpressions: ([]v1.LabelSelectorRequirement) <nil>
      }),
      Template: (v1.PodTemplateSpec) {
        ObjectMeta: (v1.ObjectMeta) {
          Name: (string) "",
          GenerateName: (string) "",
          Namespace: (string) "",
          SelfLink: (string) "",
          UID: (types.UID) "",
          ResourceVersion: (string) "",
          Generation: (int64) 0,
          CreationTimestamp: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          DeletionTimestamp: (*v1.Time)(<nil>),
          DeletionGracePeriodSeconds: (*int64)(<nil>),
          Labels: (map[string]string) (len=2) {
            (string) (len=17) "pod-template-hash": (string) (len=9) "79ff746c4",
            (string) (len=22) "test-deployment-static": (string) (len=4) "true"
          },
          Annotations: (map[string]string) <nil>,
          OwnerReferences: ([]v1.OwnerReference) <nil>,
          Finalizers: ([]string) <nil>,
          ManagedFields: ([]v1.ManagedFieldsEntry) <nil>
        },
        Spec: (v1.PodSpec) {
          Volumes: ([]v1.Volume) <nil>,
          InitContainers: ([]v1.Container) <nil>,
          Containers: ([]v1.Container) (len=1) {
            (v1.Container) {
              Name: (string) (len=15) "test-deployment",
              Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
              Command: ([]string) <nil>,
              Args: ([]string) <nil>,
              WorkingDir: (string) "",
              Ports: ([]v1.ContainerPort) <nil>,
              EnvFrom: ([]v1.EnvFromSource) <nil>,
              Env: ([]v1.EnvVar) <nil>,
              Resources: (v1.ResourceRequirements) {
                Limits: (v1.ResourceList) <nil>,
                Requests: (v1.ResourceList) <nil>,
                Claims: ([]v1.ResourceClaim) <nil>
              },
              ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
              RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
              VolumeMounts: ([]v1.VolumeMount) <nil>,
              VolumeDevices: ([]v1.VolumeDevice) <nil>,
              LivenessProbe: (*v1.Probe)(<nil>),
              ReadinessProbe: (*v1.Probe)(<nil>),
              StartupProbe: (*v1.Probe)(<nil>),
              Lifecycle: (*v1.Lifecycle)(<nil>),
              TerminationMessagePath: (string) (len=20) "/dev/termination-log",
              TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
              ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
              SecurityContext: (*v1.SecurityContext)({
                Capabilities: (*v1.Capabilities)(<nil>),
                Privileged: (*bool)(<nil>),
                SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
                WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
                RunAsUser: (*int64)(<nil>),
                RunAsGroup: (*int64)(<nil>),
                RunAsNonRoot: (*bool)(<nil>),
                ReadOnlyRootFilesystem: (*bool)(<nil>),
                AllowPrivilegeEscalation: (*bool)(<nil>),
                ProcMount: (*v1.ProcMountType)(<nil>),
                SeccompProfile: (*v1.SeccompProfile)(<nil>)
              }),
              Stdin: (bool) false,
              StdinOnce: (bool) false,
              TTY: (bool) false
            }
          },
          EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
          RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
          TerminationGracePeriodSeconds: (*int64)(1),
          ActiveDeadlineSeconds: (*int64)(<nil>),
          DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
          NodeSelector: (map[string]string) <nil>,
          ServiceAccountName: (string) "",
          DeprecatedServiceAccount: (string) "",
          AutomountServiceAccountToken: (*bool)(<nil>),
          NodeName: (string) "",
          HostNetwork: (bool) false,
          HostPID: (bool) false,
          HostIPC: (bool) false,
          ShareProcessNamespace: (*bool)(<nil>),
          SecurityContext: (*v1.PodSecurityContext)({
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            SupplementalGroups: ([]int64) <nil>,
            FSGroup: (*int64)(<nil>),
            Sysctls: ([]v1.Sysctl) <nil>,
            FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
          Hostname: (string) "",
          Subdomain: (string) "",
          Affinity: (*v1.Affinity)(<nil>),
          SchedulerName: (string) (len=17) "default-scheduler",
          Tolerations: ([]v1.Toleration) <nil>,
          HostAliases: ([]v1.HostAlias) <nil>,
          PriorityClassName: (string) "",
          Priority: (*int32)(<nil>),
          DNSConfig: (*v1.PodDNSConfig)(<nil>),
          ReadinessGates: ([]v1.PodReadinessGate) <nil>,
          RuntimeClassName: (*string)(<nil>),
          EnableServiceLinks: (*bool)(<nil>),
          PreemptionPolicy: (*v1.PreemptionPolicy)(<nil>),
          Overhead: (v1.ResourceList) <nil>,
          TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
          SetHostnameAsFQDN: (*bool)(<nil>),
          OS: (*v1.PodOS)(<nil>),
          HostUsers: (*bool)(<nil>),
          SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
          ResourceClaims: ([]v1.PodResourceClaim) <nil>
        }
      }
    },
    Status: (v1.ReplicaSetStatus) {
      Replicas: (int32) 2,
      FullyLabeledReplicas: (int32) 2,
      ReadyReplicas: (int32) 2,
      AvailableReplicas: (int32) 2,
      ObservedGeneration: (int64) 2,
      Conditions: ([]v1.ReplicaSetCondition) <nil>
    }
  }


  Aug 24 11:40:06.169: INFO: pod: "test-deployment-79ff746c4-nd7nd":
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=31) "test-deployment-79ff746c4-nd7nd",
      GenerateName: (string) (len=26) "test-deployment-79ff746c4-",
      Namespace: (string) (len=15) "deployment-3483",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "38b71968-0744-4222-a230-c4a0a9dd11ad",
      ResourceVersion: (string) (len=10) "3404873666",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63828474002,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=17) "pod-template-hash": (string) (len=9) "79ff746c4",
        (string) (len=22) "test-deployment-static": (string) (len=4) "true"
      },
      Annotations: (map[string]string) <nil>,
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=25) "test-deployment-79ff746c4",
          UID: (types.UID) (len=36) "63b8a7d4-49f9-4608-a410-3a1c00f04735",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828474002,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=565) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 70 6f 64 2d 74 65 6d  |.":{},"f:pod-tem|
              00000040  70 6c 61 74 65 2d 68 61  73 68 22 3a 7b 7d 2c 22  |plate-hash":{},"|
              00000050  66 3a 74 65 73 74 2d 64  65 70 6c 6f 79 6d 65 6e  |f:test-deploymen|
              00000060  74 2d 73 74 61 74 69 63  22 3a 7b 7d 7d 2c 22 66  |t-static":{}},"f|
              00000070  3a 6f 77 6e 65 72 52 65  66 65 72 65 6e 63 65 73  |:ownerReferences|
              00000080  22 3a 7b 22 2e 22 3a 7b  7d 2c 22 6b 3a 7b 5c 22  |":{".":{},"k:{\"|
              00000090  75 69 64 5c 22 3a 5c 22  36 33 62 38 61 37 64 34  |uid\":\"63b8a7d4|
              000000a0  2d 34 39 66 39 2d 34 36  30 38 2d 61 34 31 30 2d  |-49f9-4608-a410-|
              000000b0  33 61 31 63 30 30 66 30  34 37 33 35 5c 22 7d 22  |3a1c00f04735\"}"|
              000000c0  3a 7b 7d 7d 7d 2c 22 66  3a 73 70 65 63 22 3a 7b  |:{}}},"f:spec":{|
              000000d0  22 66 3a 63 6f 6e 74 61  69 6e 65 72 73 22 3a 7b  |"f:containers":{|
              000000e0  22 6b 3a 7b 5c 22 6e 61  6d 65 5c 22 3a 5c 22 74  |"k:{\"name\":\"t|
              000000f0  65 73 74 2d 64 65 70 6c  6f 79 6d 65 6e 74 5c 22  |est-deployment\"|
              00000100  7d 22 3a 7b 22 2e 22 3a  7b 7d 2c 22 66 3a 69 6d  |}":{".":{},"f:im|
              00000110  61 67 65 22 3a 7b 7d 2c  22 66 3a 69 6d 61 67 65  |age":{},"f:image|
              00000120  50 75 6c 6c 50 6f 6c 69  63 79 22 3a 7b 7d 2c 22  |PullPolicy":{},"|
              00000130  66 3a 6e 61 6d 65 22 3a  7b 7d 2c 22 66 3a 72 65  |f:name":{},"f:re|
              00000140  73 6f 75 72 63 65 73 22  3a 7b 7d 2c 22 66 3a 73  |sources":{},"f:s|
              00000150  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              00000160  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000170  6e 4d 65 73 73 61 67 65  50 61 74 68 22 3a 7b 7d  |nMessagePath":{}|
              00000180  2c 22 66 3a 74 65 72 6d  69 6e 61 74 69 6f 6e 4d  |,"f:terminationM|
              00000190  65 73 73 61 67 65 50 6f  6c 69 63 79 22 3a 7b 7d  |essagePolicy":{}|
              000001a0  7d 7d 2c 22 66 3a 64 6e  73 50 6f 6c 69 63 79 22  |}},"f:dnsPolicy"|
              000001b0  3a 7b 7d 2c 22 66 3a 65  6e 61 62 6c 65 53 65 72  |:{},"f:enableSer|
              000001c0  76 69 63 65 4c 69 6e 6b  73 22 3a 7b 7d 2c 22 66  |viceLinks":{},"f|
              000001d0  3a 72 65 73 74 61 72 74  50 6f 6c 69 63 79 22 3a  |:restartPolicy":|
              000001e0  7b 7d 2c 22 66 3a 73 63  68 65 64 75 6c 65 72 4e  |{},"f:schedulerN|
              000001f0  61 6d 65 22 3a 7b 7d 2c  22 66 3a 73 65 63 75 72  |ame":{},"f:secur|
              00000200  69 74 79 43 6f 6e 74 65  78 74 22 3a 7b 7d 2c 22  |ityContext":{},"|
              00000210  66 3a 74 65 72 6d 69 6e  61 74 69 6f 6e 47 72 61  |f:terminationGra|
              00000220  63 65 50 65 72 69 6f 64  53 65 63 6f 6e 64 73 22  |cePeriodSeconds"|
              00000230  3a 7b 7d 7d 7d                                    |:{}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=7) "kubelet",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828474004,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=519) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  63 6f 6e 64 69 74 69 6f  6e 73 22 3a 7b 22 6b 3a  |conditions":{"k:|
              00000020  7b 5c 22 74 79 70 65 5c  22 3a 5c 22 43 6f 6e 74  |{\"type\":\"Cont|
              00000030  61 69 6e 65 72 73 52 65  61 64 79 5c 22 7d 22 3a  |ainersReady\"}":|
              00000040  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000050  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000060  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000070  6d 65 22 3a 7b 7d 2c 22  66 3a 73 74 61 74 75 73  |me":{},"f:status|
              00000080  22 3a 7b 7d 2c 22 66 3a  74 79 70 65 22 3a 7b 7d  |":{},"f:type":{}|
              00000090  7d 2c 22 6b 3a 7b 5c 22  74 79 70 65 5c 22 3a 5c  |},"k:{\"type\":\|
              000000a0  22 49 6e 69 74 69 61 6c  69 7a 65 64 5c 22 7d 22  |"Initialized\"}"|
              000000b0  3a 7b 22 2e 22 3a 7b 7d  2c 22 66 3a 6c 61 73 74  |:{".":{},"f:last|
              000000c0  50 72 6f 62 65 54 69 6d  65 22 3a 7b 7d 2c 22 66  |ProbeTime":{},"f|
              000000d0  3a 6c 61 73 74 54 72 61  6e 73 69 74 69 6f 6e 54  |:lastTransitionT|
              000000e0  69 6d 65 22 3a 7b 7d 2c  22 66 3a 73 74 61 74 75  |ime":{},"f:statu|
              000000f0  73 22 3a 7b 7d 2c 22 66  3a 74 79 70 65 22 3a 7b  |s":{},"f:type":{|
              00000100  7d 7d 2c 22 6b 3a 7b 5c  22 74 79 70 65 5c 22 3a  |}},"k:{\"type\":|
              00000110  5c 22 52 65 61 64 79 5c  22 7d 22 3a 7b 22 2e 22  |\"Ready\"}":{"."|
              00000120  3a 7b 7d 2c 22 66 3a 6c  61 73 74 50 72 6f 62 65  |:{},"f:lastProbe|
              00000130  54 69 6d 65 22 3a 7b 7d  2c 22 66 3a 6c 61 73 74  |Time":{},"f:last|
              00000140  54 72 61 6e 73 69 74 69  6f 6e 54 69 6d 65 22 3a  |TransitionTime":|
              00000150  7b 7d 2c 22 66 3a 73 74  61 74 75 73 22 3a 7b 7d  |{},"f:status":{}|
              00000160  2c 22 66 3a 74 79 70 65  22 3a 7b 7d 7d 7d 2c 22  |,"f:type":{}}},"|
              00000170  66 3a 63 6f 6e 74 61 69  6e 65 72 53 74 61 74 75  |f:containerStatu|
              00000180  73 65 73 22 3a 7b 7d 2c  22 66 3a 68 6f 73 74 49  |ses":{},"f:hostI|
              00000190  50 22 3a 7b 7d 2c 22 66  3a 70 68 61 73 65 22 3a  |P":{},"f:phase":|
              000001a0  7b 7d 2c 22 66 3a 70 6f  64 49 50 22 3a 7b 7d 2c  |{},"f:podIP":{},|
              000001b0  22 66 3a 70 6f 64 49 50  73 22 3a 7b 22 2e 22 3a  |"f:podIPs":{".":|
              000001c0  7b 7d 2c 22 6b 3a 7b 5c  22 69 70 5c 22 3a 5c 22  |{},"k:{\"ip\":\"|
              000001d0  31 30 2e 31 30 30 2e 30  2e 31 30 33 5c 22 7d 22  |10.100.0.103\"}"|
              000001e0  3a 7b 22 2e 22 3a 7b 7d  2c 22 66 3a 69 70 22 3a  |:{".":{},"f:ip":|
              000001f0  7b 7d 7d 7d 2c 22 66 3a  73 74 61 72 74 54 69 6d  |{}}},"f:startTim|
              00000200  65 22 3a 7b 7d 7d 7d                              |e":{}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-x8mpk",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  })
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=15) "test-deployment",
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-x8mpk",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(1),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=46) "scw-conformance-default-2af6d8b4c6264cc5b9e5e6",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Running",
      Conditions: ([]v1.PodCondition) (len=4) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=11) "Initialized",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828474002,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=5) "Ready",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828474004,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=15) "ContainersReady",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828474004,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828474002,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) (len=11) "172.16.36.3",
      HostIPs: ([]v1.HostIP) <nil>,
      PodIP: (string) (len=12) "10.100.0.103",
      PodIPs: ([]v1.PodIP) (len=1) {
        (v1.PodIP) {
          IP: (string) (len=12) "10.100.0.103"
        }
      },
      StartTime: (*v1.Time)({
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63828474002,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      }),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) (len=1) {
        (v1.ContainerStatus) {
          Name: (string) (len=15) "test-deployment",
          State: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)({
              StartedAt: (v1.Time) {
                Time: (time.Time) {
                  wall: (uint64) 0,
                  ext: (int64) 63828474003,
                  loc: (*time.Location)(<already shown>)
                }
              }
            }),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          LastTerminationState: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          Ready: (bool) true,
          RestartCount: (int32) 0,
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          ImageID: (string) (len=109) "registry.k8s.io/e2e-test-images/httpd@sha256:148b022f5c5da426fc2f3c14b5c0867e58ef05961510c84749ac1fddcb0fef22",
          ContainerID: (string) (len=77) "containerd://959b23b1cf7596e83a5e53abb09154b518c4979dab041733e684a1bd1be9572f",
          Started: (*bool)(true),
          AllocatedResources: (v1.ResourceList) <nil>,
          Resources: (*v1.ResourceRequirements)(<nil>)
        }
      },
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }


  Aug 24 11:40:06.171: INFO: pod: "test-deployment-79ff746c4-p6gj5":
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=31) "test-deployment-79ff746c4-p6gj5",
      GenerateName: (string) (len=26) "test-deployment-79ff746c4-",
      Namespace: (string) (len=15) "deployment-3483",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "02eafd37-1f0f-4def-a198-cafbfd2fcdc4",
      ResourceVersion: (string) (len=10) "3404873764",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63828474004,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=22) "test-deployment-static": (string) (len=4) "true",
        (string) (len=17) "pod-template-hash": (string) (len=9) "79ff746c4"
      },
      Annotations: (map[string]string) <nil>,
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=25) "test-deployment-79ff746c4",
          UID: (types.UID) (len=36) "63b8a7d4-49f9-4608-a410-3a1c00f04735",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828474004,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=565) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 70 6f 64 2d 74 65 6d  |.":{},"f:pod-tem|
              00000040  70 6c 61 74 65 2d 68 61  73 68 22 3a 7b 7d 2c 22  |plate-hash":{},"|
              00000050  66 3a 74 65 73 74 2d 64  65 70 6c 6f 79 6d 65 6e  |f:test-deploymen|
              00000060  74 2d 73 74 61 74 69 63  22 3a 7b 7d 7d 2c 22 66  |t-static":{}},"f|
              00000070  3a 6f 77 6e 65 72 52 65  66 65 72 65 6e 63 65 73  |:ownerReferences|
              00000080  22 3a 7b 22 2e 22 3a 7b  7d 2c 22 6b 3a 7b 5c 22  |":{".":{},"k:{\"|
              00000090  75 69 64 5c 22 3a 5c 22  36 33 62 38 61 37 64 34  |uid\":\"63b8a7d4|
              000000a0  2d 34 39 66 39 2d 34 36  30 38 2d 61 34 31 30 2d  |-49f9-4608-a410-|
              000000b0  33 61 31 63 30 30 66 30  34 37 33 35 5c 22 7d 22  |3a1c00f04735\"}"|
              000000c0  3a 7b 7d 7d 7d 2c 22 66  3a 73 70 65 63 22 3a 7b  |:{}}},"f:spec":{|
              000000d0  22 66 3a 63 6f 6e 74 61  69 6e 65 72 73 22 3a 7b  |"f:containers":{|
              000000e0  22 6b 3a 7b 5c 22 6e 61  6d 65 5c 22 3a 5c 22 74  |"k:{\"name\":\"t|
              000000f0  65 73 74 2d 64 65 70 6c  6f 79 6d 65 6e 74 5c 22  |est-deployment\"|
              00000100  7d 22 3a 7b 22 2e 22 3a  7b 7d 2c 22 66 3a 69 6d  |}":{".":{},"f:im|
              00000110  61 67 65 22 3a 7b 7d 2c  22 66 3a 69 6d 61 67 65  |age":{},"f:image|
              00000120  50 75 6c 6c 50 6f 6c 69  63 79 22 3a 7b 7d 2c 22  |PullPolicy":{},"|
              00000130  66 3a 6e 61 6d 65 22 3a  7b 7d 2c 22 66 3a 72 65  |f:name":{},"f:re|
              00000140  73 6f 75 72 63 65 73 22  3a 7b 7d 2c 22 66 3a 73  |sources":{},"f:s|
              00000150  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              00000160  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000170  6e 4d 65 73 73 61 67 65  50 61 74 68 22 3a 7b 7d  |nMessagePath":{}|
              00000180  2c 22 66 3a 74 65 72 6d  69 6e 61 74 69 6f 6e 4d  |,"f:terminationM|
              00000190  65 73 73 61 67 65 50 6f  6c 69 63 79 22 3a 7b 7d  |essagePolicy":{}|
              000001a0  7d 7d 2c 22 66 3a 64 6e  73 50 6f 6c 69 63 79 22  |}},"f:dnsPolicy"|
              000001b0  3a 7b 7d 2c 22 66 3a 65  6e 61 62 6c 65 53 65 72  |:{},"f:enableSer|
              000001c0  76 69 63 65 4c 69 6e 6b  73 22 3a 7b 7d 2c 22 66  |viceLinks":{},"f|
              000001d0  3a 72 65 73 74 61 72 74  50 6f 6c 69 63 79 22 3a  |:restartPolicy":|
              000001e0  7b 7d 2c 22 66 3a 73 63  68 65 64 75 6c 65 72 4e  |{},"f:schedulerN|
              000001f0  61 6d 65 22 3a 7b 7d 2c  22 66 3a 73 65 63 75 72  |ame":{},"f:secur|
              00000200  69 74 79 43 6f 6e 74 65  78 74 22 3a 7b 7d 2c 22  |ityContext":{},"|
              00000210  66 3a 74 65 72 6d 69 6e  61 74 69 6f 6e 47 72 61  |f:terminationGra|
              00000220  63 65 50 65 72 69 6f 64  53 65 63 6f 6e 64 73 22  |cePeriodSeconds"|
              00000230  3a 7b 7d 7d 7d                                    |:{}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=7) "kubelet",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828474005,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=519) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  63 6f 6e 64 69 74 69 6f  6e 73 22 3a 7b 22 6b 3a  |conditions":{"k:|
              00000020  7b 5c 22 74 79 70 65 5c  22 3a 5c 22 43 6f 6e 74  |{\"type\":\"Cont|
              00000030  61 69 6e 65 72 73 52 65  61 64 79 5c 22 7d 22 3a  |ainersReady\"}":|
              00000040  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000050  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000060  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000070  6d 65 22 3a 7b 7d 2c 22  66 3a 73 74 61 74 75 73  |me":{},"f:status|
              00000080  22 3a 7b 7d 2c 22 66 3a  74 79 70 65 22 3a 7b 7d  |":{},"f:type":{}|
              00000090  7d 2c 22 6b 3a 7b 5c 22  74 79 70 65 5c 22 3a 5c  |},"k:{\"type\":\|
              000000a0  22 49 6e 69 74 69 61 6c  69 7a 65 64 5c 22 7d 22  |"Initialized\"}"|
              000000b0  3a 7b 22 2e 22 3a 7b 7d  2c 22 66 3a 6c 61 73 74  |:{".":{},"f:last|
              000000c0  50 72 6f 62 65 54 69 6d  65 22 3a 7b 7d 2c 22 66  |ProbeTime":{},"f|
              000000d0  3a 6c 61 73 74 54 72 61  6e 73 69 74 69 6f 6e 54  |:lastTransitionT|
              000000e0  69 6d 65 22 3a 7b 7d 2c  22 66 3a 73 74 61 74 75  |ime":{},"f:statu|
              000000f0  73 22 3a 7b 7d 2c 22 66  3a 74 79 70 65 22 3a 7b  |s":{},"f:type":{|
              00000100  7d 7d 2c 22 6b 3a 7b 5c  22 74 79 70 65 5c 22 3a  |}},"k:{\"type\":|
              00000110  5c 22 52 65 61 64 79 5c  22 7d 22 3a 7b 22 2e 22  |\"Ready\"}":{"."|
              00000120  3a 7b 7d 2c 22 66 3a 6c  61 73 74 50 72 6f 62 65  |:{},"f:lastProbe|
              00000130  54 69 6d 65 22 3a 7b 7d  2c 22 66 3a 6c 61 73 74  |Time":{},"f:last|
              00000140  54 72 61 6e 73 69 74 69  6f 6e 54 69 6d 65 22 3a  |TransitionTime":|
              00000150  7b 7d 2c 22 66 3a 73 74  61 74 75 73 22 3a 7b 7d  |{},"f:status":{}|
              00000160  2c 22 66 3a 74 79 70 65  22 3a 7b 7d 7d 7d 2c 22  |,"f:type":{}}},"|
              00000170  66 3a 63 6f 6e 74 61 69  6e 65 72 53 74 61 74 75  |f:containerStatu|
              00000180  73 65 73 22 3a 7b 7d 2c  22 66 3a 68 6f 73 74 49  |ses":{},"f:hostI|
              00000190  50 22 3a 7b 7d 2c 22 66  3a 70 68 61 73 65 22 3a  |P":{},"f:phase":|
              000001a0  7b 7d 2c 22 66 3a 70 6f  64 49 50 22 3a 7b 7d 2c  |{},"f:podIP":{},|
              000001b0  22 66 3a 70 6f 64 49 50  73 22 3a 7b 22 2e 22 3a  |"f:podIPs":{".":|
              000001c0  7b 7d 2c 22 6b 3a 7b 5c  22 69 70 5c 22 3a 5c 22  |{},"k:{\"ip\":\"|
              000001d0  31 30 2e 31 30 30 2e 31  2e 31 31 36 5c 22 7d 22  |10.100.1.116\"}"|
              000001e0  3a 7b 22 2e 22 3a 7b 7d  2c 22 66 3a 69 70 22 3a  |:{".":{},"f:ip":|
              000001f0  7b 7d 7d 7d 2c 22 66 3a  73 74 61 72 74 54 69 6d  |{}}},"f:startTim|
              00000200  65 22 3a 7b 7d 7d 7d                              |e":{}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-m49rk",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  })
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=15) "test-deployment",
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-m49rk",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(1),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=46) "scw-conformance-default-ecf11ec729064adba7e270",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Running",
      Conditions: ([]v1.PodCondition) (len=4) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=11) "Initialized",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828474004,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=5) "Ready",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828474005,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=15) "ContainersReady",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828474005,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828474004,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) (len=11) "172.16.36.2",
      HostIPs: ([]v1.HostIP) <nil>,
      PodIP: (string) (len=12) "10.100.1.116",
      PodIPs: ([]v1.PodIP) (len=1) {
        (v1.PodIP) {
          IP: (string) (len=12) "10.100.1.116"
        }
      },
      StartTime: (*v1.Time)({
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63828474004,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      }),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) (len=1) {
        (v1.ContainerStatus) {
          Name: (string) (len=15) "test-deployment",
          State: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)({
              StartedAt: (v1.Time) {
                Time: (time.Time) {
                  wall: (uint64) 0,
                  ext: (int64) 63828474005,
                  loc: (*time.Location)(<already shown>)
                }
              }
            }),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          LastTerminationState: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          Ready: (bool) true,
          RestartCount: (int32) 0,
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          ImageID: (string) (len=109) "registry.k8s.io/e2e-test-images/httpd@sha256:148b022f5c5da426fc2f3c14b5c0867e58ef05961510c84749ac1fddcb0fef22",
          ContainerID: (string) (len=77) "containerd://a7e6e3ea8edb47271f74b92c737aefd4c00575903b96f376e6415fc40960ed51",
          Started: (*bool)(true),
          AllocatedResources: (v1.ResourceList) <nil>,
          Resources: (*v1.ResourceRequirements)(<nil>)
        }
      },
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }


  Aug 24 11:40:06.174: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "deployment-3483" for this suite. @ 08/24/23 11:40:06.186
• [6.708 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-api-machinery] Discovery should validate PreferredVersion for each APIGroup [Conformance]
test/e2e/apimachinery/discovery.go:125
  STEP: Creating a kubernetes client @ 08/24/23 11:40:06.204
  Aug 24 11:40:06.204: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename discovery @ 08/24/23 11:40:06.205
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 11:40:06.279
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 11:40:06.284
  STEP: Setting up server cert @ 08/24/23 11:40:06.293
  Aug 24 11:40:06.520: INFO: Checking APIGroup: apiregistration.k8s.io
  Aug 24 11:40:06.523: INFO: PreferredVersion.GroupVersion: apiregistration.k8s.io/v1
  Aug 24 11:40:06.523: INFO: Versions found [{apiregistration.k8s.io/v1 v1}]
  Aug 24 11:40:06.523: INFO: apiregistration.k8s.io/v1 matches apiregistration.k8s.io/v1
  Aug 24 11:40:06.523: INFO: Checking APIGroup: apps
  Aug 24 11:40:06.526: INFO: PreferredVersion.GroupVersion: apps/v1
  Aug 24 11:40:06.526: INFO: Versions found [{apps/v1 v1}]
  Aug 24 11:40:06.526: INFO: apps/v1 matches apps/v1
  Aug 24 11:40:06.526: INFO: Checking APIGroup: events.k8s.io
  Aug 24 11:40:06.528: INFO: PreferredVersion.GroupVersion: events.k8s.io/v1
  Aug 24 11:40:06.528: INFO: Versions found [{events.k8s.io/v1 v1}]
  Aug 24 11:40:06.528: INFO: events.k8s.io/v1 matches events.k8s.io/v1
  Aug 24 11:40:06.528: INFO: Checking APIGroup: authentication.k8s.io
  Aug 24 11:40:06.531: INFO: PreferredVersion.GroupVersion: authentication.k8s.io/v1
  Aug 24 11:40:06.531: INFO: Versions found [{authentication.k8s.io/v1 v1} {authentication.k8s.io/v1beta1 v1beta1} {authentication.k8s.io/v1alpha1 v1alpha1}]
  Aug 24 11:40:06.531: INFO: authentication.k8s.io/v1 matches authentication.k8s.io/v1
  Aug 24 11:40:06.531: INFO: Checking APIGroup: authorization.k8s.io
  Aug 24 11:40:06.533: INFO: PreferredVersion.GroupVersion: authorization.k8s.io/v1
  Aug 24 11:40:06.534: INFO: Versions found [{authorization.k8s.io/v1 v1}]
  Aug 24 11:40:06.534: INFO: authorization.k8s.io/v1 matches authorization.k8s.io/v1
  Aug 24 11:40:06.534: INFO: Checking APIGroup: autoscaling
  Aug 24 11:40:06.536: INFO: PreferredVersion.GroupVersion: autoscaling/v2
  Aug 24 11:40:06.536: INFO: Versions found [{autoscaling/v2 v2} {autoscaling/v1 v1}]
  Aug 24 11:40:06.536: INFO: autoscaling/v2 matches autoscaling/v2
  Aug 24 11:40:06.536: INFO: Checking APIGroup: batch
  Aug 24 11:40:06.539: INFO: PreferredVersion.GroupVersion: batch/v1
  Aug 24 11:40:06.539: INFO: Versions found [{batch/v1 v1}]
  Aug 24 11:40:06.539: INFO: batch/v1 matches batch/v1
  Aug 24 11:40:06.539: INFO: Checking APIGroup: certificates.k8s.io
  Aug 24 11:40:06.542: INFO: PreferredVersion.GroupVersion: certificates.k8s.io/v1
  Aug 24 11:40:06.543: INFO: Versions found [{certificates.k8s.io/v1 v1}]
  Aug 24 11:40:06.543: INFO: certificates.k8s.io/v1 matches certificates.k8s.io/v1
  Aug 24 11:40:06.543: INFO: Checking APIGroup: networking.k8s.io
  Aug 24 11:40:06.546: INFO: PreferredVersion.GroupVersion: networking.k8s.io/v1
  Aug 24 11:40:06.546: INFO: Versions found [{networking.k8s.io/v1 v1} {networking.k8s.io/v1alpha1 v1alpha1}]
  Aug 24 11:40:06.546: INFO: networking.k8s.io/v1 matches networking.k8s.io/v1
  Aug 24 11:40:06.546: INFO: Checking APIGroup: policy
  Aug 24 11:40:06.548: INFO: PreferredVersion.GroupVersion: policy/v1
  Aug 24 11:40:06.548: INFO: Versions found [{policy/v1 v1}]
  Aug 24 11:40:06.548: INFO: policy/v1 matches policy/v1
  Aug 24 11:40:06.548: INFO: Checking APIGroup: rbac.authorization.k8s.io
  Aug 24 11:40:06.550: INFO: PreferredVersion.GroupVersion: rbac.authorization.k8s.io/v1
  Aug 24 11:40:06.550: INFO: Versions found [{rbac.authorization.k8s.io/v1 v1}]
  Aug 24 11:40:06.550: INFO: rbac.authorization.k8s.io/v1 matches rbac.authorization.k8s.io/v1
  Aug 24 11:40:06.550: INFO: Checking APIGroup: storage.k8s.io
  Aug 24 11:40:06.553: INFO: PreferredVersion.GroupVersion: storage.k8s.io/v1
  Aug 24 11:40:06.553: INFO: Versions found [{storage.k8s.io/v1 v1}]
  Aug 24 11:40:06.553: INFO: storage.k8s.io/v1 matches storage.k8s.io/v1
  Aug 24 11:40:06.553: INFO: Checking APIGroup: admissionregistration.k8s.io
  Aug 24 11:40:06.555: INFO: PreferredVersion.GroupVersion: admissionregistration.k8s.io/v1
  Aug 24 11:40:06.555: INFO: Versions found [{admissionregistration.k8s.io/v1 v1} {admissionregistration.k8s.io/v1beta1 v1beta1} {admissionregistration.k8s.io/v1alpha1 v1alpha1}]
  Aug 24 11:40:06.555: INFO: admissionregistration.k8s.io/v1 matches admissionregistration.k8s.io/v1
  Aug 24 11:40:06.555: INFO: Checking APIGroup: apiextensions.k8s.io
  Aug 24 11:40:06.558: INFO: PreferredVersion.GroupVersion: apiextensions.k8s.io/v1
  Aug 24 11:40:06.558: INFO: Versions found [{apiextensions.k8s.io/v1 v1}]
  Aug 24 11:40:06.558: INFO: apiextensions.k8s.io/v1 matches apiextensions.k8s.io/v1
  Aug 24 11:40:06.558: INFO: Checking APIGroup: scheduling.k8s.io
  Aug 24 11:40:06.561: INFO: PreferredVersion.GroupVersion: scheduling.k8s.io/v1
  Aug 24 11:40:06.561: INFO: Versions found [{scheduling.k8s.io/v1 v1}]
  Aug 24 11:40:06.561: INFO: scheduling.k8s.io/v1 matches scheduling.k8s.io/v1
  Aug 24 11:40:06.561: INFO: Checking APIGroup: coordination.k8s.io
  Aug 24 11:40:06.563: INFO: PreferredVersion.GroupVersion: coordination.k8s.io/v1
  Aug 24 11:40:06.563: INFO: Versions found [{coordination.k8s.io/v1 v1}]
  Aug 24 11:40:06.563: INFO: coordination.k8s.io/v1 matches coordination.k8s.io/v1
  Aug 24 11:40:06.563: INFO: Checking APIGroup: node.k8s.io
  Aug 24 11:40:06.565: INFO: PreferredVersion.GroupVersion: node.k8s.io/v1
  Aug 24 11:40:06.565: INFO: Versions found [{node.k8s.io/v1 v1}]
  Aug 24 11:40:06.565: INFO: node.k8s.io/v1 matches node.k8s.io/v1
  Aug 24 11:40:06.565: INFO: Checking APIGroup: discovery.k8s.io
  Aug 24 11:40:06.567: INFO: PreferredVersion.GroupVersion: discovery.k8s.io/v1
  Aug 24 11:40:06.567: INFO: Versions found [{discovery.k8s.io/v1 v1}]
  Aug 24 11:40:06.567: INFO: discovery.k8s.io/v1 matches discovery.k8s.io/v1
  Aug 24 11:40:06.567: INFO: Checking APIGroup: flowcontrol.apiserver.k8s.io
  Aug 24 11:40:06.570: INFO: PreferredVersion.GroupVersion: flowcontrol.apiserver.k8s.io/v1beta3
  Aug 24 11:40:06.570: INFO: Versions found [{flowcontrol.apiserver.k8s.io/v1beta3 v1beta3} {flowcontrol.apiserver.k8s.io/v1beta2 v1beta2}]
  Aug 24 11:40:06.570: INFO: flowcontrol.apiserver.k8s.io/v1beta3 matches flowcontrol.apiserver.k8s.io/v1beta3
  Aug 24 11:40:06.570: INFO: Checking APIGroup: internal.apiserver.k8s.io
  Aug 24 11:40:06.572: INFO: PreferredVersion.GroupVersion: internal.apiserver.k8s.io/v1alpha1
  Aug 24 11:40:06.572: INFO: Versions found [{internal.apiserver.k8s.io/v1alpha1 v1alpha1}]
  Aug 24 11:40:06.572: INFO: internal.apiserver.k8s.io/v1alpha1 matches internal.apiserver.k8s.io/v1alpha1
  Aug 24 11:40:06.572: INFO: Checking APIGroup: resource.k8s.io
  Aug 24 11:40:06.574: INFO: PreferredVersion.GroupVersion: resource.k8s.io/v1alpha2
  Aug 24 11:40:06.574: INFO: Versions found [{resource.k8s.io/v1alpha2 v1alpha2}]
  Aug 24 11:40:06.574: INFO: resource.k8s.io/v1alpha2 matches resource.k8s.io/v1alpha2
  Aug 24 11:40:06.574: INFO: Checking APIGroup: snapshot.storage.k8s.io
  Aug 24 11:40:06.575: INFO: PreferredVersion.GroupVersion: snapshot.storage.k8s.io/v1
  Aug 24 11:40:06.575: INFO: Versions found [{snapshot.storage.k8s.io/v1 v1}]
  Aug 24 11:40:06.575: INFO: snapshot.storage.k8s.io/v1 matches snapshot.storage.k8s.io/v1
  Aug 24 11:40:06.575: INFO: Checking APIGroup: cilium.io
  Aug 24 11:40:06.577: INFO: PreferredVersion.GroupVersion: cilium.io/v2
  Aug 24 11:40:06.577: INFO: Versions found [{cilium.io/v2 v2} {cilium.io/v2alpha1 v2alpha1}]
  Aug 24 11:40:06.577: INFO: cilium.io/v2 matches cilium.io/v2
  Aug 24 11:40:06.577: INFO: Checking APIGroup: metrics.k8s.io
  Aug 24 11:40:06.579: INFO: PreferredVersion.GroupVersion: metrics.k8s.io/v1beta1
  Aug 24 11:40:06.579: INFO: Versions found [{metrics.k8s.io/v1beta1 v1beta1}]
  Aug 24 11:40:06.579: INFO: metrics.k8s.io/v1beta1 matches metrics.k8s.io/v1beta1
  Aug 24 11:40:06.580: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "discovery-3772" for this suite. @ 08/24/23 11:40:06.587
• [0.400 seconds]
------------------------------
SSSSSSSSSSSSSSSSSS
------------------------------
[sig-apps] Deployment Deployment should have a working scale subresource [Conformance]
test/e2e/apps/deployment.go:150
  STEP: Creating a kubernetes client @ 08/24/23 11:40:06.604
  Aug 24 11:40:06.604: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename deployment @ 08/24/23 11:40:06.605
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 11:40:06.648
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 11:40:06.654
  Aug 24 11:40:06.660: INFO: Creating simple deployment test-new-deployment
  Aug 24 11:40:06.687: INFO: deployment "test-new-deployment" doesn't have the required revision set
  STEP: getting scale subresource @ 08/24/23 11:40:08.723
  STEP: updating a scale subresource @ 08/24/23 11:40:08.732
  STEP: verifying the deployment Spec.Replicas was modified @ 08/24/23 11:40:08.744
  STEP: Patch a scale subresource @ 08/24/23 11:40:08.753
  Aug 24 11:40:08.786: INFO: Deployment "test-new-deployment":
  (v1.Deployment) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=19) "test-new-deployment",
      GenerateName: (string) "",
      Namespace: (string) (len=15) "deployment-2899",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "d3d2eb0b-7b89-400e-bf7a-0b0641942e4a",
      ResourceVersion: (string) (len=10) "3404873999",
      Generation: (int64) 3,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63828474006,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=1) {
        (string) (len=4) "name": (string) (len=5) "httpd"
      },
      Annotations: (map[string]string) (len=1) {
        (string) (len=33) "deployment.kubernetes.io/revision": (string) (len=1) "1"
      },
      OwnerReferences: ([]v1.OwnerReference) <nil>,
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=3) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "e2e.test",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)(<nil>),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=28) {
              00000000  7b 22 66 3a 73 70 65 63  22 3a 7b 22 66 3a 72 65  |{"f:spec":{"f:re|
              00000010  70 6c 69 63 61 73 22 3a  7b 7d 7d 7d              |plicas":{}}}|
            }
          }),
          Subresource: (string) (len=5) "scale"
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "e2e.test",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828474006,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=619) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 6c 61 62 65 6c 73  22 3a 7b 22 2e 22 3a 7b  |f:labels":{".":{|
              00000020  7d 2c 22 66 3a 6e 61 6d  65 22 3a 7b 7d 7d 7d 2c  |},"f:name":{}}},|
              00000030  22 66 3a 73 70 65 63 22  3a 7b 22 66 3a 70 72 6f  |"f:spec":{"f:pro|
              00000040  67 72 65 73 73 44 65 61  64 6c 69 6e 65 53 65 63  |gressDeadlineSec|
              00000050  6f 6e 64 73 22 3a 7b 7d  2c 22 66 3a 72 65 76 69  |onds":{},"f:revi|
              00000060  73 69 6f 6e 48 69 73 74  6f 72 79 4c 69 6d 69 74  |sionHistoryLimit|
              00000070  22 3a 7b 7d 2c 22 66 3a  73 65 6c 65 63 74 6f 72  |":{},"f:selector|
              00000080  22 3a 7b 7d 2c 22 66 3a  73 74 72 61 74 65 67 79  |":{},"f:strategy|
              00000090  22 3a 7b 22 66 3a 72 6f  6c 6c 69 6e 67 55 70 64  |":{"f:rollingUpd|
              000000a0  61 74 65 22 3a 7b 22 2e  22 3a 7b 7d 2c 22 66 3a  |ate":{".":{},"f:|
              000000b0  6d 61 78 53 75 72 67 65  22 3a 7b 7d 2c 22 66 3a  |maxSurge":{},"f:|
              000000c0  6d 61 78 55 6e 61 76 61  69 6c 61 62 6c 65 22 3a  |maxUnavailable":|
              000000d0  7b 7d 7d 2c 22 66 3a 74  79 70 65 22 3a 7b 7d 7d  |{}},"f:type":{}}|
              000000e0  2c 22 66 3a 74 65 6d 70  6c 61 74 65 22 3a 7b 22  |,"f:template":{"|
              000000f0  66 3a 6d 65 74 61 64 61  74 61 22 3a 7b 22 66 3a  |f:metadata":{"f:|
              00000100  6c 61 62 65 6c 73 22 3a  7b 22 2e 22 3a 7b 7d 2c  |labels":{".":{},|
              00000110  22 66 3a 6e 61 6d 65 22  3a 7b 7d 7d 7d 2c 22 66  |"f:name":{}}},"f|
              00000120  3a 73 70 65 63 22 3a 7b  22 66 3a 63 6f 6e 74 61  |:spec":{"f:conta|
              00000130  69 6e 65 72 73 22 3a 7b  22 6b 3a 7b 5c 22 6e 61  |iners":{"k:{\"na|
              00000140  6d 65 5c 22 3a 5c 22 68  74 74 70 64 5c 22 7d 22  |me\":\"httpd\"}"|
              00000150  3a 7b 22 2e 22 3a 7b 7d  2c 22 66 3a 69 6d 61 67  |:{".":{},"f:imag|
              00000160  65 22 3a 7b 7d 2c 22 66  3a 69 6d 61 67 65 50 75  |e":{},"f:imagePu|
              00000170  6c 6c 50 6f 6c 69 63 79  22 3a 7b 7d 2c 22 66 3a  |llPolicy":{},"f:|
              00000180  6e 61 6d 65 22 3a 7b 7d  2c 22 66 3a 72 65 73 6f  |name":{},"f:reso|
              00000190  75 72 63 65 73 22 3a 7b  7d 2c 22 66 3a 73 65 63  |urces":{},"f:sec|
              000001a0  75 72 69 74 79 43 6f 6e  74 65 78 74 22 3a 7b 7d  |urityContext":{}|
              000001b0  2c 22 66 3a 74 65 72 6d  69 6e 61 74 69 6f 6e 4d  |,"f:terminationM|
              000001c0  65 73 73 61 67 65 50 61  74 68 22 3a 7b 7d 2c 22  |essagePath":{},"|
              000001d0  66 3a 74 65 72 6d 69 6e  61 74 69 6f 6e 4d 65 73  |f:terminationMes|
              000001e0  73 61 67 65 50 6f 6c 69  63 79 22 3a 7b 7d 7d 7d  |sagePolicy":{}}}|
              000001f0  2c 22 66 3a 64 6e 73 50  6f 6c 69 63 79 22 3a 7b  |,"f:dnsPolicy":{|
              00000200  7d 2c 22 66 3a 72 65 73  74 61 72 74 50 6f 6c 69  |},"f:restartPoli|
              00000210  63 79 22 3a 7b 7d 2c 22  66 3a 73 63 68 65 64 75  |cy":{},"f:schedu|
              00000220  6c 65 72 4e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 73  |lerName":{},"f:s|
              00000230  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              00000240  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000250  6e 47 72 61 63 65 50 65  72 69 6f 64 53 65 63 6f  |nGracePeriodSeco|
              00000260  6e 64 73 22 3a 7b 7d 7d  7d 7d 7d                 |nds":{}}}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828474007,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=514) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 61 6e 6e 6f 74 61  74 69 6f 6e 73 22 3a 7b  |f:annotations":{|
              00000020  22 2e 22 3a 7b 7d 2c 22  66 3a 64 65 70 6c 6f 79  |".":{},"f:deploy|
              00000030  6d 65 6e 74 2e 6b 75 62  65 72 6e 65 74 65 73 2e  |ment.kubernetes.|
              00000040  69 6f 2f 72 65 76 69 73  69 6f 6e 22 3a 7b 7d 7d  |io/revision":{}}|
              00000050  7d 2c 22 66 3a 73 74 61  74 75 73 22 3a 7b 22 66  |},"f:status":{"f|
              00000060  3a 61 76 61 69 6c 61 62  6c 65 52 65 70 6c 69 63  |:availableReplic|
              00000070  61 73 22 3a 7b 7d 2c 22  66 3a 63 6f 6e 64 69 74  |as":{},"f:condit|
              00000080  69 6f 6e 73 22 3a 7b 22  2e 22 3a 7b 7d 2c 22 6b  |ions":{".":{},"k|
              00000090  3a 7b 5c 22 74 79 70 65  5c 22 3a 5c 22 41 76 61  |:{\"type\":\"Ava|
              000000a0  69 6c 61 62 6c 65 5c 22  7d 22 3a 7b 22 2e 22 3a  |ilable\"}":{".":|
              000000b0  7b 7d 2c 22 66 3a 6c 61  73 74 54 72 61 6e 73 69  |{},"f:lastTransi|
              000000c0  74 69 6f 6e 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |tionTime":{},"f:|
              000000d0  6c 61 73 74 55 70 64 61  74 65 54 69 6d 65 22 3a  |lastUpdateTime":|
              000000e0  7b 7d 2c 22 66 3a 6d 65  73 73 61 67 65 22 3a 7b  |{},"f:message":{|
              000000f0  7d 2c 22 66 3a 72 65 61  73 6f 6e 22 3a 7b 7d 2c  |},"f:reason":{},|
              00000100  22 66 3a 73 74 61 74 75  73 22 3a 7b 7d 2c 22 66  |"f:status":{},"f|
              00000110  3a 74 79 70 65 22 3a 7b  7d 7d 2c 22 6b 3a 7b 5c  |:type":{}},"k:{\|
              00000120  22 74 79 70 65 5c 22 3a  5c 22 50 72 6f 67 72 65  |"type\":\"Progre|
              00000130  73 73 69 6e 67 5c 22 7d  22 3a 7b 22 2e 22 3a 7b  |ssing\"}":{".":{|
              00000140  7d 2c 22 66 3a 6c 61 73  74 54 72 61 6e 73 69 74  |},"f:lastTransit|
              00000150  69 6f 6e 54 69 6d 65 22  3a 7b 7d 2c 22 66 3a 6c  |ionTime":{},"f:l|
              00000160  61 73 74 55 70 64 61 74  65 54 69 6d 65 22 3a 7b  |astUpdateTime":{|
              00000170  7d 2c 22 66 3a 6d 65 73  73 61 67 65 22 3a 7b 7d  |},"f:message":{}|
              00000180  2c 22 66 3a 72 65 61 73  6f 6e 22 3a 7b 7d 2c 22  |,"f:reason":{},"|
              00000190  66 3a 73 74 61 74 75 73  22 3a 7b 7d 2c 22 66 3a  |f:status":{},"f:|
              000001a0  74 79 70 65 22 3a 7b 7d  7d 7d 2c 22 66 3a 6f 62  |type":{}}},"f:ob|
              000001b0  73 65 72 76 65 64 47 65  6e 65 72 61 74 69 6f 6e  |servedGeneration|
              000001c0  22 3a 7b 7d 2c 22 66 3a  72 65 61 64 79 52 65 70  |":{},"f:readyRep|
              000001d0  6c 69 63 61 73 22 3a 7b  7d 2c 22 66 3a 72 65 70  |licas":{},"f:rep|
              000001e0  6c 69 63 61 73 22 3a 7b  7d 2c 22 66 3a 75 70 64  |licas":{},"f:upd|
              000001f0  61 74 65 64 52 65 70 6c  69 63 61 73 22 3a 7b 7d  |atedReplicas":{}|
              00000200  7d 7d                                             |}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.DeploymentSpec) {
      Replicas: (*int32)(4),
      Selector: (*v1.LabelSelector)({
        MatchLabels: (map[string]string) (len=1) {
          (string) (len=4) "name": (string) (len=5) "httpd"
        },
        MatchExpressions: ([]v1.LabelSelectorRequirement) <nil>
      }),
      Template: (v1.PodTemplateSpec) {
        ObjectMeta: (v1.ObjectMeta) {
          Name: (string) "",
          GenerateName: (string) "",
          Namespace: (string) "",
          SelfLink: (string) "",
          UID: (types.UID) "",
          ResourceVersion: (string) "",
          Generation: (int64) 0,
          CreationTimestamp: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          DeletionTimestamp: (*v1.Time)(<nil>),
          DeletionGracePeriodSeconds: (*int64)(<nil>),
          Labels: (map[string]string) (len=1) {
            (string) (len=4) "name": (string) (len=5) "httpd"
          },
          Annotations: (map[string]string) <nil>,
          OwnerReferences: ([]v1.OwnerReference) <nil>,
          Finalizers: ([]string) <nil>,
          ManagedFields: ([]v1.ManagedFieldsEntry) <nil>
        },
        Spec: (v1.PodSpec) {
          Volumes: ([]v1.Volume) <nil>,
          InitContainers: ([]v1.Container) <nil>,
          Containers: ([]v1.Container) (len=1) {
            (v1.Container) {
              Name: (string) (len=5) "httpd",
              Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
              Command: ([]string) <nil>,
              Args: ([]string) <nil>,
              WorkingDir: (string) "",
              Ports: ([]v1.ContainerPort) <nil>,
              EnvFrom: ([]v1.EnvFromSource) <nil>,
              Env: ([]v1.EnvVar) <nil>,
              Resources: (v1.ResourceRequirements) {
                Limits: (v1.ResourceList) <nil>,
                Requests: (v1.ResourceList) <nil>,
                Claims: ([]v1.ResourceClaim) <nil>
              },
              ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
              RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
              VolumeMounts: ([]v1.VolumeMount) <nil>,
              VolumeDevices: ([]v1.VolumeDevice) <nil>,
              LivenessProbe: (*v1.Probe)(<nil>),
              ReadinessProbe: (*v1.Probe)(<nil>),
              StartupProbe: (*v1.Probe)(<nil>),
              Lifecycle: (*v1.Lifecycle)(<nil>),
              TerminationMessagePath: (string) (len=20) "/dev/termination-log",
              TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
              ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
              SecurityContext: (*v1.SecurityContext)({
                Capabilities: (*v1.Capabilities)(<nil>),
                Privileged: (*bool)(<nil>),
                SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
                WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
                RunAsUser: (*int64)(<nil>),
                RunAsGroup: (*int64)(<nil>),
                RunAsNonRoot: (*bool)(<nil>),
                ReadOnlyRootFilesystem: (*bool)(<nil>),
                AllowPrivilegeEscalation: (*bool)(<nil>),
                ProcMount: (*v1.ProcMountType)(<nil>),
                SeccompProfile: (*v1.SeccompProfile)(<nil>)
              }),
              Stdin: (bool) false,
              StdinOnce: (bool) false,
              TTY: (bool) false
            }
          },
          EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
          RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
          TerminationGracePeriodSeconds: (*int64)(0),
          ActiveDeadlineSeconds: (*int64)(<nil>),
          DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
          NodeSelector: (map[string]string) <nil>,
          ServiceAccountName: (string) "",
          DeprecatedServiceAccount: (string) "",
          AutomountServiceAccountToken: (*bool)(<nil>),
          NodeName: (string) "",
          HostNetwork: (bool) false,
          HostPID: (bool) false,
          HostIPC: (bool) false,
          ShareProcessNamespace: (*bool)(<nil>),
          SecurityContext: (*v1.PodSecurityContext)({
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            SupplementalGroups: ([]int64) <nil>,
            FSGroup: (*int64)(<nil>),
            Sysctls: ([]v1.Sysctl) <nil>,
            FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
          Hostname: (string) "",
          Subdomain: (string) "",
          Affinity: (*v1.Affinity)(<nil>),
          SchedulerName: (string) (len=17) "default-scheduler",
          Tolerations: ([]v1.Toleration) <nil>,
          HostAliases: ([]v1.HostAlias) <nil>,
          PriorityClassName: (string) "",
          Priority: (*int32)(<nil>),
          DNSConfig: (*v1.PodDNSConfig)(<nil>),
          ReadinessGates: ([]v1.PodReadinessGate) <nil>,
          RuntimeClassName: (*string)(<nil>),
          EnableServiceLinks: (*bool)(<nil>),
          PreemptionPolicy: (*v1.PreemptionPolicy)(<nil>),
          Overhead: (v1.ResourceList) <nil>,
          TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
          SetHostnameAsFQDN: (*bool)(<nil>),
          OS: (*v1.PodOS)(<nil>),
          HostUsers: (*bool)(<nil>),
          SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
          ResourceClaims: ([]v1.PodResourceClaim) <nil>
        }
      },
      Strategy: (v1.DeploymentStrategy) {
        Type: (v1.DeploymentStrategyType) (len=13) "RollingUpdate",
        RollingUpdate: (*v1.RollingUpdateDeployment)({
          MaxUnavailable: (*intstr.IntOrString)({
            Type: (intstr.Type) 1,
            IntVal: (int32) 0,
            StrVal: (string) (len=3) "25%"
          }),
          MaxSurge: (*intstr.IntOrString)({
            Type: (intstr.Type) 1,
            IntVal: (int32) 0,
            StrVal: (string) (len=3) "25%"
          })
        })
      },
      MinReadySeconds: (int32) 0,
      RevisionHistoryLimit: (*int32)(10),
      Paused: (bool) false,
      ProgressDeadlineSeconds: (*int32)(600)
    },
    Status: (v1.DeploymentStatus) {
      ObservedGeneration: (int64) 1,
      Replicas: (int32) 1,
      UpdatedReplicas: (int32) 1,
      ReadyReplicas: (int32) 1,
      AvailableReplicas: (int32) 1,
      UnavailableReplicas: (int32) 0,
      Conditions: ([]v1.DeploymentCondition) (len=2) {
        (v1.DeploymentCondition) {
          Type: (v1.DeploymentConditionType) (len=9) "Available",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastUpdateTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828474007,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828474007,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=24) "MinimumReplicasAvailable",
          Message: (string) (len=36) "Deployment has minimum availability."
        },
        (v1.DeploymentCondition) {
          Type: (v1.DeploymentConditionType) (len=11) "Progressing",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastUpdateTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828474007,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828474006,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=22) "NewReplicaSetAvailable",
          Message: (string) (len=72) "ReplicaSet \"test-new-deployment-557759b7c7\" has successfully progressed."
        }
      },
      CollisionCount: (*int32)(<nil>)
    }
  }


  Aug 24 11:40:08.854: INFO: New ReplicaSet "test-new-deployment-557759b7c7" of Deployment "test-new-deployment":
  (v1.ReplicaSet) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=30) "test-new-deployment-557759b7c7",
      GenerateName: (string) "",
      Namespace: (string) (len=15) "deployment-2899",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "a6eb9c36-a519-4b54-b25b-700f12ac11fc",
      ResourceVersion: (string) (len=10) "3404874002",
      Generation: (int64) 2,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63828474006,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=5) "httpd",
        (string) (len=17) "pod-template-hash": (string) (len=10) "557759b7c7"
      },
      Annotations: (map[string]string) (len=3) {
        (string) (len=41) "deployment.kubernetes.io/desired-replicas": (string) (len=1) "2",
        (string) (len=37) "deployment.kubernetes.io/max-replicas": (string) (len=1) "3",
        (string) (len=33) "deployment.kubernetes.io/revision": (string) (len=1) "1"
      },
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "Deployment",
          Name: (string) (len=19) "test-new-deployment",
          UID: (types.UID) (len=36) "d3d2eb0b-7b89-400e-bf7a-0b0641942e4a",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828474008,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=781) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 61 6e 6e 6f 74 61  74 69 6f 6e 73 22 3a 7b  |f:annotations":{|
              00000020  22 2e 22 3a 7b 7d 2c 22  66 3a 64 65 70 6c 6f 79  |".":{},"f:deploy|
              00000030  6d 65 6e 74 2e 6b 75 62  65 72 6e 65 74 65 73 2e  |ment.kubernetes.|
              00000040  69 6f 2f 64 65 73 69 72  65 64 2d 72 65 70 6c 69  |io/desired-repli|
              00000050  63 61 73 22 3a 7b 7d 2c  22 66 3a 64 65 70 6c 6f  |cas":{},"f:deplo|
              00000060  79 6d 65 6e 74 2e 6b 75  62 65 72 6e 65 74 65 73  |yment.kubernetes|
              00000070  2e 69 6f 2f 6d 61 78 2d  72 65 70 6c 69 63 61 73  |.io/max-replicas|
              00000080  22 3a 7b 7d 2c 22 66 3a  64 65 70 6c 6f 79 6d 65  |":{},"f:deployme|
              00000090  6e 74 2e 6b 75 62 65 72  6e 65 74 65 73 2e 69 6f  |nt.kubernetes.io|
              000000a0  2f 72 65 76 69 73 69 6f  6e 22 3a 7b 7d 7d 2c 22  |/revision":{}},"|
              000000b0  66 3a 6c 61 62 65 6c 73  22 3a 7b 22 2e 22 3a 7b  |f:labels":{".":{|
              000000c0  7d 2c 22 66 3a 6e 61 6d  65 22 3a 7b 7d 2c 22 66  |},"f:name":{},"f|
              000000d0  3a 70 6f 64 2d 74 65 6d  70 6c 61 74 65 2d 68 61  |:pod-template-ha|
              000000e0  73 68 22 3a 7b 7d 7d 2c  22 66 3a 6f 77 6e 65 72  |sh":{}},"f:owner|
              000000f0  52 65 66 65 72 65 6e 63  65 73 22 3a 7b 22 2e 22  |References":{"."|
              00000100  3a 7b 7d 2c 22 6b 3a 7b  5c 22 75 69 64 5c 22 3a  |:{},"k:{\"uid\":|
              00000110  5c 22 64 33 64 32 65 62  30 62 2d 37 62 38 39 2d  |\"d3d2eb0b-7b89-|
              00000120  34 30 30 65 2d 62 66 37  61 2d 30 62 30 36 34 31  |400e-bf7a-0b0641|
              00000130  39 34 32 65 34 61 5c 22  7d 22 3a 7b 7d 7d 7d 2c  |942e4a\"}":{}}},|
              00000140  22 66 3a 73 70 65 63 22  3a 7b 22 66 3a 72 65 70  |"f:spec":{"f:rep|
              00000150  6c 69 63 61 73 22 3a 7b  7d 2c 22 66 3a 73 65 6c  |licas":{},"f:sel|
              00000160  65 63 74 6f 72 22 3a 7b  7d 2c 22 66 3a 74 65 6d  |ector":{},"f:tem|
              00000170  70 6c 61 74 65 22 3a 7b  22 66 3a 6d 65 74 61 64  |plate":{"f:metad|
              00000180  61 74 61 22 3a 7b 22 66  3a 6c 61 62 65 6c 73 22  |ata":{"f:labels"|
              00000190  3a 7b 22 2e 22 3a 7b 7d  2c 22 66 3a 6e 61 6d 65  |:{".":{},"f:name|
              000001a0  22 3a 7b 7d 2c 22 66 3a  70 6f 64 2d 74 65 6d 70  |":{},"f:pod-temp|
              000001b0  6c 61 74 65 2d 68 61 73  68 22 3a 7b 7d 7d 7d 2c  |late-hash":{}}},|
              000001c0  22 66 3a 73 70 65 63 22  3a 7b 22 66 3a 63 6f 6e  |"f:spec":{"f:con|
              000001d0  74 61 69 6e 65 72 73 22  3a 7b 22 6b 3a 7b 5c 22  |tainers":{"k:{\"|
              000001e0  6e 61 6d 65 5c 22 3a 5c  22 68 74 74 70 64 5c 22  |name\":\"httpd\"|
              000001f0  7d 22 3a 7b 22 2e 22 3a  7b 7d 2c 22 66 3a 69 6d  |}":{".":{},"f:im|
              00000200  61 67 65 22 3a 7b 7d 2c  22 66 3a 69 6d 61 67 65  |age":{},"f:image|
              00000210  50 75 6c 6c 50 6f 6c 69  63 79 22 3a 7b 7d 2c 22  |PullPolicy":{},"|
              00000220  66 3a 6e 61 6d 65 22 3a  7b 7d 2c 22 66 3a 72 65  |f:name":{},"f:re|
              00000230  73 6f 75 72 63 65 73 22  3a 7b 7d 2c 22 66 3a 73  |sources":{},"f:s|
              00000240  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              00000250  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000260  6e 4d 65 73 73 61 67 65  50 61 74 68 22 3a 7b 7d  |nMessagePath":{}|
              00000270  2c 22 66 3a 74 65 72 6d  69 6e 61 74 69 6f 6e 4d  |,"f:terminationM|
              00000280  65 73 73 61 67 65 50 6f  6c 69 63 79 22 3a 7b 7d  |essagePolicy":{}|
              00000290  7d 7d 2c 22 66 3a 64 6e  73 50 6f 6c 69 63 79 22  |}},"f:dnsPolicy"|
              000002a0  3a 7b 7d 2c 22 66 3a 72  65 73 74 61 72 74 50 6f  |:{},"f:restartPo|
              000002b0  6c 69 63 79 22 3a 7b 7d  2c 22 66 3a 73 63 68 65  |licy":{},"f:sche|
              000002c0  64 75 6c 65 72 4e 61 6d  65 22 3a 7b 7d 2c 22 66  |dulerName":{},"f|
              000002d0  3a 73 65 63 75 72 69 74  79 43 6f 6e 74 65 78 74  |:securityContext|
              000002e0  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              000002f0  69 6f 6e 47 72 61 63 65  50 65 72 69 6f 64 53 65  |ionGracePeriodSe|
              00000300  63 6f 6e 64 73 22 3a 7b  7d 7d 7d 7d 7d           |conds":{}}}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828474008,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=130) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  61 76 61 69 6c 61 62 6c  65 52 65 70 6c 69 63 61  |availableReplica|
              00000020  73 22 3a 7b 7d 2c 22 66  3a 66 75 6c 6c 79 4c 61  |s":{},"f:fullyLa|
              00000030  62 65 6c 65 64 52 65 70  6c 69 63 61 73 22 3a 7b  |beledReplicas":{|
              00000040  7d 2c 22 66 3a 6f 62 73  65 72 76 65 64 47 65 6e  |},"f:observedGen|
              00000050  65 72 61 74 69 6f 6e 22  3a 7b 7d 2c 22 66 3a 72  |eration":{},"f:r|
              00000060  65 61 64 79 52 65 70 6c  69 63 61 73 22 3a 7b 7d  |eadyReplicas":{}|
              00000070  2c 22 66 3a 72 65 70 6c  69 63 61 73 22 3a 7b 7d  |,"f:replicas":{}|
              00000080  7d 7d                                             |}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.ReplicaSetSpec) {
      Replicas: (*int32)(2),
      MinReadySeconds: (int32) 0,
      Selector: (*v1.LabelSelector)({
        MatchLabels: (map[string]string) (len=2) {
          (string) (len=4) "name": (string) (len=5) "httpd",
          (string) (len=17) "pod-template-hash": (string) (len=10) "557759b7c7"
        },
        MatchExpressions: ([]v1.LabelSelectorRequirement) <nil>
      }),
      Template: (v1.PodTemplateSpec) {
        ObjectMeta: (v1.ObjectMeta) {
          Name: (string) "",
          GenerateName: (string) "",
          Namespace: (string) "",
          SelfLink: (string) "",
          UID: (types.UID) "",
          ResourceVersion: (string) "",
          Generation: (int64) 0,
          CreationTimestamp: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          DeletionTimestamp: (*v1.Time)(<nil>),
          DeletionGracePeriodSeconds: (*int64)(<nil>),
          Labels: (map[string]string) (len=2) {
            (string) (len=4) "name": (string) (len=5) "httpd",
            (string) (len=17) "pod-template-hash": (string) (len=10) "557759b7c7"
          },
          Annotations: (map[string]string) <nil>,
          OwnerReferences: ([]v1.OwnerReference) <nil>,
          Finalizers: ([]string) <nil>,
          ManagedFields: ([]v1.ManagedFieldsEntry) <nil>
        },
        Spec: (v1.PodSpec) {
          Volumes: ([]v1.Volume) <nil>,
          InitContainers: ([]v1.Container) <nil>,
          Containers: ([]v1.Container) (len=1) {
            (v1.Container) {
              Name: (string) (len=5) "httpd",
              Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
              Command: ([]string) <nil>,
              Args: ([]string) <nil>,
              WorkingDir: (string) "",
              Ports: ([]v1.ContainerPort) <nil>,
              EnvFrom: ([]v1.EnvFromSource) <nil>,
              Env: ([]v1.EnvVar) <nil>,
              Resources: (v1.ResourceRequirements) {
                Limits: (v1.ResourceList) <nil>,
                Requests: (v1.ResourceList) <nil>,
                Claims: ([]v1.ResourceClaim) <nil>
              },
              ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
              RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
              VolumeMounts: ([]v1.VolumeMount) <nil>,
              VolumeDevices: ([]v1.VolumeDevice) <nil>,
              LivenessProbe: (*v1.Probe)(<nil>),
              ReadinessProbe: (*v1.Probe)(<nil>),
              StartupProbe: (*v1.Probe)(<nil>),
              Lifecycle: (*v1.Lifecycle)(<nil>),
              TerminationMessagePath: (string) (len=20) "/dev/termination-log",
              TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
              ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
              SecurityContext: (*v1.SecurityContext)({
                Capabilities: (*v1.Capabilities)(<nil>),
                Privileged: (*bool)(<nil>),
                SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
                WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
                RunAsUser: (*int64)(<nil>),
                RunAsGroup: (*int64)(<nil>),
                RunAsNonRoot: (*bool)(<nil>),
                ReadOnlyRootFilesystem: (*bool)(<nil>),
                AllowPrivilegeEscalation: (*bool)(<nil>),
                ProcMount: (*v1.ProcMountType)(<nil>),
                SeccompProfile: (*v1.SeccompProfile)(<nil>)
              }),
              Stdin: (bool) false,
              StdinOnce: (bool) false,
              TTY: (bool) false
            }
          },
          EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
          RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
          TerminationGracePeriodSeconds: (*int64)(0),
          ActiveDeadlineSeconds: (*int64)(<nil>),
          DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
          NodeSelector: (map[string]string) <nil>,
          ServiceAccountName: (string) "",
          DeprecatedServiceAccount: (string) "",
          AutomountServiceAccountToken: (*bool)(<nil>),
          NodeName: (string) "",
          HostNetwork: (bool) false,
          HostPID: (bool) false,
          HostIPC: (bool) false,
          ShareProcessNamespace: (*bool)(<nil>),
          SecurityContext: (*v1.PodSecurityContext)({
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            SupplementalGroups: ([]int64) <nil>,
            FSGroup: (*int64)(<nil>),
            Sysctls: ([]v1.Sysctl) <nil>,
            FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
          Hostname: (string) "",
          Subdomain: (string) "",
          Affinity: (*v1.Affinity)(<nil>),
          SchedulerName: (string) (len=17) "default-scheduler",
          Tolerations: ([]v1.Toleration) <nil>,
          HostAliases: ([]v1.HostAlias) <nil>,
          PriorityClassName: (string) "",
          Priority: (*int32)(<nil>),
          DNSConfig: (*v1.PodDNSConfig)(<nil>),
          ReadinessGates: ([]v1.PodReadinessGate) <nil>,
          RuntimeClassName: (*string)(<nil>),
          EnableServiceLinks: (*bool)(<nil>),
          PreemptionPolicy: (*v1.PreemptionPolicy)(<nil>),
          Overhead: (v1.ResourceList) <nil>,
          TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
          SetHostnameAsFQDN: (*bool)(<nil>),
          OS: (*v1.PodOS)(<nil>),
          HostUsers: (*bool)(<nil>),
          SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
          ResourceClaims: ([]v1.PodResourceClaim) <nil>
        }
      }
    },
    Status: (v1.ReplicaSetStatus) {
      Replicas: (int32) 1,
      FullyLabeledReplicas: (int32) 1,
      ReadyReplicas: (int32) 1,
      AvailableReplicas: (int32) 1,
      ObservedGeneration: (int64) 2,
      Conditions: ([]v1.ReplicaSetCondition) <nil>
    }
  }

  Aug 24 11:40:08.864: INFO: Pod "test-new-deployment-557759b7c7-gqvfd" is not available:
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=36) "test-new-deployment-557759b7c7-gqvfd",
      GenerateName: (string) (len=31) "test-new-deployment-557759b7c7-",
      Namespace: (string) (len=15) "deployment-2899",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "33235b7d-88aa-4889-9ae6-bd7f52d35b10",
      ResourceVersion: (string) (len=10) "3404874003",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63828474008,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=5) "httpd",
        (string) (len=17) "pod-template-hash": (string) (len=10) "557759b7c7"
      },
      Annotations: (map[string]string) <nil>,
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=30) "test-new-deployment-557759b7c7",
          UID: (types.UID) (len=36) "a6eb9c36-a519-4b54-b25b-700f12ac11fc",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=1) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828474008,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=537) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |.":{},"f:name":{|
              00000040  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              00000050  65 2d 68 61 73 68 22 3a  7b 7d 7d 2c 22 66 3a 6f  |e-hash":{}},"f:o|
              00000060  77 6e 65 72 52 65 66 65  72 65 6e 63 65 73 22 3a  |wnerReferences":|
              00000070  7b 22 2e 22 3a 7b 7d 2c  22 6b 3a 7b 5c 22 75 69  |{".":{},"k:{\"ui|
              00000080  64 5c 22 3a 5c 22 61 36  65 62 39 63 33 36 2d 61  |d\":\"a6eb9c36-a|
              00000090  35 31 39 2d 34 62 35 34  2d 62 32 35 62 2d 37 30  |519-4b54-b25b-70|
              000000a0  30 66 31 32 61 63 31 31  66 63 5c 22 7d 22 3a 7b  |0f12ac11fc\"}":{|
              000000b0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000000c0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              000000d0  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 68 74 74  |:{\"name\":\"htt|
              000000e0  70 64 5c 22 7d 22 3a 7b  22 2e 22 3a 7b 7d 2c 22  |pd\"}":{".":{},"|
              000000f0  66 3a 69 6d 61 67 65 22  3a 7b 7d 2c 22 66 3a 69  |f:image":{},"f:i|
              00000100  6d 61 67 65 50 75 6c 6c  50 6f 6c 69 63 79 22 3a  |magePullPolicy":|
              00000110  7b 7d 2c 22 66 3a 6e 61  6d 65 22 3a 7b 7d 2c 22  |{},"f:name":{},"|
              00000120  66 3a 72 65 73 6f 75 72  63 65 73 22 3a 7b 7d 2c  |f:resources":{},|
              00000130  22 66 3a 73 65 63 75 72  69 74 79 43 6f 6e 74 65  |"f:securityConte|
              00000140  78 74 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |xt":{},"f:termin|
              00000150  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 61 74 68  |ationMessagePath|
              00000160  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000170  69 6f 6e 4d 65 73 73 61  67 65 50 6f 6c 69 63 79  |ionMessagePolicy|
              00000180  22 3a 7b 7d 7d 7d 2c 22  66 3a 64 6e 73 50 6f 6c  |":{}}},"f:dnsPol|
              00000190  69 63 79 22 3a 7b 7d 2c  22 66 3a 65 6e 61 62 6c  |icy":{},"f:enabl|
              000001a0  65 53 65 72 76 69 63 65  4c 69 6e 6b 73 22 3a 7b  |eServiceLinks":{|
              000001b0  7d 2c 22 66 3a 72 65 73  74 61 72 74 50 6f 6c 69  |},"f:restartPoli|
              000001c0  63 79 22 3a 7b 7d 2c 22  66 3a 73 63 68 65 64 75  |cy":{},"f:schedu|
              000001d0  6c 65 72 4e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 73  |lerName":{},"f:s|
              000001e0  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              000001f0  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000200  6e 47 72 61 63 65 50 65  72 69 6f 64 53 65 63 6f  |nGracePeriodSeco|
              00000210  6e 64 73 22 3a 7b 7d 7d  7d                       |nds":{}}}|
            }
          }),
          Subresource: (string) ""
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-jcj96",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  })
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=5) "httpd",
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-jcj96",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(0),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=46) "scw-conformance-default-ecf11ec729064adba7e270",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Pending",
      Conditions: ([]v1.PodCondition) (len=1) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828474008,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) "",
      HostIPs: ([]v1.HostIP) <nil>,
      PodIP: (string) "",
      PodIPs: ([]v1.PodIP) <nil>,
      StartTime: (*v1.Time)(<nil>),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) <nil>,
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }

  Aug 24 11:40:08.866: INFO: Pod "test-new-deployment-557759b7c7-jtj68" is available:
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=36) "test-new-deployment-557759b7c7-jtj68",
      GenerateName: (string) (len=31) "test-new-deployment-557759b7c7-",
      Namespace: (string) (len=15) "deployment-2899",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "3b9485f8-b1af-4da3-a93c-fcc35d6d674d",
      ResourceVersion: (string) (len=10) "3404873923",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63828474006,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=17) "pod-template-hash": (string) (len=10) "557759b7c7",
        (string) (len=4) "name": (string) (len=5) "httpd"
      },
      Annotations: (map[string]string) <nil>,
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=30) "test-new-deployment-557759b7c7",
          UID: (types.UID) (len=36) "a6eb9c36-a519-4b54-b25b-700f12ac11fc",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828474006,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=537) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |.":{},"f:name":{|
              00000040  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              00000050  65 2d 68 61 73 68 22 3a  7b 7d 7d 2c 22 66 3a 6f  |e-hash":{}},"f:o|
              00000060  77 6e 65 72 52 65 66 65  72 65 6e 63 65 73 22 3a  |wnerReferences":|
              00000070  7b 22 2e 22 3a 7b 7d 2c  22 6b 3a 7b 5c 22 75 69  |{".":{},"k:{\"ui|
              00000080  64 5c 22 3a 5c 22 61 36  65 62 39 63 33 36 2d 61  |d\":\"a6eb9c36-a|
              00000090  35 31 39 2d 34 62 35 34  2d 62 32 35 62 2d 37 30  |519-4b54-b25b-70|
              000000a0  30 66 31 32 61 63 31 31  66 63 5c 22 7d 22 3a 7b  |0f12ac11fc\"}":{|
              000000b0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000000c0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              000000d0  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 68 74 74  |:{\"name\":\"htt|
              000000e0  70 64 5c 22 7d 22 3a 7b  22 2e 22 3a 7b 7d 2c 22  |pd\"}":{".":{},"|
              000000f0  66 3a 69 6d 61 67 65 22  3a 7b 7d 2c 22 66 3a 69  |f:image":{},"f:i|
              00000100  6d 61 67 65 50 75 6c 6c  50 6f 6c 69 63 79 22 3a  |magePullPolicy":|
              00000110  7b 7d 2c 22 66 3a 6e 61  6d 65 22 3a 7b 7d 2c 22  |{},"f:name":{},"|
              00000120  66 3a 72 65 73 6f 75 72  63 65 73 22 3a 7b 7d 2c  |f:resources":{},|
              00000130  22 66 3a 73 65 63 75 72  69 74 79 43 6f 6e 74 65  |"f:securityConte|
              00000140  78 74 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |xt":{},"f:termin|
              00000150  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 61 74 68  |ationMessagePath|
              00000160  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000170  69 6f 6e 4d 65 73 73 61  67 65 50 6f 6c 69 63 79  |ionMessagePolicy|
              00000180  22 3a 7b 7d 7d 7d 2c 22  66 3a 64 6e 73 50 6f 6c  |":{}}},"f:dnsPol|
              00000190  69 63 79 22 3a 7b 7d 2c  22 66 3a 65 6e 61 62 6c  |icy":{},"f:enabl|
              000001a0  65 53 65 72 76 69 63 65  4c 69 6e 6b 73 22 3a 7b  |eServiceLinks":{|
              000001b0  7d 2c 22 66 3a 72 65 73  74 61 72 74 50 6f 6c 69  |},"f:restartPoli|
              000001c0  63 79 22 3a 7b 7d 2c 22  66 3a 73 63 68 65 64 75  |cy":{},"f:schedu|
              000001d0  6c 65 72 4e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 73  |lerName":{},"f:s|
              000001e0  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              000001f0  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000200  6e 47 72 61 63 65 50 65  72 69 6f 64 53 65 63 6f  |nGracePeriodSeco|
              00000210  6e 64 73 22 3a 7b 7d 7d  7d                       |nds":{}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=7) "kubelet",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828474007,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=518) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  63 6f 6e 64 69 74 69 6f  6e 73 22 3a 7b 22 6b 3a  |conditions":{"k:|
              00000020  7b 5c 22 74 79 70 65 5c  22 3a 5c 22 43 6f 6e 74  |{\"type\":\"Cont|
              00000030  61 69 6e 65 72 73 52 65  61 64 79 5c 22 7d 22 3a  |ainersReady\"}":|
              00000040  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000050  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000060  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000070  6d 65 22 3a 7b 7d 2c 22  66 3a 73 74 61 74 75 73  |me":{},"f:status|
              00000080  22 3a 7b 7d 2c 22 66 3a  74 79 70 65 22 3a 7b 7d  |":{},"f:type":{}|
              00000090  7d 2c 22 6b 3a 7b 5c 22  74 79 70 65 5c 22 3a 5c  |},"k:{\"type\":\|
              000000a0  22 49 6e 69 74 69 61 6c  69 7a 65 64 5c 22 7d 22  |"Initialized\"}"|
              000000b0  3a 7b 22 2e 22 3a 7b 7d  2c 22 66 3a 6c 61 73 74  |:{".":{},"f:last|
              000000c0  50 72 6f 62 65 54 69 6d  65 22 3a 7b 7d 2c 22 66  |ProbeTime":{},"f|
              000000d0  3a 6c 61 73 74 54 72 61  6e 73 69 74 69 6f 6e 54  |:lastTransitionT|
              000000e0  69 6d 65 22 3a 7b 7d 2c  22 66 3a 73 74 61 74 75  |ime":{},"f:statu|
              000000f0  73 22 3a 7b 7d 2c 22 66  3a 74 79 70 65 22 3a 7b  |s":{},"f:type":{|
              00000100  7d 7d 2c 22 6b 3a 7b 5c  22 74 79 70 65 5c 22 3a  |}},"k:{\"type\":|
              00000110  5c 22 52 65 61 64 79 5c  22 7d 22 3a 7b 22 2e 22  |\"Ready\"}":{"."|
              00000120  3a 7b 7d 2c 22 66 3a 6c  61 73 74 50 72 6f 62 65  |:{},"f:lastProbe|
              00000130  54 69 6d 65 22 3a 7b 7d  2c 22 66 3a 6c 61 73 74  |Time":{},"f:last|
              00000140  54 72 61 6e 73 69 74 69  6f 6e 54 69 6d 65 22 3a  |TransitionTime":|
              00000150  7b 7d 2c 22 66 3a 73 74  61 74 75 73 22 3a 7b 7d  |{},"f:status":{}|
              00000160  2c 22 66 3a 74 79 70 65  22 3a 7b 7d 7d 7d 2c 22  |,"f:type":{}}},"|
              00000170  66 3a 63 6f 6e 74 61 69  6e 65 72 53 74 61 74 75  |f:containerStatu|
              00000180  73 65 73 22 3a 7b 7d 2c  22 66 3a 68 6f 73 74 49  |ses":{},"f:hostI|
              00000190  50 22 3a 7b 7d 2c 22 66  3a 70 68 61 73 65 22 3a  |P":{},"f:phase":|
              000001a0  7b 7d 2c 22 66 3a 70 6f  64 49 50 22 3a 7b 7d 2c  |{},"f:podIP":{},|
              000001b0  22 66 3a 70 6f 64 49 50  73 22 3a 7b 22 2e 22 3a  |"f:podIPs":{".":|
              000001c0  7b 7d 2c 22 6b 3a 7b 5c  22 69 70 5c 22 3a 5c 22  |{},"k:{\"ip\":\"|
              000001d0  31 30 2e 31 30 30 2e 30  2e 38 33 5c 22 7d 22 3a  |10.100.0.83\"}":|
              000001e0  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 69 70 22 3a 7b  |{".":{},"f:ip":{|
              000001f0  7d 7d 7d 2c 22 66 3a 73  74 61 72 74 54 69 6d 65  |}}},"f:startTime|
              00000200  22 3a 7b 7d 7d 7d                                 |":{}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-hq8ld",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  })
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=5) "httpd",
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-hq8ld",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(0),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=46) "scw-conformance-default-2af6d8b4c6264cc5b9e5e6",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Running",
      Conditions: ([]v1.PodCondition) (len=4) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=11) "Initialized",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828474006,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=5) "Ready",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828474007,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=15) "ContainersReady",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828474007,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828474006,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) (len=11) "172.16.36.3",
      HostIPs: ([]v1.HostIP) <nil>,
      PodIP: (string) (len=11) "10.100.0.83",
      PodIPs: ([]v1.PodIP) (len=1) {
        (v1.PodIP) {
          IP: (string) (len=11) "10.100.0.83"
        }
      },
      StartTime: (*v1.Time)({
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63828474006,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      }),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) (len=1) {
        (v1.ContainerStatus) {
          Name: (string) (len=5) "httpd",
          State: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)({
              StartedAt: (v1.Time) {
                Time: (time.Time) {
                  wall: (uint64) 0,
                  ext: (int64) 63828474007,
                  loc: (*time.Location)(<already shown>)
                }
              }
            }),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          LastTerminationState: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          Ready: (bool) true,
          RestartCount: (int32) 0,
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          ImageID: (string) (len=109) "registry.k8s.io/e2e-test-images/httpd@sha256:148b022f5c5da426fc2f3c14b5c0867e58ef05961510c84749ac1fddcb0fef22",
          ContainerID: (string) (len=77) "containerd://6600bd1d6b9a183c25195a3a819825638fb8e16bb10a02e7061fb744a617d3b6",
          Started: (*bool)(true),
          AllocatedResources: (v1.ResourceList) <nil>,
          Resources: (*v1.ResourceRequirements)(<nil>)
        }
      },
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }

  Aug 24 11:40:08.869: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "deployment-2899" for this suite. @ 08/24/23 11:40:08.95
• [2.364 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-network] Ingress API should support creating Ingress API operations [Conformance]
test/e2e/network/ingress.go:556
  STEP: Creating a kubernetes client @ 08/24/23 11:40:08.969
  Aug 24 11:40:08.969: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename ingress @ 08/24/23 11:40:08.97
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 11:40:09.064
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 11:40:09.07
  STEP: getting /apis @ 08/24/23 11:40:09.076
  STEP: getting /apis/networking.k8s.io @ 08/24/23 11:40:09.085
  STEP: getting /apis/networking.k8s.iov1 @ 08/24/23 11:40:09.148
  STEP: creating @ 08/24/23 11:40:09.151
  STEP: getting @ 08/24/23 11:40:09.185
  STEP: listing @ 08/24/23 11:40:09.193
  STEP: watching @ 08/24/23 11:40:09.201
  Aug 24 11:40:09.201: INFO: starting watch
  STEP: cluster-wide listing @ 08/24/23 11:40:09.205
  STEP: cluster-wide watching @ 08/24/23 11:40:09.214
  Aug 24 11:40:09.214: INFO: starting watch
  STEP: patching @ 08/24/23 11:40:09.216
  STEP: updating @ 08/24/23 11:40:09.231
  Aug 24 11:40:09.255: INFO: waiting for watch events with expected annotations
  Aug 24 11:40:09.255: INFO: saw patched and updated annotations
  STEP: patching /status @ 08/24/23 11:40:09.255
  STEP: updating /status @ 08/24/23 11:40:09.267
  STEP: get /status @ 08/24/23 11:40:09.286
  STEP: deleting @ 08/24/23 11:40:09.293
  STEP: deleting a collection @ 08/24/23 11:40:09.323
  Aug 24 11:40:09.360: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "ingress-3545" for this suite. @ 08/24/23 11:40:09.369
• [0.415 seconds]
------------------------------
SSSSSSSSSS
------------------------------
[sig-node] NoExecuteTaintManager Multiple Pods [Serial] evicts pods with minTolerationSeconds [Disruptive] [Conformance]
test/e2e/node/taints.go:450
  STEP: Creating a kubernetes client @ 08/24/23 11:40:09.385
  Aug 24 11:40:09.385: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename taint-multiple-pods @ 08/24/23 11:40:09.386
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 11:40:09.422
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 11:40:09.428
  Aug 24 11:40:09.435: INFO: Waiting up to 1m0s for all nodes to be ready
  Aug 24 11:41:09.470: INFO: Waiting for terminating namespaces to be deleted...
  Aug 24 11:41:09.479: INFO: Starting informer...
  STEP: Starting pods... @ 08/24/23 11:41:09.479
  Aug 24 11:41:09.723: INFO: Pod1 is running on scw-conformance-default-2af6d8b4c6264cc5b9e5e6. Tainting Node
  Aug 24 11:41:11.987: INFO: Pod2 is running on scw-conformance-default-2af6d8b4c6264cc5b9e5e6. Tainting Node
  STEP: Trying to apply a taint on the Node @ 08/24/23 11:41:11.987
  STEP: verifying the node has the taint kubernetes.io/e2e-evict-taint-key=evictTaintVal:NoExecute @ 08/24/23 11:41:12.016
  STEP: Waiting for Pod1 and Pod2 to be deleted @ 08/24/23 11:41:12.026
  Aug 24 11:41:17.879: INFO: Noticed Pod "taint-eviction-b1" gets evicted.
  Aug 24 11:41:37.935: INFO: Noticed Pod "taint-eviction-b2" gets evicted.
  Aug 24 11:41:37.936: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: verifying the node doesn't have the taint kubernetes.io/e2e-evict-taint-key=evictTaintVal:NoExecute @ 08/24/23 11:41:37.975
  STEP: Destroying namespace "taint-multiple-pods-7004" for this suite. @ 08/24/23 11:41:37.985
• [88.621 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSS
------------------------------
[sig-storage] Secrets should be consumable from pods in volume as non-root with defaultMode and fsGroup set [LinuxOnly] [NodeConformance] [Conformance]
test/e2e/common/storage/secrets_volume.go:68
  STEP: Creating a kubernetes client @ 08/24/23 11:41:38.006
  Aug 24 11:41:38.006: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename secrets @ 08/24/23 11:41:38.007
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 11:41:38.076
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 11:41:38.083
  STEP: Creating secret with name secret-test-2df460bb-a09d-4c82-ab9a-521737f268c5 @ 08/24/23 11:41:38.089
  STEP: Creating a pod to test consume secrets @ 08/24/23 11:41:38.101
  STEP: Saw pod success @ 08/24/23 11:41:42.174
  Aug 24 11:41:42.183: INFO: Trying to get logs from node scw-conformance-default-2af6d8b4c6264cc5b9e5e6 pod pod-secrets-3f84fafd-01e1-4536-8d49-76ed048b81e8 container secret-volume-test: <nil>
  STEP: delete the pod @ 08/24/23 11:41:42.227
  Aug 24 11:41:42.293: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "secrets-6366" for this suite. @ 08/24/23 11:41:42.306
• [4.314 seconds]
------------------------------
SS
------------------------------
[sig-api-machinery] FieldValidation should detect duplicates in a CR when preserving unknown fields [Conformance]
test/e2e/apimachinery/field_validation.go:622
  STEP: Creating a kubernetes client @ 08/24/23 11:41:42.321
  Aug 24 11:41:42.322: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename field-validation @ 08/24/23 11:41:42.323
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 11:41:42.346
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 11:41:42.353
  Aug 24 11:41:42.361: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  W0824 11:41:44.972380      22 warnings.go:70] unknown field "alpha"
  W0824 11:41:44.972405      22 warnings.go:70] unknown field "beta"
  W0824 11:41:44.972408      22 warnings.go:70] unknown field "delta"
  W0824 11:41:44.972411      22 warnings.go:70] unknown field "epsilon"
  W0824 11:41:44.972414      22 warnings.go:70] unknown field "gamma"
  Aug 24 11:41:45.560: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "field-validation-3012" for this suite. @ 08/24/23 11:41:45.602
• [3.297 seconds]
------------------------------
SSSSSS
------------------------------
[sig-api-machinery] CustomResourcePublishOpenAPI [Privileged:ClusterAdmin] works for multiple CRDs of same group and version but different kinds [Conformance]
test/e2e/apimachinery/crd_publish_openapi.go:357
  STEP: Creating a kubernetes client @ 08/24/23 11:41:45.619
  Aug 24 11:41:45.619: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename crd-publish-openapi @ 08/24/23 11:41:45.62
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 11:41:45.655
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 11:41:45.662
  STEP: CRs in the same group and version but different kinds (two CRDs) show up in OpenAPI documentation @ 08/24/23 11:41:45.668
  Aug 24 11:41:45.669: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  Aug 24 11:41:47.379: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  Aug 24 11:41:55.339: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "crd-publish-openapi-6207" for this suite. @ 08/24/23 11:41:55.362
• [9.757 seconds]
------------------------------
SSSSSSSSSSSSS
------------------------------
[sig-scheduling] SchedulerPredicates [Serial] validates that NodeSelector is respected if matching  [Conformance]
test/e2e/scheduling/predicates.go:467
  STEP: Creating a kubernetes client @ 08/24/23 11:41:55.376
  Aug 24 11:41:55.376: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename sched-pred @ 08/24/23 11:41:55.377
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 11:41:55.41
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 11:41:55.416
  Aug 24 11:41:55.422: INFO: Waiting up to 1m0s for all (but 0) nodes to be ready
  Aug 24 11:41:55.440: INFO: Waiting for terminating namespaces to be deleted...
  Aug 24 11:41:55.447: INFO: 
  Logging pods the apiserver thinks is on node scw-conformance-default-2af6d8b4c6264cc5b9e5e6 before test
  Aug 24 11:41:55.474: INFO: cilium-operator-9686c5f57-bbxb6 from kube-system started at 2023-08-24 11:03:43 +0000 UTC (1 container statuses recorded)
  Aug 24 11:41:55.474: INFO: 	Container cilium-operator ready: true, restart count 0
  Aug 24 11:41:55.474: INFO: cilium-qxsf5 from kube-system started at 2023-08-24 11:03:43 +0000 UTC (1 container statuses recorded)
  Aug 24 11:41:55.474: INFO: 	Container cilium-agent ready: true, restart count 0
  Aug 24 11:41:55.474: INFO: csi-node-tq6l2 from kube-system started at 2023-08-24 11:03:43 +0000 UTC (2 container statuses recorded)
  Aug 24 11:41:55.474: INFO: 	Container csi-node-driver-registrar ready: true, restart count 0
  Aug 24 11:41:55.474: INFO: 	Container csi-plugin ready: true, restart count 0
  Aug 24 11:41:55.474: INFO: konnectivity-agent-9q7n8 from kube-system started at 2023-08-24 11:03:43 +0000 UTC (1 container statuses recorded)
  Aug 24 11:41:55.475: INFO: 	Container konnectivity-agent ready: true, restart count 0
  Aug 24 11:41:55.475: INFO: kube-proxy-qdvkw from kube-system started at 2023-08-24 11:03:43 +0000 UTC (1 container statuses recorded)
  Aug 24 11:41:55.475: INFO: 	Container kube-proxy ready: true, restart count 0
  Aug 24 11:41:55.475: INFO: sonobuoy from sonobuoy started at 2023-08-24 11:26:49 +0000 UTC (1 container statuses recorded)
  Aug 24 11:41:55.475: INFO: 	Container kube-sonobuoy ready: true, restart count 0
  Aug 24 11:41:55.475: INFO: sonobuoy-systemd-logs-daemon-set-02ba39604ea741df-p7qf6 from sonobuoy started at 2023-08-24 11:26:53 +0000 UTC (2 container statuses recorded)
  Aug 24 11:41:55.475: INFO: 	Container sonobuoy-worker ready: true, restart count 0
  Aug 24 11:41:55.475: INFO: 	Container systemd-logs ready: true, restart count 0
  Aug 24 11:41:55.475: INFO: 
  Logging pods the apiserver thinks is on node scw-conformance-default-ecf11ec729064adba7e270 before test
  Aug 24 11:41:55.490: INFO: cilium-x494p from kube-system started at 2023-08-24 11:03:51 +0000 UTC (1 container statuses recorded)
  Aug 24 11:41:55.490: INFO: 	Container cilium-agent ready: true, restart count 0
  Aug 24 11:41:55.490: INFO: coredns-76f9d8b48f-l47wj from kube-system started at 2023-08-24 11:04:12 +0000 UTC (1 container statuses recorded)
  Aug 24 11:41:55.490: INFO: 	Container coredns ready: true, restart count 0
  Aug 24 11:41:55.490: INFO: csi-node-mj9jp from kube-system started at 2023-08-24 11:03:51 +0000 UTC (2 container statuses recorded)
  Aug 24 11:41:55.490: INFO: 	Container csi-node-driver-registrar ready: true, restart count 0
  Aug 24 11:41:55.490: INFO: 	Container csi-plugin ready: true, restart count 0
  Aug 24 11:41:55.490: INFO: konnectivity-agent-hbwxf from kube-system started at 2023-08-24 11:03:51 +0000 UTC (1 container statuses recorded)
  Aug 24 11:41:55.490: INFO: 	Container konnectivity-agent ready: true, restart count 0
  Aug 24 11:41:55.490: INFO: kube-proxy-k7xlb from kube-system started at 2023-08-24 11:03:51 +0000 UTC (1 container statuses recorded)
  Aug 24 11:41:55.490: INFO: 	Container kube-proxy ready: true, restart count 0
  Aug 24 11:41:55.490: INFO: metrics-server-66786fb-88mmf from kube-system started at 2023-08-24 11:04:12 +0000 UTC (1 container statuses recorded)
  Aug 24 11:41:55.490: INFO: 	Container metrics-server ready: true, restart count 0
  Aug 24 11:41:55.490: INFO: sonobuoy-e2e-job-e6e5c8fdb4f14afe from sonobuoy started at 2023-08-24 11:26:53 +0000 UTC (2 container statuses recorded)
  Aug 24 11:41:55.490: INFO: 	Container e2e ready: true, restart count 0
  Aug 24 11:41:55.490: INFO: 	Container sonobuoy-worker ready: true, restart count 0
  Aug 24 11:41:55.490: INFO: sonobuoy-systemd-logs-daemon-set-02ba39604ea741df-kpkc8 from sonobuoy started at 2023-08-24 11:26:53 +0000 UTC (2 container statuses recorded)
  Aug 24 11:41:55.490: INFO: 	Container sonobuoy-worker ready: true, restart count 0
  Aug 24 11:41:55.490: INFO: 	Container systemd-logs ready: true, restart count 0
  STEP: Trying to launch a pod without a label to get a node which can launch it. @ 08/24/23 11:41:55.49
  STEP: Explicitly delete pod here to free the resource it takes. @ 08/24/23 11:41:57.533
  STEP: Trying to apply a random label on the found node. @ 08/24/23 11:41:57.555
  STEP: verifying the node has the label kubernetes.io/e2e-89e2e4d2-ae60-44a2-a90c-8ef48a4dc156 42 @ 08/24/23 11:41:57.581
  STEP: Trying to relaunch the pod, now with labels. @ 08/24/23 11:41:57.59
  STEP: removing the label kubernetes.io/e2e-89e2e4d2-ae60-44a2-a90c-8ef48a4dc156 off the node scw-conformance-default-2af6d8b4c6264cc5b9e5e6 @ 08/24/23 11:42:01.881
  STEP: verifying the node doesn't have the label kubernetes.io/e2e-89e2e4d2-ae60-44a2-a90c-8ef48a4dc156 @ 08/24/23 11:42:01.912
  Aug 24 11:42:01.921: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "sched-pred-7863" for this suite. @ 08/24/23 11:42:01.932
• [6.587 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-node] Probing container with readiness probe that fails should never be ready and never restart [NodeConformance] [Conformance]
test/e2e/common/node/container_probe.go:107
  STEP: Creating a kubernetes client @ 08/24/23 11:42:01.964
  Aug 24 11:42:01.964: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename container-probe @ 08/24/23 11:42:01.965
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 11:42:01.995
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 11:42:02.05
  Aug 24 11:43:02.084: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "container-probe-8001" for this suite. @ 08/24/23 11:43:02.095
• [60.148 seconds]
------------------------------
SSSSSSSSSSS
------------------------------
[sig-api-machinery] CustomResourcePublishOpenAPI [Privileged:ClusterAdmin] works for multiple CRDs of different groups [Conformance]
test/e2e/apimachinery/crd_publish_openapi.go:276
  STEP: Creating a kubernetes client @ 08/24/23 11:43:02.114
  Aug 24 11:43:02.114: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename crd-publish-openapi @ 08/24/23 11:43:02.115
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 11:43:02.149
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 11:43:02.155
  STEP: CRs in different groups (two CRDs) show up in OpenAPI documentation @ 08/24/23 11:43:02.161
  Aug 24 11:43:02.161: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  Aug 24 11:43:03.772: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  Aug 24 11:43:12.566: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "crd-publish-openapi-1740" for this suite. @ 08/24/23 11:43:12.59
• [10.492 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-network] Proxy version v1 A set of valid responses are returned for both pod and service Proxy [Conformance]
test/e2e/network/proxy.go:380
  STEP: Creating a kubernetes client @ 08/24/23 11:43:12.61
  Aug 24 11:43:12.610: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename proxy @ 08/24/23 11:43:12.612
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 11:43:12.648
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 11:43:12.654
  Aug 24 11:43:12.659: INFO: Creating pod...
  Aug 24 11:43:14.699: INFO: Creating service...
  Aug 24 11:43:14.728: INFO: Starting http.Client for https://10.96.0.1:443/api/v1/namespaces/proxy-9162/pods/agnhost/proxy?method=DELETE
  Aug 24 11:43:14.744: INFO: http.Client request:DELETE | StatusCode:200 | Response:foo | Method:DELETE
  Aug 24 11:43:14.744: INFO: Starting http.Client for https://10.96.0.1:443/api/v1/namespaces/proxy-9162/pods/agnhost/proxy?method=OPTIONS
  Aug 24 11:43:14.755: INFO: http.Client request:OPTIONS | StatusCode:200 | Response:foo | Method:OPTIONS
  Aug 24 11:43:14.755: INFO: Starting http.Client for https://10.96.0.1:443/api/v1/namespaces/proxy-9162/pods/agnhost/proxy?method=PATCH
  Aug 24 11:43:14.768: INFO: http.Client request:PATCH | StatusCode:200 | Response:foo | Method:PATCH
  Aug 24 11:43:14.768: INFO: Starting http.Client for https://10.96.0.1:443/api/v1/namespaces/proxy-9162/pods/agnhost/proxy?method=POST
  Aug 24 11:43:14.779: INFO: http.Client request:POST | StatusCode:200 | Response:foo | Method:POST
  Aug 24 11:43:14.779: INFO: Starting http.Client for https://10.96.0.1:443/api/v1/namespaces/proxy-9162/pods/agnhost/proxy?method=PUT
  Aug 24 11:43:14.789: INFO: http.Client request:PUT | StatusCode:200 | Response:foo | Method:PUT
  Aug 24 11:43:14.789: INFO: Starting http.Client for https://10.96.0.1:443/api/v1/namespaces/proxy-9162/services/e2e-proxy-test-service/proxy?method=DELETE
  Aug 24 11:43:14.806: INFO: http.Client request:DELETE | StatusCode:200 | Response:foo | Method:DELETE
  Aug 24 11:43:14.806: INFO: Starting http.Client for https://10.96.0.1:443/api/v1/namespaces/proxy-9162/services/e2e-proxy-test-service/proxy?method=OPTIONS
  Aug 24 11:43:14.821: INFO: http.Client request:OPTIONS | StatusCode:200 | Response:foo | Method:OPTIONS
  Aug 24 11:43:14.821: INFO: Starting http.Client for https://10.96.0.1:443/api/v1/namespaces/proxy-9162/services/e2e-proxy-test-service/proxy?method=PATCH
  Aug 24 11:43:14.835: INFO: http.Client request:PATCH | StatusCode:200 | Response:foo | Method:PATCH
  Aug 24 11:43:14.835: INFO: Starting http.Client for https://10.96.0.1:443/api/v1/namespaces/proxy-9162/services/e2e-proxy-test-service/proxy?method=POST
  Aug 24 11:43:14.850: INFO: http.Client request:POST | StatusCode:200 | Response:foo | Method:POST
  Aug 24 11:43:14.850: INFO: Starting http.Client for https://10.96.0.1:443/api/v1/namespaces/proxy-9162/services/e2e-proxy-test-service/proxy?method=PUT
  Aug 24 11:43:14.866: INFO: http.Client request:PUT | StatusCode:200 | Response:foo | Method:PUT
  Aug 24 11:43:14.866: INFO: Starting http.Client for https://10.96.0.1:443/api/v1/namespaces/proxy-9162/pods/agnhost/proxy?method=GET
  Aug 24 11:43:14.872: INFO: http.Client request:GET StatusCode:301
  Aug 24 11:43:14.872: INFO: Starting http.Client for https://10.96.0.1:443/api/v1/namespaces/proxy-9162/services/e2e-proxy-test-service/proxy?method=GET
  Aug 24 11:43:14.884: INFO: http.Client request:GET StatusCode:301
  Aug 24 11:43:14.884: INFO: Starting http.Client for https://10.96.0.1:443/api/v1/namespaces/proxy-9162/pods/agnhost/proxy?method=HEAD
  Aug 24 11:43:14.891: INFO: http.Client request:HEAD StatusCode:301
  Aug 24 11:43:14.892: INFO: Starting http.Client for https://10.96.0.1:443/api/v1/namespaces/proxy-9162/services/e2e-proxy-test-service/proxy?method=HEAD
  Aug 24 11:43:14.902: INFO: http.Client request:HEAD StatusCode:301
  Aug 24 11:43:14.902: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "proxy-9162" for this suite. @ 08/24/23 11:43:14.913
• [2.320 seconds]
------------------------------
SSSSSSSSS
------------------------------
[sig-api-machinery] CustomResourceConversionWebhook [Privileged:ClusterAdmin] should be able to convert from CR v1 to CR v2 [Conformance]
test/e2e/apimachinery/crd_conversion_webhook.go:141
  STEP: Creating a kubernetes client @ 08/24/23 11:43:14.931
  Aug 24 11:43:14.931: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename crd-webhook @ 08/24/23 11:43:14.933
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 11:43:14.961
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 11:43:14.968
  STEP: Setting up server cert @ 08/24/23 11:43:14.974
  STEP: Create role binding to let cr conversion webhook read extension-apiserver-authentication @ 08/24/23 11:43:15.372
  STEP: Deploying the custom resource conversion webhook pod @ 08/24/23 11:43:15.389
  STEP: Wait for the deployment to be ready @ 08/24/23 11:43:15.413
  Aug 24 11:43:15.432: INFO: deployment "sample-crd-conversion-webhook-deployment" doesn't have the required revision set
  STEP: Deploying the webhook service @ 08/24/23 11:43:17.459
  STEP: Verifying the service has paired with the endpoint @ 08/24/23 11:43:17.483
  Aug 24 11:43:18.483: INFO: Waiting for amount of service:e2e-test-crd-conversion-webhook endpoints to be 1
  Aug 24 11:43:18.500: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Creating a v1 custom resource @ 08/24/23 11:43:21.176
  STEP: v2 custom resource should be converted @ 08/24/23 11:43:21.187
  Aug 24 11:43:21.202: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "crd-webhook-3439" for this suite. @ 08/24/23 11:43:21.85
• [6.932 seconds]
------------------------------
SSS
------------------------------
[sig-storage] CSIInlineVolumes should support CSIVolumeSource in Pod API [Conformance]
test/e2e/storage/csi_inline.go:50
  STEP: Creating a kubernetes client @ 08/24/23 11:43:21.863
  Aug 24 11:43:21.863: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename csiinlinevolumes @ 08/24/23 11:43:21.864
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 11:43:21.893
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 11:43:21.95
  STEP: creating @ 08/24/23 11:43:21.958
  STEP: getting @ 08/24/23 11:43:22.001
  STEP: listing in namespace @ 08/24/23 11:43:22.049
  STEP: patching @ 08/24/23 11:43:22.058
  STEP: deleting @ 08/24/23 11:43:22.086
  Aug 24 11:43:22.110: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "csiinlinevolumes-9804" for this suite. @ 08/24/23 11:43:22.157
• [0.311 seconds]
------------------------------
SSSSSSSSSSSSSSSS
------------------------------
[sig-node] InitContainer [NodeConformance] should not start app containers if init containers fail on a RestartAlways pod [Conformance]
test/e2e/common/node/init_container.go:335
  STEP: Creating a kubernetes client @ 08/24/23 11:43:22.176
  Aug 24 11:43:22.176: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename init-container @ 08/24/23 11:43:22.177
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 11:43:22.254
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 11:43:22.261
  STEP: creating the pod @ 08/24/23 11:43:22.266
  Aug 24 11:43:22.267: INFO: PodSpec: initContainers in spec.initContainers
  Aug 24 11:44:05.305: INFO: init container has failed twice: &v1.Pod{TypeMeta:v1.TypeMeta{Kind:"", APIVersion:""}, ObjectMeta:v1.ObjectMeta{Name:"pod-init-caa59c61-3ae2-446b-81d4-667dcaca2f06", GenerateName:"", Namespace:"init-container-5807", SelfLink:"", UID:"50b9fd0f-430d-4171-b215-35882be3db1b", ResourceVersion:"3404885044", Generation:0, CreationTimestamp:time.Date(2023, time.August, 24, 11, 43, 22, 0, time.Local), DeletionTimestamp:<nil>, DeletionGracePeriodSeconds:(*int64)(nil), Labels:map[string]string{"name":"foo", "time":"267045791"}, Annotations:map[string]string(nil), OwnerReferences:[]v1.OwnerReference(nil), Finalizers:[]string(nil), ManagedFields:[]v1.ManagedFieldsEntry{v1.ManagedFieldsEntry{Manager:"e2e.test", Operation:"Update", APIVersion:"v1", Time:time.Date(2023, time.August, 24, 11, 43, 22, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc003e9c678), Subresource:""}, v1.ManagedFieldsEntry{Manager:"kubelet", Operation:"Update", APIVersion:"v1", Time:time.Date(2023, time.August, 24, 11, 44, 5, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc003e9c6a8), Subresource:"status"}}}, Spec:v1.PodSpec{Volumes:[]v1.Volume{v1.Volume{Name:"kube-api-access-v5rfh", VolumeSource:v1.VolumeSource{HostPath:(*v1.HostPathVolumeSource)(nil), EmptyDir:(*v1.EmptyDirVolumeSource)(nil), GCEPersistentDisk:(*v1.GCEPersistentDiskVolumeSource)(nil), AWSElasticBlockStore:(*v1.AWSElasticBlockStoreVolumeSource)(nil), GitRepo:(*v1.GitRepoVolumeSource)(nil), Secret:(*v1.SecretVolumeSource)(nil), NFS:(*v1.NFSVolumeSource)(nil), ISCSI:(*v1.ISCSIVolumeSource)(nil), Glusterfs:(*v1.GlusterfsVolumeSource)(nil), PersistentVolumeClaim:(*v1.PersistentVolumeClaimVolumeSource)(nil), RBD:(*v1.RBDVolumeSource)(nil), FlexVolume:(*v1.FlexVolumeSource)(nil), Cinder:(*v1.CinderVolumeSource)(nil), CephFS:(*v1.CephFSVolumeSource)(nil), Flocker:(*v1.FlockerVolumeSource)(nil), DownwardAPI:(*v1.DownwardAPIVolumeSource)(nil), FC:(*v1.FCVolumeSource)(nil), AzureFile:(*v1.AzureFileVolumeSource)(nil), ConfigMap:(*v1.ConfigMapVolumeSource)(nil), VsphereVolume:(*v1.VsphereVirtualDiskVolumeSource)(nil), Quobyte:(*v1.QuobyteVolumeSource)(nil), AzureDisk:(*v1.AzureDiskVolumeSource)(nil), PhotonPersistentDisk:(*v1.PhotonPersistentDiskVolumeSource)(nil), Projected:(*v1.ProjectedVolumeSource)(0xc003e87580), PortworxVolume:(*v1.PortworxVolumeSource)(nil), ScaleIO:(*v1.ScaleIOVolumeSource)(nil), StorageOS:(*v1.StorageOSVolumeSource)(nil), CSI:(*v1.CSIVolumeSource)(nil), Ephemeral:(*v1.EphemeralVolumeSource)(nil)}}}, InitContainers:[]v1.Container{v1.Container{Name:"init1", Image:"registry.k8s.io/e2e-test-images/busybox:1.29-4", Command:[]string{"/bin/false"}, Args:[]string(nil), WorkingDir:"", Ports:[]v1.ContainerPort(nil), EnvFrom:[]v1.EnvFromSource(nil), Env:[]v1.EnvVar(nil), Resources:v1.ResourceRequirements{Limits:v1.ResourceList(nil), Requests:v1.ResourceList(nil), Claims:[]v1.ResourceClaim(nil)}, ResizePolicy:[]v1.ContainerResizePolicy(nil), RestartPolicy:(*v1.ContainerRestartPolicy)(nil), VolumeMounts:[]v1.VolumeMount{v1.VolumeMount{Name:"kube-api-access-v5rfh", ReadOnly:true, MountPath:"/var/run/secrets/kubernetes.io/serviceaccount", SubPath:"", MountPropagation:(*v1.MountPropagationMode)(nil), SubPathExpr:""}}, VolumeDevices:[]v1.VolumeDevice(nil), LivenessProbe:(*v1.Probe)(nil), ReadinessProbe:(*v1.Probe)(nil), StartupProbe:(*v1.Probe)(nil), Lifecycle:(*v1.Lifecycle)(nil), TerminationMessagePath:"/dev/termination-log", TerminationMessagePolicy:"File", ImagePullPolicy:"IfNotPresent", SecurityContext:(*v1.SecurityContext)(nil), Stdin:false, StdinOnce:false, TTY:false}, v1.Container{Name:"init2", Image:"registry.k8s.io/e2e-test-images/busybox:1.29-4", Command:[]string{"/bin/true"}, Args:[]string(nil), WorkingDir:"", Ports:[]v1.ContainerPort(nil), EnvFrom:[]v1.EnvFromSource(nil), Env:[]v1.EnvVar(nil), Resources:v1.ResourceRequirements{Limits:v1.ResourceList(nil), Requests:v1.ResourceList(nil), Claims:[]v1.ResourceClaim(nil)}, ResizePolicy:[]v1.ContainerResizePolicy(nil), RestartPolicy:(*v1.ContainerRestartPolicy)(nil), VolumeMounts:[]v1.VolumeMount{v1.VolumeMount{Name:"kube-api-access-v5rfh", ReadOnly:true, MountPath:"/var/run/secrets/kubernetes.io/serviceaccount", SubPath:"", MountPropagation:(*v1.MountPropagationMode)(nil), SubPathExpr:""}}, VolumeDevices:[]v1.VolumeDevice(nil), LivenessProbe:(*v1.Probe)(nil), ReadinessProbe:(*v1.Probe)(nil), StartupProbe:(*v1.Probe)(nil), Lifecycle:(*v1.Lifecycle)(nil), TerminationMessagePath:"/dev/termination-log", TerminationMessagePolicy:"File", ImagePullPolicy:"IfNotPresent", SecurityContext:(*v1.SecurityContext)(nil), Stdin:false, StdinOnce:false, TTY:false}}, Containers:[]v1.Container{v1.Container{Name:"run1", Image:"registry.k8s.io/pause:3.9", Command:[]string(nil), Args:[]string(nil), WorkingDir:"", Ports:[]v1.ContainerPort(nil), EnvFrom:[]v1.EnvFromSource(nil), Env:[]v1.EnvVar(nil), Resources:v1.ResourceRequirements{Limits:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:100, scale:-3}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"100m", Format:"DecimalSI"}}, Requests:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:100, scale:-3}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"100m", Format:"DecimalSI"}}, Claims:[]v1.ResourceClaim(nil)}, ResizePolicy:[]v1.ContainerResizePolicy(nil), RestartPolicy:(*v1.ContainerRestartPolicy)(nil), VolumeMounts:[]v1.VolumeMount{v1.VolumeMount{Name:"kube-api-access-v5rfh", ReadOnly:true, MountPath:"/var/run/secrets/kubernetes.io/serviceaccount", SubPath:"", MountPropagation:(*v1.MountPropagationMode)(nil), SubPathExpr:""}}, VolumeDevices:[]v1.VolumeDevice(nil), LivenessProbe:(*v1.Probe)(nil), ReadinessProbe:(*v1.Probe)(nil), StartupProbe:(*v1.Probe)(nil), Lifecycle:(*v1.Lifecycle)(nil), TerminationMessagePath:"/dev/termination-log", TerminationMessagePolicy:"File", ImagePullPolicy:"IfNotPresent", SecurityContext:(*v1.SecurityContext)(nil), Stdin:false, StdinOnce:false, TTY:false}}, EphemeralContainers:[]v1.EphemeralContainer(nil), RestartPolicy:"Always", TerminationGracePeriodSeconds:(*int64)(0xc003a06bb0), ActiveDeadlineSeconds:(*int64)(nil), DNSPolicy:"ClusterFirst", NodeSelector:map[string]string(nil), ServiceAccountName:"default", DeprecatedServiceAccount:"default", AutomountServiceAccountToken:(*bool)(nil), NodeName:"scw-conformance-default-2af6d8b4c6264cc5b9e5e6", HostNetwork:false, HostPID:false, HostIPC:false, ShareProcessNamespace:(*bool)(nil), SecurityContext:(*v1.PodSecurityContext)(0xc003c17420), ImagePullSecrets:[]v1.LocalObjectReference(nil), Hostname:"", Subdomain:"", Affinity:(*v1.Affinity)(nil), SchedulerName:"default-scheduler", Tolerations:[]v1.Toleration{v1.Toleration{Key:"node.kubernetes.io/not-ready", Operator:"Exists", Value:"", Effect:"NoExecute", TolerationSeconds:(*int64)(0xc003a06c30)}, v1.Toleration{Key:"node.kubernetes.io/unreachable", Operator:"Exists", Value:"", Effect:"NoExecute", TolerationSeconds:(*int64)(0xc003a06c50)}}, HostAliases:[]v1.HostAlias(nil), PriorityClassName:"", Priority:(*int32)(0xc003a06c58), DNSConfig:(*v1.PodDNSConfig)(nil), ReadinessGates:[]v1.PodReadinessGate(nil), RuntimeClassName:(*string)(nil), EnableServiceLinks:(*bool)(0xc003a06c5c), PreemptionPolicy:(*v1.PreemptionPolicy)(0xc006e918e0), Overhead:v1.ResourceList(nil), TopologySpreadConstraints:[]v1.TopologySpreadConstraint(nil), SetHostnameAsFQDN:(*bool)(nil), OS:(*v1.PodOS)(nil), HostUsers:(*bool)(nil), SchedulingGates:[]v1.PodSchedulingGate(nil), ResourceClaims:[]v1.PodResourceClaim(nil)}, Status:v1.PodStatus{Phase:"Pending", Conditions:[]v1.PodCondition{v1.PodCondition{Type:"Initialized", Status:"False", LastProbeTime:time.Date(1, time.January, 1, 0, 0, 0, 0, time.UTC), LastTransitionTime:time.Date(2023, time.August, 24, 11, 43, 22, 0, time.Local), Reason:"ContainersNotInitialized", Message:"containers with incomplete status: [init1 init2]"}, v1.PodCondition{Type:"Ready", Status:"False", LastProbeTime:time.Date(1, time.January, 1, 0, 0, 0, 0, time.UTC), LastTransitionTime:time.Date(2023, time.August, 24, 11, 43, 22, 0, time.Local), Reason:"ContainersNotReady", Message:"containers with unready status: [run1]"}, v1.PodCondition{Type:"ContainersReady", Status:"False", LastProbeTime:time.Date(1, time.January, 1, 0, 0, 0, 0, time.UTC), LastTransitionTime:time.Date(2023, time.August, 24, 11, 43, 22, 0, time.Local), Reason:"ContainersNotReady", Message:"containers with unready status: [run1]"}, v1.PodCondition{Type:"PodScheduled", Status:"True", LastProbeTime:time.Date(1, time.January, 1, 0, 0, 0, 0, time.UTC), LastTransitionTime:time.Date(2023, time.August, 24, 11, 43, 22, 0, time.Local), Reason:"", Message:""}}, Message:"", Reason:"", NominatedNodeName:"", HostIP:"172.16.36.3", HostIPs:[]v1.HostIP(nil), PodIP:"10.100.0.97", PodIPs:[]v1.PodIP{v1.PodIP{IP:"10.100.0.97"}}, StartTime:time.Date(2023, time.August, 24, 11, 43, 22, 0, time.Local), InitContainerStatuses:[]v1.ContainerStatus{v1.ContainerStatus{Name:"init1", State:v1.ContainerState{Waiting:(*v1.ContainerStateWaiting)(nil), Running:(*v1.ContainerStateRunning)(nil), Terminated:(*v1.ContainerStateTerminated)(0xc003c17500)}, LastTerminationState:v1.ContainerState{Waiting:(*v1.ContainerStateWaiting)(nil), Running:(*v1.ContainerStateRunning)(nil), Terminated:(*v1.ContainerStateTerminated)(0xc003c17570)}, Ready:false, RestartCount:3, Image:"registry.k8s.io/e2e-test-images/busybox:1.29-4", ImageID:"registry.k8s.io/e2e-test-images/busybox@sha256:2e0f836850e09b8b7cc937681d6194537a09fbd5f6b9e08f4d646a85128e8937", ContainerID:"containerd://0be2c47c467d8aaefba502698926dd32343effc9aa5ef8e8ab63453f862a5337", Started:(*bool)(0xc003a06cfa), AllocatedResources:v1.ResourceList(nil), Resources:(*v1.ResourceRequirements)(nil)}, v1.ContainerStatus{Name:"init2", State:v1.ContainerState{Waiting:(*v1.ContainerStateWaiting)(0xc003e87600), Running:(*v1.ContainerStateRunning)(nil), Terminated:(*v1.ContainerStateTerminated)(nil)}, LastTerminationState:v1.ContainerState{Waiting:(*v1.ContainerStateWaiting)(nil), Running:(*v1.ContainerStateRunning)(nil), Terminated:(*v1.ContainerStateTerminated)(nil)}, Ready:false, RestartCount:0, Image:"registry.k8s.io/e2e-test-images/busybox:1.29-4", ImageID:"", ContainerID:"", Started:(*bool)(0xc003a06d0f), AllocatedResources:v1.ResourceList(nil), Resources:(*v1.ResourceRequirements)(nil)}}, ContainerStatuses:[]v1.ContainerStatus{v1.ContainerStatus{Name:"run1", State:v1.ContainerState{Waiting:(*v1.ContainerStateWaiting)(0xc003e875e0), Running:(*v1.ContainerStateRunning)(nil), Terminated:(*v1.ContainerStateTerminated)(nil)}, LastTerminationState:v1.ContainerState{Waiting:(*v1.ContainerStateWaiting)(nil), Running:(*v1.ContainerStateRunning)(nil), Terminated:(*v1.ContainerStateTerminated)(nil)}, Ready:false, RestartCount:0, Image:"registry.k8s.io/pause:3.9", ImageID:"", ContainerID:"", Started:(*bool)(0xc003a06cdf), AllocatedResources:v1.ResourceList(nil), Resources:(*v1.ResourceRequirements)(nil)}}, QOSClass:"Burstable", EphemeralContainerStatuses:[]v1.ContainerStatus(nil), Resize:"", ResourceClaimStatuses:[]v1.PodResourceClaimStatus(nil)}}
  Aug 24 11:44:05.305: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "init-container-5807" for this suite. @ 08/24/23 11:44:05.315
• [43.155 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSS
------------------------------
[sig-apps] StatefulSet Basic StatefulSet functionality [StatefulSetBasic] Scaling should happen in predictable order and halt if any stateful pod is unhealthy [Slow] [Conformance]
test/e2e/apps/statefulset.go:593
  STEP: Creating a kubernetes client @ 08/24/23 11:44:05.331
  Aug 24 11:44:05.331: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename statefulset @ 08/24/23 11:44:05.332
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 11:44:05.363
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 11:44:05.37
  STEP: Creating service test in namespace statefulset-3943 @ 08/24/23 11:44:05.376
  STEP: Initializing watcher for selector baz=blah,foo=bar @ 08/24/23 11:44:05.387
  STEP: Creating stateful set ss in namespace statefulset-3943 @ 08/24/23 11:44:05.396
  STEP: Waiting until all stateful set ss replicas will be running in namespace statefulset-3943 @ 08/24/23 11:44:05.409
  Aug 24 11:44:05.452: INFO: Found 0 stateful pods, waiting for 1
  Aug 24 11:44:15.464: INFO: Waiting for pod ss-0 to enter Running - Ready=true, currently Running - Ready=true
  STEP: Confirming that stateful set scale up will halt with unhealthy stateful pod @ 08/24/23 11:44:15.464
  Aug 24 11:44:15.474: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1002171096 --namespace=statefulset-3943 exec ss-0 -- /bin/sh -x -c mv -v /usr/local/apache2/htdocs/index.html /tmp/ || true'
  Aug 24 11:44:15.727: INFO: stderr: "+ mv -v /usr/local/apache2/htdocs/index.html /tmp/\n"
  Aug 24 11:44:15.727: INFO: stdout: "'/usr/local/apache2/htdocs/index.html' -> '/tmp/index.html'\n"
  Aug 24 11:44:15.727: INFO: stdout of mv -v /usr/local/apache2/htdocs/index.html /tmp/ || true on ss-0: '/usr/local/apache2/htdocs/index.html' -> '/tmp/index.html'

  Aug 24 11:44:15.736: INFO: Waiting for pod ss-0 to enter Running - Ready=false, currently Running - Ready=true
  Aug 24 11:44:25.748: INFO: Waiting for pod ss-0 to enter Running - Ready=false, currently Running - Ready=false
  Aug 24 11:44:25.748: INFO: Waiting for statefulset status.readyReplicas updated to 0
  Aug 24 11:44:25.788: INFO: Verifying statefulset ss doesn't scale past 1 for another 9.99999934s
  Aug 24 11:44:26.798: INFO: Verifying statefulset ss doesn't scale past 1 for another 8.991377058s
  Aug 24 11:44:27.809: INFO: Verifying statefulset ss doesn't scale past 1 for another 7.98134148s
  Aug 24 11:44:28.819: INFO: Verifying statefulset ss doesn't scale past 1 for another 6.969810645s
  Aug 24 11:44:29.828: INFO: Verifying statefulset ss doesn't scale past 1 for another 5.959751073s
  Aug 24 11:44:30.840: INFO: Verifying statefulset ss doesn't scale past 1 for another 4.950560282s
  Aug 24 11:44:31.850: INFO: Verifying statefulset ss doesn't scale past 1 for another 3.938924248s
  Aug 24 11:44:32.863: INFO: Verifying statefulset ss doesn't scale past 1 for another 2.928768398s
  Aug 24 11:44:33.872: INFO: Verifying statefulset ss doesn't scale past 1 for another 1.916121783s
  Aug 24 11:44:34.882: INFO: Verifying statefulset ss doesn't scale past 1 for another 906.420421ms
  STEP: Scaling up stateful set ss to 3 replicas and waiting until all of them will be running in namespace statefulset-3943 @ 08/24/23 11:44:35.883
  Aug 24 11:44:35.895: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1002171096 --namespace=statefulset-3943 exec ss-0 -- /bin/sh -x -c mv -v /tmp/index.html /usr/local/apache2/htdocs/ || true'
  Aug 24 11:44:36.138: INFO: stderr: "+ mv -v /tmp/index.html /usr/local/apache2/htdocs/\n"
  Aug 24 11:44:36.138: INFO: stdout: "'/tmp/index.html' -> '/usr/local/apache2/htdocs/index.html'\n"
  Aug 24 11:44:36.138: INFO: stdout of mv -v /tmp/index.html /usr/local/apache2/htdocs/ || true on ss-0: '/tmp/index.html' -> '/usr/local/apache2/htdocs/index.html'

  Aug 24 11:44:36.147: INFO: Found 1 stateful pods, waiting for 3
  Aug 24 11:44:46.159: INFO: Waiting for pod ss-0 to enter Running - Ready=true, currently Running - Ready=true
  Aug 24 11:44:46.159: INFO: Waiting for pod ss-1 to enter Running - Ready=true, currently Running - Ready=true
  Aug 24 11:44:46.159: INFO: Waiting for pod ss-2 to enter Running - Ready=true, currently Running - Ready=true
  STEP: Verifying that stateful set ss was scaled up in order @ 08/24/23 11:44:46.159
  STEP: Scale down will halt with unhealthy stateful pod @ 08/24/23 11:44:46.159
  Aug 24 11:44:46.178: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1002171096 --namespace=statefulset-3943 exec ss-0 -- /bin/sh -x -c mv -v /usr/local/apache2/htdocs/index.html /tmp/ || true'
  Aug 24 11:44:46.445: INFO: stderr: "+ mv -v /usr/local/apache2/htdocs/index.html /tmp/\n"
  Aug 24 11:44:46.445: INFO: stdout: "'/usr/local/apache2/htdocs/index.html' -> '/tmp/index.html'\n"
  Aug 24 11:44:46.445: INFO: stdout of mv -v /usr/local/apache2/htdocs/index.html /tmp/ || true on ss-0: '/usr/local/apache2/htdocs/index.html' -> '/tmp/index.html'

  Aug 24 11:44:46.445: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1002171096 --namespace=statefulset-3943 exec ss-1 -- /bin/sh -x -c mv -v /usr/local/apache2/htdocs/index.html /tmp/ || true'
  Aug 24 11:44:46.716: INFO: stderr: "+ mv -v /usr/local/apache2/htdocs/index.html /tmp/\n"
  Aug 24 11:44:46.716: INFO: stdout: "'/usr/local/apache2/htdocs/index.html' -> '/tmp/index.html'\n"
  Aug 24 11:44:46.716: INFO: stdout of mv -v /usr/local/apache2/htdocs/index.html /tmp/ || true on ss-1: '/usr/local/apache2/htdocs/index.html' -> '/tmp/index.html'

  Aug 24 11:44:46.716: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1002171096 --namespace=statefulset-3943 exec ss-2 -- /bin/sh -x -c mv -v /usr/local/apache2/htdocs/index.html /tmp/ || true'
  Aug 24 11:44:46.978: INFO: stderr: "+ mv -v /usr/local/apache2/htdocs/index.html /tmp/\n"
  Aug 24 11:44:46.978: INFO: stdout: "'/usr/local/apache2/htdocs/index.html' -> '/tmp/index.html'\n"
  Aug 24 11:44:46.978: INFO: stdout of mv -v /usr/local/apache2/htdocs/index.html /tmp/ || true on ss-2: '/usr/local/apache2/htdocs/index.html' -> '/tmp/index.html'

  Aug 24 11:44:46.978: INFO: Waiting for statefulset status.readyReplicas updated to 0
  Aug 24 11:44:46.987: INFO: Waiting for statefulset status.readyReplicas to become 0, currently 2
  Aug 24 11:44:57.009: INFO: Waiting for pod ss-0 to enter Running - Ready=false, currently Running - Ready=false
  Aug 24 11:44:57.009: INFO: Waiting for pod ss-1 to enter Running - Ready=false, currently Running - Ready=false
  Aug 24 11:44:57.009: INFO: Waiting for pod ss-2 to enter Running - Ready=false, currently Running - Ready=false
  Aug 24 11:44:57.041: INFO: Verifying statefulset ss doesn't scale past 3 for another 9.99999942s
  Aug 24 11:44:58.051: INFO: Verifying statefulset ss doesn't scale past 3 for another 8.990302833s
  Aug 24 11:44:59.060: INFO: Verifying statefulset ss doesn't scale past 3 for another 7.979728311s
  Aug 24 11:45:00.070: INFO: Verifying statefulset ss doesn't scale past 3 for another 6.970554352s
  Aug 24 11:45:01.082: INFO: Verifying statefulset ss doesn't scale past 3 for another 5.961201497s
  Aug 24 11:45:02.092: INFO: Verifying statefulset ss doesn't scale past 3 for another 4.948229562s
  Aug 24 11:45:03.104: INFO: Verifying statefulset ss doesn't scale past 3 for another 3.938992221s
  Aug 24 11:45:04.114: INFO: Verifying statefulset ss doesn't scale past 3 for another 2.927468804s
  Aug 24 11:45:05.123: INFO: Verifying statefulset ss doesn't scale past 3 for another 1.916973882s
  Aug 24 11:45:06.136: INFO: Verifying statefulset ss doesn't scale past 3 for another 907.532582ms
  STEP: Scaling down stateful set ss to 0 replicas and waiting until none of pods will run in namespacestatefulset-3943 @ 08/24/23 11:45:07.136
  Aug 24 11:45:07.150: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1002171096 --namespace=statefulset-3943 exec ss-0 -- /bin/sh -x -c mv -v /tmp/index.html /usr/local/apache2/htdocs/ || true'
  Aug 24 11:45:07.393: INFO: stderr: "+ mv -v /tmp/index.html /usr/local/apache2/htdocs/\n"
  Aug 24 11:45:07.393: INFO: stdout: "'/tmp/index.html' -> '/usr/local/apache2/htdocs/index.html'\n"
  Aug 24 11:45:07.393: INFO: stdout of mv -v /tmp/index.html /usr/local/apache2/htdocs/ || true on ss-0: '/tmp/index.html' -> '/usr/local/apache2/htdocs/index.html'

  Aug 24 11:45:07.393: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1002171096 --namespace=statefulset-3943 exec ss-1 -- /bin/sh -x -c mv -v /tmp/index.html /usr/local/apache2/htdocs/ || true'
  Aug 24 11:45:07.632: INFO: stderr: "+ mv -v /tmp/index.html /usr/local/apache2/htdocs/\n"
  Aug 24 11:45:07.632: INFO: stdout: "'/tmp/index.html' -> '/usr/local/apache2/htdocs/index.html'\n"
  Aug 24 11:45:07.632: INFO: stdout of mv -v /tmp/index.html /usr/local/apache2/htdocs/ || true on ss-1: '/tmp/index.html' -> '/usr/local/apache2/htdocs/index.html'

  Aug 24 11:45:07.632: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1002171096 --namespace=statefulset-3943 exec ss-2 -- /bin/sh -x -c mv -v /tmp/index.html /usr/local/apache2/htdocs/ || true'
  Aug 24 11:45:07.877: INFO: stderr: "+ mv -v /tmp/index.html /usr/local/apache2/htdocs/\n"
  Aug 24 11:45:07.877: INFO: stdout: "'/tmp/index.html' -> '/usr/local/apache2/htdocs/index.html'\n"
  Aug 24 11:45:07.877: INFO: stdout of mv -v /tmp/index.html /usr/local/apache2/htdocs/ || true on ss-2: '/tmp/index.html' -> '/usr/local/apache2/htdocs/index.html'

  Aug 24 11:45:07.877: INFO: Scaling statefulset ss to 0
  STEP: Verifying that stateful set ss was scaled down in reverse order @ 08/24/23 11:45:17.916
  Aug 24 11:45:17.916: INFO: Deleting all statefulset in ns statefulset-3943
  Aug 24 11:45:17.924: INFO: Scaling statefulset ss to 0
  Aug 24 11:45:17.949: INFO: Waiting for statefulset status.replicas updated to 0
  Aug 24 11:45:17.957: INFO: Deleting statefulset ss
  Aug 24 11:45:17.986: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "statefulset-3943" for this suite. @ 08/24/23 11:45:17.997
• [72.679 seconds]
------------------------------
SSSS
------------------------------
[sig-instrumentation] Events API should delete a collection of events [Conformance]
test/e2e/instrumentation/events.go:207
  STEP: Creating a kubernetes client @ 08/24/23 11:45:18.011
  Aug 24 11:45:18.011: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename events @ 08/24/23 11:45:18.011
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 11:45:18.049
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 11:45:18.056
  STEP: Create set of events @ 08/24/23 11:45:18.062
  STEP: get a list of Events with a label in the current namespace @ 08/24/23 11:45:18.1
  STEP: delete a list of events @ 08/24/23 11:45:18.106
  Aug 24 11:45:18.106: INFO: requesting DeleteCollection of events
  STEP: check that the list of events matches the requested quantity @ 08/24/23 11:45:18.204
  Aug 24 11:45:18.210: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "events-4688" for this suite. @ 08/24/23 11:45:18.219
• [0.223 seconds]
------------------------------
SSSSSSSS
------------------------------
[sig-storage] EmptyDir volumes should support (root,0777,default) [LinuxOnly] [NodeConformance] [Conformance]
test/e2e/common/storage/empty_dir.go:187
  STEP: Creating a kubernetes client @ 08/24/23 11:45:18.234
  Aug 24 11:45:18.235: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename emptydir @ 08/24/23 11:45:18.236
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 11:45:18.267
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 11:45:18.275
  STEP: Creating a pod to test emptydir 0777 on node default medium @ 08/24/23 11:45:18.282
  STEP: Saw pod success @ 08/24/23 11:45:22.325
  Aug 24 11:45:22.333: INFO: Trying to get logs from node scw-conformance-default-2af6d8b4c6264cc5b9e5e6 pod pod-c16c3280-9efe-49b3-82e9-ec5a1de2cadd container test-container: <nil>
  STEP: delete the pod @ 08/24/23 11:45:22.385
  Aug 24 11:45:22.422: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "emptydir-1" for this suite. @ 08/24/23 11:45:22.433
• [4.216 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-node] Probing container should have monotonically increasing restart count [NodeConformance] [Conformance]
test/e2e/common/node/container_probe.go:198
  STEP: Creating a kubernetes client @ 08/24/23 11:45:22.452
  Aug 24 11:45:22.453: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename container-probe @ 08/24/23 11:45:22.454
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 11:45:22.487
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 11:45:22.493
  STEP: Creating pod liveness-678775c4-3e25-45b4-8e8f-088e734be840 in namespace container-probe-5915 @ 08/24/23 11:45:22.5
  STEP: checking the pod's current state and verifying that restartCount is present @ 08/24/23 11:45:24.535
  Aug 24 11:45:24.543: INFO: Initial restart count of pod liveness-678775c4-3e25-45b4-8e8f-088e734be840 is 0
  Aug 24 11:45:24.552: INFO: Get pod liveness-678775c4-3e25-45b4-8e8f-088e734be840 in namespace container-probe-5915
  Aug 24 11:45:26.563: INFO: Get pod liveness-678775c4-3e25-45b4-8e8f-088e734be840 in namespace container-probe-5915
  Aug 24 11:45:28.575: INFO: Get pod liveness-678775c4-3e25-45b4-8e8f-088e734be840 in namespace container-probe-5915
  Aug 24 11:45:30.586: INFO: Get pod liveness-678775c4-3e25-45b4-8e8f-088e734be840 in namespace container-probe-5915
  Aug 24 11:45:32.596: INFO: Get pod liveness-678775c4-3e25-45b4-8e8f-088e734be840 in namespace container-probe-5915
  Aug 24 11:45:34.607: INFO: Get pod liveness-678775c4-3e25-45b4-8e8f-088e734be840 in namespace container-probe-5915
  Aug 24 11:45:36.616: INFO: Get pod liveness-678775c4-3e25-45b4-8e8f-088e734be840 in namespace container-probe-5915
  Aug 24 11:45:38.626: INFO: Get pod liveness-678775c4-3e25-45b4-8e8f-088e734be840 in namespace container-probe-5915
  Aug 24 11:45:40.636: INFO: Get pod liveness-678775c4-3e25-45b4-8e8f-088e734be840 in namespace container-probe-5915
  Aug 24 11:45:42.645: INFO: Get pod liveness-678775c4-3e25-45b4-8e8f-088e734be840 in namespace container-probe-5915
  Aug 24 11:45:44.658: INFO: Get pod liveness-678775c4-3e25-45b4-8e8f-088e734be840 in namespace container-probe-5915
  Aug 24 11:45:44.658: INFO: Restart count of pod container-probe-5915/liveness-678775c4-3e25-45b4-8e8f-088e734be840 is now 1 (20.115409978s elapsed)
  Aug 24 11:45:46.668: INFO: Get pod liveness-678775c4-3e25-45b4-8e8f-088e734be840 in namespace container-probe-5915
  Aug 24 11:45:48.680: INFO: Get pod liveness-678775c4-3e25-45b4-8e8f-088e734be840 in namespace container-probe-5915
  Aug 24 11:45:50.691: INFO: Get pod liveness-678775c4-3e25-45b4-8e8f-088e734be840 in namespace container-probe-5915
  Aug 24 11:45:52.700: INFO: Get pod liveness-678775c4-3e25-45b4-8e8f-088e734be840 in namespace container-probe-5915
  Aug 24 11:45:54.711: INFO: Get pod liveness-678775c4-3e25-45b4-8e8f-088e734be840 in namespace container-probe-5915
  Aug 24 11:45:56.721: INFO: Get pod liveness-678775c4-3e25-45b4-8e8f-088e734be840 in namespace container-probe-5915
  Aug 24 11:45:58.732: INFO: Get pod liveness-678775c4-3e25-45b4-8e8f-088e734be840 in namespace container-probe-5915
  Aug 24 11:46:00.742: INFO: Get pod liveness-678775c4-3e25-45b4-8e8f-088e734be840 in namespace container-probe-5915
  Aug 24 11:46:02.752: INFO: Get pod liveness-678775c4-3e25-45b4-8e8f-088e734be840 in namespace container-probe-5915
  Aug 24 11:46:04.761: INFO: Get pod liveness-678775c4-3e25-45b4-8e8f-088e734be840 in namespace container-probe-5915
  Aug 24 11:46:04.761: INFO: Restart count of pod container-probe-5915/liveness-678775c4-3e25-45b4-8e8f-088e734be840 is now 2 (40.218110407s elapsed)
  Aug 24 11:46:06.775: INFO: Get pod liveness-678775c4-3e25-45b4-8e8f-088e734be840 in namespace container-probe-5915
  Aug 24 11:46:08.785: INFO: Get pod liveness-678775c4-3e25-45b4-8e8f-088e734be840 in namespace container-probe-5915
  Aug 24 11:46:10.799: INFO: Get pod liveness-678775c4-3e25-45b4-8e8f-088e734be840 in namespace container-probe-5915
  Aug 24 11:46:12.812: INFO: Get pod liveness-678775c4-3e25-45b4-8e8f-088e734be840 in namespace container-probe-5915
  Aug 24 11:46:14.822: INFO: Get pod liveness-678775c4-3e25-45b4-8e8f-088e734be840 in namespace container-probe-5915
  Aug 24 11:46:16.832: INFO: Get pod liveness-678775c4-3e25-45b4-8e8f-088e734be840 in namespace container-probe-5915
  Aug 24 11:46:18.842: INFO: Get pod liveness-678775c4-3e25-45b4-8e8f-088e734be840 in namespace container-probe-5915
  Aug 24 11:46:20.852: INFO: Get pod liveness-678775c4-3e25-45b4-8e8f-088e734be840 in namespace container-probe-5915
  Aug 24 11:46:22.862: INFO: Get pod liveness-678775c4-3e25-45b4-8e8f-088e734be840 in namespace container-probe-5915
  Aug 24 11:46:24.871: INFO: Get pod liveness-678775c4-3e25-45b4-8e8f-088e734be840 in namespace container-probe-5915
  Aug 24 11:46:24.871: INFO: Restart count of pod container-probe-5915/liveness-678775c4-3e25-45b4-8e8f-088e734be840 is now 3 (1m0.327856588s elapsed)
  Aug 24 11:46:26.879: INFO: Get pod liveness-678775c4-3e25-45b4-8e8f-088e734be840 in namespace container-probe-5915
  Aug 24 11:46:28.893: INFO: Get pod liveness-678775c4-3e25-45b4-8e8f-088e734be840 in namespace container-probe-5915
  Aug 24 11:46:30.901: INFO: Get pod liveness-678775c4-3e25-45b4-8e8f-088e734be840 in namespace container-probe-5915
  Aug 24 11:46:32.912: INFO: Get pod liveness-678775c4-3e25-45b4-8e8f-088e734be840 in namespace container-probe-5915
  Aug 24 11:46:34.922: INFO: Get pod liveness-678775c4-3e25-45b4-8e8f-088e734be840 in namespace container-probe-5915
  Aug 24 11:46:36.933: INFO: Get pod liveness-678775c4-3e25-45b4-8e8f-088e734be840 in namespace container-probe-5915
  Aug 24 11:46:38.943: INFO: Get pod liveness-678775c4-3e25-45b4-8e8f-088e734be840 in namespace container-probe-5915
  Aug 24 11:46:40.954: INFO: Get pod liveness-678775c4-3e25-45b4-8e8f-088e734be840 in namespace container-probe-5915
  Aug 24 11:46:42.966: INFO: Get pod liveness-678775c4-3e25-45b4-8e8f-088e734be840 in namespace container-probe-5915
  Aug 24 11:46:44.977: INFO: Get pod liveness-678775c4-3e25-45b4-8e8f-088e734be840 in namespace container-probe-5915
  Aug 24 11:46:44.977: INFO: Restart count of pod container-probe-5915/liveness-678775c4-3e25-45b4-8e8f-088e734be840 is now 4 (1m20.434096969s elapsed)
  Aug 24 11:46:46.987: INFO: Get pod liveness-678775c4-3e25-45b4-8e8f-088e734be840 in namespace container-probe-5915
  Aug 24 11:46:48.999: INFO: Get pod liveness-678775c4-3e25-45b4-8e8f-088e734be840 in namespace container-probe-5915
  Aug 24 11:46:51.009: INFO: Get pod liveness-678775c4-3e25-45b4-8e8f-088e734be840 in namespace container-probe-5915
  Aug 24 11:46:53.020: INFO: Get pod liveness-678775c4-3e25-45b4-8e8f-088e734be840 in namespace container-probe-5915
  Aug 24 11:46:55.029: INFO: Get pod liveness-678775c4-3e25-45b4-8e8f-088e734be840 in namespace container-probe-5915
  Aug 24 11:46:57.041: INFO: Get pod liveness-678775c4-3e25-45b4-8e8f-088e734be840 in namespace container-probe-5915
  Aug 24 11:46:59.050: INFO: Get pod liveness-678775c4-3e25-45b4-8e8f-088e734be840 in namespace container-probe-5915
  Aug 24 11:47:01.063: INFO: Get pod liveness-678775c4-3e25-45b4-8e8f-088e734be840 in namespace container-probe-5915
  Aug 24 11:47:03.074: INFO: Get pod liveness-678775c4-3e25-45b4-8e8f-088e734be840 in namespace container-probe-5915
  Aug 24 11:47:05.084: INFO: Get pod liveness-678775c4-3e25-45b4-8e8f-088e734be840 in namespace container-probe-5915
  Aug 24 11:47:07.093: INFO: Get pod liveness-678775c4-3e25-45b4-8e8f-088e734be840 in namespace container-probe-5915
  Aug 24 11:47:09.106: INFO: Get pod liveness-678775c4-3e25-45b4-8e8f-088e734be840 in namespace container-probe-5915
  Aug 24 11:47:11.115: INFO: Get pod liveness-678775c4-3e25-45b4-8e8f-088e734be840 in namespace container-probe-5915
  Aug 24 11:47:13.125: INFO: Get pod liveness-678775c4-3e25-45b4-8e8f-088e734be840 in namespace container-probe-5915
  Aug 24 11:47:15.135: INFO: Get pod liveness-678775c4-3e25-45b4-8e8f-088e734be840 in namespace container-probe-5915
  Aug 24 11:47:17.145: INFO: Get pod liveness-678775c4-3e25-45b4-8e8f-088e734be840 in namespace container-probe-5915
  Aug 24 11:47:19.156: INFO: Get pod liveness-678775c4-3e25-45b4-8e8f-088e734be840 in namespace container-probe-5915
  Aug 24 11:47:21.165: INFO: Get pod liveness-678775c4-3e25-45b4-8e8f-088e734be840 in namespace container-probe-5915
  Aug 24 11:47:23.174: INFO: Get pod liveness-678775c4-3e25-45b4-8e8f-088e734be840 in namespace container-probe-5915
  Aug 24 11:47:25.184: INFO: Get pod liveness-678775c4-3e25-45b4-8e8f-088e734be840 in namespace container-probe-5915
  Aug 24 11:47:27.193: INFO: Get pod liveness-678775c4-3e25-45b4-8e8f-088e734be840 in namespace container-probe-5915
  Aug 24 11:47:29.203: INFO: Get pod liveness-678775c4-3e25-45b4-8e8f-088e734be840 in namespace container-probe-5915
  Aug 24 11:47:31.215: INFO: Get pod liveness-678775c4-3e25-45b4-8e8f-088e734be840 in namespace container-probe-5915
  Aug 24 11:47:33.224: INFO: Get pod liveness-678775c4-3e25-45b4-8e8f-088e734be840 in namespace container-probe-5915
  Aug 24 11:47:35.233: INFO: Get pod liveness-678775c4-3e25-45b4-8e8f-088e734be840 in namespace container-probe-5915
  Aug 24 11:47:37.243: INFO: Get pod liveness-678775c4-3e25-45b4-8e8f-088e734be840 in namespace container-probe-5915
  Aug 24 11:47:39.253: INFO: Get pod liveness-678775c4-3e25-45b4-8e8f-088e734be840 in namespace container-probe-5915
  Aug 24 11:47:41.263: INFO: Get pod liveness-678775c4-3e25-45b4-8e8f-088e734be840 in namespace container-probe-5915
  Aug 24 11:47:43.272: INFO: Get pod liveness-678775c4-3e25-45b4-8e8f-088e734be840 in namespace container-probe-5915
  Aug 24 11:47:45.282: INFO: Get pod liveness-678775c4-3e25-45b4-8e8f-088e734be840 in namespace container-probe-5915
  Aug 24 11:47:45.282: INFO: Restart count of pod container-probe-5915/liveness-678775c4-3e25-45b4-8e8f-088e734be840 is now 5 (2m20.738789383s elapsed)
  Aug 24 11:47:45.282: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: deleting the pod @ 08/24/23 11:47:45.293
  STEP: Destroying namespace "container-probe-5915" for this suite. @ 08/24/23 11:47:45.322
• [142.887 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-node] Container Lifecycle Hook when create a pod with lifecycle hook should execute poststart http hook properly [NodeConformance] [Conformance]
test/e2e/common/node/lifecycle_hook.go:168
  STEP: Creating a kubernetes client @ 08/24/23 11:47:45.344
  Aug 24 11:47:45.344: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename container-lifecycle-hook @ 08/24/23 11:47:45.346
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 11:47:45.378
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 11:47:45.385
  STEP: create the container to handle the HTTPGet hook request. @ 08/24/23 11:47:45.402
  STEP: create the pod with lifecycle hook @ 08/24/23 11:47:47.45
  STEP: check poststart hook @ 08/24/23 11:47:49.496
  STEP: delete the pod with lifecycle hook @ 08/24/23 11:47:49.546
  Aug 24 11:47:51.579: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "container-lifecycle-hook-9089" for this suite. @ 08/24/23 11:47:51.589
• [6.259 seconds]
------------------------------
SSSSSS
------------------------------
[sig-node] Pods should allow activeDeadlineSeconds to be updated [NodeConformance] [Conformance]
test/e2e/common/node/pods.go:399
  STEP: Creating a kubernetes client @ 08/24/23 11:47:51.603
  Aug 24 11:47:51.603: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename pods @ 08/24/23 11:47:51.605
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 11:47:51.637
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 11:47:51.643
  STEP: creating the pod @ 08/24/23 11:47:51.65
  STEP: submitting the pod to kubernetes @ 08/24/23 11:47:51.65
  W0824 11:47:51.669414      22 warnings.go:70] metadata.name: this is used in the Pod's hostname, which can result in surprising behavior; a DNS label is recommended: [must be no more than 63 characters]
  STEP: verifying the pod is in kubernetes @ 08/24/23 11:47:53.7
  STEP: updating the pod @ 08/24/23 11:47:53.709
  Aug 24 11:47:54.238: INFO: Successfully updated pod "pod-update-activedeadlineseconds-30779ec4-fd06-403b-8089-ad78420321a8"
  Aug 24 11:47:58.266: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "pods-699" for this suite. @ 08/24/23 11:47:58.274
• [6.693 seconds]
------------------------------
SS
------------------------------
[sig-network] Services should complete a service status lifecycle [Conformance]
test/e2e/network/service.go:3326
  STEP: Creating a kubernetes client @ 08/24/23 11:47:58.297
  Aug 24 11:47:58.297: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename services @ 08/24/23 11:47:58.299
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 11:47:58.329
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 11:47:58.335
  STEP: creating a Service @ 08/24/23 11:47:58.347
  STEP: watching for the Service to be added @ 08/24/23 11:47:58.372
  Aug 24 11:47:58.375: INFO: Found Service test-service-cmxlx in namespace services-2967 with labels: map[test-service-static:true] & ports [{http TCP <nil> 80 {0 80 } 0}]
  Aug 24 11:47:58.375: INFO: Service test-service-cmxlx created
  STEP: Getting /status @ 08/24/23 11:47:58.375
  Aug 24 11:47:58.384: INFO: Service test-service-cmxlx has LoadBalancer: {[]}
  STEP: patching the ServiceStatus @ 08/24/23 11:47:58.384
  STEP: watching for the Service to be patched @ 08/24/23 11:47:58.396
  Aug 24 11:47:58.399: INFO: observed Service test-service-cmxlx in namespace services-2967 with annotations: map[] & LoadBalancer: {[]}
  Aug 24 11:47:58.399: INFO: Found Service test-service-cmxlx in namespace services-2967 with annotations: map[patchedstatus:true] & LoadBalancer: {[{203.0.113.1  []}]}
  Aug 24 11:47:58.399: INFO: Service test-service-cmxlx has service status patched
  STEP: updating the ServiceStatus @ 08/24/23 11:47:58.399
  Aug 24 11:47:58.420: INFO: updatedStatus.Conditions: []v1.Condition{v1.Condition{Type:"StatusUpdate", Status:"True", ObservedGeneration:0, LastTransitionTime:time.Date(1, time.January, 1, 0, 0, 0, 0, time.UTC), Reason:"E2E", Message:"Set from e2e test"}}
  STEP: watching for the Service to be updated @ 08/24/23 11:47:58.42
  Aug 24 11:47:58.423: INFO: Observed Service test-service-cmxlx in namespace services-2967 with annotations: map[] & Conditions: {[]}
  Aug 24 11:47:58.424: INFO: Observed event: &Service{ObjectMeta:{test-service-cmxlx  services-2967  e53523aa-ac3b-45c2-91ce-6fd07c6a5a42 3404896025 0 2023-08-24 11:47:58 +0000 UTC <nil> <nil> map[test-service-static:true] map[patchedstatus:true] [] [] [{e2e.test Update v1 2023-08-24 11:47:58 +0000 UTC FieldsV1 {"f:metadata":{"f:labels":{".":{},"f:test-service-static":{}}},"f:spec":{"f:internalTrafficPolicy":{},"f:ports":{".":{},"k:{\"port\":80,\"protocol\":\"TCP\"}":{".":{},"f:name":{},"f:port":{},"f:protocol":{},"f:targetPort":{}}},"f:sessionAffinity":{},"f:type":{}}} } {e2e.test Update v1 2023-08-24 11:47:58 +0000 UTC FieldsV1 {"f:metadata":{"f:annotations":{".":{},"f:patchedstatus":{}}},"f:status":{"f:loadBalancer":{"f:ingress":{}}}} status}]},Spec:ServiceSpec{Ports:[]ServicePort{ServicePort{Name:http,Protocol:TCP,Port:80,TargetPort:{0 80 },NodePort:0,AppProtocol:nil,},},Selector:map[string]string{},ClusterIP:10.96.142.164,Type:ClusterIP,ExternalIPs:[],SessionAffinity:None,LoadBalancerIP:,LoadBalancerSourceRanges:[],ExternalName:,ExternalTrafficPolicy:,HealthCheckNodePort:0,PublishNotReadyAddresses:false,SessionAffinityConfig:nil,IPFamilyPolicy:*SingleStack,ClusterIPs:[10.96.142.164],IPFamilies:[IPv4],AllocateLoadBalancerNodePorts:nil,LoadBalancerClass:nil,InternalTrafficPolicy:*Cluster,},Status:ServiceStatus{LoadBalancer:LoadBalancerStatus{Ingress:[]LoadBalancerIngress{LoadBalancerIngress{IP:203.0.113.1,Hostname:,Ports:[]PortStatus{},},},},Conditions:[]Condition{},},}
  Aug 24 11:47:58.424: INFO: Found Service test-service-cmxlx in namespace services-2967 with annotations: map[patchedstatus:true] & Conditions: [{StatusUpdate True 0 0001-01-01 00:00:00 +0000 UTC E2E Set from e2e test}]
  Aug 24 11:47:58.424: INFO: Service test-service-cmxlx has service status updated
  STEP: patching the service @ 08/24/23 11:47:58.424
  STEP: watching for the Service to be patched @ 08/24/23 11:47:58.439
  Aug 24 11:47:58.450: INFO: observed Service test-service-cmxlx in namespace services-2967 with labels: map[test-service-static:true]
  Aug 24 11:47:58.451: INFO: observed Service test-service-cmxlx in namespace services-2967 with labels: map[test-service-static:true]
  Aug 24 11:47:58.451: INFO: observed Service test-service-cmxlx in namespace services-2967 with labels: map[test-service-static:true]
  Aug 24 11:47:58.451: INFO: Found Service test-service-cmxlx in namespace services-2967 with labels: map[test-service:patched test-service-static:true]
  Aug 24 11:47:58.451: INFO: Service test-service-cmxlx patched
  STEP: deleting the service @ 08/24/23 11:47:58.451
  STEP: watching for the Service to be deleted @ 08/24/23 11:47:58.501
  Aug 24 11:47:58.504: INFO: Observed event: ADDED
  Aug 24 11:47:58.504: INFO: Observed event: MODIFIED
  Aug 24 11:47:58.504: INFO: Observed event: MODIFIED
  Aug 24 11:47:58.504: INFO: Observed event: MODIFIED
  Aug 24 11:47:58.505: INFO: Found Service test-service-cmxlx in namespace services-2967 with labels: map[test-service:patched test-service-static:true] & annotations: map[patchedstatus:true]
  Aug 24 11:47:58.505: INFO: Service test-service-cmxlx deleted
  Aug 24 11:47:58.505: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "services-2967" for this suite. @ 08/24/23 11:47:58.513
• [0.229 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-node] Pods should be updated [NodeConformance] [Conformance]
test/e2e/common/node/pods.go:345
  STEP: Creating a kubernetes client @ 08/24/23 11:47:58.527
  Aug 24 11:47:58.527: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename pods @ 08/24/23 11:47:58.529
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 11:47:58.559
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 11:47:58.566
  STEP: creating the pod @ 08/24/23 11:47:58.573
  STEP: submitting the pod to kubernetes @ 08/24/23 11:47:58.573
  STEP: verifying the pod is in kubernetes @ 08/24/23 11:48:00.618
  STEP: updating the pod @ 08/24/23 11:48:00.625
  Aug 24 11:48:01.150: INFO: Successfully updated pod "pod-update-414aae16-7154-47b3-96fa-426a430a4131"
  STEP: verifying the updated pod is in kubernetes @ 08/24/23 11:48:01.161
  Aug 24 11:48:01.167: INFO: Pod update OK
  Aug 24 11:48:01.168: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "pods-5349" for this suite. @ 08/24/23 11:48:01.179
• [2.669 seconds]
------------------------------
S
------------------------------
[sig-storage] Secrets should be consumable from pods in volume with mappings and Item Mode set [LinuxOnly] [NodeConformance] [Conformance]
test/e2e/common/storage/secrets_volume.go:89
  STEP: Creating a kubernetes client @ 08/24/23 11:48:01.196
  Aug 24 11:48:01.196: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename secrets @ 08/24/23 11:48:01.197
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 11:48:01.249
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 11:48:01.256
  STEP: Creating secret with name secret-test-map-2275346a-7fa7-4c12-9fe6-38d7bead0c3f @ 08/24/23 11:48:01.264
  STEP: Creating a pod to test consume secrets @ 08/24/23 11:48:01.274
  STEP: Saw pod success @ 08/24/23 11:48:05.322
  Aug 24 11:48:05.330: INFO: Trying to get logs from node scw-conformance-default-2af6d8b4c6264cc5b9e5e6 pod pod-secrets-593d5ee2-6d74-48d5-a8ca-517ab4dea098 container secret-volume-test: <nil>
  STEP: delete the pod @ 08/24/23 11:48:05.375
  Aug 24 11:48:05.411: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "secrets-5272" for this suite. @ 08/24/23 11:48:05.42
• [4.239 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-apps] StatefulSet Basic StatefulSet functionality [StatefulSetBasic] should validate Statefulset Status endpoints [Conformance]
test/e2e/apps/statefulset.go:983
  STEP: Creating a kubernetes client @ 08/24/23 11:48:05.437
  Aug 24 11:48:05.437: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename statefulset @ 08/24/23 11:48:05.438
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 11:48:05.464
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 11:48:05.471
  STEP: Creating service test in namespace statefulset-8923 @ 08/24/23 11:48:05.478
  STEP: Creating statefulset ss in namespace statefulset-8923 @ 08/24/23 11:48:05.495
  Aug 24 11:48:05.513: INFO: Found 0 stateful pods, waiting for 1
  Aug 24 11:48:15.524: INFO: Waiting for pod ss-0 to enter Running - Ready=true, currently Running - Ready=true
  STEP: Patch Statefulset to include a label @ 08/24/23 11:48:15.54
  STEP: Getting /status @ 08/24/23 11:48:15.562
  Aug 24 11:48:15.572: INFO: StatefulSet ss has Conditions: []v1.StatefulSetCondition(nil)
  STEP: updating the StatefulSet Status @ 08/24/23 11:48:15.572
  Aug 24 11:48:15.594: INFO: updatedStatus.Conditions: []v1.StatefulSetCondition{v1.StatefulSetCondition{Type:"StatusUpdate", Status:"True", LastTransitionTime:time.Date(1, time.January, 1, 0, 0, 0, 0, time.UTC), Reason:"E2E", Message:"Set from e2e test"}}
  STEP: watching for the statefulset status to be updated @ 08/24/23 11:48:15.594
  Aug 24 11:48:15.598: INFO: Observed &StatefulSet event: ADDED
  Aug 24 11:48:15.598: INFO: Found Statefulset ss in namespace statefulset-8923 with labels: map[e2e:testing] annotations: map[] & Conditions: {StatusUpdate True 0001-01-01 00:00:00 +0000 UTC E2E Set from e2e test}
  Aug 24 11:48:15.598: INFO: Statefulset ss has an updated status
  STEP: patching the Statefulset Status @ 08/24/23 11:48:15.598
  Aug 24 11:48:15.599: INFO: Patch payload: {"status":{"conditions":[{"type":"StatusPatched","status":"True"}]}}
  Aug 24 11:48:15.614: INFO: Patched status conditions: []v1.StatefulSetCondition{v1.StatefulSetCondition{Type:"StatusPatched", Status:"True", LastTransitionTime:time.Date(1, time.January, 1, 0, 0, 0, 0, time.UTC), Reason:"", Message:""}}
  STEP: watching for the Statefulset status to be patched @ 08/24/23 11:48:15.615
  Aug 24 11:48:15.619: INFO: Observed &StatefulSet event: ADDED
  Aug 24 11:48:15.619: INFO: Deleting all statefulset in ns statefulset-8923
  Aug 24 11:48:15.626: INFO: Scaling statefulset ss to 0
  Aug 24 11:48:25.670: INFO: Waiting for statefulset status.replicas updated to 0
  Aug 24 11:48:25.678: INFO: Deleting statefulset ss
  Aug 24 11:48:25.709: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "statefulset-8923" for this suite. @ 08/24/23 11:48:25.718
• [20.295 seconds]
------------------------------
SSSSSSSSSSSSSSS
------------------------------
[sig-api-machinery] Namespaces [Serial] should apply a finalizer to a Namespace [Conformance]
test/e2e/apimachinery/namespace.go:398
  STEP: Creating a kubernetes client @ 08/24/23 11:48:25.732
  Aug 24 11:48:25.732: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename namespaces @ 08/24/23 11:48:25.733
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 11:48:25.764
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 11:48:25.771
  STEP: Creating namespace "e2e-ns-8rgvf" @ 08/24/23 11:48:25.777
  Aug 24 11:48:25.807: INFO: Namespace "e2e-ns-8rgvf-2554" has []v1.FinalizerName{"kubernetes"}
  STEP: Adding e2e finalizer to namespace "e2e-ns-8rgvf-2554" @ 08/24/23 11:48:25.807
  Aug 24 11:48:25.823: INFO: Namespace "e2e-ns-8rgvf-2554" has []v1.FinalizerName{"kubernetes", "e2e.example.com/fakeFinalizer"}
  STEP: Removing e2e finalizer from namespace "e2e-ns-8rgvf-2554" @ 08/24/23 11:48:25.824
  Aug 24 11:48:25.849: INFO: Namespace "e2e-ns-8rgvf-2554" has []v1.FinalizerName{"kubernetes"}
  Aug 24 11:48:25.849: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "namespaces-2800" for this suite. @ 08/24/23 11:48:25.857
  STEP: Destroying namespace "e2e-ns-8rgvf-2554" for this suite. @ 08/24/23 11:48:25.874
• [0.156 seconds]
------------------------------
S
------------------------------
[sig-storage] CSIStorageCapacity  should support CSIStorageCapacities API operations [Conformance]
test/e2e/storage/csistoragecapacity.go:49
  STEP: Creating a kubernetes client @ 08/24/23 11:48:25.888
  Aug 24 11:48:25.888: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename csistoragecapacity @ 08/24/23 11:48:25.889
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 11:48:25.921
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 11:48:25.928
  STEP: getting /apis @ 08/24/23 11:48:25.934
  STEP: getting /apis/storage.k8s.io @ 08/24/23 11:48:25.951
  STEP: getting /apis/storage.k8s.io/v1 @ 08/24/23 11:48:25.954
  STEP: creating @ 08/24/23 11:48:25.958
  STEP: watching @ 08/24/23 11:48:26.042
  Aug 24 11:48:26.042: INFO: starting watch
  STEP: getting @ 08/24/23 11:48:26.058
  STEP: listing in namespace @ 08/24/23 11:48:26.067
  STEP: listing across namespaces @ 08/24/23 11:48:26.075
  STEP: patching @ 08/24/23 11:48:26.083
  STEP: updating @ 08/24/23 11:48:26.093
  Aug 24 11:48:26.102: INFO: waiting for watch events with expected annotations in namespace
  Aug 24 11:48:26.103: INFO: waiting for watch events with expected annotations across namespace
  STEP: deleting @ 08/24/23 11:48:26.103
  STEP: deleting a collection @ 08/24/23 11:48:26.134
  Aug 24 11:48:26.174: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "csistoragecapacity-2615" for this suite. @ 08/24/23 11:48:26.183
• [0.308 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-storage] Downward API volume should provide container's memory limit [NodeConformance] [Conformance]
test/e2e/common/storage/downwardapi_volume.go:208
  STEP: Creating a kubernetes client @ 08/24/23 11:48:26.198
  Aug 24 11:48:26.198: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename downward-api @ 08/24/23 11:48:26.199
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 11:48:26.228
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 11:48:26.234
  STEP: Creating a pod to test downward API volume plugin @ 08/24/23 11:48:26.242
  STEP: Saw pod success @ 08/24/23 11:48:30.286
  Aug 24 11:48:30.293: INFO: Trying to get logs from node scw-conformance-default-2af6d8b4c6264cc5b9e5e6 pod downwardapi-volume-5d659bf0-716d-4f82-bc2e-aab7609d6cbf container client-container: <nil>
  STEP: delete the pod @ 08/24/23 11:48:30.311
  Aug 24 11:48:30.344: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "downward-api-780" for this suite. @ 08/24/23 11:48:30.353
• [4.170 seconds]
------------------------------
SSSSSSSSSSSSS
------------------------------
[sig-node] Security Context When creating a pod with readOnlyRootFilesystem should run the container with writable rootfs when readOnlyRootFilesystem=false [NodeConformance] [Conformance]
test/e2e/common/node/security_context.go:486
  STEP: Creating a kubernetes client @ 08/24/23 11:48:30.369
  Aug 24 11:48:30.369: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename security-context-test @ 08/24/23 11:48:30.37
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 11:48:30.4
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 11:48:30.406
  Aug 24 11:48:34.557: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "security-context-test-3040" for this suite. @ 08/24/23 11:48:34.951
• [4.695 seconds]
------------------------------
SSSSSSSSSSSSSSSS
------------------------------
[sig-storage] Projected secret should be consumable from pods in volume with defaultMode set [LinuxOnly] [NodeConformance] [Conformance]
test/e2e/common/storage/projected_secret.go:56
  STEP: Creating a kubernetes client @ 08/24/23 11:48:35.065
  Aug 24 11:48:35.065: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename projected @ 08/24/23 11:48:35.066
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 11:48:35.149
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 11:48:35.155
  STEP: Creating projection with secret that has name projected-secret-test-e575694d-4565-494d-a68f-3497b8e56e08 @ 08/24/23 11:48:35.162
  STEP: Creating a pod to test consume secrets @ 08/24/23 11:48:35.172
  STEP: Saw pod success @ 08/24/23 11:48:39.222
  Aug 24 11:48:39.232: INFO: Trying to get logs from node scw-conformance-default-2af6d8b4c6264cc5b9e5e6 pod pod-projected-secrets-2b22d3a4-3f50-4451-afc6-9e3b3beff657 container projected-secret-volume-test: <nil>
  STEP: delete the pod @ 08/24/23 11:48:39.249
  Aug 24 11:48:39.286: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "projected-5884" for this suite. @ 08/24/23 11:48:39.295
• [4.243 seconds]
------------------------------
SSSSS
------------------------------
[sig-api-machinery] ResourceQuota should verify ResourceQuota with best effort scope. [Conformance]
test/e2e/apimachinery/resource_quota.go:806
  STEP: Creating a kubernetes client @ 08/24/23 11:48:39.309
  Aug 24 11:48:39.309: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename resourcequota @ 08/24/23 11:48:39.309
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 11:48:39.341
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 11:48:39.347
  STEP: Creating a ResourceQuota with best effort scope @ 08/24/23 11:48:39.352
  STEP: Ensuring ResourceQuota status is calculated @ 08/24/23 11:48:39.362
  STEP: Creating a ResourceQuota with not best effort scope @ 08/24/23 11:48:41.371
  STEP: Ensuring ResourceQuota status is calculated @ 08/24/23 11:48:41.383
  STEP: Creating a best-effort pod @ 08/24/23 11:48:43.392
  STEP: Ensuring resource quota with best effort scope captures the pod usage @ 08/24/23 11:48:43.43
  STEP: Ensuring resource quota with not best effort ignored the pod usage @ 08/24/23 11:48:45.44
  STEP: Deleting the pod @ 08/24/23 11:48:47.45
  STEP: Ensuring resource quota status released the pod usage @ 08/24/23 11:48:47.479
  STEP: Creating a not best-effort pod @ 08/24/23 11:48:49.489
  STEP: Ensuring resource quota with not best effort scope captures the pod usage @ 08/24/23 11:48:49.513
  STEP: Ensuring resource quota with best effort scope ignored the pod usage @ 08/24/23 11:48:51.522
  STEP: Deleting the pod @ 08/24/23 11:48:53.532
  STEP: Ensuring resource quota status released the pod usage @ 08/24/23 11:48:53.563
  Aug 24 11:48:55.572: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "resourcequota-8471" for this suite. @ 08/24/23 11:48:55.583
• [16.292 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-storage] EmptyDir volumes should support (non-root,0644,default) [LinuxOnly] [NodeConformance] [Conformance]
test/e2e/common/storage/empty_dir.go:197
  STEP: Creating a kubernetes client @ 08/24/23 11:48:55.604
  Aug 24 11:48:55.604: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename emptydir @ 08/24/23 11:48:55.605
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 11:48:55.634
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 11:48:55.641
  STEP: Creating a pod to test emptydir 0644 on node default medium @ 08/24/23 11:48:55.648
  STEP: Saw pod success @ 08/24/23 11:48:59.695
  Aug 24 11:48:59.704: INFO: Trying to get logs from node scw-conformance-default-2af6d8b4c6264cc5b9e5e6 pod pod-be4edeca-66f4-459f-ba38-9e032ce85c5c container test-container: <nil>
  STEP: delete the pod @ 08/24/23 11:48:59.722
  Aug 24 11:48:59.762: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "emptydir-8783" for this suite. @ 08/24/23 11:48:59.772
• [4.183 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-storage] Projected downwardAPI should set mode on item file [LinuxOnly] [NodeConformance] [Conformance]
test/e2e/common/storage/projected_downwardapi.go:85
  STEP: Creating a kubernetes client @ 08/24/23 11:48:59.789
  Aug 24 11:48:59.789: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename projected @ 08/24/23 11:48:59.79
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 11:48:59.819
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 11:48:59.826
  STEP: Creating a pod to test downward API volume plugin @ 08/24/23 11:48:59.832
  STEP: Saw pod success @ 08/24/23 11:49:03.883
  Aug 24 11:49:03.896: INFO: Trying to get logs from node scw-conformance-default-2af6d8b4c6264cc5b9e5e6 pod downwardapi-volume-b15f3d4f-5cea-4983-bdda-c4b138657eeb container client-container: <nil>
  STEP: delete the pod @ 08/24/23 11:49:03.913
  Aug 24 11:49:03.945: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "projected-6952" for this suite. @ 08/24/23 11:49:03.956
• [4.182 seconds]
------------------------------
SSSSSSSSSSSSSS
------------------------------
[sig-apps] Deployment deployment should support rollover [Conformance]
test/e2e/apps/deployment.go:132
  STEP: Creating a kubernetes client @ 08/24/23 11:49:03.972
  Aug 24 11:49:03.972: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename deployment @ 08/24/23 11:49:03.973
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 11:49:04
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 11:49:04.007
  Aug 24 11:49:04.032: INFO: Pod name rollover-pod: Found 0 pods out of 1
  Aug 24 11:49:09.043: INFO: Pod name rollover-pod: Found 1 pods out of 1
  STEP: ensuring each pod is running @ 08/24/23 11:49:09.043
  Aug 24 11:49:09.043: INFO: Waiting for pods owned by replica set "test-rollover-controller" to become ready
  Aug 24 11:49:11.052: INFO: Creating deployment "test-rollover-deployment"
  Aug 24 11:49:11.074: INFO: Make sure deployment "test-rollover-deployment" performs scaling operations
  Aug 24 11:49:13.090: INFO: Check revision of new replica set for deployment "test-rollover-deployment"
  Aug 24 11:49:13.107: INFO: Ensure that both replica sets have 1 created replica
  Aug 24 11:49:13.125: INFO: Rollover old replica sets for deployment "test-rollover-deployment" with new image update
  Aug 24 11:49:13.147: INFO: Updating deployment test-rollover-deployment
  Aug 24 11:49:13.147: INFO: Wait deployment "test-rollover-deployment" to be observed by the deployment controller
  Aug 24 11:49:15.165: INFO: Wait for revision update of deployment "test-rollover-deployment" to 2
  Aug 24 11:49:15.184: INFO: Make sure deployment "test-rollover-deployment" is complete
  Aug 24 11:49:15.199: INFO: all replica sets need to contain the pod-template-hash label
  Aug 24 11:49:15.199: INFO: deployment status: v1.DeploymentStatus{ObservedGeneration:2, Replicas:2, UpdatedReplicas:1, ReadyReplicas:2, AvailableReplicas:1, UnavailableReplicas:1, Conditions:[]v1.DeploymentCondition{v1.DeploymentCondition{Type:"Available", Status:"True", LastUpdateTime:time.Date(2023, time.August, 24, 11, 49, 11, 0, time.Local), LastTransitionTime:time.Date(2023, time.August, 24, 11, 49, 11, 0, time.Local), Reason:"MinimumReplicasAvailable", Message:"Deployment has minimum availability."}, v1.DeploymentCondition{Type:"Progressing", Status:"True", LastUpdateTime:time.Date(2023, time.August, 24, 11, 49, 14, 0, time.Local), LastTransitionTime:time.Date(2023, time.August, 24, 11, 49, 11, 0, time.Local), Reason:"ReplicaSetUpdated", Message:"ReplicaSet \"test-rollover-deployment-5d484bf7f9\" is progressing."}}, CollisionCount:(*int32)(nil)}
  Aug 24 11:49:17.219: INFO: all replica sets need to contain the pod-template-hash label
  Aug 24 11:49:17.220: INFO: deployment status: v1.DeploymentStatus{ObservedGeneration:2, Replicas:2, UpdatedReplicas:1, ReadyReplicas:2, AvailableReplicas:1, UnavailableReplicas:1, Conditions:[]v1.DeploymentCondition{v1.DeploymentCondition{Type:"Available", Status:"True", LastUpdateTime:time.Date(2023, time.August, 24, 11, 49, 11, 0, time.Local), LastTransitionTime:time.Date(2023, time.August, 24, 11, 49, 11, 0, time.Local), Reason:"MinimumReplicasAvailable", Message:"Deployment has minimum availability."}, v1.DeploymentCondition{Type:"Progressing", Status:"True", LastUpdateTime:time.Date(2023, time.August, 24, 11, 49, 14, 0, time.Local), LastTransitionTime:time.Date(2023, time.August, 24, 11, 49, 11, 0, time.Local), Reason:"ReplicaSetUpdated", Message:"ReplicaSet \"test-rollover-deployment-5d484bf7f9\" is progressing."}}, CollisionCount:(*int32)(nil)}
  Aug 24 11:49:19.219: INFO: all replica sets need to contain the pod-template-hash label
  Aug 24 11:49:19.219: INFO: deployment status: v1.DeploymentStatus{ObservedGeneration:2, Replicas:2, UpdatedReplicas:1, ReadyReplicas:2, AvailableReplicas:1, UnavailableReplicas:1, Conditions:[]v1.DeploymentCondition{v1.DeploymentCondition{Type:"Available", Status:"True", LastUpdateTime:time.Date(2023, time.August, 24, 11, 49, 11, 0, time.Local), LastTransitionTime:time.Date(2023, time.August, 24, 11, 49, 11, 0, time.Local), Reason:"MinimumReplicasAvailable", Message:"Deployment has minimum availability."}, v1.DeploymentCondition{Type:"Progressing", Status:"True", LastUpdateTime:time.Date(2023, time.August, 24, 11, 49, 14, 0, time.Local), LastTransitionTime:time.Date(2023, time.August, 24, 11, 49, 11, 0, time.Local), Reason:"ReplicaSetUpdated", Message:"ReplicaSet \"test-rollover-deployment-5d484bf7f9\" is progressing."}}, CollisionCount:(*int32)(nil)}
  Aug 24 11:49:21.222: INFO: all replica sets need to contain the pod-template-hash label
  Aug 24 11:49:21.222: INFO: deployment status: v1.DeploymentStatus{ObservedGeneration:2, Replicas:2, UpdatedReplicas:1, ReadyReplicas:2, AvailableReplicas:1, UnavailableReplicas:1, Conditions:[]v1.DeploymentCondition{v1.DeploymentCondition{Type:"Available", Status:"True", LastUpdateTime:time.Date(2023, time.August, 24, 11, 49, 11, 0, time.Local), LastTransitionTime:time.Date(2023, time.August, 24, 11, 49, 11, 0, time.Local), Reason:"MinimumReplicasAvailable", Message:"Deployment has minimum availability."}, v1.DeploymentCondition{Type:"Progressing", Status:"True", LastUpdateTime:time.Date(2023, time.August, 24, 11, 49, 14, 0, time.Local), LastTransitionTime:time.Date(2023, time.August, 24, 11, 49, 11, 0, time.Local), Reason:"ReplicaSetUpdated", Message:"ReplicaSet \"test-rollover-deployment-5d484bf7f9\" is progressing."}}, CollisionCount:(*int32)(nil)}
  Aug 24 11:49:23.215: INFO: all replica sets need to contain the pod-template-hash label
  Aug 24 11:49:23.216: INFO: deployment status: v1.DeploymentStatus{ObservedGeneration:2, Replicas:2, UpdatedReplicas:1, ReadyReplicas:2, AvailableReplicas:1, UnavailableReplicas:1, Conditions:[]v1.DeploymentCondition{v1.DeploymentCondition{Type:"Available", Status:"True", LastUpdateTime:time.Date(2023, time.August, 24, 11, 49, 11, 0, time.Local), LastTransitionTime:time.Date(2023, time.August, 24, 11, 49, 11, 0, time.Local), Reason:"MinimumReplicasAvailable", Message:"Deployment has minimum availability."}, v1.DeploymentCondition{Type:"Progressing", Status:"True", LastUpdateTime:time.Date(2023, time.August, 24, 11, 49, 14, 0, time.Local), LastTransitionTime:time.Date(2023, time.August, 24, 11, 49, 11, 0, time.Local), Reason:"ReplicaSetUpdated", Message:"ReplicaSet \"test-rollover-deployment-5d484bf7f9\" is progressing."}}, CollisionCount:(*int32)(nil)}
  Aug 24 11:49:25.215: INFO: 
  Aug 24 11:49:25.215: INFO: Ensure that both old replica sets have no replicas
  Aug 24 11:49:25.237: INFO: Deployment "test-rollover-deployment":
  (v1.Deployment) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=24) "test-rollover-deployment",
      GenerateName: (string) "",
      Namespace: (string) (len=14) "deployment-789",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "032aea6f-a9a1-41b4-a0be-9839215c63d8",
      ResourceVersion: (string) (len=10) "3404900473",
      Generation: (int64) 2,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63828474551,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=1) {
        (string) (len=4) "name": (string) (len=12) "rollover-pod"
      },
      Annotations: (map[string]string) (len=1) {
        (string) (len=33) "deployment.kubernetes.io/revision": (string) (len=1) "2"
      },
      OwnerReferences: ([]v1.OwnerReference) <nil>,
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "e2e.test",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828474553,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=660) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 6c 61 62 65 6c 73  22 3a 7b 22 2e 22 3a 7b  |f:labels":{".":{|
              00000020  7d 2c 22 66 3a 6e 61 6d  65 22 3a 7b 7d 7d 7d 2c  |},"f:name":{}}},|
              00000030  22 66 3a 73 70 65 63 22  3a 7b 22 66 3a 6d 69 6e  |"f:spec":{"f:min|
              00000040  52 65 61 64 79 53 65 63  6f 6e 64 73 22 3a 7b 7d  |ReadySeconds":{}|
              00000050  2c 22 66 3a 70 72 6f 67  72 65 73 73 44 65 61 64  |,"f:progressDead|
              00000060  6c 69 6e 65 53 65 63 6f  6e 64 73 22 3a 7b 7d 2c  |lineSeconds":{},|
              00000070  22 66 3a 72 65 70 6c 69  63 61 73 22 3a 7b 7d 2c  |"f:replicas":{},|
              00000080  22 66 3a 72 65 76 69 73  69 6f 6e 48 69 73 74 6f  |"f:revisionHisto|
              00000090  72 79 4c 69 6d 69 74 22  3a 7b 7d 2c 22 66 3a 73  |ryLimit":{},"f:s|
              000000a0  65 6c 65 63 74 6f 72 22  3a 7b 7d 2c 22 66 3a 73  |elector":{},"f:s|
              000000b0  74 72 61 74 65 67 79 22  3a 7b 22 66 3a 72 6f 6c  |trategy":{"f:rol|
              000000c0  6c 69 6e 67 55 70 64 61  74 65 22 3a 7b 22 2e 22  |lingUpdate":{"."|
              000000d0  3a 7b 7d 2c 22 66 3a 6d  61 78 53 75 72 67 65 22  |:{},"f:maxSurge"|
              000000e0  3a 7b 7d 2c 22 66 3a 6d  61 78 55 6e 61 76 61 69  |:{},"f:maxUnavai|
              000000f0  6c 61 62 6c 65 22 3a 7b  7d 7d 2c 22 66 3a 74 79  |lable":{}},"f:ty|
              00000100  70 65 22 3a 7b 7d 7d 2c  22 66 3a 74 65 6d 70 6c  |pe":{}},"f:templ|
              00000110  61 74 65 22 3a 7b 22 66  3a 6d 65 74 61 64 61 74  |ate":{"f:metadat|
              00000120  61 22 3a 7b 22 66 3a 6c  61 62 65 6c 73 22 3a 7b  |a":{"f:labels":{|
              00000130  22 2e 22 3a 7b 7d 2c 22  66 3a 6e 61 6d 65 22 3a  |".":{},"f:name":|
              00000140  7b 7d 7d 7d 2c 22 66 3a  73 70 65 63 22 3a 7b 22  |{}}},"f:spec":{"|
              00000150  66 3a 63 6f 6e 74 61 69  6e 65 72 73 22 3a 7b 22  |f:containers":{"|
              00000160  6b 3a 7b 5c 22 6e 61 6d  65 5c 22 3a 5c 22 61 67  |k:{\"name\":\"ag|
              00000170  6e 68 6f 73 74 5c 22 7d  22 3a 7b 22 2e 22 3a 7b  |nhost\"}":{".":{|
              00000180  7d 2c 22 66 3a 69 6d 61  67 65 22 3a 7b 7d 2c 22  |},"f:image":{},"|
              00000190  66 3a 69 6d 61 67 65 50  75 6c 6c 50 6f 6c 69 63  |f:imagePullPolic|
              000001a0  79 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |y":{},"f:name":{|
              000001b0  7d 2c 22 66 3a 72 65 73  6f 75 72 63 65 73 22 3a  |},"f:resources":|
              000001c0  7b 7d 2c 22 66 3a 73 65  63 75 72 69 74 79 43 6f  |{},"f:securityCo|
              000001d0  6e 74 65 78 74 22 3a 7b  7d 2c 22 66 3a 74 65 72  |ntext":{},"f:ter|
              000001e0  6d 69 6e 61 74 69 6f 6e  4d 65 73 73 61 67 65 50  |minationMessageP|
              000001f0  61 74 68 22 3a 7b 7d 2c  22 66 3a 74 65 72 6d 69  |ath":{},"f:termi|
              00000200  6e 61 74 69 6f 6e 4d 65  73 73 61 67 65 50 6f 6c  |nationMessagePol|
              00000210  69 63 79 22 3a 7b 7d 7d  7d 2c 22 66 3a 64 6e 73  |icy":{}}},"f:dns|
              00000220  50 6f 6c 69 63 79 22 3a  7b 7d 2c 22 66 3a 72 65  |Policy":{},"f:re|
              00000230  73 74 61 72 74 50 6f 6c  69 63 79 22 3a 7b 7d 2c  |startPolicy":{},|
              00000240  22 66 3a 73 63 68 65 64  75 6c 65 72 4e 61 6d 65  |"f:schedulerName|
              00000250  22 3a 7b 7d 2c 22 66 3a  73 65 63 75 72 69 74 79  |":{},"f:security|
              00000260  43 6f 6e 74 65 78 74 22  3a 7b 7d 2c 22 66 3a 74  |Context":{},"f:t|
              00000270  65 72 6d 69 6e 61 74 69  6f 6e 47 72 61 63 65 50  |erminationGraceP|
              00000280  65 72 69 6f 64 53 65 63  6f 6e 64 73 22 3a 7b 7d  |eriodSeconds":{}|
              00000290  7d 7d 7d 7d                                       |}}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828474564,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=514) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 61 6e 6e 6f 74 61  74 69 6f 6e 73 22 3a 7b  |f:annotations":{|
              00000020  22 2e 22 3a 7b 7d 2c 22  66 3a 64 65 70 6c 6f 79  |".":{},"f:deploy|
              00000030  6d 65 6e 74 2e 6b 75 62  65 72 6e 65 74 65 73 2e  |ment.kubernetes.|
              00000040  69 6f 2f 72 65 76 69 73  69 6f 6e 22 3a 7b 7d 7d  |io/revision":{}}|
              00000050  7d 2c 22 66 3a 73 74 61  74 75 73 22 3a 7b 22 66  |},"f:status":{"f|
              00000060  3a 61 76 61 69 6c 61 62  6c 65 52 65 70 6c 69 63  |:availableReplic|
              00000070  61 73 22 3a 7b 7d 2c 22  66 3a 63 6f 6e 64 69 74  |as":{},"f:condit|
              00000080  69 6f 6e 73 22 3a 7b 22  2e 22 3a 7b 7d 2c 22 6b  |ions":{".":{},"k|
              00000090  3a 7b 5c 22 74 79 70 65  5c 22 3a 5c 22 41 76 61  |:{\"type\":\"Ava|
              000000a0  69 6c 61 62 6c 65 5c 22  7d 22 3a 7b 22 2e 22 3a  |ilable\"}":{".":|
              000000b0  7b 7d 2c 22 66 3a 6c 61  73 74 54 72 61 6e 73 69  |{},"f:lastTransi|
              000000c0  74 69 6f 6e 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |tionTime":{},"f:|
              000000d0  6c 61 73 74 55 70 64 61  74 65 54 69 6d 65 22 3a  |lastUpdateTime":|
              000000e0  7b 7d 2c 22 66 3a 6d 65  73 73 61 67 65 22 3a 7b  |{},"f:message":{|
              000000f0  7d 2c 22 66 3a 72 65 61  73 6f 6e 22 3a 7b 7d 2c  |},"f:reason":{},|
              00000100  22 66 3a 73 74 61 74 75  73 22 3a 7b 7d 2c 22 66  |"f:status":{},"f|
              00000110  3a 74 79 70 65 22 3a 7b  7d 7d 2c 22 6b 3a 7b 5c  |:type":{}},"k:{\|
              00000120  22 74 79 70 65 5c 22 3a  5c 22 50 72 6f 67 72 65  |"type\":\"Progre|
              00000130  73 73 69 6e 67 5c 22 7d  22 3a 7b 22 2e 22 3a 7b  |ssing\"}":{".":{|
              00000140  7d 2c 22 66 3a 6c 61 73  74 54 72 61 6e 73 69 74  |},"f:lastTransit|
              00000150  69 6f 6e 54 69 6d 65 22  3a 7b 7d 2c 22 66 3a 6c  |ionTime":{},"f:l|
              00000160  61 73 74 55 70 64 61 74  65 54 69 6d 65 22 3a 7b  |astUpdateTime":{|
              00000170  7d 2c 22 66 3a 6d 65 73  73 61 67 65 22 3a 7b 7d  |},"f:message":{}|
              00000180  2c 22 66 3a 72 65 61 73  6f 6e 22 3a 7b 7d 2c 22  |,"f:reason":{},"|
              00000190  66 3a 73 74 61 74 75 73  22 3a 7b 7d 2c 22 66 3a  |f:status":{},"f:|
              000001a0  74 79 70 65 22 3a 7b 7d  7d 7d 2c 22 66 3a 6f 62  |type":{}}},"f:ob|
              000001b0  73 65 72 76 65 64 47 65  6e 65 72 61 74 69 6f 6e  |servedGeneration|
              000001c0  22 3a 7b 7d 2c 22 66 3a  72 65 61 64 79 52 65 70  |":{},"f:readyRep|
              000001d0  6c 69 63 61 73 22 3a 7b  7d 2c 22 66 3a 72 65 70  |licas":{},"f:rep|
              000001e0  6c 69 63 61 73 22 3a 7b  7d 2c 22 66 3a 75 70 64  |licas":{},"f:upd|
              000001f0  61 74 65 64 52 65 70 6c  69 63 61 73 22 3a 7b 7d  |atedReplicas":{}|
              00000200  7d 7d                                             |}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.DeploymentSpec) {
      Replicas: (*int32)(1),
      Selector: (*v1.LabelSelector)({
        MatchLabels: (map[string]string) (len=1) {
          (string) (len=4) "name": (string) (len=12) "rollover-pod"
        },
        MatchExpressions: ([]v1.LabelSelectorRequirement) <nil>
      }),
      Template: (v1.PodTemplateSpec) {
        ObjectMeta: (v1.ObjectMeta) {
          Name: (string) "",
          GenerateName: (string) "",
          Namespace: (string) "",
          SelfLink: (string) "",
          UID: (types.UID) "",
          ResourceVersion: (string) "",
          Generation: (int64) 0,
          CreationTimestamp: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          DeletionTimestamp: (*v1.Time)(<nil>),
          DeletionGracePeriodSeconds: (*int64)(<nil>),
          Labels: (map[string]string) (len=1) {
            (string) (len=4) "name": (string) (len=12) "rollover-pod"
          },
          Annotations: (map[string]string) <nil>,
          OwnerReferences: ([]v1.OwnerReference) <nil>,
          Finalizers: ([]string) <nil>,
          ManagedFields: ([]v1.ManagedFieldsEntry) <nil>
        },
        Spec: (v1.PodSpec) {
          Volumes: ([]v1.Volume) <nil>,
          InitContainers: ([]v1.Container) <nil>,
          Containers: ([]v1.Container) (len=1) {
            (v1.Container) {
              Name: (string) (len=7) "agnhost",
              Image: (string) (len=44) "registry.k8s.io/e2e-test-images/agnhost:2.45",
              Command: ([]string) <nil>,
              Args: ([]string) <nil>,
              WorkingDir: (string) "",
              Ports: ([]v1.ContainerPort) <nil>,
              EnvFrom: ([]v1.EnvFromSource) <nil>,
              Env: ([]v1.EnvVar) <nil>,
              Resources: (v1.ResourceRequirements) {
                Limits: (v1.ResourceList) <nil>,
                Requests: (v1.ResourceList) <nil>,
                Claims: ([]v1.ResourceClaim) <nil>
              },
              ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
              RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
              VolumeMounts: ([]v1.VolumeMount) <nil>,
              VolumeDevices: ([]v1.VolumeDevice) <nil>,
              LivenessProbe: (*v1.Probe)(<nil>),
              ReadinessProbe: (*v1.Probe)(<nil>),
              StartupProbe: (*v1.Probe)(<nil>),
              Lifecycle: (*v1.Lifecycle)(<nil>),
              TerminationMessagePath: (string) (len=20) "/dev/termination-log",
              TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
              ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
              SecurityContext: (*v1.SecurityContext)({
                Capabilities: (*v1.Capabilities)(<nil>),
                Privileged: (*bool)(<nil>),
                SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
                WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
                RunAsUser: (*int64)(<nil>),
                RunAsGroup: (*int64)(<nil>),
                RunAsNonRoot: (*bool)(<nil>),
                ReadOnlyRootFilesystem: (*bool)(<nil>),
                AllowPrivilegeEscalation: (*bool)(<nil>),
                ProcMount: (*v1.ProcMountType)(<nil>),
                SeccompProfile: (*v1.SeccompProfile)(<nil>)
              }),
              Stdin: (bool) false,
              StdinOnce: (bool) false,
              TTY: (bool) false
            }
          },
          EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
          RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
          TerminationGracePeriodSeconds: (*int64)(0),
          ActiveDeadlineSeconds: (*int64)(<nil>),
          DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
          NodeSelector: (map[string]string) <nil>,
          ServiceAccountName: (string) "",
          DeprecatedServiceAccount: (string) "",
          AutomountServiceAccountToken: (*bool)(<nil>),
          NodeName: (string) "",
          HostNetwork: (bool) false,
          HostPID: (bool) false,
          HostIPC: (bool) false,
          ShareProcessNamespace: (*bool)(<nil>),
          SecurityContext: (*v1.PodSecurityContext)({
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            SupplementalGroups: ([]int64) <nil>,
            FSGroup: (*int64)(<nil>),
            Sysctls: ([]v1.Sysctl) <nil>,
            FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
          Hostname: (string) "",
          Subdomain: (string) "",
          Affinity: (*v1.Affinity)(<nil>),
          SchedulerName: (string) (len=17) "default-scheduler",
          Tolerations: ([]v1.Toleration) <nil>,
          HostAliases: ([]v1.HostAlias) <nil>,
          PriorityClassName: (string) "",
          Priority: (*int32)(<nil>),
          DNSConfig: (*v1.PodDNSConfig)(<nil>),
          ReadinessGates: ([]v1.PodReadinessGate) <nil>,
          RuntimeClassName: (*string)(<nil>),
          EnableServiceLinks: (*bool)(<nil>),
          PreemptionPolicy: (*v1.PreemptionPolicy)(<nil>),
          Overhead: (v1.ResourceList) <nil>,
          TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
          SetHostnameAsFQDN: (*bool)(<nil>),
          OS: (*v1.PodOS)(<nil>),
          HostUsers: (*bool)(<nil>),
          SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
          ResourceClaims: ([]v1.PodResourceClaim) <nil>
        }
      },
      Strategy: (v1.DeploymentStrategy) {
        Type: (v1.DeploymentStrategyType) (len=13) "RollingUpdate",
        RollingUpdate: (*v1.RollingUpdateDeployment)({
          MaxUnavailable: (*intstr.IntOrString)({
            Type: (intstr.Type) 0,
            IntVal: (int32) 0,
            StrVal: (string) ""
          }),
          MaxSurge: (*intstr.IntOrString)({
            Type: (intstr.Type) 0,
            IntVal: (int32) 1,
            StrVal: (string) ""
          })
        })
      },
      MinReadySeconds: (int32) 10,
      RevisionHistoryLimit: (*int32)(10),
      Paused: (bool) false,
      ProgressDeadlineSeconds: (*int32)(600)
    },
    Status: (v1.DeploymentStatus) {
      ObservedGeneration: (int64) 2,
      Replicas: (int32) 1,
      UpdatedReplicas: (int32) 1,
      ReadyReplicas: (int32) 1,
      AvailableReplicas: (int32) 1,
      UnavailableReplicas: (int32) 0,
      Conditions: ([]v1.DeploymentCondition) (len=2) {
        (v1.DeploymentCondition) {
          Type: (v1.DeploymentConditionType) (len=9) "Available",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastUpdateTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828474551,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828474551,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=24) "MinimumReplicasAvailable",
          Message: (string) (len=36) "Deployment has minimum availability."
        },
        (v1.DeploymentCondition) {
          Type: (v1.DeploymentConditionType) (len=11) "Progressing",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastUpdateTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828474564,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828474551,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=22) "NewReplicaSetAvailable",
          Message: (string) (len=77) "ReplicaSet \"test-rollover-deployment-5d484bf7f9\" has successfully progressed."
        }
      },
      CollisionCount: (*int32)(<nil>)
    }
  }


  Aug 24 11:49:25.247: INFO: New ReplicaSet "test-rollover-deployment-5d484bf7f9" of Deployment "test-rollover-deployment":
  (v1.ReplicaSet) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=35) "test-rollover-deployment-5d484bf7f9",
      GenerateName: (string) "",
      Namespace: (string) (len=14) "deployment-789",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "0802c7cd-ad5c-46af-981d-0a185107d1c7",
      ResourceVersion: (string) (len=10) "3404900459",
      Generation: (int64) 2,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63828474553,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=12) "rollover-pod",
        (string) (len=17) "pod-template-hash": (string) (len=10) "5d484bf7f9"
      },
      Annotations: (map[string]string) (len=3) {
        (string) (len=41) "deployment.kubernetes.io/desired-replicas": (string) (len=1) "1",
        (string) (len=37) "deployment.kubernetes.io/max-replicas": (string) (len=1) "2",
        (string) (len=33) "deployment.kubernetes.io/revision": (string) (len=1) "2"
      },
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "Deployment",
          Name: (string) (len=24) "test-rollover-deployment",
          UID: (types.UID) (len=36) "032aea6f-a9a1-41b4-a0be-9839215c63d8",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828474553,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=806) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 61 6e 6e 6f 74 61  74 69 6f 6e 73 22 3a 7b  |f:annotations":{|
              00000020  22 2e 22 3a 7b 7d 2c 22  66 3a 64 65 70 6c 6f 79  |".":{},"f:deploy|
              00000030  6d 65 6e 74 2e 6b 75 62  65 72 6e 65 74 65 73 2e  |ment.kubernetes.|
              00000040  69 6f 2f 64 65 73 69 72  65 64 2d 72 65 70 6c 69  |io/desired-repli|
              00000050  63 61 73 22 3a 7b 7d 2c  22 66 3a 64 65 70 6c 6f  |cas":{},"f:deplo|
              00000060  79 6d 65 6e 74 2e 6b 75  62 65 72 6e 65 74 65 73  |yment.kubernetes|
              00000070  2e 69 6f 2f 6d 61 78 2d  72 65 70 6c 69 63 61 73  |.io/max-replicas|
              00000080  22 3a 7b 7d 2c 22 66 3a  64 65 70 6c 6f 79 6d 65  |":{},"f:deployme|
              00000090  6e 74 2e 6b 75 62 65 72  6e 65 74 65 73 2e 69 6f  |nt.kubernetes.io|
              000000a0  2f 72 65 76 69 73 69 6f  6e 22 3a 7b 7d 7d 2c 22  |/revision":{}},"|
              000000b0  66 3a 6c 61 62 65 6c 73  22 3a 7b 22 2e 22 3a 7b  |f:labels":{".":{|
              000000c0  7d 2c 22 66 3a 6e 61 6d  65 22 3a 7b 7d 2c 22 66  |},"f:name":{},"f|
              000000d0  3a 70 6f 64 2d 74 65 6d  70 6c 61 74 65 2d 68 61  |:pod-template-ha|
              000000e0  73 68 22 3a 7b 7d 7d 2c  22 66 3a 6f 77 6e 65 72  |sh":{}},"f:owner|
              000000f0  52 65 66 65 72 65 6e 63  65 73 22 3a 7b 22 2e 22  |References":{"."|
              00000100  3a 7b 7d 2c 22 6b 3a 7b  5c 22 75 69 64 5c 22 3a  |:{},"k:{\"uid\":|
              00000110  5c 22 30 33 32 61 65 61  36 66 2d 61 39 61 31 2d  |\"032aea6f-a9a1-|
              00000120  34 31 62 34 2d 61 30 62  65 2d 39 38 33 39 32 31  |41b4-a0be-983921|
              00000130  35 63 36 33 64 38 5c 22  7d 22 3a 7b 7d 7d 7d 2c  |5c63d8\"}":{}}},|
              00000140  22 66 3a 73 70 65 63 22  3a 7b 22 66 3a 6d 69 6e  |"f:spec":{"f:min|
              00000150  52 65 61 64 79 53 65 63  6f 6e 64 73 22 3a 7b 7d  |ReadySeconds":{}|
              00000160  2c 22 66 3a 72 65 70 6c  69 63 61 73 22 3a 7b 7d  |,"f:replicas":{}|
              00000170  2c 22 66 3a 73 65 6c 65  63 74 6f 72 22 3a 7b 7d  |,"f:selector":{}|
              00000180  2c 22 66 3a 74 65 6d 70  6c 61 74 65 22 3a 7b 22  |,"f:template":{"|
              00000190  66 3a 6d 65 74 61 64 61  74 61 22 3a 7b 22 66 3a  |f:metadata":{"f:|
              000001a0  6c 61 62 65 6c 73 22 3a  7b 22 2e 22 3a 7b 7d 2c  |labels":{".":{},|
              000001b0  22 66 3a 6e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 70  |"f:name":{},"f:p|
              000001c0  6f 64 2d 74 65 6d 70 6c  61 74 65 2d 68 61 73 68  |od-template-hash|
              000001d0  22 3a 7b 7d 7d 7d 2c 22  66 3a 73 70 65 63 22 3a  |":{}}},"f:spec":|
              000001e0  7b 22 66 3a 63 6f 6e 74  61 69 6e 65 72 73 22 3a  |{"f:containers":|
              000001f0  7b 22 6b 3a 7b 5c 22 6e  61 6d 65 5c 22 3a 5c 22  |{"k:{\"name\":\"|
              00000200  61 67 6e 68 6f 73 74 5c  22 7d 22 3a 7b 22 2e 22  |agnhost\"}":{"."|
              00000210  3a 7b 7d 2c 22 66 3a 69  6d 61 67 65 22 3a 7b 7d  |:{},"f:image":{}|
              00000220  2c 22 66 3a 69 6d 61 67  65 50 75 6c 6c 50 6f 6c  |,"f:imagePullPol|
              00000230  69 63 79 22 3a 7b 7d 2c  22 66 3a 6e 61 6d 65 22  |icy":{},"f:name"|
              00000240  3a 7b 7d 2c 22 66 3a 72  65 73 6f 75 72 63 65 73  |:{},"f:resources|
              00000250  22 3a 7b 7d 2c 22 66 3a  73 65 63 75 72 69 74 79  |":{},"f:security|
              00000260  43 6f 6e 74 65 78 74 22  3a 7b 7d 2c 22 66 3a 74  |Context":{},"f:t|
              00000270  65 72 6d 69 6e 61 74 69  6f 6e 4d 65 73 73 61 67  |erminationMessag|
              00000280  65 50 61 74 68 22 3a 7b  7d 2c 22 66 3a 74 65 72  |ePath":{},"f:ter|
              00000290  6d 69 6e 61 74 69 6f 6e  4d 65 73 73 61 67 65 50  |minationMessageP|
              000002a0  6f 6c 69 63 79 22 3a 7b  7d 7d 7d 2c 22 66 3a 64  |olicy":{}}},"f:d|
              000002b0  6e 73 50 6f 6c 69 63 79  22 3a 7b 7d 2c 22 66 3a  |nsPolicy":{},"f:|
              000002c0  72 65 73 74 61 72 74 50  6f 6c 69 63 79 22 3a 7b  |restartPolicy":{|
              000002d0  7d 2c 22 66 3a 73 63 68  65 64 75 6c 65 72 4e 61  |},"f:schedulerNa|
              000002e0  6d 65 22 3a 7b 7d 2c 22  66 3a 73 65 63 75 72 69  |me":{},"f:securi|
              000002f0  74 79 43 6f 6e 74 65 78  74 22 3a 7b 7d 2c 22 66  |tyContext":{},"f|
              00000300  3a 74 65 72 6d 69 6e 61  74 69 6f 6e 47 72 61 63  |:terminationGrac|
              00000310  65 50 65 72 69 6f 64 53  65 63 6f 6e 64 73 22 3a  |ePeriodSeconds":|
              00000320  7b 7d 7d 7d 7d 7d                                 |{}}}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828474564,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=130) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  61 76 61 69 6c 61 62 6c  65 52 65 70 6c 69 63 61  |availableReplica|
              00000020  73 22 3a 7b 7d 2c 22 66  3a 66 75 6c 6c 79 4c 61  |s":{},"f:fullyLa|
              00000030  62 65 6c 65 64 52 65 70  6c 69 63 61 73 22 3a 7b  |beledReplicas":{|
              00000040  7d 2c 22 66 3a 6f 62 73  65 72 76 65 64 47 65 6e  |},"f:observedGen|
              00000050  65 72 61 74 69 6f 6e 22  3a 7b 7d 2c 22 66 3a 72  |eration":{},"f:r|
              00000060  65 61 64 79 52 65 70 6c  69 63 61 73 22 3a 7b 7d  |eadyReplicas":{}|
              00000070  2c 22 66 3a 72 65 70 6c  69 63 61 73 22 3a 7b 7d  |,"f:replicas":{}|
              00000080  7d 7d                                             |}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.ReplicaSetSpec) {
      Replicas: (*int32)(1),
      MinReadySeconds: (int32) 10,
      Selector: (*v1.LabelSelector)({
        MatchLabels: (map[string]string) (len=2) {
          (string) (len=4) "name": (string) (len=12) "rollover-pod",
          (string) (len=17) "pod-template-hash": (string) (len=10) "5d484bf7f9"
        },
        MatchExpressions: ([]v1.LabelSelectorRequirement) <nil>
      }),
      Template: (v1.PodTemplateSpec) {
        ObjectMeta: (v1.ObjectMeta) {
          Name: (string) "",
          GenerateName: (string) "",
          Namespace: (string) "",
          SelfLink: (string) "",
          UID: (types.UID) "",
          ResourceVersion: (string) "",
          Generation: (int64) 0,
          CreationTimestamp: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          DeletionTimestamp: (*v1.Time)(<nil>),
          DeletionGracePeriodSeconds: (*int64)(<nil>),
          Labels: (map[string]string) (len=2) {
            (string) (len=4) "name": (string) (len=12) "rollover-pod",
            (string) (len=17) "pod-template-hash": (string) (len=10) "5d484bf7f9"
          },
          Annotations: (map[string]string) <nil>,
          OwnerReferences: ([]v1.OwnerReference) <nil>,
          Finalizers: ([]string) <nil>,
          ManagedFields: ([]v1.ManagedFieldsEntry) <nil>
        },
        Spec: (v1.PodSpec) {
          Volumes: ([]v1.Volume) <nil>,
          InitContainers: ([]v1.Container) <nil>,
          Containers: ([]v1.Container) (len=1) {
            (v1.Container) {
              Name: (string) (len=7) "agnhost",
              Image: (string) (len=44) "registry.k8s.io/e2e-test-images/agnhost:2.45",
              Command: ([]string) <nil>,
              Args: ([]string) <nil>,
              WorkingDir: (string) "",
              Ports: ([]v1.ContainerPort) <nil>,
              EnvFrom: ([]v1.EnvFromSource) <nil>,
              Env: ([]v1.EnvVar) <nil>,
              Resources: (v1.ResourceRequirements) {
                Limits: (v1.ResourceList) <nil>,
                Requests: (v1.ResourceList) <nil>,
                Claims: ([]v1.ResourceClaim) <nil>
              },
              ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
              RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
              VolumeMounts: ([]v1.VolumeMount) <nil>,
              VolumeDevices: ([]v1.VolumeDevice) <nil>,
              LivenessProbe: (*v1.Probe)(<nil>),
              ReadinessProbe: (*v1.Probe)(<nil>),
              StartupProbe: (*v1.Probe)(<nil>),
              Lifecycle: (*v1.Lifecycle)(<nil>),
              TerminationMessagePath: (string) (len=20) "/dev/termination-log",
              TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
              ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
              SecurityContext: (*v1.SecurityContext)({
                Capabilities: (*v1.Capabilities)(<nil>),
                Privileged: (*bool)(<nil>),
                SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
                WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
                RunAsUser: (*int64)(<nil>),
                RunAsGroup: (*int64)(<nil>),
                RunAsNonRoot: (*bool)(<nil>),
                ReadOnlyRootFilesystem: (*bool)(<nil>),
                AllowPrivilegeEscalation: (*bool)(<nil>),
                ProcMount: (*v1.ProcMountType)(<nil>),
                SeccompProfile: (*v1.SeccompProfile)(<nil>)
              }),
              Stdin: (bool) false,
              StdinOnce: (bool) false,
              TTY: (bool) false
            }
          },
          EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
          RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
          TerminationGracePeriodSeconds: (*int64)(0),
          ActiveDeadlineSeconds: (*int64)(<nil>),
          DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
          NodeSelector: (map[string]string) <nil>,
          ServiceAccountName: (string) "",
          DeprecatedServiceAccount: (string) "",
          AutomountServiceAccountToken: (*bool)(<nil>),
          NodeName: (string) "",
          HostNetwork: (bool) false,
          HostPID: (bool) false,
          HostIPC: (bool) false,
          ShareProcessNamespace: (*bool)(<nil>),
          SecurityContext: (*v1.PodSecurityContext)({
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            SupplementalGroups: ([]int64) <nil>,
            FSGroup: (*int64)(<nil>),
            Sysctls: ([]v1.Sysctl) <nil>,
            FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
          Hostname: (string) "",
          Subdomain: (string) "",
          Affinity: (*v1.Affinity)(<nil>),
          SchedulerName: (string) (len=17) "default-scheduler",
          Tolerations: ([]v1.Toleration) <nil>,
          HostAliases: ([]v1.HostAlias) <nil>,
          PriorityClassName: (string) "",
          Priority: (*int32)(<nil>),
          DNSConfig: (*v1.PodDNSConfig)(<nil>),
          ReadinessGates: ([]v1.PodReadinessGate) <nil>,
          RuntimeClassName: (*string)(<nil>),
          EnableServiceLinks: (*bool)(<nil>),
          PreemptionPolicy: (*v1.PreemptionPolicy)(<nil>),
          Overhead: (v1.ResourceList) <nil>,
          TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
          SetHostnameAsFQDN: (*bool)(<nil>),
          OS: (*v1.PodOS)(<nil>),
          HostUsers: (*bool)(<nil>),
          SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
          ResourceClaims: ([]v1.PodResourceClaim) <nil>
        }
      }
    },
    Status: (v1.ReplicaSetStatus) {
      Replicas: (int32) 1,
      FullyLabeledReplicas: (int32) 1,
      ReadyReplicas: (int32) 1,
      AvailableReplicas: (int32) 1,
      ObservedGeneration: (int64) 2,
      Conditions: ([]v1.ReplicaSetCondition) <nil>
    }
  }

  Aug 24 11:49:25.247: INFO: All old ReplicaSets of Deployment "test-rollover-deployment":
  Aug 24 11:49:25.247: INFO: (v1.ReplicaSet) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=24) "test-rollover-controller",
      GenerateName: (string) "",
      Namespace: (string) (len=14) "deployment-789",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "6620fd82-38d2-4999-9b67-e1836bbf807e",
      ResourceVersion: (string) (len=10) "3404900472",
      Generation: (int64) 2,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63828474544,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=12) "rollover-pod",
        (string) (len=3) "pod": (string) (len=5) "httpd"
      },
      Annotations: (map[string]string) (len=2) {
        (string) (len=41) "deployment.kubernetes.io/desired-replicas": (string) (len=1) "1",
        (string) (len=37) "deployment.kubernetes.io/max-replicas": (string) (len=1) "2"
      },
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "Deployment",
          Name: (string) (len=24) "test-rollover-deployment",
          UID: (types.UID) (len=36) "032aea6f-a9a1-41b4-a0be-9839215c63d8",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=3) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "e2e.test",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828474544,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=467) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 6c 61 62 65 6c 73  22 3a 7b 22 2e 22 3a 7b  |f:labels":{".":{|
              00000020  7d 2c 22 66 3a 6e 61 6d  65 22 3a 7b 7d 2c 22 66  |},"f:name":{},"f|
              00000030  3a 70 6f 64 22 3a 7b 7d  7d 7d 2c 22 66 3a 73 70  |:pod":{}}},"f:sp|
              00000040  65 63 22 3a 7b 22 66 3a  73 65 6c 65 63 74 6f 72  |ec":{"f:selector|
              00000050  22 3a 7b 7d 2c 22 66 3a  74 65 6d 70 6c 61 74 65  |":{},"f:template|
              00000060  22 3a 7b 22 66 3a 6d 65  74 61 64 61 74 61 22 3a  |":{"f:metadata":|
              00000070  7b 22 66 3a 6c 61 62 65  6c 73 22 3a 7b 22 2e 22  |{"f:labels":{"."|
              00000080  3a 7b 7d 2c 22 66 3a 6e  61 6d 65 22 3a 7b 7d 2c  |:{},"f:name":{},|
              00000090  22 66 3a 70 6f 64 22 3a  7b 7d 7d 7d 2c 22 66 3a  |"f:pod":{}}},"f:|
              000000a0  73 70 65 63 22 3a 7b 22  66 3a 63 6f 6e 74 61 69  |spec":{"f:contai|
              000000b0  6e 65 72 73 22 3a 7b 22  6b 3a 7b 5c 22 6e 61 6d  |ners":{"k:{\"nam|
              000000c0  65 5c 22 3a 5c 22 68 74  74 70 64 5c 22 7d 22 3a  |e\":\"httpd\"}":|
              000000d0  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 69 6d 61 67 65  |{".":{},"f:image|
              000000e0  22 3a 7b 7d 2c 22 66 3a  69 6d 61 67 65 50 75 6c  |":{},"f:imagePul|
              000000f0  6c 50 6f 6c 69 63 79 22  3a 7b 7d 2c 22 66 3a 6e  |lPolicy":{},"f:n|
              00000100  61 6d 65 22 3a 7b 7d 2c  22 66 3a 72 65 73 6f 75  |ame":{},"f:resou|
              00000110  72 63 65 73 22 3a 7b 7d  2c 22 66 3a 74 65 72 6d  |rces":{},"f:term|
              00000120  69 6e 61 74 69 6f 6e 4d  65 73 73 61 67 65 50 61  |inationMessagePa|
              00000130  74 68 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |th":{},"f:termin|
              00000140  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 6f 6c 69  |ationMessagePoli|
              00000150  63 79 22 3a 7b 7d 7d 7d  2c 22 66 3a 64 6e 73 50  |cy":{}}},"f:dnsP|
              00000160  6f 6c 69 63 79 22 3a 7b  7d 2c 22 66 3a 72 65 73  |olicy":{},"f:res|
              00000170  74 61 72 74 50 6f 6c 69  63 79 22 3a 7b 7d 2c 22  |tartPolicy":{},"|
              00000180  66 3a 73 63 68 65 64 75  6c 65 72 4e 61 6d 65 22  |f:schedulerName"|
              00000190  3a 7b 7d 2c 22 66 3a 73  65 63 75 72 69 74 79 43  |:{},"f:securityC|
              000001a0  6f 6e 74 65 78 74 22 3a  7b 7d 2c 22 66 3a 74 65  |ontext":{},"f:te|
              000001b0  72 6d 69 6e 61 74 69 6f  6e 47 72 61 63 65 50 65  |rminationGracePe|
              000001c0  72 69 6f 64 53 65 63 6f  6e 64 73 22 3a 7b 7d 7d  |riodSeconds":{}}|
              000001d0  7d 7d 7d                                          |}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828474564,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=249) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 61 6e 6e 6f 74 61  74 69 6f 6e 73 22 3a 7b  |f:annotations":{|
              00000020  22 2e 22 3a 7b 7d 2c 22  66 3a 64 65 70 6c 6f 79  |".":{},"f:deploy|
              00000030  6d 65 6e 74 2e 6b 75 62  65 72 6e 65 74 65 73 2e  |ment.kubernetes.|
              00000040  69 6f 2f 64 65 73 69 72  65 64 2d 72 65 70 6c 69  |io/desired-repli|
              00000050  63 61 73 22 3a 7b 7d 2c  22 66 3a 64 65 70 6c 6f  |cas":{},"f:deplo|
              00000060  79 6d 65 6e 74 2e 6b 75  62 65 72 6e 65 74 65 73  |yment.kubernetes|
              00000070  2e 69 6f 2f 6d 61 78 2d  72 65 70 6c 69 63 61 73  |.io/max-replicas|
              00000080  22 3a 7b 7d 7d 2c 22 66  3a 6f 77 6e 65 72 52 65  |":{}},"f:ownerRe|
              00000090  66 65 72 65 6e 63 65 73  22 3a 7b 22 2e 22 3a 7b  |ferences":{".":{|
              000000a0  7d 2c 22 6b 3a 7b 5c 22  75 69 64 5c 22 3a 5c 22  |},"k:{\"uid\":\"|
              000000b0  30 33 32 61 65 61 36 66  2d 61 39 61 31 2d 34 31  |032aea6f-a9a1-41|
              000000c0  62 34 2d 61 30 62 65 2d  39 38 33 39 32 31 35 63  |b4-a0be-9839215c|
              000000d0  36 33 64 38 5c 22 7d 22  3a 7b 7d 7d 7d 2c 22 66  |63d8\"}":{}}},"f|
              000000e0  3a 73 70 65 63 22 3a 7b  22 66 3a 72 65 70 6c 69  |:spec":{"f:repli|
              000000f0  63 61 73 22 3a 7b 7d 7d  7d                       |cas":{}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828474564,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=56) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  6f 62 73 65 72 76 65 64  47 65 6e 65 72 61 74 69  |observedGenerati|
              00000020  6f 6e 22 3a 7b 7d 2c 22  66 3a 72 65 70 6c 69 63  |on":{},"f:replic|
              00000030  61 73 22 3a 7b 7d 7d 7d                           |as":{}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.ReplicaSetSpec) {
      Replicas: (*int32)(0),
      MinReadySeconds: (int32) 0,
      Selector: (*v1.LabelSelector)({
        MatchLabels: (map[string]string) (len=2) {
          (string) (len=4) "name": (string) (len=12) "rollover-pod",
          (string) (len=3) "pod": (string) (len=5) "httpd"
        },
        MatchExpressions: ([]v1.LabelSelectorRequirement) <nil>
      }),
      Template: (v1.PodTemplateSpec) {
        ObjectMeta: (v1.ObjectMeta) {
          Name: (string) "",
          GenerateName: (string) "",
          Namespace: (string) "",
          SelfLink: (string) "",
          UID: (types.UID) "",
          ResourceVersion: (string) "",
          Generation: (int64) 0,
          CreationTimestamp: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          DeletionTimestamp: (*v1.Time)(<nil>),
          DeletionGracePeriodSeconds: (*int64)(<nil>),
          Labels: (map[string]string) (len=2) {
            (string) (len=4) "name": (string) (len=12) "rollover-pod",
            (string) (len=3) "pod": (string) (len=5) "httpd"
          },
          Annotations: (map[string]string) <nil>,
          OwnerReferences: ([]v1.OwnerReference) <nil>,
          Finalizers: ([]string) <nil>,
          ManagedFields: ([]v1.ManagedFieldsEntry) <nil>
        },
        Spec: (v1.PodSpec) {
          Volumes: ([]v1.Volume) <nil>,
          InitContainers: ([]v1.Container) <nil>,
          Containers: ([]v1.Container) (len=1) {
            (v1.Container) {
              Name: (string) (len=5) "httpd",
              Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
              Command: ([]string) <nil>,
              Args: ([]string) <nil>,
              WorkingDir: (string) "",
              Ports: ([]v1.ContainerPort) <nil>,
              EnvFrom: ([]v1.EnvFromSource) <nil>,
              Env: ([]v1.EnvVar) <nil>,
              Resources: (v1.ResourceRequirements) {
                Limits: (v1.ResourceList) <nil>,
                Requests: (v1.ResourceList) <nil>,
                Claims: ([]v1.ResourceClaim) <nil>
              },
              ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
              RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
              VolumeMounts: ([]v1.VolumeMount) <nil>,
              VolumeDevices: ([]v1.VolumeDevice) <nil>,
              LivenessProbe: (*v1.Probe)(<nil>),
              ReadinessProbe: (*v1.Probe)(<nil>),
              StartupProbe: (*v1.Probe)(<nil>),
              Lifecycle: (*v1.Lifecycle)(<nil>),
              TerminationMessagePath: (string) (len=20) "/dev/termination-log",
              TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
              ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
              SecurityContext: (*v1.SecurityContext)(<nil>),
              Stdin: (bool) false,
              StdinOnce: (bool) false,
              TTY: (bool) false
            }
          },
          EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
          RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
          TerminationGracePeriodSeconds: (*int64)(0),
          ActiveDeadlineSeconds: (*int64)(<nil>),
          DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
          NodeSelector: (map[string]string) <nil>,
          ServiceAccountName: (string) "",
          DeprecatedServiceAccount: (string) "",
          AutomountServiceAccountToken: (*bool)(<nil>),
          NodeName: (string) "",
          HostNetwork: (bool) false,
          HostPID: (bool) false,
          HostIPC: (bool) false,
          ShareProcessNamespace: (*bool)(<nil>),
          SecurityContext: (*v1.PodSecurityContext)({
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            SupplementalGroups: ([]int64) <nil>,
            FSGroup: (*int64)(<nil>),
            Sysctls: ([]v1.Sysctl) <nil>,
            FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
          Hostname: (string) "",
          Subdomain: (string) "",
          Affinity: (*v1.Affinity)(<nil>),
          SchedulerName: (string) (len=17) "default-scheduler",
          Tolerations: ([]v1.Toleration) <nil>,
          HostAliases: ([]v1.HostAlias) <nil>,
          PriorityClassName: (string) "",
          Priority: (*int32)(<nil>),
          DNSConfig: (*v1.PodDNSConfig)(<nil>),
          ReadinessGates: ([]v1.PodReadinessGate) <nil>,
          RuntimeClassName: (*string)(<nil>),
          EnableServiceLinks: (*bool)(<nil>),
          PreemptionPolicy: (*v1.PreemptionPolicy)(<nil>),
          Overhead: (v1.ResourceList) <nil>,
          TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
          SetHostnameAsFQDN: (*bool)(<nil>),
          OS: (*v1.PodOS)(<nil>),
          HostUsers: (*bool)(<nil>),
          SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
          ResourceClaims: ([]v1.PodResourceClaim) <nil>
        }
      }
    },
    Status: (v1.ReplicaSetStatus) {
      Replicas: (int32) 0,
      FullyLabeledReplicas: (int32) 0,
      ReadyReplicas: (int32) 0,
      AvailableReplicas: (int32) 0,
      ObservedGeneration: (int64) 2,
      Conditions: ([]v1.ReplicaSetCondition) <nil>
    }
  }

  Aug 24 11:49:25.248: INFO: (v1.ReplicaSet) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=35) "test-rollover-deployment-664fc6c874",
      GenerateName: (string) "",
      Namespace: (string) (len=14) "deployment-789",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "490baa9e-c634-4f8e-a394-dac9bbef95b5",
      ResourceVersion: (string) (len=10) "3404899901",
      Generation: (int64) 2,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63828474551,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=12) "rollover-pod",
        (string) (len=17) "pod-template-hash": (string) (len=10) "664fc6c874"
      },
      Annotations: (map[string]string) (len=3) {
        (string) (len=41) "deployment.kubernetes.io/desired-replicas": (string) (len=1) "1",
        (string) (len=37) "deployment.kubernetes.io/max-replicas": (string) (len=1) "2",
        (string) (len=33) "deployment.kubernetes.io/revision": (string) (len=1) "1"
      },
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "Deployment",
          Name: (string) (len=24) "test-rollover-deployment",
          UID: (types.UID) (len=36) "032aea6f-a9a1-41b4-a0be-9839215c63d8",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828474553,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=810) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 61 6e 6e 6f 74 61  74 69 6f 6e 73 22 3a 7b  |f:annotations":{|
              00000020  22 2e 22 3a 7b 7d 2c 22  66 3a 64 65 70 6c 6f 79  |".":{},"f:deploy|
              00000030  6d 65 6e 74 2e 6b 75 62  65 72 6e 65 74 65 73 2e  |ment.kubernetes.|
              00000040  69 6f 2f 64 65 73 69 72  65 64 2d 72 65 70 6c 69  |io/desired-repli|
              00000050  63 61 73 22 3a 7b 7d 2c  22 66 3a 64 65 70 6c 6f  |cas":{},"f:deplo|
              00000060  79 6d 65 6e 74 2e 6b 75  62 65 72 6e 65 74 65 73  |yment.kubernetes|
              00000070  2e 69 6f 2f 6d 61 78 2d  72 65 70 6c 69 63 61 73  |.io/max-replicas|
              00000080  22 3a 7b 7d 2c 22 66 3a  64 65 70 6c 6f 79 6d 65  |":{},"f:deployme|
              00000090  6e 74 2e 6b 75 62 65 72  6e 65 74 65 73 2e 69 6f  |nt.kubernetes.io|
              000000a0  2f 72 65 76 69 73 69 6f  6e 22 3a 7b 7d 7d 2c 22  |/revision":{}},"|
              000000b0  66 3a 6c 61 62 65 6c 73  22 3a 7b 22 2e 22 3a 7b  |f:labels":{".":{|
              000000c0  7d 2c 22 66 3a 6e 61 6d  65 22 3a 7b 7d 2c 22 66  |},"f:name":{},"f|
              000000d0  3a 70 6f 64 2d 74 65 6d  70 6c 61 74 65 2d 68 61  |:pod-template-ha|
              000000e0  73 68 22 3a 7b 7d 7d 2c  22 66 3a 6f 77 6e 65 72  |sh":{}},"f:owner|
              000000f0  52 65 66 65 72 65 6e 63  65 73 22 3a 7b 22 2e 22  |References":{"."|
              00000100  3a 7b 7d 2c 22 6b 3a 7b  5c 22 75 69 64 5c 22 3a  |:{},"k:{\"uid\":|
              00000110  5c 22 30 33 32 61 65 61  36 66 2d 61 39 61 31 2d  |\"032aea6f-a9a1-|
              00000120  34 31 62 34 2d 61 30 62  65 2d 39 38 33 39 32 31  |41b4-a0be-983921|
              00000130  35 63 36 33 64 38 5c 22  7d 22 3a 7b 7d 7d 7d 2c  |5c63d8\"}":{}}},|
              00000140  22 66 3a 73 70 65 63 22  3a 7b 22 66 3a 6d 69 6e  |"f:spec":{"f:min|
              00000150  52 65 61 64 79 53 65 63  6f 6e 64 73 22 3a 7b 7d  |ReadySeconds":{}|
              00000160  2c 22 66 3a 72 65 70 6c  69 63 61 73 22 3a 7b 7d  |,"f:replicas":{}|
              00000170  2c 22 66 3a 73 65 6c 65  63 74 6f 72 22 3a 7b 7d  |,"f:selector":{}|
              00000180  2c 22 66 3a 74 65 6d 70  6c 61 74 65 22 3a 7b 22  |,"f:template":{"|
              00000190  66 3a 6d 65 74 61 64 61  74 61 22 3a 7b 22 66 3a  |f:metadata":{"f:|
              000001a0  6c 61 62 65 6c 73 22 3a  7b 22 2e 22 3a 7b 7d 2c  |labels":{".":{},|
              000001b0  22 66 3a 6e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 70  |"f:name":{},"f:p|
              000001c0  6f 64 2d 74 65 6d 70 6c  61 74 65 2d 68 61 73 68  |od-template-hash|
              000001d0  22 3a 7b 7d 7d 7d 2c 22  66 3a 73 70 65 63 22 3a  |":{}}},"f:spec":|
              000001e0  7b 22 66 3a 63 6f 6e 74  61 69 6e 65 72 73 22 3a  |{"f:containers":|
              000001f0  7b 22 6b 3a 7b 5c 22 6e  61 6d 65 5c 22 3a 5c 22  |{"k:{\"name\":\"|
              00000200  72 65 64 69 73 2d 73 6c  61 76 65 5c 22 7d 22 3a  |redis-slave\"}":|
              00000210  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 69 6d 61 67 65  |{".":{},"f:image|
              00000220  22 3a 7b 7d 2c 22 66 3a  69 6d 61 67 65 50 75 6c  |":{},"f:imagePul|
              00000230  6c 50 6f 6c 69 63 79 22  3a 7b 7d 2c 22 66 3a 6e  |lPolicy":{},"f:n|
              00000240  61 6d 65 22 3a 7b 7d 2c  22 66 3a 72 65 73 6f 75  |ame":{},"f:resou|
              00000250  72 63 65 73 22 3a 7b 7d  2c 22 66 3a 73 65 63 75  |rces":{},"f:secu|
              00000260  72 69 74 79 43 6f 6e 74  65 78 74 22 3a 7b 7d 2c  |rityContext":{},|
              00000270  22 66 3a 74 65 72 6d 69  6e 61 74 69 6f 6e 4d 65  |"f:terminationMe|
              00000280  73 73 61 67 65 50 61 74  68 22 3a 7b 7d 2c 22 66  |ssagePath":{},"f|
              00000290  3a 74 65 72 6d 69 6e 61  74 69 6f 6e 4d 65 73 73  |:terminationMess|
              000002a0  61 67 65 50 6f 6c 69 63  79 22 3a 7b 7d 7d 7d 2c  |agePolicy":{}}},|
              000002b0  22 66 3a 64 6e 73 50 6f  6c 69 63 79 22 3a 7b 7d  |"f:dnsPolicy":{}|
              000002c0  2c 22 66 3a 72 65 73 74  61 72 74 50 6f 6c 69 63  |,"f:restartPolic|
              000002d0  79 22 3a 7b 7d 2c 22 66  3a 73 63 68 65 64 75 6c  |y":{},"f:schedul|
              000002e0  65 72 4e 61 6d 65 22 3a  7b 7d 2c 22 66 3a 73 65  |erName":{},"f:se|
              000002f0  63 75 72 69 74 79 43 6f  6e 74 65 78 74 22 3a 7b  |curityContext":{|
              00000300  7d 2c 22 66 3a 74 65 72  6d 69 6e 61 74 69 6f 6e  |},"f:termination|
              00000310  47 72 61 63 65 50 65 72  69 6f 64 53 65 63 6f 6e  |GracePeriodSecon|
              00000320  64 73 22 3a 7b 7d 7d 7d  7d 7d                    |ds":{}}}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828474553,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=56) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  6f 62 73 65 72 76 65 64  47 65 6e 65 72 61 74 69  |observedGenerati|
              00000020  6f 6e 22 3a 7b 7d 2c 22  66 3a 72 65 70 6c 69 63  |on":{},"f:replic|
              00000030  61 73 22 3a 7b 7d 7d 7d                           |as":{}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.ReplicaSetSpec) {
      Replicas: (*int32)(0),
      MinReadySeconds: (int32) 10,
      Selector: (*v1.LabelSelector)({
        MatchLabels: (map[string]string) (len=2) {
          (string) (len=4) "name": (string) (len=12) "rollover-pod",
          (string) (len=17) "pod-template-hash": (string) (len=10) "664fc6c874"
        },
        MatchExpressions: ([]v1.LabelSelectorRequirement) <nil>
      }),
      Template: (v1.PodTemplateSpec) {
        ObjectMeta: (v1.ObjectMeta) {
          Name: (string) "",
          GenerateName: (string) "",
          Namespace: (string) "",
          SelfLink: (string) "",
          UID: (types.UID) "",
          ResourceVersion: (string) "",
          Generation: (int64) 0,
          CreationTimestamp: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          DeletionTimestamp: (*v1.Time)(<nil>),
          DeletionGracePeriodSeconds: (*int64)(<nil>),
          Labels: (map[string]string) (len=2) {
            (string) (len=4) "name": (string) (len=12) "rollover-pod",
            (string) (len=17) "pod-template-hash": (string) (len=10) "664fc6c874"
          },
          Annotations: (map[string]string) <nil>,
          OwnerReferences: ([]v1.OwnerReference) <nil>,
          Finalizers: ([]string) <nil>,
          ManagedFields: ([]v1.ManagedFieldsEntry) <nil>
        },
        Spec: (v1.PodSpec) {
          Volumes: ([]v1.Volume) <nil>,
          InitContainers: ([]v1.Container) <nil>,
          Containers: ([]v1.Container) (len=1) {
            (v1.Container) {
              Name: (string) (len=11) "redis-slave",
              Image: (string) (len=47) "gcr.io/google_samples/gb-redisslave:nonexistent",
              Command: ([]string) <nil>,
              Args: ([]string) <nil>,
              WorkingDir: (string) "",
              Ports: ([]v1.ContainerPort) <nil>,
              EnvFrom: ([]v1.EnvFromSource) <nil>,
              Env: ([]v1.EnvVar) <nil>,
              Resources: (v1.ResourceRequirements) {
                Limits: (v1.ResourceList) <nil>,
                Requests: (v1.ResourceList) <nil>,
                Claims: ([]v1.ResourceClaim) <nil>
              },
              ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
              RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
              VolumeMounts: ([]v1.VolumeMount) <nil>,
              VolumeDevices: ([]v1.VolumeDevice) <nil>,
              LivenessProbe: (*v1.Probe)(<nil>),
              ReadinessProbe: (*v1.Probe)(<nil>),
              StartupProbe: (*v1.Probe)(<nil>),
              Lifecycle: (*v1.Lifecycle)(<nil>),
              TerminationMessagePath: (string) (len=20) "/dev/termination-log",
              TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
              ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
              SecurityContext: (*v1.SecurityContext)({
                Capabilities: (*v1.Capabilities)(<nil>),
                Privileged: (*bool)(<nil>),
                SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
                WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
                RunAsUser: (*int64)(<nil>),
                RunAsGroup: (*int64)(<nil>),
                RunAsNonRoot: (*bool)(<nil>),
                ReadOnlyRootFilesystem: (*bool)(<nil>),
                AllowPrivilegeEscalation: (*bool)(<nil>),
                ProcMount: (*v1.ProcMountType)(<nil>),
                SeccompProfile: (*v1.SeccompProfile)(<nil>)
              }),
              Stdin: (bool) false,
              StdinOnce: (bool) false,
              TTY: (bool) false
            }
          },
          EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
          RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
          TerminationGracePeriodSeconds: (*int64)(0),
          ActiveDeadlineSeconds: (*int64)(<nil>),
          DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
          NodeSelector: (map[string]string) <nil>,
          ServiceAccountName: (string) "",
          DeprecatedServiceAccount: (string) "",
          AutomountServiceAccountToken: (*bool)(<nil>),
          NodeName: (string) "",
          HostNetwork: (bool) false,
          HostPID: (bool) false,
          HostIPC: (bool) false,
          ShareProcessNamespace: (*bool)(<nil>),
          SecurityContext: (*v1.PodSecurityContext)({
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            SupplementalGroups: ([]int64) <nil>,
            FSGroup: (*int64)(<nil>),
            Sysctls: ([]v1.Sysctl) <nil>,
            FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
          Hostname: (string) "",
          Subdomain: (string) "",
          Affinity: (*v1.Affinity)(<nil>),
          SchedulerName: (string) (len=17) "default-scheduler",
          Tolerations: ([]v1.Toleration) <nil>,
          HostAliases: ([]v1.HostAlias) <nil>,
          PriorityClassName: (string) "",
          Priority: (*int32)(<nil>),
          DNSConfig: (*v1.PodDNSConfig)(<nil>),
          ReadinessGates: ([]v1.PodReadinessGate) <nil>,
          RuntimeClassName: (*string)(<nil>),
          EnableServiceLinks: (*bool)(<nil>),
          PreemptionPolicy: (*v1.PreemptionPolicy)(<nil>),
          Overhead: (v1.ResourceList) <nil>,
          TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
          SetHostnameAsFQDN: (*bool)(<nil>),
          OS: (*v1.PodOS)(<nil>),
          HostUsers: (*bool)(<nil>),
          SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
          ResourceClaims: ([]v1.PodResourceClaim) <nil>
        }
      }
    },
    Status: (v1.ReplicaSetStatus) {
      Replicas: (int32) 0,
      FullyLabeledReplicas: (int32) 0,
      ReadyReplicas: (int32) 0,
      AvailableReplicas: (int32) 0,
      ObservedGeneration: (int64) 2,
      Conditions: ([]v1.ReplicaSetCondition) <nil>
    }
  }

  Aug 24 11:49:25.258: INFO: Pod "test-rollover-deployment-5d484bf7f9-dk74c" is available:
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=41) "test-rollover-deployment-5d484bf7f9-dk74c",
      GenerateName: (string) (len=36) "test-rollover-deployment-5d484bf7f9-",
      Namespace: (string) (len=14) "deployment-789",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "de42097d-672e-4029-b3fd-86840341dcd8",
      ResourceVersion: (string) (len=10) "3404899938",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63828474553,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=12) "rollover-pod",
        (string) (len=17) "pod-template-hash": (string) (len=10) "5d484bf7f9"
      },
      Annotations: (map[string]string) <nil>,
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=35) "test-rollover-deployment-5d484bf7f9",
          UID: (types.UID) (len=36) "0802c7cd-ad5c-46af-981d-0a185107d1c7",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828474553,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=539) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |.":{},"f:name":{|
              00000040  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              00000050  65 2d 68 61 73 68 22 3a  7b 7d 7d 2c 22 66 3a 6f  |e-hash":{}},"f:o|
              00000060  77 6e 65 72 52 65 66 65  72 65 6e 63 65 73 22 3a  |wnerReferences":|
              00000070  7b 22 2e 22 3a 7b 7d 2c  22 6b 3a 7b 5c 22 75 69  |{".":{},"k:{\"ui|
              00000080  64 5c 22 3a 5c 22 30 38  30 32 63 37 63 64 2d 61  |d\":\"0802c7cd-a|
              00000090  64 35 63 2d 34 36 61 66  2d 39 38 31 64 2d 30 61  |d5c-46af-981d-0a|
              000000a0  31 38 35 31 30 37 64 31  63 37 5c 22 7d 22 3a 7b  |185107d1c7\"}":{|
              000000b0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000000c0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              000000d0  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 61 67 6e  |:{\"name\":\"agn|
              000000e0  68 6f 73 74 5c 22 7d 22  3a 7b 22 2e 22 3a 7b 7d  |host\"}":{".":{}|
              000000f0  2c 22 66 3a 69 6d 61 67  65 22 3a 7b 7d 2c 22 66  |,"f:image":{},"f|
              00000100  3a 69 6d 61 67 65 50 75  6c 6c 50 6f 6c 69 63 79  |:imagePullPolicy|
              00000110  22 3a 7b 7d 2c 22 66 3a  6e 61 6d 65 22 3a 7b 7d  |":{},"f:name":{}|
              00000120  2c 22 66 3a 72 65 73 6f  75 72 63 65 73 22 3a 7b  |,"f:resources":{|
              00000130  7d 2c 22 66 3a 73 65 63  75 72 69 74 79 43 6f 6e  |},"f:securityCon|
              00000140  74 65 78 74 22 3a 7b 7d  2c 22 66 3a 74 65 72 6d  |text":{},"f:term|
              00000150  69 6e 61 74 69 6f 6e 4d  65 73 73 61 67 65 50 61  |inationMessagePa|
              00000160  74 68 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |th":{},"f:termin|
              00000170  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 6f 6c 69  |ationMessagePoli|
              00000180  63 79 22 3a 7b 7d 7d 7d  2c 22 66 3a 64 6e 73 50  |cy":{}}},"f:dnsP|
              00000190  6f 6c 69 63 79 22 3a 7b  7d 2c 22 66 3a 65 6e 61  |olicy":{},"f:ena|
              000001a0  62 6c 65 53 65 72 76 69  63 65 4c 69 6e 6b 73 22  |bleServiceLinks"|
              000001b0  3a 7b 7d 2c 22 66 3a 72  65 73 74 61 72 74 50 6f  |:{},"f:restartPo|
              000001c0  6c 69 63 79 22 3a 7b 7d  2c 22 66 3a 73 63 68 65  |licy":{},"f:sche|
              000001d0  64 75 6c 65 72 4e 61 6d  65 22 3a 7b 7d 2c 22 66  |dulerName":{},"f|
              000001e0  3a 73 65 63 75 72 69 74  79 43 6f 6e 74 65 78 74  |:securityContext|
              000001f0  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000200  69 6f 6e 47 72 61 63 65  50 65 72 69 6f 64 53 65  |ionGracePeriodSe|
              00000210  63 6f 6e 64 73 22 3a 7b  7d 7d 7d                 |conds":{}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=7) "kubelet",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828474554,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=519) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  63 6f 6e 64 69 74 69 6f  6e 73 22 3a 7b 22 6b 3a  |conditions":{"k:|
              00000020  7b 5c 22 74 79 70 65 5c  22 3a 5c 22 43 6f 6e 74  |{\"type\":\"Cont|
              00000030  61 69 6e 65 72 73 52 65  61 64 79 5c 22 7d 22 3a  |ainersReady\"}":|
              00000040  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000050  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000060  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000070  6d 65 22 3a 7b 7d 2c 22  66 3a 73 74 61 74 75 73  |me":{},"f:status|
              00000080  22 3a 7b 7d 2c 22 66 3a  74 79 70 65 22 3a 7b 7d  |":{},"f:type":{}|
              00000090  7d 2c 22 6b 3a 7b 5c 22  74 79 70 65 5c 22 3a 5c  |},"k:{\"type\":\|
              000000a0  22 49 6e 69 74 69 61 6c  69 7a 65 64 5c 22 7d 22  |"Initialized\"}"|
              000000b0  3a 7b 22 2e 22 3a 7b 7d  2c 22 66 3a 6c 61 73 74  |:{".":{},"f:last|
              000000c0  50 72 6f 62 65 54 69 6d  65 22 3a 7b 7d 2c 22 66  |ProbeTime":{},"f|
              000000d0  3a 6c 61 73 74 54 72 61  6e 73 69 74 69 6f 6e 54  |:lastTransitionT|
              000000e0  69 6d 65 22 3a 7b 7d 2c  22 66 3a 73 74 61 74 75  |ime":{},"f:statu|
              000000f0  73 22 3a 7b 7d 2c 22 66  3a 74 79 70 65 22 3a 7b  |s":{},"f:type":{|
              00000100  7d 7d 2c 22 6b 3a 7b 5c  22 74 79 70 65 5c 22 3a  |}},"k:{\"type\":|
              00000110  5c 22 52 65 61 64 79 5c  22 7d 22 3a 7b 22 2e 22  |\"Ready\"}":{"."|
              00000120  3a 7b 7d 2c 22 66 3a 6c  61 73 74 50 72 6f 62 65  |:{},"f:lastProbe|
              00000130  54 69 6d 65 22 3a 7b 7d  2c 22 66 3a 6c 61 73 74  |Time":{},"f:last|
              00000140  54 72 61 6e 73 69 74 69  6f 6e 54 69 6d 65 22 3a  |TransitionTime":|
              00000150  7b 7d 2c 22 66 3a 73 74  61 74 75 73 22 3a 7b 7d  |{},"f:status":{}|
              00000160  2c 22 66 3a 74 79 70 65  22 3a 7b 7d 7d 7d 2c 22  |,"f:type":{}}},"|
              00000170  66 3a 63 6f 6e 74 61 69  6e 65 72 53 74 61 74 75  |f:containerStatu|
              00000180  73 65 73 22 3a 7b 7d 2c  22 66 3a 68 6f 73 74 49  |ses":{},"f:hostI|
              00000190  50 22 3a 7b 7d 2c 22 66  3a 70 68 61 73 65 22 3a  |P":{},"f:phase":|
              000001a0  7b 7d 2c 22 66 3a 70 6f  64 49 50 22 3a 7b 7d 2c  |{},"f:podIP":{},|
              000001b0  22 66 3a 70 6f 64 49 50  73 22 3a 7b 22 2e 22 3a  |"f:podIPs":{".":|
              000001c0  7b 7d 2c 22 6b 3a 7b 5c  22 69 70 5c 22 3a 5c 22  |{},"k:{\"ip\":\"|
              000001d0  31 30 2e 31 30 30 2e 30  2e 32 33 36 5c 22 7d 22  |10.100.0.236\"}"|
              000001e0  3a 7b 22 2e 22 3a 7b 7d  2c 22 66 3a 69 70 22 3a  |:{".":{},"f:ip":|
              000001f0  7b 7d 7d 7d 2c 22 66 3a  73 74 61 72 74 54 69 6d  |{}}},"f:startTim|
              00000200  65 22 3a 7b 7d 7d 7d                              |e":{}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-s5vg6",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  })
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=7) "agnhost",
          Image: (string) (len=44) "registry.k8s.io/e2e-test-images/agnhost:2.45",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-s5vg6",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(0),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=46) "scw-conformance-default-2af6d8b4c6264cc5b9e5e6",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Running",
      Conditions: ([]v1.PodCondition) (len=4) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=11) "Initialized",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828474553,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=5) "Ready",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828474554,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=15) "ContainersReady",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828474554,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828474553,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) (len=11) "172.16.36.3",
      HostIPs: ([]v1.HostIP) <nil>,
      PodIP: (string) (len=12) "10.100.0.236",
      PodIPs: ([]v1.PodIP) (len=1) {
        (v1.PodIP) {
          IP: (string) (len=12) "10.100.0.236"
        }
      },
      StartTime: (*v1.Time)({
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63828474553,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      }),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) (len=1) {
        (v1.ContainerStatus) {
          Name: (string) (len=7) "agnhost",
          State: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)({
              StartedAt: (v1.Time) {
                Time: (time.Time) {
                  wall: (uint64) 0,
                  ext: (int64) 63828474554,
                  loc: (*time.Location)(<already shown>)
                }
              }
            }),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          LastTerminationState: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          Ready: (bool) true,
          RestartCount: (int32) 0,
          Image: (string) (len=44) "registry.k8s.io/e2e-test-images/agnhost:2.45",
          ImageID: (string) (len=111) "registry.k8s.io/e2e-test-images/agnhost@sha256:2c5b5b056076334e4cf431d964d102e44cbca8f1e6b16ac1e477a0ffbe6caac4",
          ContainerID: (string) (len=77) "containerd://b35b3e25d7c5e0745c563afe0bcb7bf11f8b82f257358e74d694729d6088ab8d",
          Started: (*bool)(true),
          AllocatedResources: (v1.ResourceList) <nil>,
          Resources: (*v1.ResourceRequirements)(<nil>)
        }
      },
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }

  Aug 24 11:49:25.260: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "deployment-789" for this suite. @ 08/24/23 11:49:25.27
• [21.312 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-api-machinery] Garbage collector should orphan RS created by deployment when deleteOptions.PropagationPolicy is Orphan [Conformance]
test/e2e/apimachinery/garbage_collector.go:538
  STEP: Creating a kubernetes client @ 08/24/23 11:49:25.284
  Aug 24 11:49:25.284: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename gc @ 08/24/23 11:49:25.285
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 11:49:25.315
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 11:49:25.353
  STEP: create the deployment @ 08/24/23 11:49:25.36
  W0824 11:49:25.371459      22 warnings.go:70] metadata.name: this is used in Pod names and hostnames, which can result in surprising behavior; a DNS label is recommended: [must not contain dots]
  STEP: Wait for the Deployment to create new ReplicaSet @ 08/24/23 11:49:25.371
  STEP: delete the deployment @ 08/24/23 11:49:25.896
  STEP: wait for deployment deletion to see if the garbage collector mistakenly deletes the rs @ 08/24/23 11:49:25.911
  STEP: Gathering metrics @ 08/24/23 11:49:26.492
  W0824 11:49:26.510071      22 metrics_grabber.go:152] Can't find kube-controller-manager pod. Grabbing metrics from kube-controller-manager is disabled.
  Aug 24 11:49:26.510: INFO: For apiserver_request_total:
  For apiserver_request_latency_seconds:
  For apiserver_init_events_total:
  For garbage_collector_attempt_to_delete_queue_latency:
  For garbage_collector_attempt_to_delete_work_duration:
  For garbage_collector_attempt_to_orphan_queue_latency:
  For garbage_collector_attempt_to_orphan_work_duration:
  For garbage_collector_dirty_processing_latency_microseconds:
  For garbage_collector_event_processing_latency_microseconds:
  For garbage_collector_graph_changes_queue_latency:
  For garbage_collector_graph_changes_work_duration:
  For garbage_collector_orphan_processing_latency_microseconds:
  For namespace_queue_latency:
  For namespace_queue_latency_sum:
  For namespace_queue_latency_count:
  For namespace_retries:
  For namespace_work_duration:
  For namespace_work_duration_sum:
  For namespace_work_duration_count:
  For function_duration_seconds:
  For errors_total:
  For evicted_pods_total:

  Aug 24 11:49:26.510: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "gc-2851" for this suite. @ 08/24/23 11:49:26.519
• [1.249 seconds]
------------------------------
SSSSSSSSSSSSSSS
------------------------------
[sig-apps] DisruptionController Listing PodDisruptionBudgets for all namespaces should list and delete a collection of PodDisruptionBudgets [Conformance]
test/e2e/apps/disruption.go:87
  STEP: Creating a kubernetes client @ 08/24/23 11:49:26.534
  Aug 24 11:49:26.534: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename disruption @ 08/24/23 11:49:26.534
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 11:49:26.557
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 11:49:26.563
  STEP: Creating a kubernetes client @ 08/24/23 11:49:26.568
  Aug 24 11:49:26.568: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename disruption-2 @ 08/24/23 11:49:26.57
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 11:49:26.597
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 11:49:26.604
  STEP: Waiting for the pdb to be processed @ 08/24/23 11:49:26.654
  STEP: Waiting for the pdb to be processed @ 08/24/23 11:49:28.684
  STEP: Waiting for the pdb to be processed @ 08/24/23 11:49:30.709
  STEP: listing a collection of PDBs across all namespaces @ 08/24/23 11:49:32.727
  STEP: listing a collection of PDBs in namespace disruption-4284 @ 08/24/23 11:49:32.739
  STEP: deleting a collection of PDBs @ 08/24/23 11:49:32.747
  STEP: Waiting for the PDB collection to be deleted @ 08/24/23 11:49:32.775
  Aug 24 11:49:32.783: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  Aug 24 11:49:32.793: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "disruption-2-7800" for this suite. @ 08/24/23 11:49:32.803
  STEP: Destroying namespace "disruption-4284" for this suite. @ 08/24/23 11:49:32.819
• [6.298 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-network] DNS should provide /etc/hosts entries for the cluster [Conformance]
test/e2e/network/dns.go:117
  STEP: Creating a kubernetes client @ 08/24/23 11:49:32.833
  Aug 24 11:49:32.833: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename dns @ 08/24/23 11:49:32.834
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 11:49:32.892
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 11:49:32.898
  STEP: Running these commands on wheezy: for i in `seq 1 600`; do test -n "$$(getent hosts dns-querier-1.dns-test-service.dns-673.svc.cluster.local)" && echo OK > /results/wheezy_hosts@dns-querier-1.dns-test-service.dns-673.svc.cluster.local;test -n "$$(getent hosts dns-querier-1)" && echo OK > /results/wheezy_hosts@dns-querier-1;sleep 1; done
   @ 08/24/23 11:49:32.905
  STEP: Running these commands on jessie: for i in `seq 1 600`; do test -n "$$(getent hosts dns-querier-1.dns-test-service.dns-673.svc.cluster.local)" && echo OK > /results/jessie_hosts@dns-querier-1.dns-test-service.dns-673.svc.cluster.local;test -n "$$(getent hosts dns-querier-1)" && echo OK > /results/jessie_hosts@dns-querier-1;sleep 1; done
   @ 08/24/23 11:49:32.905
  STEP: creating a pod to probe /etc/hosts @ 08/24/23 11:49:32.905
  STEP: submitting the pod to kubernetes @ 08/24/23 11:49:32.905
  STEP: retrieving the pod @ 08/24/23 11:49:34.946
  STEP: looking for the results for each expected name from probers @ 08/24/23 11:49:34.953
  Aug 24 11:49:35.007: INFO: DNS probes using dns-673/dns-test-02bcca46-489a-4452-a765-3acb3df2a846 succeeded

  Aug 24 11:49:35.007: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: deleting the pod @ 08/24/23 11:49:35.018
  STEP: Destroying namespace "dns-673" for this suite. @ 08/24/23 11:49:35.052
• [2.234 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-api-machinery] Aggregator Should be able to support the 1.17 Sample API Server using the current Aggregator [Conformance]
test/e2e/apimachinery/aggregator.go:96
  STEP: Creating a kubernetes client @ 08/24/23 11:49:35.071
  Aug 24 11:49:35.071: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename aggregator @ 08/24/23 11:49:35.072
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 11:49:35.104
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 11:49:35.11
  Aug 24 11:49:35.116: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Registering the sample API server. @ 08/24/23 11:49:35.117
  Aug 24 11:49:35.749: INFO: Found ClusterRoles; assuming RBAC is enabled.
  Aug 24 11:49:36.291: INFO: deployment "sample-apiserver-deployment" doesn't have the required revision set
  Aug 24 11:49:38.454: INFO: deployment status: v1.DeploymentStatus{ObservedGeneration:1, Replicas:1, UpdatedReplicas:1, ReadyReplicas:0, AvailableReplicas:0, UnavailableReplicas:1, Conditions:[]v1.DeploymentCondition{v1.DeploymentCondition{Type:"Available", Status:"False", LastUpdateTime:time.Date(2023, time.August, 24, 11, 49, 36, 0, time.Local), LastTransitionTime:time.Date(2023, time.August, 24, 11, 49, 36, 0, time.Local), Reason:"MinimumReplicasUnavailable", Message:"Deployment does not have minimum availability."}, v1.DeploymentCondition{Type:"Progressing", Status:"True", LastUpdateTime:time.Date(2023, time.August, 24, 11, 49, 36, 0, time.Local), LastTransitionTime:time.Date(2023, time.August, 24, 11, 49, 36, 0, time.Local), Reason:"ReplicaSetUpdated", Message:"ReplicaSet \"sample-apiserver-deployment-76f465f4f8\" is progressing."}}, CollisionCount:(*int32)(nil)}
  Aug 24 11:49:40.464: INFO: deployment status: v1.DeploymentStatus{ObservedGeneration:1, Replicas:1, UpdatedReplicas:1, ReadyReplicas:0, AvailableReplicas:0, UnavailableReplicas:1, Conditions:[]v1.DeploymentCondition{v1.DeploymentCondition{Type:"Available", Status:"False", LastUpdateTime:time.Date(2023, time.August, 24, 11, 49, 36, 0, time.Local), LastTransitionTime:time.Date(2023, time.August, 24, 11, 49, 36, 0, time.Local), Reason:"MinimumReplicasUnavailable", Message:"Deployment does not have minimum availability."}, v1.DeploymentCondition{Type:"Progressing", Status:"True", LastUpdateTime:time.Date(2023, time.August, 24, 11, 49, 36, 0, time.Local), LastTransitionTime:time.Date(2023, time.August, 24, 11, 49, 36, 0, time.Local), Reason:"ReplicaSetUpdated", Message:"ReplicaSet \"sample-apiserver-deployment-76f465f4f8\" is progressing."}}, CollisionCount:(*int32)(nil)}
  Aug 24 11:49:42.472: INFO: deployment status: v1.DeploymentStatus{ObservedGeneration:1, Replicas:1, UpdatedReplicas:1, ReadyReplicas:0, AvailableReplicas:0, UnavailableReplicas:1, Conditions:[]v1.DeploymentCondition{v1.DeploymentCondition{Type:"Available", Status:"False", LastUpdateTime:time.Date(2023, time.August, 24, 11, 49, 36, 0, time.Local), LastTransitionTime:time.Date(2023, time.August, 24, 11, 49, 36, 0, time.Local), Reason:"MinimumReplicasUnavailable", Message:"Deployment does not have minimum availability."}, v1.DeploymentCondition{Type:"Progressing", Status:"True", LastUpdateTime:time.Date(2023, time.August, 24, 11, 49, 36, 0, time.Local), LastTransitionTime:time.Date(2023, time.August, 24, 11, 49, 36, 0, time.Local), Reason:"ReplicaSetUpdated", Message:"ReplicaSet \"sample-apiserver-deployment-76f465f4f8\" is progressing."}}, CollisionCount:(*int32)(nil)}
  Aug 24 11:49:44.463: INFO: deployment status: v1.DeploymentStatus{ObservedGeneration:1, Replicas:1, UpdatedReplicas:1, ReadyReplicas:0, AvailableReplicas:0, UnavailableReplicas:1, Conditions:[]v1.DeploymentCondition{v1.DeploymentCondition{Type:"Available", Status:"False", LastUpdateTime:time.Date(2023, time.August, 24, 11, 49, 36, 0, time.Local), LastTransitionTime:time.Date(2023, time.August, 24, 11, 49, 36, 0, time.Local), Reason:"MinimumReplicasUnavailable", Message:"Deployment does not have minimum availability."}, v1.DeploymentCondition{Type:"Progressing", Status:"True", LastUpdateTime:time.Date(2023, time.August, 24, 11, 49, 36, 0, time.Local), LastTransitionTime:time.Date(2023, time.August, 24, 11, 49, 36, 0, time.Local), Reason:"ReplicaSetUpdated", Message:"ReplicaSet \"sample-apiserver-deployment-76f465f4f8\" is progressing."}}, CollisionCount:(*int32)(nil)}
  Aug 24 11:49:46.468: INFO: deployment status: v1.DeploymentStatus{ObservedGeneration:1, Replicas:1, UpdatedReplicas:1, ReadyReplicas:0, AvailableReplicas:0, UnavailableReplicas:1, Conditions:[]v1.DeploymentCondition{v1.DeploymentCondition{Type:"Available", Status:"False", LastUpdateTime:time.Date(2023, time.August, 24, 11, 49, 36, 0, time.Local), LastTransitionTime:time.Date(2023, time.August, 24, 11, 49, 36, 0, time.Local), Reason:"MinimumReplicasUnavailable", Message:"Deployment does not have minimum availability."}, v1.DeploymentCondition{Type:"Progressing", Status:"True", LastUpdateTime:time.Date(2023, time.August, 24, 11, 49, 36, 0, time.Local), LastTransitionTime:time.Date(2023, time.August, 24, 11, 49, 36, 0, time.Local), Reason:"ReplicaSetUpdated", Message:"ReplicaSet \"sample-apiserver-deployment-76f465f4f8\" is progressing."}}, CollisionCount:(*int32)(nil)}
  Aug 24 11:49:48.465: INFO: deployment status: v1.DeploymentStatus{ObservedGeneration:1, Replicas:1, UpdatedReplicas:1, ReadyReplicas:0, AvailableReplicas:0, UnavailableReplicas:1, Conditions:[]v1.DeploymentCondition{v1.DeploymentCondition{Type:"Available", Status:"False", LastUpdateTime:time.Date(2023, time.August, 24, 11, 49, 36, 0, time.Local), LastTransitionTime:time.Date(2023, time.August, 24, 11, 49, 36, 0, time.Local), Reason:"MinimumReplicasUnavailable", Message:"Deployment does not have minimum availability."}, v1.DeploymentCondition{Type:"Progressing", Status:"True", LastUpdateTime:time.Date(2023, time.August, 24, 11, 49, 36, 0, time.Local), LastTransitionTime:time.Date(2023, time.August, 24, 11, 49, 36, 0, time.Local), Reason:"ReplicaSetUpdated", Message:"ReplicaSet \"sample-apiserver-deployment-76f465f4f8\" is progressing."}}, CollisionCount:(*int32)(nil)}
  Aug 24 11:49:50.465: INFO: deployment status: v1.DeploymentStatus{ObservedGeneration:1, Replicas:1, UpdatedReplicas:1, ReadyReplicas:0, AvailableReplicas:0, UnavailableReplicas:1, Conditions:[]v1.DeploymentCondition{v1.DeploymentCondition{Type:"Available", Status:"False", LastUpdateTime:time.Date(2023, time.August, 24, 11, 49, 36, 0, time.Local), LastTransitionTime:time.Date(2023, time.August, 24, 11, 49, 36, 0, time.Local), Reason:"MinimumReplicasUnavailable", Message:"Deployment does not have minimum availability."}, v1.DeploymentCondition{Type:"Progressing", Status:"True", LastUpdateTime:time.Date(2023, time.August, 24, 11, 49, 36, 0, time.Local), LastTransitionTime:time.Date(2023, time.August, 24, 11, 49, 36, 0, time.Local), Reason:"ReplicaSetUpdated", Message:"ReplicaSet \"sample-apiserver-deployment-76f465f4f8\" is progressing."}}, CollisionCount:(*int32)(nil)}
  Aug 24 11:49:52.466: INFO: deployment status: v1.DeploymentStatus{ObservedGeneration:1, Replicas:1, UpdatedReplicas:1, ReadyReplicas:0, AvailableReplicas:0, UnavailableReplicas:1, Conditions:[]v1.DeploymentCondition{v1.DeploymentCondition{Type:"Available", Status:"False", LastUpdateTime:time.Date(2023, time.August, 24, 11, 49, 36, 0, time.Local), LastTransitionTime:time.Date(2023, time.August, 24, 11, 49, 36, 0, time.Local), Reason:"MinimumReplicasUnavailable", Message:"Deployment does not have minimum availability."}, v1.DeploymentCondition{Type:"Progressing", Status:"True", LastUpdateTime:time.Date(2023, time.August, 24, 11, 49, 36, 0, time.Local), LastTransitionTime:time.Date(2023, time.August, 24, 11, 49, 36, 0, time.Local), Reason:"ReplicaSetUpdated", Message:"ReplicaSet \"sample-apiserver-deployment-76f465f4f8\" is progressing."}}, CollisionCount:(*int32)(nil)}
  Aug 24 11:49:54.465: INFO: deployment status: v1.DeploymentStatus{ObservedGeneration:1, Replicas:1, UpdatedReplicas:1, ReadyReplicas:0, AvailableReplicas:0, UnavailableReplicas:1, Conditions:[]v1.DeploymentCondition{v1.DeploymentCondition{Type:"Available", Status:"False", LastUpdateTime:time.Date(2023, time.August, 24, 11, 49, 36, 0, time.Local), LastTransitionTime:time.Date(2023, time.August, 24, 11, 49, 36, 0, time.Local), Reason:"MinimumReplicasUnavailable", Message:"Deployment does not have minimum availability."}, v1.DeploymentCondition{Type:"Progressing", Status:"True", LastUpdateTime:time.Date(2023, time.August, 24, 11, 49, 36, 0, time.Local), LastTransitionTime:time.Date(2023, time.August, 24, 11, 49, 36, 0, time.Local), Reason:"ReplicaSetUpdated", Message:"ReplicaSet \"sample-apiserver-deployment-76f465f4f8\" is progressing."}}, CollisionCount:(*int32)(nil)}
  Aug 24 11:49:56.465: INFO: deployment status: v1.DeploymentStatus{ObservedGeneration:1, Replicas:1, UpdatedReplicas:1, ReadyReplicas:0, AvailableReplicas:0, UnavailableReplicas:1, Conditions:[]v1.DeploymentCondition{v1.DeploymentCondition{Type:"Available", Status:"False", LastUpdateTime:time.Date(2023, time.August, 24, 11, 49, 36, 0, time.Local), LastTransitionTime:time.Date(2023, time.August, 24, 11, 49, 36, 0, time.Local), Reason:"MinimumReplicasUnavailable", Message:"Deployment does not have minimum availability."}, v1.DeploymentCondition{Type:"Progressing", Status:"True", LastUpdateTime:time.Date(2023, time.August, 24, 11, 49, 36, 0, time.Local), LastTransitionTime:time.Date(2023, time.August, 24, 11, 49, 36, 0, time.Local), Reason:"ReplicaSetUpdated", Message:"ReplicaSet \"sample-apiserver-deployment-76f465f4f8\" is progressing."}}, CollisionCount:(*int32)(nil)}
  Aug 24 11:49:58.464: INFO: deployment status: v1.DeploymentStatus{ObservedGeneration:1, Replicas:1, UpdatedReplicas:1, ReadyReplicas:0, AvailableReplicas:0, UnavailableReplicas:1, Conditions:[]v1.DeploymentCondition{v1.DeploymentCondition{Type:"Available", Status:"False", LastUpdateTime:time.Date(2023, time.August, 24, 11, 49, 36, 0, time.Local), LastTransitionTime:time.Date(2023, time.August, 24, 11, 49, 36, 0, time.Local), Reason:"MinimumReplicasUnavailable", Message:"Deployment does not have minimum availability."}, v1.DeploymentCondition{Type:"Progressing", Status:"True", LastUpdateTime:time.Date(2023, time.August, 24, 11, 49, 36, 0, time.Local), LastTransitionTime:time.Date(2023, time.August, 24, 11, 49, 36, 0, time.Local), Reason:"ReplicaSetUpdated", Message:"ReplicaSet \"sample-apiserver-deployment-76f465f4f8\" is progressing."}}, CollisionCount:(*int32)(nil)}
  Aug 24 11:50:00.607: INFO: Waited 130.190836ms for the sample-apiserver to be ready to handle requests.
  STEP: Read Status for v1alpha1.wardle.example.com @ 08/24/23 11:50:00.713
  STEP: kubectl patch apiservice v1alpha1.wardle.example.com -p '{"spec":{"versionPriority": 400}}' @ 08/24/23 11:50:00.719
  STEP: List APIServices @ 08/24/23 11:50:00.732
  Aug 24 11:50:00.748: INFO: Found v1alpha1.wardle.example.com in APIServiceList
  STEP: Adding a label to the APIService @ 08/24/23 11:50:00.748
  Aug 24 11:50:00.769: INFO: APIService labels: map[e2e-apiservice:patched]
  STEP: Updating APIService Status @ 08/24/23 11:50:00.769
  Aug 24 11:50:00.789: INFO: updatedStatus.Conditions: []v1.APIServiceCondition{v1.APIServiceCondition{Type:"Available", Status:"True", LastTransitionTime:time.Date(2023, time.August, 24, 11, 50, 0, 0, time.Local), Reason:"Passed", Message:"all checks passed"}, v1.APIServiceCondition{Type:"StatusUpdated", Status:"True", LastTransitionTime:time.Date(1, time.January, 1, 0, 0, 0, 0, time.UTC), Reason:"E2E", Message:"Set from e2e test"}}
  STEP: Confirm that v1alpha1.wardle.example.com /status was updated @ 08/24/23 11:50:00.789
  Aug 24 11:50:00.797: INFO: Observed APIService v1alpha1.wardle.example.com with Labels: map[e2e-apiservice:patched] & Condition: {Available True 2023-08-24 11:50:00 +0000 UTC Passed all checks passed}
  Aug 24 11:50:00.797: INFO: Found APIService v1alpha1.wardle.example.com with Labels: map[e2e-apiservice:patched] & Condition: {StatusUpdated True 0001-01-01 00:00:00 +0000 UTC E2E Set from e2e test}
  Aug 24 11:50:00.797: INFO: Found updated status condition for v1alpha1.wardle.example.com
  STEP: Replace APIService v1alpha1.wardle.example.com @ 08/24/23 11:50:00.797
  Aug 24 11:50:00.817: INFO: Found updated apiService label for "v1alpha1.wardle.example.com"
  STEP: Delete APIService "dynamic-flunder-1113750309" @ 08/24/23 11:50:00.817
  STEP: Recreating test-flunder before removing endpoint via deleteCollection @ 08/24/23 11:50:00.848
  STEP: Read v1alpha1.wardle.example.com /status before patching it @ 08/24/23 11:50:00.865
  STEP: Patch APIService Status @ 08/24/23 11:50:00.873
  STEP: Confirm that v1alpha1.wardle.example.com /status was patched @ 08/24/23 11:50:00.887
  Aug 24 11:50:00.898: INFO: Observed APIService v1alpha1.wardle.example.com with Labels: map[v1alpha1.wardle.example.com:updated] & Conditions: {Available True 2023-08-24 11:50:00 +0000 UTC Passed all checks passed}
  Aug 24 11:50:00.898: INFO: Observed APIService v1alpha1.wardle.example.com with Labels: map[v1alpha1.wardle.example.com:updated] & Conditions: {StatusUpdated True 0001-01-01 00:00:00 +0000 UTC E2E Set from e2e test}
  Aug 24 11:50:00.898: INFO: Found APIService v1alpha1.wardle.example.com with Labels: map[v1alpha1.wardle.example.com:updated] & Conditions: {StatusPatched True 0001-01-01 00:00:00 +0000 UTC E2E Set by e2e test}
  Aug 24 11:50:00.898: INFO: Found patched status condition for v1alpha1.wardle.example.com
  STEP: APIService deleteCollection with labelSelector: "e2e-apiservice=patched" @ 08/24/23 11:50:00.898
  STEP: Confirm that the generated APIService has been deleted @ 08/24/23 11:50:00.914
  Aug 24 11:50:00.915: INFO: Requesting list of APIServices to confirm quantity
  Aug 24 11:50:00.927: INFO: Found 0 APIService with label "e2e-apiservice=patched"
  Aug 24 11:50:00.927: INFO: APIService v1alpha1.wardle.example.com has been deleted.
  Aug 24 11:50:01.177: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "aggregator-9338" for this suite. @ 08/24/23 11:50:01.251
• [26.195 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-node] Secrets should be consumable via the environment [NodeConformance] [Conformance]
test/e2e/common/node/secrets.go:95
  STEP: Creating a kubernetes client @ 08/24/23 11:50:01.266
  Aug 24 11:50:01.266: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename secrets @ 08/24/23 11:50:01.267
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 11:50:01.295
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 11:50:01.301
  STEP: creating secret secrets-8398/secret-test-03ba113a-4b27-4204-ae5a-30d07f02bbf7 @ 08/24/23 11:50:01.306
  STEP: Creating a pod to test consume secrets @ 08/24/23 11:50:01.315
  STEP: Saw pod success @ 08/24/23 11:50:05.362
  Aug 24 11:50:05.370: INFO: Trying to get logs from node scw-conformance-default-2af6d8b4c6264cc5b9e5e6 pod pod-configmaps-82fb0a45-a6ef-4aa1-b8fe-94d0bdd1d97c container env-test: <nil>
  STEP: delete the pod @ 08/24/23 11:50:05.388
  Aug 24 11:50:05.424: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "secrets-8398" for this suite. @ 08/24/23 11:50:05.434
• [4.184 seconds]
------------------------------
S
------------------------------
[sig-apps] Daemon set [Serial] should verify changes to a daemon set status [Conformance]
test/e2e/apps/daemon_set.go:875
  STEP: Creating a kubernetes client @ 08/24/23 11:50:05.451
  Aug 24 11:50:05.451: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename daemonsets @ 08/24/23 11:50:05.451
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 11:50:05.481
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 11:50:05.487
  STEP: Creating simple DaemonSet "daemon-set" @ 08/24/23 11:50:05.549
  STEP: Check that daemon pods launch on every node of the cluster. @ 08/24/23 11:50:05.562
  Aug 24 11:50:05.578: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 0
  Aug 24 11:50:05.578: INFO: Node scw-conformance-default-2af6d8b4c6264cc5b9e5e6 is running 0 daemon pod, expected 1
  Aug 24 11:50:06.598: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 0
  Aug 24 11:50:06.598: INFO: Node scw-conformance-default-2af6d8b4c6264cc5b9e5e6 is running 0 daemon pod, expected 1
  Aug 24 11:50:07.599: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 2
  Aug 24 11:50:07.599: INFO: Number of running nodes: 2, number of available pods: 2 in daemonset daemon-set
  STEP: Getting /status @ 08/24/23 11:50:07.61
  Aug 24 11:50:07.618: INFO: Daemon Set daemon-set has Conditions: []
  STEP: updating the DaemonSet Status @ 08/24/23 11:50:07.618
  Aug 24 11:50:07.640: INFO: updatedStatus.Conditions: []v1.DaemonSetCondition{v1.DaemonSetCondition{Type:"StatusUpdate", Status:"True", LastTransitionTime:time.Date(1, time.January, 1, 0, 0, 0, 0, time.UTC), Reason:"E2E", Message:"Set from e2e test"}}
  STEP: watching for the daemon set status to be updated @ 08/24/23 11:50:07.64
  Aug 24 11:50:07.643: INFO: Observed &DaemonSet event: ADDED
  Aug 24 11:50:07.643: INFO: Observed &DaemonSet event: MODIFIED
  Aug 24 11:50:07.643: INFO: Observed &DaemonSet event: MODIFIED
  Aug 24 11:50:07.643: INFO: Observed &DaemonSet event: MODIFIED
  Aug 24 11:50:07.644: INFO: Observed &DaemonSet event: MODIFIED
  Aug 24 11:50:07.644: INFO: Found daemon set daemon-set in namespace daemonsets-9016 with labels: map[daemonset-name:daemon-set] annotations: map[deprecated.daemonset.template.generation:1] & Conditions: [{StatusUpdate True 0001-01-01 00:00:00 +0000 UTC E2E Set from e2e test}]
  Aug 24 11:50:07.644: INFO: Daemon set daemon-set has an updated status
  STEP: patching the DaemonSet Status @ 08/24/23 11:50:07.644
  STEP: watching for the daemon set status to be patched @ 08/24/23 11:50:07.66
  Aug 24 11:50:07.663: INFO: Observed &DaemonSet event: ADDED
  Aug 24 11:50:07.663: INFO: Observed &DaemonSet event: MODIFIED
  Aug 24 11:50:07.664: INFO: Observed &DaemonSet event: MODIFIED
  Aug 24 11:50:07.664: INFO: Observed &DaemonSet event: MODIFIED
  Aug 24 11:50:07.664: INFO: Observed &DaemonSet event: MODIFIED
  Aug 24 11:50:07.664: INFO: Observed daemon set daemon-set in namespace daemonsets-9016 with annotations: map[deprecated.daemonset.template.generation:1] & Conditions: [{StatusUpdate True 0001-01-01 00:00:00 +0000 UTC E2E Set from e2e test}]
  Aug 24 11:50:07.664: INFO: Observed &DaemonSet event: MODIFIED
  Aug 24 11:50:07.664: INFO: Found daemon set daemon-set in namespace daemonsets-9016 with labels: map[daemonset-name:daemon-set] annotations: map[deprecated.daemonset.template.generation:1] & Conditions: [{StatusPatched True 0001-01-01 00:00:00 +0000 UTC  }]
  Aug 24 11:50:07.664: INFO: Daemon set daemon-set has a patched status
  STEP: Deleting DaemonSet "daemon-set" @ 08/24/23 11:50:07.674
  STEP: deleting DaemonSet.extensions daemon-set in namespace daemonsets-9016, will wait for the garbage collector to delete the pods @ 08/24/23 11:50:07.674
  Aug 24 11:50:07.748: INFO: Deleting DaemonSet.extensions daemon-set took: 15.044087ms
  Aug 24 11:50:07.848: INFO: Terminating DaemonSet.extensions daemon-set pods took: 100.17399ms
  Aug 24 11:50:10.556: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 0
  Aug 24 11:50:10.557: INFO: Number of running nodes: 0, number of available pods: 0 in daemonset daemon-set
  Aug 24 11:50:10.563: INFO: daemonset: {"kind":"DaemonSetList","apiVersion":"apps/v1","metadata":{"resourceVersion":"3404902963"},"items":null}

  Aug 24 11:50:10.571: INFO: pods: {"kind":"PodList","apiVersion":"v1","metadata":{"resourceVersion":"3404902963"},"items":null}

  Aug 24 11:50:10.596: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "daemonsets-9016" for this suite. @ 08/24/23 11:50:10.607
• [5.198 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-apps] Job should run a job to completion when tasks sometimes fail and are locally restarted [Conformance]
test/e2e/apps/job.go:430
  STEP: Creating a kubernetes client @ 08/24/23 11:50:10.651
  Aug 24 11:50:10.651: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename job @ 08/24/23 11:50:10.653
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 11:50:10.68
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 11:50:10.687
  STEP: Creating a job @ 08/24/23 11:50:10.694
  STEP: Ensuring job reaches completions @ 08/24/23 11:50:10.706
  Aug 24 11:50:20.715: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "job-6552" for this suite. @ 08/24/23 11:50:20.724
• [10.086 seconds]
------------------------------
SSSSSSSSSS
------------------------------
[sig-node] Ephemeral Containers [NodeConformance] will start an ephemeral container in an existing pod [Conformance]
test/e2e/common/node/ephemeral_containers.go:51
  STEP: Creating a kubernetes client @ 08/24/23 11:50:20.738
  Aug 24 11:50:20.738: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename ephemeral-containers-test @ 08/24/23 11:50:20.739
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 11:50:20.766
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 11:50:20.772
  STEP: creating a target pod @ 08/24/23 11:50:20.779
  STEP: adding an ephemeral container @ 08/24/23 11:50:22.824
  STEP: checking pod container endpoints @ 08/24/23 11:50:24.871
  Aug 24 11:50:24.872: INFO: ExecWithOptions {Command:[/bin/echo marco] Namespace:ephemeral-containers-test-4066 PodName:ephemeral-containers-target-pod ContainerName:debugger Stdin:<nil> CaptureStdout:true CaptureStderr:true PreserveWhitespace:false Quiet:false}
  Aug 24 11:50:24.872: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  Aug 24 11:50:24.873: INFO: ExecWithOptions: Clientset creation
  Aug 24 11:50:24.873: INFO: ExecWithOptions: execute(POST https://10.96.0.1:443/api/v1/namespaces/ephemeral-containers-test-4066/pods/ephemeral-containers-target-pod/exec?command=%2Fbin%2Fecho&command=marco&container=debugger&container=debugger&stderr=true&stdout=true)
  Aug 24 11:50:24.985: INFO: Exec stderr: ""
  Aug 24 11:50:25.010: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "ephemeral-containers-test-4066" for this suite. @ 08/24/23 11:50:25.024
• [4.300 seconds]
------------------------------
[sig-storage] ConfigMap should be consumable from pods in volume with mappings as non-root [NodeConformance] [Conformance]
test/e2e/common/storage/configmap_volume.go:109
  STEP: Creating a kubernetes client @ 08/24/23 11:50:25.039
  Aug 24 11:50:25.039: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename configmap @ 08/24/23 11:50:25.04
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 11:50:25.071
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 11:50:25.077
  STEP: Creating configMap with name configmap-test-volume-map-f44a4bfa-16ba-489b-9b39-1ad8488a85f2 @ 08/24/23 11:50:25.085
  STEP: Creating a pod to test consume configMaps @ 08/24/23 11:50:25.096
  STEP: Saw pod success @ 08/24/23 11:50:29.143
  Aug 24 11:50:29.153: INFO: Trying to get logs from node scw-conformance-default-2af6d8b4c6264cc5b9e5e6 pod pod-configmaps-80c9083a-a3ae-4dbc-98ec-040f0fc92a9d container agnhost-container: <nil>
  STEP: delete the pod @ 08/24/23 11:50:29.174
  Aug 24 11:50:29.859: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "configmap-8249" for this suite. @ 08/24/23 11:50:29.869
• [4.843 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-api-machinery] CustomResourcePublishOpenAPI [Privileged:ClusterAdmin] removes definition from spec when one version gets changed to not be served [Conformance]
test/e2e/apimachinery/crd_publish_openapi.go:442
  STEP: Creating a kubernetes client @ 08/24/23 11:50:29.884
  Aug 24 11:50:29.884: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename crd-publish-openapi @ 08/24/23 11:50:29.885
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 11:50:29.975
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 11:50:29.982
  STEP: set up a multi version CRD @ 08/24/23 11:50:29.987
  Aug 24 11:50:29.988: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: mark a version not serverd @ 08/24/23 11:50:34.606
  STEP: check the unserved version gets removed @ 08/24/23 11:50:34.647
  STEP: check the other version is not changed @ 08/24/23 11:50:37.263
  Aug 24 11:50:40.819: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "crd-publish-openapi-2965" for this suite. @ 08/24/23 11:50:40.843
• [10.973 seconds]
------------------------------
SSS
------------------------------
[sig-apps] Deployment deployment should delete old replica sets [Conformance]
test/e2e/apps/deployment.go:122
  STEP: Creating a kubernetes client @ 08/24/23 11:50:40.858
  Aug 24 11:50:40.858: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename deployment @ 08/24/23 11:50:40.859
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 11:50:40.89
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 11:50:40.896
  Aug 24 11:50:40.922: INFO: Pod name cleanup-pod: Found 0 pods out of 1
  Aug 24 11:50:45.932: INFO: Pod name cleanup-pod: Found 1 pods out of 1
  STEP: ensuring each pod is running @ 08/24/23 11:50:45.932
  Aug 24 11:50:45.932: INFO: Creating deployment test-cleanup-deployment
  STEP: Waiting for deployment test-cleanup-deployment history to be cleaned up @ 08/24/23 11:50:45.96
  Aug 24 11:50:45.982: INFO: Deployment "test-cleanup-deployment":
  (v1.Deployment) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=23) "test-cleanup-deployment",
      GenerateName: (string) "",
      Namespace: (string) (len=15) "deployment-1579",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "36c6f813-f596-4be5-815d-f3fc370710c4",
      ResourceVersion: (string) (len=10) "3404904577",
      Generation: (int64) 1,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63828474645,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=1) {
        (string) (len=4) "name": (string) (len=11) "cleanup-pod"
      },
      Annotations: (map[string]string) <nil>,
      OwnerReferences: ([]v1.OwnerReference) <nil>,
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=1) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "e2e.test",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828474645,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=637) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 6c 61 62 65 6c 73  22 3a 7b 22 2e 22 3a 7b  |f:labels":{".":{|
              00000020  7d 2c 22 66 3a 6e 61 6d  65 22 3a 7b 7d 7d 7d 2c  |},"f:name":{}}},|
              00000030  22 66 3a 73 70 65 63 22  3a 7b 22 66 3a 70 72 6f  |"f:spec":{"f:pro|
              00000040  67 72 65 73 73 44 65 61  64 6c 69 6e 65 53 65 63  |gressDeadlineSec|
              00000050  6f 6e 64 73 22 3a 7b 7d  2c 22 66 3a 72 65 70 6c  |onds":{},"f:repl|
              00000060  69 63 61 73 22 3a 7b 7d  2c 22 66 3a 72 65 76 69  |icas":{},"f:revi|
              00000070  73 69 6f 6e 48 69 73 74  6f 72 79 4c 69 6d 69 74  |sionHistoryLimit|
              00000080  22 3a 7b 7d 2c 22 66 3a  73 65 6c 65 63 74 6f 72  |":{},"f:selector|
              00000090  22 3a 7b 7d 2c 22 66 3a  73 74 72 61 74 65 67 79  |":{},"f:strategy|
              000000a0  22 3a 7b 22 66 3a 72 6f  6c 6c 69 6e 67 55 70 64  |":{"f:rollingUpd|
              000000b0  61 74 65 22 3a 7b 22 2e  22 3a 7b 7d 2c 22 66 3a  |ate":{".":{},"f:|
              000000c0  6d 61 78 53 75 72 67 65  22 3a 7b 7d 2c 22 66 3a  |maxSurge":{},"f:|
              000000d0  6d 61 78 55 6e 61 76 61  69 6c 61 62 6c 65 22 3a  |maxUnavailable":|
              000000e0  7b 7d 7d 2c 22 66 3a 74  79 70 65 22 3a 7b 7d 7d  |{}},"f:type":{}}|
              000000f0  2c 22 66 3a 74 65 6d 70  6c 61 74 65 22 3a 7b 22  |,"f:template":{"|
              00000100  66 3a 6d 65 74 61 64 61  74 61 22 3a 7b 22 66 3a  |f:metadata":{"f:|
              00000110  6c 61 62 65 6c 73 22 3a  7b 22 2e 22 3a 7b 7d 2c  |labels":{".":{},|
              00000120  22 66 3a 6e 61 6d 65 22  3a 7b 7d 7d 7d 2c 22 66  |"f:name":{}}},"f|
              00000130  3a 73 70 65 63 22 3a 7b  22 66 3a 63 6f 6e 74 61  |:spec":{"f:conta|
              00000140  69 6e 65 72 73 22 3a 7b  22 6b 3a 7b 5c 22 6e 61  |iners":{"k:{\"na|
              00000150  6d 65 5c 22 3a 5c 22 61  67 6e 68 6f 73 74 5c 22  |me\":\"agnhost\"|
              00000160  7d 22 3a 7b 22 2e 22 3a  7b 7d 2c 22 66 3a 69 6d  |}":{".":{},"f:im|
              00000170  61 67 65 22 3a 7b 7d 2c  22 66 3a 69 6d 61 67 65  |age":{},"f:image|
              00000180  50 75 6c 6c 50 6f 6c 69  63 79 22 3a 7b 7d 2c 22  |PullPolicy":{},"|
              00000190  66 3a 6e 61 6d 65 22 3a  7b 7d 2c 22 66 3a 72 65  |f:name":{},"f:re|
              000001a0  73 6f 75 72 63 65 73 22  3a 7b 7d 2c 22 66 3a 73  |sources":{},"f:s|
              000001b0  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              000001c0  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              000001d0  6e 4d 65 73 73 61 67 65  50 61 74 68 22 3a 7b 7d  |nMessagePath":{}|
              000001e0  2c 22 66 3a 74 65 72 6d  69 6e 61 74 69 6f 6e 4d  |,"f:terminationM|
              000001f0  65 73 73 61 67 65 50 6f  6c 69 63 79 22 3a 7b 7d  |essagePolicy":{}|
              00000200  7d 7d 2c 22 66 3a 64 6e  73 50 6f 6c 69 63 79 22  |}},"f:dnsPolicy"|
              00000210  3a 7b 7d 2c 22 66 3a 72  65 73 74 61 72 74 50 6f  |:{},"f:restartPo|
              00000220  6c 69 63 79 22 3a 7b 7d  2c 22 66 3a 73 63 68 65  |licy":{},"f:sche|
              00000230  64 75 6c 65 72 4e 61 6d  65 22 3a 7b 7d 2c 22 66  |dulerName":{},"f|
              00000240  3a 73 65 63 75 72 69 74  79 43 6f 6e 74 65 78 74  |:securityContext|
              00000250  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000260  69 6f 6e 47 72 61 63 65  50 65 72 69 6f 64 53 65  |ionGracePeriodSe|
              00000270  63 6f 6e 64 73 22 3a 7b  7d 7d 7d 7d 7d           |conds":{}}}}}|
            }
          }),
          Subresource: (string) ""
        }
      }
    },
    Spec: (v1.DeploymentSpec) {
      Replicas: (*int32)(1),
      Selector: (*v1.LabelSelector)({
        MatchLabels: (map[string]string) (len=1) {
          (string) (len=4) "name": (string) (len=11) "cleanup-pod"
        },
        MatchExpressions: ([]v1.LabelSelectorRequirement) <nil>
      }),
      Template: (v1.PodTemplateSpec) {
        ObjectMeta: (v1.ObjectMeta) {
          Name: (string) "",
          GenerateName: (string) "",
          Namespace: (string) "",
          SelfLink: (string) "",
          UID: (types.UID) "",
          ResourceVersion: (string) "",
          Generation: (int64) 0,
          CreationTimestamp: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          DeletionTimestamp: (*v1.Time)(<nil>),
          DeletionGracePeriodSeconds: (*int64)(<nil>),
          Labels: (map[string]string) (len=1) {
            (string) (len=4) "name": (string) (len=11) "cleanup-pod"
          },
          Annotations: (map[string]string) <nil>,
          OwnerReferences: ([]v1.OwnerReference) <nil>,
          Finalizers: ([]string) <nil>,
          ManagedFields: ([]v1.ManagedFieldsEntry) <nil>
        },
        Spec: (v1.PodSpec) {
          Volumes: ([]v1.Volume) <nil>,
          InitContainers: ([]v1.Container) <nil>,
          Containers: ([]v1.Container) (len=1) {
            (v1.Container) {
              Name: (string) (len=7) "agnhost",
              Image: (string) (len=44) "registry.k8s.io/e2e-test-images/agnhost:2.45",
              Command: ([]string) <nil>,
              Args: ([]string) <nil>,
              WorkingDir: (string) "",
              Ports: ([]v1.ContainerPort) <nil>,
              EnvFrom: ([]v1.EnvFromSource) <nil>,
              Env: ([]v1.EnvVar) <nil>,
              Resources: (v1.ResourceRequirements) {
                Limits: (v1.ResourceList) <nil>,
                Requests: (v1.ResourceList) <nil>,
                Claims: ([]v1.ResourceClaim) <nil>
              },
              ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
              RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
              VolumeMounts: ([]v1.VolumeMount) <nil>,
              VolumeDevices: ([]v1.VolumeDevice) <nil>,
              LivenessProbe: (*v1.Probe)(<nil>),
              ReadinessProbe: (*v1.Probe)(<nil>),
              StartupProbe: (*v1.Probe)(<nil>),
              Lifecycle: (*v1.Lifecycle)(<nil>),
              TerminationMessagePath: (string) (len=20) "/dev/termination-log",
              TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
              ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
              SecurityContext: (*v1.SecurityContext)({
                Capabilities: (*v1.Capabilities)(<nil>),
                Privileged: (*bool)(<nil>),
                SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
                WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
                RunAsUser: (*int64)(<nil>),
                RunAsGroup: (*int64)(<nil>),
                RunAsNonRoot: (*bool)(<nil>),
                ReadOnlyRootFilesystem: (*bool)(<nil>),
                AllowPrivilegeEscalation: (*bool)(<nil>),
                ProcMount: (*v1.ProcMountType)(<nil>),
                SeccompProfile: (*v1.SeccompProfile)(<nil>)
              }),
              Stdin: (bool) false,
              StdinOnce: (bool) false,
              TTY: (bool) false
            }
          },
          EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
          RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
          TerminationGracePeriodSeconds: (*int64)(0),
          ActiveDeadlineSeconds: (*int64)(<nil>),
          DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
          NodeSelector: (map[string]string) <nil>,
          ServiceAccountName: (string) "",
          DeprecatedServiceAccount: (string) "",
          AutomountServiceAccountToken: (*bool)(<nil>),
          NodeName: (string) "",
          HostNetwork: (bool) false,
          HostPID: (bool) false,
          HostIPC: (bool) false,
          ShareProcessNamespace: (*bool)(<nil>),
          SecurityContext: (*v1.PodSecurityContext)({
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            SupplementalGroups: ([]int64) <nil>,
            FSGroup: (*int64)(<nil>),
            Sysctls: ([]v1.Sysctl) <nil>,
            FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
          Hostname: (string) "",
          Subdomain: (string) "",
          Affinity: (*v1.Affinity)(<nil>),
          SchedulerName: (string) (len=17) "default-scheduler",
          Tolerations: ([]v1.Toleration) <nil>,
          HostAliases: ([]v1.HostAlias) <nil>,
          PriorityClassName: (string) "",
          Priority: (*int32)(<nil>),
          DNSConfig: (*v1.PodDNSConfig)(<nil>),
          ReadinessGates: ([]v1.PodReadinessGate) <nil>,
          RuntimeClassName: (*string)(<nil>),
          EnableServiceLinks: (*bool)(<nil>),
          PreemptionPolicy: (*v1.PreemptionPolicy)(<nil>),
          Overhead: (v1.ResourceList) <nil>,
          TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
          SetHostnameAsFQDN: (*bool)(<nil>),
          OS: (*v1.PodOS)(<nil>),
          HostUsers: (*bool)(<nil>),
          SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
          ResourceClaims: ([]v1.PodResourceClaim) <nil>
        }
      },
      Strategy: (v1.DeploymentStrategy) {
        Type: (v1.DeploymentStrategyType) (len=13) "RollingUpdate",
        RollingUpdate: (*v1.RollingUpdateDeployment)({
          MaxUnavailable: (*intstr.IntOrString)({
            Type: (intstr.Type) 1,
            IntVal: (int32) 0,
            StrVal: (string) (len=3) "25%"
          }),
          MaxSurge: (*intstr.IntOrString)({
            Type: (intstr.Type) 1,
            IntVal: (int32) 0,
            StrVal: (string) (len=3) "25%"
          })
        })
      },
      MinReadySeconds: (int32) 0,
      RevisionHistoryLimit: (*int32)(0),
      Paused: (bool) false,
      ProgressDeadlineSeconds: (*int32)(600)
    },
    Status: (v1.DeploymentStatus) {
      ObservedGeneration: (int64) 0,
      Replicas: (int32) 0,
      UpdatedReplicas: (int32) 0,
      ReadyReplicas: (int32) 0,
      AvailableReplicas: (int32) 0,
      UnavailableReplicas: (int32) 0,
      Conditions: ([]v1.DeploymentCondition) <nil>,
      CollisionCount: (*int32)(<nil>)
    }
  }


  Aug 24 11:50:45.992: INFO: New ReplicaSet "test-cleanup-deployment-58dcc84f74" of Deployment "test-cleanup-deployment":
  (v1.ReplicaSet) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=34) "test-cleanup-deployment-58dcc84f74",
      GenerateName: (string) "",
      Namespace: (string) (len=15) "deployment-1579",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "12bc1d77-d677-4321-8adf-7b64ccb029e3",
      ResourceVersion: (string) (len=10) "3404904580",
      Generation: (int64) 1,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63828474645,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=11) "cleanup-pod",
        (string) (len=17) "pod-template-hash": (string) (len=10) "58dcc84f74"
      },
      Annotations: (map[string]string) (len=3) {
        (string) (len=41) "deployment.kubernetes.io/desired-replicas": (string) (len=1) "1",
        (string) (len=37) "deployment.kubernetes.io/max-replicas": (string) (len=1) "2",
        (string) (len=33) "deployment.kubernetes.io/revision": (string) (len=1) "1"
      },
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "Deployment",
          Name: (string) (len=23) "test-cleanup-deployment",
          UID: (types.UID) (len=36) "36c6f813-f596-4be5-815d-f3fc370710c4",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=1) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828474645,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=783) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 61 6e 6e 6f 74 61  74 69 6f 6e 73 22 3a 7b  |f:annotations":{|
              00000020  22 2e 22 3a 7b 7d 2c 22  66 3a 64 65 70 6c 6f 79  |".":{},"f:deploy|
              00000030  6d 65 6e 74 2e 6b 75 62  65 72 6e 65 74 65 73 2e  |ment.kubernetes.|
              00000040  69 6f 2f 64 65 73 69 72  65 64 2d 72 65 70 6c 69  |io/desired-repli|
              00000050  63 61 73 22 3a 7b 7d 2c  22 66 3a 64 65 70 6c 6f  |cas":{},"f:deplo|
              00000060  79 6d 65 6e 74 2e 6b 75  62 65 72 6e 65 74 65 73  |yment.kubernetes|
              00000070  2e 69 6f 2f 6d 61 78 2d  72 65 70 6c 69 63 61 73  |.io/max-replicas|
              00000080  22 3a 7b 7d 2c 22 66 3a  64 65 70 6c 6f 79 6d 65  |":{},"f:deployme|
              00000090  6e 74 2e 6b 75 62 65 72  6e 65 74 65 73 2e 69 6f  |nt.kubernetes.io|
              000000a0  2f 72 65 76 69 73 69 6f  6e 22 3a 7b 7d 7d 2c 22  |/revision":{}},"|
              000000b0  66 3a 6c 61 62 65 6c 73  22 3a 7b 22 2e 22 3a 7b  |f:labels":{".":{|
              000000c0  7d 2c 22 66 3a 6e 61 6d  65 22 3a 7b 7d 2c 22 66  |},"f:name":{},"f|
              000000d0  3a 70 6f 64 2d 74 65 6d  70 6c 61 74 65 2d 68 61  |:pod-template-ha|
              000000e0  73 68 22 3a 7b 7d 7d 2c  22 66 3a 6f 77 6e 65 72  |sh":{}},"f:owner|
              000000f0  52 65 66 65 72 65 6e 63  65 73 22 3a 7b 22 2e 22  |References":{"."|
              00000100  3a 7b 7d 2c 22 6b 3a 7b  5c 22 75 69 64 5c 22 3a  |:{},"k:{\"uid\":|
              00000110  5c 22 33 36 63 36 66 38  31 33 2d 66 35 39 36 2d  |\"36c6f813-f596-|
              00000120  34 62 65 35 2d 38 31 35  64 2d 66 33 66 63 33 37  |4be5-815d-f3fc37|
              00000130  30 37 31 30 63 34 5c 22  7d 22 3a 7b 7d 7d 7d 2c  |0710c4\"}":{}}},|
              00000140  22 66 3a 73 70 65 63 22  3a 7b 22 66 3a 72 65 70  |"f:spec":{"f:rep|
              00000150  6c 69 63 61 73 22 3a 7b  7d 2c 22 66 3a 73 65 6c  |licas":{},"f:sel|
              00000160  65 63 74 6f 72 22 3a 7b  7d 2c 22 66 3a 74 65 6d  |ector":{},"f:tem|
              00000170  70 6c 61 74 65 22 3a 7b  22 66 3a 6d 65 74 61 64  |plate":{"f:metad|
              00000180  61 74 61 22 3a 7b 22 66  3a 6c 61 62 65 6c 73 22  |ata":{"f:labels"|
              00000190  3a 7b 22 2e 22 3a 7b 7d  2c 22 66 3a 6e 61 6d 65  |:{".":{},"f:name|
              000001a0  22 3a 7b 7d 2c 22 66 3a  70 6f 64 2d 74 65 6d 70  |":{},"f:pod-temp|
              000001b0  6c 61 74 65 2d 68 61 73  68 22 3a 7b 7d 7d 7d 2c  |late-hash":{}}},|
              000001c0  22 66 3a 73 70 65 63 22  3a 7b 22 66 3a 63 6f 6e  |"f:spec":{"f:con|
              000001d0  74 61 69 6e 65 72 73 22  3a 7b 22 6b 3a 7b 5c 22  |tainers":{"k:{\"|
              000001e0  6e 61 6d 65 5c 22 3a 5c  22 61 67 6e 68 6f 73 74  |name\":\"agnhost|
              000001f0  5c 22 7d 22 3a 7b 22 2e  22 3a 7b 7d 2c 22 66 3a  |\"}":{".":{},"f:|
              00000200  69 6d 61 67 65 22 3a 7b  7d 2c 22 66 3a 69 6d 61  |image":{},"f:ima|
              00000210  67 65 50 75 6c 6c 50 6f  6c 69 63 79 22 3a 7b 7d  |gePullPolicy":{}|
              00000220  2c 22 66 3a 6e 61 6d 65  22 3a 7b 7d 2c 22 66 3a  |,"f:name":{},"f:|
              00000230  72 65 73 6f 75 72 63 65  73 22 3a 7b 7d 2c 22 66  |resources":{},"f|
              00000240  3a 73 65 63 75 72 69 74  79 43 6f 6e 74 65 78 74  |:securityContext|
              00000250  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000260  69 6f 6e 4d 65 73 73 61  67 65 50 61 74 68 22 3a  |ionMessagePath":|
              00000270  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000280  6e 4d 65 73 73 61 67 65  50 6f 6c 69 63 79 22 3a  |nMessagePolicy":|
              00000290  7b 7d 7d 7d 2c 22 66 3a  64 6e 73 50 6f 6c 69 63  |{}}},"f:dnsPolic|
              000002a0  79 22 3a 7b 7d 2c 22 66  3a 72 65 73 74 61 72 74  |y":{},"f:restart|
              000002b0  50 6f 6c 69 63 79 22 3a  7b 7d 2c 22 66 3a 73 63  |Policy":{},"f:sc|
              000002c0  68 65 64 75 6c 65 72 4e  61 6d 65 22 3a 7b 7d 2c  |hedulerName":{},|
              000002d0  22 66 3a 73 65 63 75 72  69 74 79 43 6f 6e 74 65  |"f:securityConte|
              000002e0  78 74 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |xt":{},"f:termin|
              000002f0  61 74 69 6f 6e 47 72 61  63 65 50 65 72 69 6f 64  |ationGracePeriod|
              00000300  53 65 63 6f 6e 64 73 22  3a 7b 7d 7d 7d 7d 7d     |Seconds":{}}}}}|
            }
          }),
          Subresource: (string) ""
        }
      }
    },
    Spec: (v1.ReplicaSetSpec) {
      Replicas: (*int32)(1),
      MinReadySeconds: (int32) 0,
      Selector: (*v1.LabelSelector)({
        MatchLabels: (map[string]string) (len=2) {
          (string) (len=4) "name": (string) (len=11) "cleanup-pod",
          (string) (len=17) "pod-template-hash": (string) (len=10) "58dcc84f74"
        },
        MatchExpressions: ([]v1.LabelSelectorRequirement) <nil>
      }),
      Template: (v1.PodTemplateSpec) {
        ObjectMeta: (v1.ObjectMeta) {
          Name: (string) "",
          GenerateName: (string) "",
          Namespace: (string) "",
          SelfLink: (string) "",
          UID: (types.UID) "",
          ResourceVersion: (string) "",
          Generation: (int64) 0,
          CreationTimestamp: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          DeletionTimestamp: (*v1.Time)(<nil>),
          DeletionGracePeriodSeconds: (*int64)(<nil>),
          Labels: (map[string]string) (len=2) {
            (string) (len=4) "name": (string) (len=11) "cleanup-pod",
            (string) (len=17) "pod-template-hash": (string) (len=10) "58dcc84f74"
          },
          Annotations: (map[string]string) <nil>,
          OwnerReferences: ([]v1.OwnerReference) <nil>,
          Finalizers: ([]string) <nil>,
          ManagedFields: ([]v1.ManagedFieldsEntry) <nil>
        },
        Spec: (v1.PodSpec) {
          Volumes: ([]v1.Volume) <nil>,
          InitContainers: ([]v1.Container) <nil>,
          Containers: ([]v1.Container) (len=1) {
            (v1.Container) {
              Name: (string) (len=7) "agnhost",
              Image: (string) (len=44) "registry.k8s.io/e2e-test-images/agnhost:2.45",
              Command: ([]string) <nil>,
              Args: ([]string) <nil>,
              WorkingDir: (string) "",
              Ports: ([]v1.ContainerPort) <nil>,
              EnvFrom: ([]v1.EnvFromSource) <nil>,
              Env: ([]v1.EnvVar) <nil>,
              Resources: (v1.ResourceRequirements) {
                Limits: (v1.ResourceList) <nil>,
                Requests: (v1.ResourceList) <nil>,
                Claims: ([]v1.ResourceClaim) <nil>
              },
              ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
              RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
              VolumeMounts: ([]v1.VolumeMount) <nil>,
              VolumeDevices: ([]v1.VolumeDevice) <nil>,
              LivenessProbe: (*v1.Probe)(<nil>),
              ReadinessProbe: (*v1.Probe)(<nil>),
              StartupProbe: (*v1.Probe)(<nil>),
              Lifecycle: (*v1.Lifecycle)(<nil>),
              TerminationMessagePath: (string) (len=20) "/dev/termination-log",
              TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
              ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
              SecurityContext: (*v1.SecurityContext)({
                Capabilities: (*v1.Capabilities)(<nil>),
                Privileged: (*bool)(<nil>),
                SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
                WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
                RunAsUser: (*int64)(<nil>),
                RunAsGroup: (*int64)(<nil>),
                RunAsNonRoot: (*bool)(<nil>),
                ReadOnlyRootFilesystem: (*bool)(<nil>),
                AllowPrivilegeEscalation: (*bool)(<nil>),
                ProcMount: (*v1.ProcMountType)(<nil>),
                SeccompProfile: (*v1.SeccompProfile)(<nil>)
              }),
              Stdin: (bool) false,
              StdinOnce: (bool) false,
              TTY: (bool) false
            }
          },
          EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
          RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
          TerminationGracePeriodSeconds: (*int64)(0),
          ActiveDeadlineSeconds: (*int64)(<nil>),
          DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
          NodeSelector: (map[string]string) <nil>,
          ServiceAccountName: (string) "",
          DeprecatedServiceAccount: (string) "",
          AutomountServiceAccountToken: (*bool)(<nil>),
          NodeName: (string) "",
          HostNetwork: (bool) false,
          HostPID: (bool) false,
          HostIPC: (bool) false,
          ShareProcessNamespace: (*bool)(<nil>),
          SecurityContext: (*v1.PodSecurityContext)({
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            SupplementalGroups: ([]int64) <nil>,
            FSGroup: (*int64)(<nil>),
            Sysctls: ([]v1.Sysctl) <nil>,
            FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
          Hostname: (string) "",
          Subdomain: (string) "",
          Affinity: (*v1.Affinity)(<nil>),
          SchedulerName: (string) (len=17) "default-scheduler",
          Tolerations: ([]v1.Toleration) <nil>,
          HostAliases: ([]v1.HostAlias) <nil>,
          PriorityClassName: (string) "",
          Priority: (*int32)(<nil>),
          DNSConfig: (*v1.PodDNSConfig)(<nil>),
          ReadinessGates: ([]v1.PodReadinessGate) <nil>,
          RuntimeClassName: (*string)(<nil>),
          EnableServiceLinks: (*bool)(<nil>),
          PreemptionPolicy: (*v1.PreemptionPolicy)(<nil>),
          Overhead: (v1.ResourceList) <nil>,
          TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
          SetHostnameAsFQDN: (*bool)(<nil>),
          OS: (*v1.PodOS)(<nil>),
          HostUsers: (*bool)(<nil>),
          SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
          ResourceClaims: ([]v1.PodResourceClaim) <nil>
        }
      }
    },
    Status: (v1.ReplicaSetStatus) {
      Replicas: (int32) 0,
      FullyLabeledReplicas: (int32) 0,
      ReadyReplicas: (int32) 0,
      AvailableReplicas: (int32) 0,
      ObservedGeneration: (int64) 0,
      Conditions: ([]v1.ReplicaSetCondition) <nil>
    }
  }

  Aug 24 11:50:45.994: INFO: All old ReplicaSets of Deployment "test-cleanup-deployment":
  Aug 24 11:50:45.995: INFO: (v1.ReplicaSet) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=23) "test-cleanup-controller",
      GenerateName: (string) "",
      Namespace: (string) (len=15) "deployment-1579",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "5cd7c2d4-c4fc-438b-a139-49d791ec66e9",
      ResourceVersion: (string) (len=10) "3404904579",
      Generation: (int64) 1,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63828474640,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=11) "cleanup-pod",
        (string) (len=3) "pod": (string) (len=5) "httpd"
      },
      Annotations: (map[string]string) <nil>,
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "Deployment",
          Name: (string) (len=23) "test-cleanup-deployment",
          UID: (types.UID) (len=36) "36c6f813-f596-4be5-815d-f3fc370710c4",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=3) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "e2e.test",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828474640,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=483) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 6c 61 62 65 6c 73  22 3a 7b 22 2e 22 3a 7b  |f:labels":{".":{|
              00000020  7d 2c 22 66 3a 6e 61 6d  65 22 3a 7b 7d 2c 22 66  |},"f:name":{},"f|
              00000030  3a 70 6f 64 22 3a 7b 7d  7d 7d 2c 22 66 3a 73 70  |:pod":{}}},"f:sp|
              00000040  65 63 22 3a 7b 22 66 3a  72 65 70 6c 69 63 61 73  |ec":{"f:replicas|
              00000050  22 3a 7b 7d 2c 22 66 3a  73 65 6c 65 63 74 6f 72  |":{},"f:selector|
              00000060  22 3a 7b 7d 2c 22 66 3a  74 65 6d 70 6c 61 74 65  |":{},"f:template|
              00000070  22 3a 7b 22 66 3a 6d 65  74 61 64 61 74 61 22 3a  |":{"f:metadata":|
              00000080  7b 22 66 3a 6c 61 62 65  6c 73 22 3a 7b 22 2e 22  |{"f:labels":{"."|
              00000090  3a 7b 7d 2c 22 66 3a 6e  61 6d 65 22 3a 7b 7d 2c  |:{},"f:name":{},|
              000000a0  22 66 3a 70 6f 64 22 3a  7b 7d 7d 7d 2c 22 66 3a  |"f:pod":{}}},"f:|
              000000b0  73 70 65 63 22 3a 7b 22  66 3a 63 6f 6e 74 61 69  |spec":{"f:contai|
              000000c0  6e 65 72 73 22 3a 7b 22  6b 3a 7b 5c 22 6e 61 6d  |ners":{"k:{\"nam|
              000000d0  65 5c 22 3a 5c 22 68 74  74 70 64 5c 22 7d 22 3a  |e\":\"httpd\"}":|
              000000e0  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 69 6d 61 67 65  |{".":{},"f:image|
              000000f0  22 3a 7b 7d 2c 22 66 3a  69 6d 61 67 65 50 75 6c  |":{},"f:imagePul|
              00000100  6c 50 6f 6c 69 63 79 22  3a 7b 7d 2c 22 66 3a 6e  |lPolicy":{},"f:n|
              00000110  61 6d 65 22 3a 7b 7d 2c  22 66 3a 72 65 73 6f 75  |ame":{},"f:resou|
              00000120  72 63 65 73 22 3a 7b 7d  2c 22 66 3a 74 65 72 6d  |rces":{},"f:term|
              00000130  69 6e 61 74 69 6f 6e 4d  65 73 73 61 67 65 50 61  |inationMessagePa|
              00000140  74 68 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |th":{},"f:termin|
              00000150  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 6f 6c 69  |ationMessagePoli|
              00000160  63 79 22 3a 7b 7d 7d 7d  2c 22 66 3a 64 6e 73 50  |cy":{}}},"f:dnsP|
              00000170  6f 6c 69 63 79 22 3a 7b  7d 2c 22 66 3a 72 65 73  |olicy":{},"f:res|
              00000180  74 61 72 74 50 6f 6c 69  63 79 22 3a 7b 7d 2c 22  |tartPolicy":{},"|
              00000190  66 3a 73 63 68 65 64 75  6c 65 72 4e 61 6d 65 22  |f:schedulerName"|
              000001a0  3a 7b 7d 2c 22 66 3a 73  65 63 75 72 69 74 79 43  |:{},"f:securityC|
              000001b0  6f 6e 74 65 78 74 22 3a  7b 7d 2c 22 66 3a 74 65  |ontext":{},"f:te|
              000001c0  72 6d 69 6e 61 74 69 6f  6e 47 72 61 63 65 50 65  |rminationGracePe|
              000001d0  72 69 6f 64 53 65 63 6f  6e 64 73 22 3a 7b 7d 7d  |riodSeconds":{}}|
              000001e0  7d 7d 7d                                          |}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828474642,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=130) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  61 76 61 69 6c 61 62 6c  65 52 65 70 6c 69 63 61  |availableReplica|
              00000020  73 22 3a 7b 7d 2c 22 66  3a 66 75 6c 6c 79 4c 61  |s":{},"f:fullyLa|
              00000030  62 65 6c 65 64 52 65 70  6c 69 63 61 73 22 3a 7b  |beledReplicas":{|
              00000040  7d 2c 22 66 3a 6f 62 73  65 72 76 65 64 47 65 6e  |},"f:observedGen|
              00000050  65 72 61 74 69 6f 6e 22  3a 7b 7d 2c 22 66 3a 72  |eration":{},"f:r|
              00000060  65 61 64 79 52 65 70 6c  69 63 61 73 22 3a 7b 7d  |eadyReplicas":{}|
              00000070  2c 22 66 3a 72 65 70 6c  69 63 61 73 22 3a 7b 7d  |,"f:replicas":{}|
              00000080  7d 7d                                             |}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828474645,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=103) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 6f 77 6e 65 72 52  65 66 65 72 65 6e 63 65  |f:ownerReference|
              00000020  73 22 3a 7b 22 2e 22 3a  7b 7d 2c 22 6b 3a 7b 5c  |s":{".":{},"k:{\|
              00000030  22 75 69 64 5c 22 3a 5c  22 33 36 63 36 66 38 31  |"uid\":\"36c6f81|
              00000040  33 2d 66 35 39 36 2d 34  62 65 35 2d 38 31 35 64  |3-f596-4be5-815d|
              00000050  2d 66 33 66 63 33 37 30  37 31 30 63 34 5c 22 7d  |-f3fc370710c4\"}|
              00000060  22 3a 7b 7d 7d 7d 7d                              |":{}}}}|
            }
          }),
          Subresource: (string) ""
        }
      }
    },
    Spec: (v1.ReplicaSetSpec) {
      Replicas: (*int32)(1),
      MinReadySeconds: (int32) 0,
      Selector: (*v1.LabelSelector)({
        MatchLabels: (map[string]string) (len=2) {
          (string) (len=4) "name": (string) (len=11) "cleanup-pod",
          (string) (len=3) "pod": (string) (len=5) "httpd"
        },
        MatchExpressions: ([]v1.LabelSelectorRequirement) <nil>
      }),
      Template: (v1.PodTemplateSpec) {
        ObjectMeta: (v1.ObjectMeta) {
          Name: (string) "",
          GenerateName: (string) "",
          Namespace: (string) "",
          SelfLink: (string) "",
          UID: (types.UID) "",
          ResourceVersion: (string) "",
          Generation: (int64) 0,
          CreationTimestamp: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          DeletionTimestamp: (*v1.Time)(<nil>),
          DeletionGracePeriodSeconds: (*int64)(<nil>),
          Labels: (map[string]string) (len=2) {
            (string) (len=4) "name": (string) (len=11) "cleanup-pod",
            (string) (len=3) "pod": (string) (len=5) "httpd"
          },
          Annotations: (map[string]string) <nil>,
          OwnerReferences: ([]v1.OwnerReference) <nil>,
          Finalizers: ([]string) <nil>,
          ManagedFields: ([]v1.ManagedFieldsEntry) <nil>
        },
        Spec: (v1.PodSpec) {
          Volumes: ([]v1.Volume) <nil>,
          InitContainers: ([]v1.Container) <nil>,
          Containers: ([]v1.Container) (len=1) {
            (v1.Container) {
              Name: (string) (len=5) "httpd",
              Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
              Command: ([]string) <nil>,
              Args: ([]string) <nil>,
              WorkingDir: (string) "",
              Ports: ([]v1.ContainerPort) <nil>,
              EnvFrom: ([]v1.EnvFromSource) <nil>,
              Env: ([]v1.EnvVar) <nil>,
              Resources: (v1.ResourceRequirements) {
                Limits: (v1.ResourceList) <nil>,
                Requests: (v1.ResourceList) <nil>,
                Claims: ([]v1.ResourceClaim) <nil>
              },
              ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
              RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
              VolumeMounts: ([]v1.VolumeMount) <nil>,
              VolumeDevices: ([]v1.VolumeDevice) <nil>,
              LivenessProbe: (*v1.Probe)(<nil>),
              ReadinessProbe: (*v1.Probe)(<nil>),
              StartupProbe: (*v1.Probe)(<nil>),
              Lifecycle: (*v1.Lifecycle)(<nil>),
              TerminationMessagePath: (string) (len=20) "/dev/termination-log",
              TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
              ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
              SecurityContext: (*v1.SecurityContext)(<nil>),
              Stdin: (bool) false,
              StdinOnce: (bool) false,
              TTY: (bool) false
            }
          },
          EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
          RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
          TerminationGracePeriodSeconds: (*int64)(0),
          ActiveDeadlineSeconds: (*int64)(<nil>),
          DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
          NodeSelector: (map[string]string) <nil>,
          ServiceAccountName: (string) "",
          DeprecatedServiceAccount: (string) "",
          AutomountServiceAccountToken: (*bool)(<nil>),
          NodeName: (string) "",
          HostNetwork: (bool) false,
          HostPID: (bool) false,
          HostIPC: (bool) false,
          ShareProcessNamespace: (*bool)(<nil>),
          SecurityContext: (*v1.PodSecurityContext)({
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            SupplementalGroups: ([]int64) <nil>,
            FSGroup: (*int64)(<nil>),
            Sysctls: ([]v1.Sysctl) <nil>,
            FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
          Hostname: (string) "",
          Subdomain: (string) "",
          Affinity: (*v1.Affinity)(<nil>),
          SchedulerName: (string) (len=17) "default-scheduler",
          Tolerations: ([]v1.Toleration) <nil>,
          HostAliases: ([]v1.HostAlias) <nil>,
          PriorityClassName: (string) "",
          Priority: (*int32)(<nil>),
          DNSConfig: (*v1.PodDNSConfig)(<nil>),
          ReadinessGates: ([]v1.PodReadinessGate) <nil>,
          RuntimeClassName: (*string)(<nil>),
          EnableServiceLinks: (*bool)(<nil>),
          PreemptionPolicy: (*v1.PreemptionPolicy)(<nil>),
          Overhead: (v1.ResourceList) <nil>,
          TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
          SetHostnameAsFQDN: (*bool)(<nil>),
          OS: (*v1.PodOS)(<nil>),
          HostUsers: (*bool)(<nil>),
          SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
          ResourceClaims: ([]v1.PodResourceClaim) <nil>
        }
      }
    },
    Status: (v1.ReplicaSetStatus) {
      Replicas: (int32) 1,
      FullyLabeledReplicas: (int32) 1,
      ReadyReplicas: (int32) 1,
      AvailableReplicas: (int32) 1,
      ObservedGeneration: (int64) 1,
      Conditions: ([]v1.ReplicaSetCondition) <nil>
    }
  }

  Aug 24 11:50:46.051: INFO: Pod "test-cleanup-controller-8zxck" is available:
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=29) "test-cleanup-controller-8zxck",
      GenerateName: (string) (len=24) "test-cleanup-controller-",
      Namespace: (string) (len=15) "deployment-1579",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "0e0c4991-9069-4712-bf84-02d486647113",
      ResourceVersion: (string) (len=10) "3404904443",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63828474640,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=11) "cleanup-pod",
        (string) (len=3) "pod": (string) (len=5) "httpd"
      },
      Annotations: (map[string]string) <nil>,
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=23) "test-cleanup-controller",
          UID: (types.UID) (len=36) "5cd7c2d4-c4fc-438b-a139-49d791ec66e9",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828474640,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=500) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |.":{},"f:name":{|
              00000040  7d 2c 22 66 3a 70 6f 64  22 3a 7b 7d 7d 2c 22 66  |},"f:pod":{}},"f|
              00000050  3a 6f 77 6e 65 72 52 65  66 65 72 65 6e 63 65 73  |:ownerReferences|
              00000060  22 3a 7b 22 2e 22 3a 7b  7d 2c 22 6b 3a 7b 5c 22  |":{".":{},"k:{\"|
              00000070  75 69 64 5c 22 3a 5c 22  35 63 64 37 63 32 64 34  |uid\":\"5cd7c2d4|
              00000080  2d 63 34 66 63 2d 34 33  38 62 2d 61 31 33 39 2d  |-c4fc-438b-a139-|
              00000090  34 39 64 37 39 31 65 63  36 36 65 39 5c 22 7d 22  |49d791ec66e9\"}"|
              000000a0  3a 7b 7d 7d 7d 2c 22 66  3a 73 70 65 63 22 3a 7b  |:{}}},"f:spec":{|
              000000b0  22 66 3a 63 6f 6e 74 61  69 6e 65 72 73 22 3a 7b  |"f:containers":{|
              000000c0  22 6b 3a 7b 5c 22 6e 61  6d 65 5c 22 3a 5c 22 68  |"k:{\"name\":\"h|
              000000d0  74 74 70 64 5c 22 7d 22  3a 7b 22 2e 22 3a 7b 7d  |ttpd\"}":{".":{}|
              000000e0  2c 22 66 3a 69 6d 61 67  65 22 3a 7b 7d 2c 22 66  |,"f:image":{},"f|
              000000f0  3a 69 6d 61 67 65 50 75  6c 6c 50 6f 6c 69 63 79  |:imagePullPolicy|
              00000100  22 3a 7b 7d 2c 22 66 3a  6e 61 6d 65 22 3a 7b 7d  |":{},"f:name":{}|
              00000110  2c 22 66 3a 72 65 73 6f  75 72 63 65 73 22 3a 7b  |,"f:resources":{|
              00000120  7d 2c 22 66 3a 74 65 72  6d 69 6e 61 74 69 6f 6e  |},"f:termination|
              00000130  4d 65 73 73 61 67 65 50  61 74 68 22 3a 7b 7d 2c  |MessagePath":{},|
              00000140  22 66 3a 74 65 72 6d 69  6e 61 74 69 6f 6e 4d 65  |"f:terminationMe|
              00000150  73 73 61 67 65 50 6f 6c  69 63 79 22 3a 7b 7d 7d  |ssagePolicy":{}}|
              00000160  7d 2c 22 66 3a 64 6e 73  50 6f 6c 69 63 79 22 3a  |},"f:dnsPolicy":|
              00000170  7b 7d 2c 22 66 3a 65 6e  61 62 6c 65 53 65 72 76  |{},"f:enableServ|
              00000180  69 63 65 4c 69 6e 6b 73  22 3a 7b 7d 2c 22 66 3a  |iceLinks":{},"f:|
              00000190  72 65 73 74 61 72 74 50  6f 6c 69 63 79 22 3a 7b  |restartPolicy":{|
              000001a0  7d 2c 22 66 3a 73 63 68  65 64 75 6c 65 72 4e 61  |},"f:schedulerNa|
              000001b0  6d 65 22 3a 7b 7d 2c 22  66 3a 73 65 63 75 72 69  |me":{},"f:securi|
              000001c0  74 79 43 6f 6e 74 65 78  74 22 3a 7b 7d 2c 22 66  |tyContext":{},"f|
              000001d0  3a 74 65 72 6d 69 6e 61  74 69 6f 6e 47 72 61 63  |:terminationGrac|
              000001e0  65 50 65 72 69 6f 64 53  65 63 6f 6e 64 73 22 3a  |ePeriodSeconds":|
              000001f0  7b 7d 7d 7d                                       |{}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=7) "kubelet",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828474642,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=518) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  63 6f 6e 64 69 74 69 6f  6e 73 22 3a 7b 22 6b 3a  |conditions":{"k:|
              00000020  7b 5c 22 74 79 70 65 5c  22 3a 5c 22 43 6f 6e 74  |{\"type\":\"Cont|
              00000030  61 69 6e 65 72 73 52 65  61 64 79 5c 22 7d 22 3a  |ainersReady\"}":|
              00000040  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000050  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000060  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000070  6d 65 22 3a 7b 7d 2c 22  66 3a 73 74 61 74 75 73  |me":{},"f:status|
              00000080  22 3a 7b 7d 2c 22 66 3a  74 79 70 65 22 3a 7b 7d  |":{},"f:type":{}|
              00000090  7d 2c 22 6b 3a 7b 5c 22  74 79 70 65 5c 22 3a 5c  |},"k:{\"type\":\|
              000000a0  22 49 6e 69 74 69 61 6c  69 7a 65 64 5c 22 7d 22  |"Initialized\"}"|
              000000b0  3a 7b 22 2e 22 3a 7b 7d  2c 22 66 3a 6c 61 73 74  |:{".":{},"f:last|
              000000c0  50 72 6f 62 65 54 69 6d  65 22 3a 7b 7d 2c 22 66  |ProbeTime":{},"f|
              000000d0  3a 6c 61 73 74 54 72 61  6e 73 69 74 69 6f 6e 54  |:lastTransitionT|
              000000e0  69 6d 65 22 3a 7b 7d 2c  22 66 3a 73 74 61 74 75  |ime":{},"f:statu|
              000000f0  73 22 3a 7b 7d 2c 22 66  3a 74 79 70 65 22 3a 7b  |s":{},"f:type":{|
              00000100  7d 7d 2c 22 6b 3a 7b 5c  22 74 79 70 65 5c 22 3a  |}},"k:{\"type\":|
              00000110  5c 22 52 65 61 64 79 5c  22 7d 22 3a 7b 22 2e 22  |\"Ready\"}":{"."|
              00000120  3a 7b 7d 2c 22 66 3a 6c  61 73 74 50 72 6f 62 65  |:{},"f:lastProbe|
              00000130  54 69 6d 65 22 3a 7b 7d  2c 22 66 3a 6c 61 73 74  |Time":{},"f:last|
              00000140  54 72 61 6e 73 69 74 69  6f 6e 54 69 6d 65 22 3a  |TransitionTime":|
              00000150  7b 7d 2c 22 66 3a 73 74  61 74 75 73 22 3a 7b 7d  |{},"f:status":{}|
              00000160  2c 22 66 3a 74 79 70 65  22 3a 7b 7d 7d 7d 2c 22  |,"f:type":{}}},"|
              00000170  66 3a 63 6f 6e 74 61 69  6e 65 72 53 74 61 74 75  |f:containerStatu|
              00000180  73 65 73 22 3a 7b 7d 2c  22 66 3a 68 6f 73 74 49  |ses":{},"f:hostI|
              00000190  50 22 3a 7b 7d 2c 22 66  3a 70 68 61 73 65 22 3a  |P":{},"f:phase":|
              000001a0  7b 7d 2c 22 66 3a 70 6f  64 49 50 22 3a 7b 7d 2c  |{},"f:podIP":{},|
              000001b0  22 66 3a 70 6f 64 49 50  73 22 3a 7b 22 2e 22 3a  |"f:podIPs":{".":|
              000001c0  7b 7d 2c 22 6b 3a 7b 5c  22 69 70 5c 22 3a 5c 22  |{},"k:{\"ip\":\"|
              000001d0  31 30 2e 31 30 30 2e 30  2e 39 32 5c 22 7d 22 3a  |10.100.0.92\"}":|
              000001e0  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 69 70 22 3a 7b  |{".":{},"f:ip":{|
              000001f0  7d 7d 7d 2c 22 66 3a 73  74 61 72 74 54 69 6d 65  |}}},"f:startTime|
              00000200  22 3a 7b 7d 7d 7d                                 |":{}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-4xbzp",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  })
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=5) "httpd",
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-4xbzp",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)(<nil>),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(0),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=46) "scw-conformance-default-2af6d8b4c6264cc5b9e5e6",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Running",
      Conditions: ([]v1.PodCondition) (len=4) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=11) "Initialized",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828474640,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=5) "Ready",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828474642,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=15) "ContainersReady",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828474642,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828474640,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) (len=11) "172.16.36.3",
      HostIPs: ([]v1.HostIP) <nil>,
      PodIP: (string) (len=11) "10.100.0.92",
      PodIPs: ([]v1.PodIP) (len=1) {
        (v1.PodIP) {
          IP: (string) (len=11) "10.100.0.92"
        }
      },
      StartTime: (*v1.Time)({
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63828474640,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      }),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) (len=1) {
        (v1.ContainerStatus) {
          Name: (string) (len=5) "httpd",
          State: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)({
              StartedAt: (v1.Time) {
                Time: (time.Time) {
                  wall: (uint64) 0,
                  ext: (int64) 63828474641,
                  loc: (*time.Location)(<already shown>)
                }
              }
            }),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          LastTerminationState: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          Ready: (bool) true,
          RestartCount: (int32) 0,
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          ImageID: (string) (len=109) "registry.k8s.io/e2e-test-images/httpd@sha256:148b022f5c5da426fc2f3c14b5c0867e58ef05961510c84749ac1fddcb0fef22",
          ContainerID: (string) (len=77) "containerd://3dfe14f4f5e6d7928399fd7dc1cbeeb9cc4157f298bccf2fe7822aa4ce261df4",
          Started: (*bool)(true),
          AllocatedResources: (v1.ResourceList) <nil>,
          Resources: (*v1.ResourceRequirements)(<nil>)
        }
      },
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }

  Aug 24 11:50:46.053: INFO: Pod "test-cleanup-deployment-58dcc84f74-rd4ws" is not available:
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=40) "test-cleanup-deployment-58dcc84f74-rd4ws",
      GenerateName: (string) (len=35) "test-cleanup-deployment-58dcc84f74-",
      Namespace: (string) (len=15) "deployment-1579",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "e9948fbc-0236-4aba-80e1-bc2ed8eaca70",
      ResourceVersion: (string) (len=10) "3404904584",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63828474646,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=11) "cleanup-pod",
        (string) (len=17) "pod-template-hash": (string) (len=10) "58dcc84f74"
      },
      Annotations: (map[string]string) <nil>,
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=34) "test-cleanup-deployment-58dcc84f74",
          UID: (types.UID) (len=36) "12bc1d77-d677-4321-8adf-7b64ccb029e3",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=1) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828474646,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=539) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |.":{},"f:name":{|
              00000040  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              00000050  65 2d 68 61 73 68 22 3a  7b 7d 7d 2c 22 66 3a 6f  |e-hash":{}},"f:o|
              00000060  77 6e 65 72 52 65 66 65  72 65 6e 63 65 73 22 3a  |wnerReferences":|
              00000070  7b 22 2e 22 3a 7b 7d 2c  22 6b 3a 7b 5c 22 75 69  |{".":{},"k:{\"ui|
              00000080  64 5c 22 3a 5c 22 31 32  62 63 31 64 37 37 2d 64  |d\":\"12bc1d77-d|
              00000090  36 37 37 2d 34 33 32 31  2d 38 61 64 66 2d 37 62  |677-4321-8adf-7b|
              000000a0  36 34 63 63 62 30 32 39  65 33 5c 22 7d 22 3a 7b  |64ccb029e3\"}":{|
              000000b0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000000c0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              000000d0  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 61 67 6e  |:{\"name\":\"agn|
              000000e0  68 6f 73 74 5c 22 7d 22  3a 7b 22 2e 22 3a 7b 7d  |host\"}":{".":{}|
              000000f0  2c 22 66 3a 69 6d 61 67  65 22 3a 7b 7d 2c 22 66  |,"f:image":{},"f|
              00000100  3a 69 6d 61 67 65 50 75  6c 6c 50 6f 6c 69 63 79  |:imagePullPolicy|
              00000110  22 3a 7b 7d 2c 22 66 3a  6e 61 6d 65 22 3a 7b 7d  |":{},"f:name":{}|
              00000120  2c 22 66 3a 72 65 73 6f  75 72 63 65 73 22 3a 7b  |,"f:resources":{|
              00000130  7d 2c 22 66 3a 73 65 63  75 72 69 74 79 43 6f 6e  |},"f:securityCon|
              00000140  74 65 78 74 22 3a 7b 7d  2c 22 66 3a 74 65 72 6d  |text":{},"f:term|
              00000150  69 6e 61 74 69 6f 6e 4d  65 73 73 61 67 65 50 61  |inationMessagePa|
              00000160  74 68 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |th":{},"f:termin|
              00000170  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 6f 6c 69  |ationMessagePoli|
              00000180  63 79 22 3a 7b 7d 7d 7d  2c 22 66 3a 64 6e 73 50  |cy":{}}},"f:dnsP|
              00000190  6f 6c 69 63 79 22 3a 7b  7d 2c 22 66 3a 65 6e 61  |olicy":{},"f:ena|
              000001a0  62 6c 65 53 65 72 76 69  63 65 4c 69 6e 6b 73 22  |bleServiceLinks"|
              000001b0  3a 7b 7d 2c 22 66 3a 72  65 73 74 61 72 74 50 6f  |:{},"f:restartPo|
              000001c0  6c 69 63 79 22 3a 7b 7d  2c 22 66 3a 73 63 68 65  |licy":{},"f:sche|
              000001d0  64 75 6c 65 72 4e 61 6d  65 22 3a 7b 7d 2c 22 66  |dulerName":{},"f|
              000001e0  3a 73 65 63 75 72 69 74  79 43 6f 6e 74 65 78 74  |:securityContext|
              000001f0  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000200  69 6f 6e 47 72 61 63 65  50 65 72 69 6f 64 53 65  |ionGracePeriodSe|
              00000210  63 6f 6e 64 73 22 3a 7b  7d 7d 7d                 |conds":{}}}|
            }
          }),
          Subresource: (string) ""
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-c9gw4",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  })
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=7) "agnhost",
          Image: (string) (len=44) "registry.k8s.io/e2e-test-images/agnhost:2.45",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-c9gw4",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(0),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) "",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Pending",
      Conditions: ([]v1.PodCondition) <nil>,
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) "",
      HostIPs: ([]v1.HostIP) <nil>,
      PodIP: (string) "",
      PodIPs: ([]v1.PodIP) <nil>,
      StartTime: (*v1.Time)(<nil>),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) <nil>,
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }

  Aug 24 11:50:46.054: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "deployment-1579" for this suite. @ 08/24/23 11:50:46.064
• [5.292 seconds]
------------------------------
SSSSS
------------------------------
[sig-node] Pods should support remote command execution over websockets [NodeConformance] [Conformance]
test/e2e/common/node/pods.go:537
  STEP: Creating a kubernetes client @ 08/24/23 11:50:46.15
  Aug 24 11:50:46.150: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename pods @ 08/24/23 11:50:46.151
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 11:50:46.186
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 11:50:46.25
  Aug 24 11:50:46.257: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: creating the pod @ 08/24/23 11:50:46.258
  STEP: submitting the pod to kubernetes @ 08/24/23 11:50:46.258
  Aug 24 11:50:48.446: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "pods-6900" for this suite. @ 08/24/23 11:50:48.458
• [2.324 seconds]
------------------------------
SSSSSSSSS
------------------------------
[sig-network] Services should delete a collection of services [Conformance]
test/e2e/network/service.go:3552
  STEP: Creating a kubernetes client @ 08/24/23 11:50:48.475
  Aug 24 11:50:48.475: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename services @ 08/24/23 11:50:48.476
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 11:50:48.503
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 11:50:48.511
  STEP: creating a collection of services @ 08/24/23 11:50:48.518
  Aug 24 11:50:48.518: INFO: Creating e2e-svc-a-vclb2
  Aug 24 11:50:48.543: INFO: Creating e2e-svc-b-tgzqb
  Aug 24 11:50:48.569: INFO: Creating e2e-svc-c-hchpp
  STEP: deleting service collection @ 08/24/23 11:50:48.604
  Aug 24 11:50:48.677: INFO: Collection of services has been deleted
  Aug 24 11:50:48.677: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "services-4959" for this suite. @ 08/24/23 11:50:48.685
• [0.224 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-storage] ConfigMap binary data should be reflected in volume [NodeConformance] [Conformance]
test/e2e/common/storage/configmap_volume.go:175
  STEP: Creating a kubernetes client @ 08/24/23 11:50:48.701
  Aug 24 11:50:48.701: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename configmap @ 08/24/23 11:50:48.703
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 11:50:48.756
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 11:50:48.764
  STEP: Creating configMap with name configmap-test-upd-574ba658-2a74-43f0-9597-216ab8fef35f @ 08/24/23 11:50:48.778
  STEP: Creating the pod @ 08/24/23 11:50:48.787
  STEP: Waiting for pod with text data @ 08/24/23 11:50:50.822
  STEP: Waiting for pod with binary data @ 08/24/23 11:50:50.841
  Aug 24 11:50:50.858: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "configmap-8795" for this suite. @ 08/24/23 11:50:50.869
• [2.184 seconds]
------------------------------
SSSSSS
------------------------------
[sig-cli] Kubectl client Guestbook application should create and stop a working application  [Conformance]
test/e2e/kubectl/kubectl.go:396
  STEP: Creating a kubernetes client @ 08/24/23 11:50:50.886
  Aug 24 11:50:50.886: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename kubectl @ 08/24/23 11:50:50.887
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 11:50:50.92
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 11:50:50.928
  STEP: creating all guestbook components @ 08/24/23 11:50:50.936
  Aug 24 11:50:50.936: INFO: apiVersion: v1
  kind: Service
  metadata:
    name: agnhost-replica
    labels:
      app: agnhost
      role: replica
      tier: backend
  spec:
    ports:
    - port: 6379
    selector:
      app: agnhost
      role: replica
      tier: backend

  Aug 24 11:50:50.936: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1002171096 --namespace=kubectl-1964 create -f -'
  Aug 24 11:50:53.386: INFO: stderr: ""
  Aug 24 11:50:53.386: INFO: stdout: "service/agnhost-replica created\n"
  Aug 24 11:50:53.386: INFO: apiVersion: v1
  kind: Service
  metadata:
    name: agnhost-primary
    labels:
      app: agnhost
      role: primary
      tier: backend
  spec:
    ports:
    - port: 6379
      targetPort: 6379
    selector:
      app: agnhost
      role: primary
      tier: backend

  Aug 24 11:50:53.386: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1002171096 --namespace=kubectl-1964 create -f -'
  Aug 24 11:50:53.711: INFO: stderr: ""
  Aug 24 11:50:53.711: INFO: stdout: "service/agnhost-primary created\n"
  Aug 24 11:50:53.711: INFO: apiVersion: v1
  kind: Service
  metadata:
    name: frontend
    labels:
      app: guestbook
      tier: frontend
  spec:
    # if your cluster supports it, uncomment the following to automatically create
    # an external load-balanced IP for the frontend service.
    # type: LoadBalancer
    ports:
    - port: 80
    selector:
      app: guestbook
      tier: frontend

  Aug 24 11:50:53.711: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1002171096 --namespace=kubectl-1964 create -f -'
  Aug 24 11:50:54.079: INFO: stderr: ""
  Aug 24 11:50:54.079: INFO: stdout: "service/frontend created\n"
  Aug 24 11:50:54.079: INFO: apiVersion: apps/v1
  kind: Deployment
  metadata:
    name: frontend
  spec:
    replicas: 3
    selector:
      matchLabels:
        app: guestbook
        tier: frontend
    template:
      metadata:
        labels:
          app: guestbook
          tier: frontend
      spec:
        containers:
        - name: guestbook-frontend
          image: registry.k8s.io/e2e-test-images/agnhost:2.45
          args: [ "guestbook", "--backend-port", "6379" ]
          resources:
            requests:
              cpu: 100m
              memory: 100Mi
          ports:
          - containerPort: 80

  Aug 24 11:50:54.079: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1002171096 --namespace=kubectl-1964 create -f -'
  Aug 24 11:50:54.561: INFO: stderr: ""
  Aug 24 11:50:54.561: INFO: stdout: "deployment.apps/frontend created\n"
  Aug 24 11:50:54.561: INFO: apiVersion: apps/v1
  kind: Deployment
  metadata:
    name: agnhost-primary
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: agnhost
        role: primary
        tier: backend
    template:
      metadata:
        labels:
          app: agnhost
          role: primary
          tier: backend
      spec:
        containers:
        - name: primary
          image: registry.k8s.io/e2e-test-images/agnhost:2.45
          args: [ "guestbook", "--http-port", "6379" ]
          resources:
            requests:
              cpu: 100m
              memory: 100Mi
          ports:
          - containerPort: 6379

  Aug 24 11:50:54.562: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1002171096 --namespace=kubectl-1964 create -f -'
  Aug 24 11:50:54.967: INFO: stderr: ""
  Aug 24 11:50:54.967: INFO: stdout: "deployment.apps/agnhost-primary created\n"
  Aug 24 11:50:54.967: INFO: apiVersion: apps/v1
  kind: Deployment
  metadata:
    name: agnhost-replica
  spec:
    replicas: 2
    selector:
      matchLabels:
        app: agnhost
        role: replica
        tier: backend
    template:
      metadata:
        labels:
          app: agnhost
          role: replica
          tier: backend
      spec:
        containers:
        - name: replica
          image: registry.k8s.io/e2e-test-images/agnhost:2.45
          args: [ "guestbook", "--replicaof", "agnhost-primary", "--http-port", "6379" ]
          resources:
            requests:
              cpu: 100m
              memory: 100Mi
          ports:
          - containerPort: 6379

  Aug 24 11:50:54.967: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1002171096 --namespace=kubectl-1964 create -f -'
  Aug 24 11:50:55.564: INFO: stderr: ""
  Aug 24 11:50:55.564: INFO: stdout: "deployment.apps/agnhost-replica created\n"
  STEP: validating guestbook app @ 08/24/23 11:50:55.564
  Aug 24 11:50:55.564: INFO: Waiting for all frontend pods to be Running.
  Aug 24 11:51:00.614: INFO: Waiting for frontend to serve content.
  Aug 24 11:51:00.648: INFO: Trying to add a new entry to the guestbook.
  Aug 24 11:51:00.667: INFO: Verifying that added entry can be retrieved.
  STEP: using delete to clean up resources @ 08/24/23 11:51:00.685
  Aug 24 11:51:00.685: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1002171096 --namespace=kubectl-1964 delete --grace-period=0 --force -f -'
  Aug 24 11:51:00.862: INFO: stderr: "Warning: Immediate deletion does not wait for confirmation that the running resource has been terminated. The resource may continue to run on the cluster indefinitely.\n"
  Aug 24 11:51:00.863: INFO: stdout: "service \"agnhost-replica\" force deleted\n"
  STEP: using delete to clean up resources @ 08/24/23 11:51:00.863
  Aug 24 11:51:00.863: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1002171096 --namespace=kubectl-1964 delete --grace-period=0 --force -f -'
  Aug 24 11:51:01.061: INFO: stderr: "Warning: Immediate deletion does not wait for confirmation that the running resource has been terminated. The resource may continue to run on the cluster indefinitely.\n"
  Aug 24 11:51:01.061: INFO: stdout: "service \"agnhost-primary\" force deleted\n"
  STEP: using delete to clean up resources @ 08/24/23 11:51:01.061
  Aug 24 11:51:01.061: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1002171096 --namespace=kubectl-1964 delete --grace-period=0 --force -f -'
  Aug 24 11:51:01.221: INFO: stderr: "Warning: Immediate deletion does not wait for confirmation that the running resource has been terminated. The resource may continue to run on the cluster indefinitely.\n"
  Aug 24 11:51:01.221: INFO: stdout: "service \"frontend\" force deleted\n"
  STEP: using delete to clean up resources @ 08/24/23 11:51:01.221
  Aug 24 11:51:01.221: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1002171096 --namespace=kubectl-1964 delete --grace-period=0 --force -f -'
  Aug 24 11:51:01.351: INFO: stderr: "Warning: Immediate deletion does not wait for confirmation that the running resource has been terminated. The resource may continue to run on the cluster indefinitely.\n"
  Aug 24 11:51:01.351: INFO: stdout: "deployment.apps \"frontend\" force deleted\n"
  STEP: using delete to clean up resources @ 08/24/23 11:51:01.352
  Aug 24 11:51:01.352: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1002171096 --namespace=kubectl-1964 delete --grace-period=0 --force -f -'
  Aug 24 11:51:01.485: INFO: stderr: "Warning: Immediate deletion does not wait for confirmation that the running resource has been terminated. The resource may continue to run on the cluster indefinitely.\n"
  Aug 24 11:51:01.485: INFO: stdout: "deployment.apps \"agnhost-primary\" force deleted\n"
  STEP: using delete to clean up resources @ 08/24/23 11:51:01.485
  Aug 24 11:51:01.485: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1002171096 --namespace=kubectl-1964 delete --grace-period=0 --force -f -'
  Aug 24 11:51:01.652: INFO: stderr: "Warning: Immediate deletion does not wait for confirmation that the running resource has been terminated. The resource may continue to run on the cluster indefinitely.\n"
  Aug 24 11:51:01.652: INFO: stdout: "deployment.apps \"agnhost-replica\" force deleted\n"
  Aug 24 11:51:01.652: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "kubectl-1964" for this suite. @ 08/24/23 11:51:01.668
• [10.864 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-storage] EmptyDir volumes should support (root,0644,default) [LinuxOnly] [NodeConformance] [Conformance]
test/e2e/common/storage/empty_dir.go:167
  STEP: Creating a kubernetes client @ 08/24/23 11:51:01.75
  Aug 24 11:51:01.750: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename emptydir @ 08/24/23 11:51:01.751
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 11:51:01.882
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 11:51:01.89
  STEP: Creating a pod to test emptydir 0644 on node default medium @ 08/24/23 11:51:01.954
  STEP: Saw pod success @ 08/24/23 11:51:06.068
  Aug 24 11:51:06.076: INFO: Trying to get logs from node scw-conformance-default-2af6d8b4c6264cc5b9e5e6 pod pod-a0cd5cbb-5f94-4061-af5b-0fa2d6c0ca14 container test-container: <nil>
  STEP: delete the pod @ 08/24/23 11:51:06.092
  Aug 24 11:51:06.125: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "emptydir-1939" for this suite. @ 08/24/23 11:51:06.136
• [4.399 seconds]
------------------------------
[sig-node] Ephemeral Containers [NodeConformance] should update the ephemeral containers in an existing pod [Conformance]
test/e2e/common/node/ephemeral_containers.go:98
  STEP: Creating a kubernetes client @ 08/24/23 11:51:06.149
  Aug 24 11:51:06.150: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename ephemeral-containers-test @ 08/24/23 11:51:06.151
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 11:51:06.182
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 11:51:06.188
  STEP: creating a target pod @ 08/24/23 11:51:06.195
  STEP: adding an ephemeral container @ 08/24/23 11:51:08.242
  STEP: checking pod container endpoints @ 08/24/23 11:51:10.286
  Aug 24 11:51:10.286: INFO: ExecWithOptions {Command:[/bin/echo marco] Namespace:ephemeral-containers-test-4870 PodName:ephemeral-containers-target-pod ContainerName:debugger Stdin:<nil> CaptureStdout:true CaptureStderr:true PreserveWhitespace:false Quiet:false}
  Aug 24 11:51:10.286: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  Aug 24 11:51:10.287: INFO: ExecWithOptions: Clientset creation
  Aug 24 11:51:10.287: INFO: ExecWithOptions: execute(POST https://10.96.0.1:443/api/v1/namespaces/ephemeral-containers-test-4870/pods/ephemeral-containers-target-pod/exec?command=%2Fbin%2Fecho&command=marco&container=debugger&container=debugger&stderr=true&stdout=true)
  Aug 24 11:51:10.395: INFO: Exec stderr: ""
  STEP: checking pod "ephemeral-containers-target-pod" has only one ephemeralcontainer @ 08/24/23 11:51:10.413
  STEP: adding another ephemeralcontainer to pod "ephemeral-containers-target-pod" @ 08/24/23 11:51:10.426
  STEP: checking pod "ephemeral-containers-target-pod" has only two ephemeralcontainers @ 08/24/23 11:51:10.451
  Aug 24 11:51:10.459: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "ephemeral-containers-test-4870" for this suite. @ 08/24/23 11:51:10.47
• [4.336 seconds]
------------------------------
[sig-node] Container Runtime blackbox test on terminated container should report termination message if TerminationMessagePath is set as non-root user and at a non-default path [NodeConformance] [Conformance]
test/e2e/common/node/runtime.go:195
  STEP: Creating a kubernetes client @ 08/24/23 11:51:10.486
  Aug 24 11:51:10.486: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename container-runtime @ 08/24/23 11:51:10.487
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 11:51:10.515
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 11:51:10.521
  STEP: create the container @ 08/24/23 11:51:10.526
  W0824 11:51:10.558593      22 warnings.go:70] metadata.name: this is used in the Pod's hostname, which can result in surprising behavior; a DNS label is recommended: [must be no more than 63 characters]
  STEP: wait for the container to reach Succeeded @ 08/24/23 11:51:10.558
  STEP: get the container status @ 08/24/23 11:51:14.604
  STEP: the container should be terminated @ 08/24/23 11:51:14.616
  STEP: the termination message should be set @ 08/24/23 11:51:14.616
  Aug 24 11:51:14.616: INFO: Expected: &{DONE} to match Container's Termination Message: DONE --
  STEP: delete the container @ 08/24/23 11:51:14.616
  Aug 24 11:51:14.644: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "container-runtime-7461" for this suite. @ 08/24/23 11:51:14.663
• [4.191 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-scheduling] SchedulerPredicates [Serial] validates resource limits of pods that are allowed to run  [Conformance]
test/e2e/scheduling/predicates.go:332
  STEP: Creating a kubernetes client @ 08/24/23 11:51:14.677
  Aug 24 11:51:14.677: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename sched-pred @ 08/24/23 11:51:14.678
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 11:51:14.709
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 11:51:14.715
  Aug 24 11:51:14.721: INFO: Waiting up to 1m0s for all (but 0) nodes to be ready
  Aug 24 11:51:14.740: INFO: Waiting for terminating namespaces to be deleted...
  Aug 24 11:51:14.748: INFO: 
  Logging pods the apiserver thinks is on node scw-conformance-default-2af6d8b4c6264cc5b9e5e6 before test
  Aug 24 11:51:14.763: INFO: ephemeral-containers-target-pod from ephemeral-containers-test-4870 started at 2023-08-24 11:51:06 +0000 UTC (1 container statuses recorded)
  Aug 24 11:51:14.763: INFO: 	Container test-container-1 ready: true, restart count 0
  Aug 24 11:51:14.763: INFO: cilium-operator-9686c5f57-bbxb6 from kube-system started at 2023-08-24 11:03:43 +0000 UTC (1 container statuses recorded)
  Aug 24 11:51:14.763: INFO: 	Container cilium-operator ready: true, restart count 0
  Aug 24 11:51:14.763: INFO: cilium-qxsf5 from kube-system started at 2023-08-24 11:03:43 +0000 UTC (1 container statuses recorded)
  Aug 24 11:51:14.763: INFO: 	Container cilium-agent ready: true, restart count 0
  Aug 24 11:51:14.763: INFO: csi-node-tq6l2 from kube-system started at 2023-08-24 11:03:43 +0000 UTC (2 container statuses recorded)
  Aug 24 11:51:14.763: INFO: 	Container csi-node-driver-registrar ready: true, restart count 0
  Aug 24 11:51:14.763: INFO: 	Container csi-plugin ready: true, restart count 0
  Aug 24 11:51:14.763: INFO: konnectivity-agent-9q7n8 from kube-system started at 2023-08-24 11:03:43 +0000 UTC (1 container statuses recorded)
  Aug 24 11:51:14.763: INFO: 	Container konnectivity-agent ready: true, restart count 0
  Aug 24 11:51:14.763: INFO: kube-proxy-qdvkw from kube-system started at 2023-08-24 11:03:43 +0000 UTC (1 container statuses recorded)
  Aug 24 11:51:14.763: INFO: 	Container kube-proxy ready: true, restart count 0
  Aug 24 11:51:14.763: INFO: sonobuoy from sonobuoy started at 2023-08-24 11:26:49 +0000 UTC (1 container statuses recorded)
  Aug 24 11:51:14.763: INFO: 	Container kube-sonobuoy ready: true, restart count 0
  Aug 24 11:51:14.763: INFO: sonobuoy-systemd-logs-daemon-set-02ba39604ea741df-p7qf6 from sonobuoy started at 2023-08-24 11:26:53 +0000 UTC (2 container statuses recorded)
  Aug 24 11:51:14.763: INFO: 	Container sonobuoy-worker ready: true, restart count 0
  Aug 24 11:51:14.763: INFO: 	Container systemd-logs ready: true, restart count 0
  Aug 24 11:51:14.763: INFO: 
  Logging pods the apiserver thinks is on node scw-conformance-default-ecf11ec729064adba7e270 before test
  Aug 24 11:51:14.777: INFO: cilium-x494p from kube-system started at 2023-08-24 11:03:51 +0000 UTC (1 container statuses recorded)
  Aug 24 11:51:14.777: INFO: 	Container cilium-agent ready: true, restart count 0
  Aug 24 11:51:14.777: INFO: coredns-76f9d8b48f-l47wj from kube-system started at 2023-08-24 11:04:12 +0000 UTC (1 container statuses recorded)
  Aug 24 11:51:14.777: INFO: 	Container coredns ready: true, restart count 0
  Aug 24 11:51:14.777: INFO: csi-node-mj9jp from kube-system started at 2023-08-24 11:03:51 +0000 UTC (2 container statuses recorded)
  Aug 24 11:51:14.777: INFO: 	Container csi-node-driver-registrar ready: true, restart count 0
  Aug 24 11:51:14.777: INFO: 	Container csi-plugin ready: true, restart count 0
  Aug 24 11:51:14.777: INFO: konnectivity-agent-hbwxf from kube-system started at 2023-08-24 11:03:51 +0000 UTC (1 container statuses recorded)
  Aug 24 11:51:14.777: INFO: 	Container konnectivity-agent ready: true, restart count 0
  Aug 24 11:51:14.777: INFO: kube-proxy-k7xlb from kube-system started at 2023-08-24 11:03:51 +0000 UTC (1 container statuses recorded)
  Aug 24 11:51:14.777: INFO: 	Container kube-proxy ready: true, restart count 0
  Aug 24 11:51:14.777: INFO: metrics-server-66786fb-88mmf from kube-system started at 2023-08-24 11:04:12 +0000 UTC (1 container statuses recorded)
  Aug 24 11:51:14.777: INFO: 	Container metrics-server ready: true, restart count 0
  Aug 24 11:51:14.777: INFO: pod-exec-websocket-5fd61fdc-c93c-44d3-b2fa-21b06b985576 from pods-6900 started at 2023-08-24 11:50:46 +0000 UTC (1 container statuses recorded)
  Aug 24 11:51:14.777: INFO: 	Container main ready: true, restart count 0
  Aug 24 11:51:14.777: INFO: sonobuoy-e2e-job-e6e5c8fdb4f14afe from sonobuoy started at 2023-08-24 11:26:53 +0000 UTC (2 container statuses recorded)
  Aug 24 11:51:14.777: INFO: 	Container e2e ready: true, restart count 0
  Aug 24 11:51:14.777: INFO: 	Container sonobuoy-worker ready: true, restart count 0
  Aug 24 11:51:14.777: INFO: sonobuoy-systemd-logs-daemon-set-02ba39604ea741df-kpkc8 from sonobuoy started at 2023-08-24 11:26:53 +0000 UTC (2 container statuses recorded)
  Aug 24 11:51:14.777: INFO: 	Container sonobuoy-worker ready: true, restart count 0
  Aug 24 11:51:14.777: INFO: 	Container systemd-logs ready: true, restart count 0
  STEP: verifying the node has the label node scw-conformance-default-2af6d8b4c6264cc5b9e5e6 @ 08/24/23 11:51:14.821
  STEP: verifying the node has the label node scw-conformance-default-ecf11ec729064adba7e270 @ 08/24/23 11:51:14.874
  Aug 24 11:51:14.970: INFO: Pod ephemeral-containers-target-pod requesting resource cpu=0m on Node scw-conformance-default-2af6d8b4c6264cc5b9e5e6
  Aug 24 11:51:14.970: INFO: Pod cilium-operator-9686c5f57-bbxb6 requesting resource cpu=0m on Node scw-conformance-default-2af6d8b4c6264cc5b9e5e6
  Aug 24 11:51:14.970: INFO: Pod cilium-qxsf5 requesting resource cpu=0m on Node scw-conformance-default-2af6d8b4c6264cc5b9e5e6
  Aug 24 11:51:14.970: INFO: Pod cilium-x494p requesting resource cpu=0m on Node scw-conformance-default-ecf11ec729064adba7e270
  Aug 24 11:51:14.970: INFO: Pod coredns-76f9d8b48f-l47wj requesting resource cpu=100m on Node scw-conformance-default-ecf11ec729064adba7e270
  Aug 24 11:51:14.970: INFO: Pod csi-node-mj9jp requesting resource cpu=0m on Node scw-conformance-default-ecf11ec729064adba7e270
  Aug 24 11:51:14.970: INFO: Pod csi-node-tq6l2 requesting resource cpu=0m on Node scw-conformance-default-2af6d8b4c6264cc5b9e5e6
  Aug 24 11:51:14.970: INFO: Pod konnectivity-agent-9q7n8 requesting resource cpu=0m on Node scw-conformance-default-2af6d8b4c6264cc5b9e5e6
  Aug 24 11:51:14.970: INFO: Pod konnectivity-agent-hbwxf requesting resource cpu=0m on Node scw-conformance-default-ecf11ec729064adba7e270
  Aug 24 11:51:14.970: INFO: Pod kube-proxy-k7xlb requesting resource cpu=0m on Node scw-conformance-default-ecf11ec729064adba7e270
  Aug 24 11:51:14.970: INFO: Pod kube-proxy-qdvkw requesting resource cpu=0m on Node scw-conformance-default-2af6d8b4c6264cc5b9e5e6
  Aug 24 11:51:14.970: INFO: Pod metrics-server-66786fb-88mmf requesting resource cpu=100m on Node scw-conformance-default-ecf11ec729064adba7e270
  Aug 24 11:51:14.970: INFO: Pod pod-exec-websocket-5fd61fdc-c93c-44d3-b2fa-21b06b985576 requesting resource cpu=0m on Node scw-conformance-default-ecf11ec729064adba7e270
  Aug 24 11:51:14.970: INFO: Pod sonobuoy requesting resource cpu=0m on Node scw-conformance-default-2af6d8b4c6264cc5b9e5e6
  Aug 24 11:51:14.970: INFO: Pod sonobuoy-e2e-job-e6e5c8fdb4f14afe requesting resource cpu=0m on Node scw-conformance-default-ecf11ec729064adba7e270
  Aug 24 11:51:14.970: INFO: Pod sonobuoy-systemd-logs-daemon-set-02ba39604ea741df-kpkc8 requesting resource cpu=0m on Node scw-conformance-default-ecf11ec729064adba7e270
  Aug 24 11:51:14.970: INFO: Pod sonobuoy-systemd-logs-daemon-set-02ba39604ea741df-p7qf6 requesting resource cpu=0m on Node scw-conformance-default-2af6d8b4c6264cc5b9e5e6
  STEP: Starting Pods to consume most of the cluster CPU. @ 08/24/23 11:51:14.97
  Aug 24 11:51:14.970: INFO: Creating a pod which consumes cpu=2660m on Node scw-conformance-default-2af6d8b4c6264cc5b9e5e6
  Aug 24 11:51:15.049: INFO: Creating a pod which consumes cpu=2520m on Node scw-conformance-default-ecf11ec729064adba7e270
  STEP: Creating another pod that requires unavailable amount of CPU. @ 08/24/23 11:51:17.087
  STEP: Considering event: 
  Type = [Normal], Name = [filler-pod-b8f7d3c4-84da-497a-9008-97a42800b0b2.177e4f754770f226], Reason = [Scheduled], Message = [Successfully assigned sched-pred-4177/filler-pod-b8f7d3c4-84da-497a-9008-97a42800b0b2 to scw-conformance-default-2af6d8b4c6264cc5b9e5e6] @ 08/24/23 11:51:17.095
  STEP: Considering event: 
  Type = [Normal], Name = [filler-pod-b8f7d3c4-84da-497a-9008-97a42800b0b2.177e4f7577cee32a], Reason = [Pulled], Message = [Container image "registry.k8s.io/pause:3.9" already present on machine] @ 08/24/23 11:51:17.095
  STEP: Considering event: 
  Type = [Normal], Name = [filler-pod-b8f7d3c4-84da-497a-9008-97a42800b0b2.177e4f757a0ba495], Reason = [Created], Message = [Created container filler-pod-b8f7d3c4-84da-497a-9008-97a42800b0b2] @ 08/24/23 11:51:17.095
  STEP: Considering event: 
  Type = [Normal], Name = [filler-pod-b8f7d3c4-84da-497a-9008-97a42800b0b2.177e4f75802426cf], Reason = [Started], Message = [Started container filler-pod-b8f7d3c4-84da-497a-9008-97a42800b0b2] @ 08/24/23 11:51:17.095
  STEP: Considering event: 
  Type = [Normal], Name = [filler-pod-c635ee6b-1493-4c2e-8570-63f09ecd61eb.177e4f7548076491], Reason = [Scheduled], Message = [Successfully assigned sched-pred-4177/filler-pod-c635ee6b-1493-4c2e-8570-63f09ecd61eb to scw-conformance-default-ecf11ec729064adba7e270] @ 08/24/23 11:51:17.095
  STEP: Considering event: 
  Type = [Normal], Name = [filler-pod-c635ee6b-1493-4c2e-8570-63f09ecd61eb.177e4f7574934cc4], Reason = [Pulled], Message = [Container image "registry.k8s.io/pause:3.9" already present on machine] @ 08/24/23 11:51:17.095
  STEP: Considering event: 
  Type = [Normal], Name = [filler-pod-c635ee6b-1493-4c2e-8570-63f09ecd61eb.177e4f75781642b1], Reason = [Created], Message = [Created container filler-pod-c635ee6b-1493-4c2e-8570-63f09ecd61eb] @ 08/24/23 11:51:17.095
  STEP: Considering event: 
  Type = [Normal], Name = [filler-pod-c635ee6b-1493-4c2e-8570-63f09ecd61eb.177e4f757deb6416], Reason = [Started], Message = [Started container filler-pod-c635ee6b-1493-4c2e-8570-63f09ecd61eb] @ 08/24/23 11:51:17.095
  STEP: Considering event: 
  Type = [Warning], Name = [additional-pod.177e4f75c18dc87d], Reason = [FailedScheduling], Message = [0/2 nodes are available: 2 Insufficient cpu. preemption: 0/2 nodes are available: 2 No preemption victims found for incoming pod..] @ 08/24/23 11:51:17.125
  STEP: removing the label node off the node scw-conformance-default-2af6d8b4c6264cc5b9e5e6 @ 08/24/23 11:51:18.123
  STEP: verifying the node doesn't have the label node @ 08/24/23 11:51:18.157
  STEP: removing the label node off the node scw-conformance-default-ecf11ec729064adba7e270 @ 08/24/23 11:51:18.165
  STEP: verifying the node doesn't have the label node @ 08/24/23 11:51:18.259
  Aug 24 11:51:18.267: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "sched-pred-4177" for this suite. @ 08/24/23 11:51:18.276
• [3.672 seconds]
------------------------------
S
------------------------------
[sig-network] DNS should provide DNS for pods for Hostname [Conformance]
test/e2e/network/dns.go:244
  STEP: Creating a kubernetes client @ 08/24/23 11:51:18.35
  Aug 24 11:51:18.350: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename dns @ 08/24/23 11:51:18.352
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 11:51:18.378
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 11:51:18.386
  STEP: Creating a test headless service @ 08/24/23 11:51:18.393
  STEP: Running these commands on wheezy: for i in `seq 1 600`; do test -n "$$(getent hosts dns-querier-2.dns-test-service-2.dns-3487.svc.cluster.local)" && echo OK > /results/wheezy_hosts@dns-querier-2.dns-test-service-2.dns-3487.svc.cluster.local;test -n "$$(getent hosts dns-querier-2)" && echo OK > /results/wheezy_hosts@dns-querier-2;sleep 1; done
   @ 08/24/23 11:51:18.404
  STEP: Running these commands on jessie: for i in `seq 1 600`; do test -n "$$(getent hosts dns-querier-2.dns-test-service-2.dns-3487.svc.cluster.local)" && echo OK > /results/jessie_hosts@dns-querier-2.dns-test-service-2.dns-3487.svc.cluster.local;test -n "$$(getent hosts dns-querier-2)" && echo OK > /results/jessie_hosts@dns-querier-2;sleep 1; done
   @ 08/24/23 11:51:18.404
  STEP: creating a pod to probe DNS @ 08/24/23 11:51:18.404
  STEP: submitting the pod to kubernetes @ 08/24/23 11:51:18.404
  STEP: retrieving the pod @ 08/24/23 11:51:20.484
  STEP: looking for the results for each expected name from probers @ 08/24/23 11:51:20.493
  Aug 24 11:51:20.550: INFO: DNS probes using dns-3487/dns-test-44428adc-0aac-49d1-b1d2-43c9924a397f succeeded

  Aug 24 11:51:20.551: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: deleting the pod @ 08/24/23 11:51:20.56
  STEP: deleting the test headless service @ 08/24/23 11:51:20.593
  STEP: Destroying namespace "dns-3487" for this suite. @ 08/24/23 11:51:20.66
• [2.322 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-node] Container Runtime blackbox test when starting a container that exits should run with the expected status [NodeConformance] [Conformance]
test/e2e/common/node/runtime.go:52
  STEP: Creating a kubernetes client @ 08/24/23 11:51:20.674
  Aug 24 11:51:20.674: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename container-runtime @ 08/24/23 11:51:20.675
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 11:51:20.75
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 11:51:20.757
  STEP: Container 'terminate-cmd-rpa': should get the expected 'RestartCount' @ 08/24/23 11:51:20.784
  STEP: Container 'terminate-cmd-rpa': should get the expected 'Phase' @ 08/24/23 11:51:33.944
  STEP: Container 'terminate-cmd-rpa': should get the expected 'Ready' condition @ 08/24/23 11:51:33.955
  STEP: Container 'terminate-cmd-rpa': should get the expected 'State' @ 08/24/23 11:51:33.97
  STEP: Container 'terminate-cmd-rpa': should be possible to delete [NodeConformance] @ 08/24/23 11:51:33.97
  STEP: Container 'terminate-cmd-rpof': should get the expected 'RestartCount' @ 08/24/23 11:51:34.018
  STEP: Container 'terminate-cmd-rpof': should get the expected 'Phase' @ 08/24/23 11:51:37.056
  STEP: Container 'terminate-cmd-rpof': should get the expected 'Ready' condition @ 08/24/23 11:51:38.072
  STEP: Container 'terminate-cmd-rpof': should get the expected 'State' @ 08/24/23 11:51:38.088
  STEP: Container 'terminate-cmd-rpof': should be possible to delete [NodeConformance] @ 08/24/23 11:51:38.088
  STEP: Container 'terminate-cmd-rpn': should get the expected 'RestartCount' @ 08/24/23 11:51:38.136
  STEP: Container 'terminate-cmd-rpn': should get the expected 'Phase' @ 08/24/23 11:51:39.156
  STEP: Container 'terminate-cmd-rpn': should get the expected 'Ready' condition @ 08/24/23 11:51:41.188
  STEP: Container 'terminate-cmd-rpn': should get the expected 'State' @ 08/24/23 11:51:41.206
  STEP: Container 'terminate-cmd-rpn': should be possible to delete [NodeConformance] @ 08/24/23 11:51:41.206
  Aug 24 11:51:41.238: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "container-runtime-2538" for this suite. @ 08/24/23 11:51:41.269
• [20.609 seconds]
------------------------------
S
------------------------------
[sig-node] RuntimeClass should schedule a Pod requesting a RuntimeClass without PodOverhead [NodeConformance] [Conformance]
test/e2e/common/node/runtimeclass.go:104
  STEP: Creating a kubernetes client @ 08/24/23 11:51:41.284
  Aug 24 11:51:41.284: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename runtimeclass @ 08/24/23 11:51:41.285
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 11:51:41.314
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 11:51:41.32
  Aug 24 11:51:43.374: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "runtimeclass-9728" for this suite. @ 08/24/23 11:51:43.397
• [2.125 seconds]
------------------------------
SSSSSSS
------------------------------
[sig-node] Variable Expansion should succeed in writing subpaths in container [Slow] [Conformance]
test/e2e/common/node/expansion.go:300
  STEP: Creating a kubernetes client @ 08/24/23 11:51:43.409
  Aug 24 11:51:43.409: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename var-expansion @ 08/24/23 11:51:43.41
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 11:51:43.44
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 11:51:43.447
  STEP: creating the pod @ 08/24/23 11:51:43.454
  STEP: waiting for pod running @ 08/24/23 11:51:43.474
  STEP: creating a file in subpath @ 08/24/23 11:51:45.491
  Aug 24 11:51:45.500: INFO: ExecWithOptions {Command:[/bin/sh -c touch /volume_mount/mypath/foo/test.log] Namespace:var-expansion-3969 PodName:var-expansion-a1b0bd40-3dd1-498f-a60f-4d94b484003d ContainerName:dapi-container Stdin:<nil> CaptureStdout:true CaptureStderr:true PreserveWhitespace:false Quiet:false}
  Aug 24 11:51:45.500: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  Aug 24 11:51:45.501: INFO: ExecWithOptions: Clientset creation
  Aug 24 11:51:45.501: INFO: ExecWithOptions: execute(POST https://10.96.0.1:443/api/v1/namespaces/var-expansion-3969/pods/var-expansion-a1b0bd40-3dd1-498f-a60f-4d94b484003d/exec?command=%2Fbin%2Fsh&command=-c&command=touch+%2Fvolume_mount%2Fmypath%2Ffoo%2Ftest.log&container=dapi-container&container=dapi-container&stderr=true&stdout=true)
  STEP: test for file in mounted path @ 08/24/23 11:51:45.639
  Aug 24 11:51:45.647: INFO: ExecWithOptions {Command:[/bin/sh -c test -f /subpath_mount/test.log] Namespace:var-expansion-3969 PodName:var-expansion-a1b0bd40-3dd1-498f-a60f-4d94b484003d ContainerName:dapi-container Stdin:<nil> CaptureStdout:true CaptureStderr:true PreserveWhitespace:false Quiet:false}
  Aug 24 11:51:45.647: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  Aug 24 11:51:45.649: INFO: ExecWithOptions: Clientset creation
  Aug 24 11:51:45.649: INFO: ExecWithOptions: execute(POST https://10.96.0.1:443/api/v1/namespaces/var-expansion-3969/pods/var-expansion-a1b0bd40-3dd1-498f-a60f-4d94b484003d/exec?command=%2Fbin%2Fsh&command=-c&command=test+-f+%2Fsubpath_mount%2Ftest.log&container=dapi-container&container=dapi-container&stderr=true&stdout=true)
  STEP: updating the annotation value @ 08/24/23 11:51:45.787
  Aug 24 11:51:46.650: INFO: Successfully updated pod "var-expansion-a1b0bd40-3dd1-498f-a60f-4d94b484003d"
  STEP: waiting for annotated pod running @ 08/24/23 11:51:46.65
  STEP: deleting the pod gracefully @ 08/24/23 11:51:46.751
  Aug 24 11:51:46.751: INFO: Deleting pod "var-expansion-a1b0bd40-3dd1-498f-a60f-4d94b484003d" in namespace "var-expansion-3969"
  Aug 24 11:51:46.950: INFO: Wait up to 5m0s for pod "var-expansion-a1b0bd40-3dd1-498f-a60f-4d94b484003d" to be fully deleted
  Aug 24 11:52:19.123: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "var-expansion-3969" for this suite. @ 08/24/23 11:52:19.133
• [35.740 seconds]
------------------------------
SSSS
------------------------------
[sig-storage] Projected configMap updates should be reflected in volume [NodeConformance] [Conformance]
test/e2e/common/storage/projected_configmap.go:124
  STEP: Creating a kubernetes client @ 08/24/23 11:52:19.149
  Aug 24 11:52:19.149: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename projected @ 08/24/23 11:52:19.15
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 11:52:19.181
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 11:52:19.188
  STEP: Creating projection with configMap that has name projected-configmap-test-upd-2657b766-260e-456d-a2fd-7e9bbd1ca434 @ 08/24/23 11:52:19.203
  STEP: Creating the pod @ 08/24/23 11:52:19.214
  STEP: Updating configmap projected-configmap-test-upd-2657b766-260e-456d-a2fd-7e9bbd1ca434 @ 08/24/23 11:52:21.278
  STEP: waiting to observe update in volume @ 08/24/23 11:52:21.29
  Aug 24 11:53:32.047: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "projected-8748" for this suite. @ 08/24/23 11:53:32.057
• [72.926 seconds]
------------------------------
SSSSSSSSSSSSSSSSS
------------------------------
[sig-storage] EmptyDir wrapper volumes should not cause race condition when used for configmaps [Serial] [Conformance]
test/e2e/storage/empty_dir_wrapper.go:188
  STEP: Creating a kubernetes client @ 08/24/23 11:53:32.076
  Aug 24 11:53:32.076: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename emptydir-wrapper @ 08/24/23 11:53:32.077
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 11:53:32.109
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 11:53:32.116
  STEP: Creating 50 configmaps @ 08/24/23 11:53:32.123
  STEP: Creating RC which spawns configmap-volume pods @ 08/24/23 11:53:32.652
  Aug 24 11:53:32.680: INFO: Pod name wrapped-volume-race-ae5a06c5-f7ff-47e3-879a-946868058ca4: Found 0 pods out of 5
  Aug 24 11:53:37.695: INFO: Pod name wrapped-volume-race-ae5a06c5-f7ff-47e3-879a-946868058ca4: Found 5 pods out of 5
  STEP: Ensuring each pod is running @ 08/24/23 11:53:37.695
  STEP: Creating RC which spawns configmap-volume pods @ 08/24/23 11:53:37.741
  Aug 24 11:53:37.776: INFO: Pod name wrapped-volume-race-fa0d41b5-7c07-4bf0-b6bc-1fab4bcd66a0: Found 0 pods out of 5
  Aug 24 11:53:42.793: INFO: Pod name wrapped-volume-race-fa0d41b5-7c07-4bf0-b6bc-1fab4bcd66a0: Found 5 pods out of 5
  STEP: Ensuring each pod is running @ 08/24/23 11:53:42.793
  STEP: Creating RC which spawns configmap-volume pods @ 08/24/23 11:53:42.851
  Aug 24 11:53:42.888: INFO: Pod name wrapped-volume-race-713dba18-749a-4db8-ac59-6b211692c232: Found 0 pods out of 5
  Aug 24 11:53:47.913: INFO: Pod name wrapped-volume-race-713dba18-749a-4db8-ac59-6b211692c232: Found 5 pods out of 5
  STEP: Ensuring each pod is running @ 08/24/23 11:53:47.913
  Aug 24 11:53:47.960: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: deleting ReplicationController wrapped-volume-race-713dba18-749a-4db8-ac59-6b211692c232 in namespace emptydir-wrapper-7864, will wait for the garbage collector to delete the pods @ 08/24/23 11:53:47.968
  Aug 24 11:53:48.050: INFO: Deleting ReplicationController wrapped-volume-race-713dba18-749a-4db8-ac59-6b211692c232 took: 20.859704ms
  Aug 24 11:53:48.650: INFO: Terminating ReplicationController wrapped-volume-race-713dba18-749a-4db8-ac59-6b211692c232 pods took: 600.250388ms
  STEP: deleting ReplicationController wrapped-volume-race-fa0d41b5-7c07-4bf0-b6bc-1fab4bcd66a0 in namespace emptydir-wrapper-7864, will wait for the garbage collector to delete the pods @ 08/24/23 11:53:50.051
  Aug 24 11:53:50.128: INFO: Deleting ReplicationController wrapped-volume-race-fa0d41b5-7c07-4bf0-b6bc-1fab4bcd66a0 took: 16.721602ms
  Aug 24 11:53:50.229: INFO: Terminating ReplicationController wrapped-volume-race-fa0d41b5-7c07-4bf0-b6bc-1fab4bcd66a0 pods took: 100.819554ms
  STEP: deleting ReplicationController wrapped-volume-race-ae5a06c5-f7ff-47e3-879a-946868058ca4 in namespace emptydir-wrapper-7864, will wait for the garbage collector to delete the pods @ 08/24/23 11:53:51.629
  Aug 24 11:53:51.708: INFO: Deleting ReplicationController wrapped-volume-race-ae5a06c5-f7ff-47e3-879a-946868058ca4 took: 16.838102ms
  Aug 24 11:53:51.909: INFO: Terminating ReplicationController wrapped-volume-race-ae5a06c5-f7ff-47e3-879a-946868058ca4 pods took: 200.394931ms
  STEP: Cleaning up the configMaps @ 08/24/23 11:53:53.71
  STEP: Destroying namespace "emptydir-wrapper-7864" for this suite. @ 08/24/23 11:53:54.435
• [22.375 seconds]
------------------------------
S
------------------------------
[sig-api-machinery] ResourceQuota should create a ResourceQuota and capture the life of a replica set. [Conformance]
test/e2e/apimachinery/resource_quota.go:451
  STEP: Creating a kubernetes client @ 08/24/23 11:53:54.452
  Aug 24 11:53:54.452: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename resourcequota @ 08/24/23 11:53:54.453
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 11:53:54.489
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 11:53:54.496
  STEP: Counting existing ResourceQuota @ 08/24/23 11:53:54.502
  STEP: Creating a ResourceQuota @ 08/24/23 11:53:59.51
  STEP: Ensuring resource quota status is calculated @ 08/24/23 11:53:59.521
  STEP: Creating a ReplicaSet @ 08/24/23 11:54:01.53
  STEP: Ensuring resource quota status captures replicaset creation @ 08/24/23 11:54:01.559
  STEP: Deleting a ReplicaSet @ 08/24/23 11:54:03.573
  STEP: Ensuring resource quota status released usage @ 08/24/23 11:54:03.585
  Aug 24 11:54:05.595: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "resourcequota-1749" for this suite. @ 08/24/23 11:54:05.604
• [11.168 seconds]
------------------------------
SSSS
------------------------------
[sig-storage] Projected downwardAPI should provide node allocatable (memory) as default memory limit if the limit is not set [NodeConformance] [Conformance]
test/e2e/common/storage/projected_downwardapi.go:262
  STEP: Creating a kubernetes client @ 08/24/23 11:54:05.62
  Aug 24 11:54:05.620: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename projected @ 08/24/23 11:54:05.621
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 11:54:05.652
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 11:54:05.658
  STEP: Creating a pod to test downward API volume plugin @ 08/24/23 11:54:05.682
  STEP: Saw pod success @ 08/24/23 11:54:09.74
  Aug 24 11:54:09.749: INFO: Trying to get logs from node scw-conformance-default-2af6d8b4c6264cc5b9e5e6 pod downwardapi-volume-241f87ca-d0f6-4595-9cf8-70513138c387 container client-container: <nil>
  STEP: delete the pod @ 08/24/23 11:54:10.048
  Aug 24 11:54:10.470: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "projected-9792" for this suite. @ 08/24/23 11:54:10.555
• [4.953 seconds]
------------------------------
SSSSSSSSSSS
------------------------------
[sig-apps] ReplicaSet Replicaset should have a working scale subresource [Conformance]
test/e2e/apps/replica_set.go:143
  STEP: Creating a kubernetes client @ 08/24/23 11:54:10.573
  Aug 24 11:54:10.573: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename replicaset @ 08/24/23 11:54:10.575
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 11:54:10.604
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 11:54:10.61
  STEP: Creating replica set "test-rs" that asks for more than the allowed pod quota @ 08/24/23 11:54:10.615
  Aug 24 11:54:10.661: INFO: Pod name sample-pod: Found 0 pods out of 1
  Aug 24 11:54:15.670: INFO: Pod name sample-pod: Found 1 pods out of 1
  STEP: ensuring each pod is running @ 08/24/23 11:54:15.67
  STEP: getting scale subresource @ 08/24/23 11:54:15.67
  STEP: updating a scale subresource @ 08/24/23 11:54:15.678
  STEP: verifying the replicaset Spec.Replicas was modified @ 08/24/23 11:54:15.688
  STEP: Patch a scale subresource @ 08/24/23 11:54:15.7
  Aug 24 11:54:15.730: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "replicaset-3201" for this suite. @ 08/24/23 11:54:15.76
• [5.215 seconds]
------------------------------
SSSSSSS
------------------------------
[sig-api-machinery] CustomResourceConversionWebhook [Privileged:ClusterAdmin] should be able to convert a non homogeneous list of CRs [Conformance]
test/e2e/apimachinery/crd_conversion_webhook.go:176
  STEP: Creating a kubernetes client @ 08/24/23 11:54:15.789
  Aug 24 11:54:15.789: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename crd-webhook @ 08/24/23 11:54:15.79
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 11:54:15.877
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 11:54:15.884
  STEP: Setting up server cert @ 08/24/23 11:54:15.891
  STEP: Create role binding to let cr conversion webhook read extension-apiserver-authentication @ 08/24/23 11:54:16.535
  STEP: Deploying the custom resource conversion webhook pod @ 08/24/23 11:54:16.551
  STEP: Wait for the deployment to be ready @ 08/24/23 11:54:16.573
  Aug 24 11:54:16.590: INFO: deployment "sample-crd-conversion-webhook-deployment" doesn't have the required revision set
  STEP: Deploying the webhook service @ 08/24/23 11:54:18.62
  STEP: Verifying the service has paired with the endpoint @ 08/24/23 11:54:18.647
  Aug 24 11:54:19.647: INFO: Waiting for amount of service:e2e-test-crd-conversion-webhook endpoints to be 1
  Aug 24 11:54:19.667: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Creating a v1 custom resource @ 08/24/23 11:54:22.342
  STEP: Create a v2 custom resource @ 08/24/23 11:54:22.379
  STEP: List CRs in v1 @ 08/24/23 11:54:22.499
  STEP: List CRs in v2 @ 08/24/23 11:54:22.566
  Aug 24 11:54:22.581: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "crd-webhook-6025" for this suite. @ 08/24/23 11:54:23.191
• [7.417 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-storage] Projected secret optional updates should be reflected in volume [NodeConformance] [Conformance]
test/e2e/common/storage/projected_secret.go:215
  STEP: Creating a kubernetes client @ 08/24/23 11:54:23.208
  Aug 24 11:54:23.208: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename projected @ 08/24/23 11:54:23.209
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 11:54:23.269
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 11:54:23.276
  STEP: Creating secret with name s-test-opt-del-a192a781-a1df-4c58-bf1b-68c0d17113de @ 08/24/23 11:54:23.291
  STEP: Creating secret with name s-test-opt-upd-4a751515-2f32-4afe-a6fe-2cc9ff00bec6 @ 08/24/23 11:54:23.356
  STEP: Creating the pod @ 08/24/23 11:54:23.366
  STEP: Deleting secret s-test-opt-del-a192a781-a1df-4c58-bf1b-68c0d17113de @ 08/24/23 11:54:25.461
  STEP: Updating secret s-test-opt-upd-4a751515-2f32-4afe-a6fe-2cc9ff00bec6 @ 08/24/23 11:54:25.473
  STEP: Creating secret with name s-test-opt-create-3e126cf2-6d10-4c06-891d-aecd67a388d7 @ 08/24/23 11:54:25.484
  STEP: waiting to observe update in volume @ 08/24/23 11:54:25.493
  Aug 24 11:54:29.590: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "projected-9886" for this suite. @ 08/24/23 11:54:29.6
• [6.408 seconds]
------------------------------
SSS
------------------------------
[sig-scheduling] LimitRange should create a LimitRange with defaults and ensure pod has those defaults applied. [Conformance]
test/e2e/scheduling/limit_range.go:61
  STEP: Creating a kubernetes client @ 08/24/23 11:54:29.617
  Aug 24 11:54:29.617: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename limitrange @ 08/24/23 11:54:29.617
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 11:54:29.655
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 11:54:29.662
  STEP: Creating a LimitRange @ 08/24/23 11:54:29.669
  STEP: Setting up watch @ 08/24/23 11:54:29.669
  STEP: Submitting a LimitRange @ 08/24/23 11:54:29.778
  STEP: Verifying LimitRange creation was observed @ 08/24/23 11:54:29.791
  STEP: Fetching the LimitRange to ensure it has proper values @ 08/24/23 11:54:29.791
  Aug 24 11:54:29.800: INFO: Verifying requests: expected map[cpu:{{100 -3} {<nil>} 100m DecimalSI} ephemeral-storage:{{214748364800 0} {<nil>}  BinarySI} memory:{{209715200 0} {<nil>}  BinarySI}] with actual map[cpu:{{100 -3} {<nil>} 100m DecimalSI} ephemeral-storage:{{214748364800 0} {<nil>}  BinarySI} memory:{{209715200 0} {<nil>}  BinarySI}]
  Aug 24 11:54:29.800: INFO: Verifying limits: expected map[cpu:{{500 -3} {<nil>} 500m DecimalSI} ephemeral-storage:{{536870912000 0} {<nil>} 500Gi BinarySI} memory:{{524288000 0} {<nil>} 500Mi BinarySI}] with actual map[cpu:{{500 -3} {<nil>} 500m DecimalSI} ephemeral-storage:{{536870912000 0} {<nil>} 500Gi BinarySI} memory:{{524288000 0} {<nil>} 500Mi BinarySI}]
  STEP: Creating a Pod with no resource requirements @ 08/24/23 11:54:29.8
  STEP: Ensuring Pod has resource requirements applied from LimitRange @ 08/24/23 11:54:29.813
  Aug 24 11:54:29.820: INFO: Verifying requests: expected map[cpu:{{100 -3} {<nil>} 100m DecimalSI} ephemeral-storage:{{214748364800 0} {<nil>}  BinarySI} memory:{{209715200 0} {<nil>}  BinarySI}] with actual map[cpu:{{100 -3} {<nil>} 100m DecimalSI} ephemeral-storage:{{214748364800 0} {<nil>}  BinarySI} memory:{{209715200 0} {<nil>}  BinarySI}]
  Aug 24 11:54:29.820: INFO: Verifying limits: expected map[cpu:{{500 -3} {<nil>} 500m DecimalSI} ephemeral-storage:{{536870912000 0} {<nil>} 500Gi BinarySI} memory:{{524288000 0} {<nil>} 500Mi BinarySI}] with actual map[cpu:{{500 -3} {<nil>} 500m DecimalSI} ephemeral-storage:{{536870912000 0} {<nil>} 500Gi BinarySI} memory:{{524288000 0} {<nil>} 500Mi BinarySI}]
  STEP: Creating a Pod with partial resource requirements @ 08/24/23 11:54:29.82
  STEP: Ensuring Pod has merged resource requirements applied from LimitRange @ 08/24/23 11:54:29.831
  Aug 24 11:54:29.838: INFO: Verifying requests: expected map[cpu:{{300 -3} {<nil>} 300m DecimalSI} ephemeral-storage:{{161061273600 0} {<nil>} 150Gi BinarySI} memory:{{157286400 0} {<nil>} 150Mi BinarySI}] with actual map[cpu:{{300 -3} {<nil>} 300m DecimalSI} ephemeral-storage:{{161061273600 0} {<nil>} 150Gi BinarySI} memory:{{157286400 0} {<nil>} 150Mi BinarySI}]
  Aug 24 11:54:29.838: INFO: Verifying limits: expected map[cpu:{{300 -3} {<nil>} 300m DecimalSI} ephemeral-storage:{{536870912000 0} {<nil>} 500Gi BinarySI} memory:{{524288000 0} {<nil>} 500Mi BinarySI}] with actual map[cpu:{{300 -3} {<nil>} 300m DecimalSI} ephemeral-storage:{{536870912000 0} {<nil>} 500Gi BinarySI} memory:{{524288000 0} {<nil>} 500Mi BinarySI}]
  STEP: Failing to create a Pod with less than min resources @ 08/24/23 11:54:29.838
  STEP: Failing to create a Pod with more than max resources @ 08/24/23 11:54:29.843
  STEP: Updating a LimitRange @ 08/24/23 11:54:29.848
  STEP: Verifying LimitRange updating is effective @ 08/24/23 11:54:29.861
  STEP: Creating a Pod with less than former min resources @ 08/24/23 11:54:31.868
  STEP: Failing to create a Pod with more than max resources @ 08/24/23 11:54:31.88
  STEP: Deleting a LimitRange @ 08/24/23 11:54:31.886
  STEP: Verifying the LimitRange was deleted @ 08/24/23 11:54:31.901
  Aug 24 11:54:36.912: INFO: limitRange is already deleted
  STEP: Creating a Pod with more than former max resources @ 08/24/23 11:54:36.912
  Aug 24 11:54:36.930: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "limitrange-9671" for this suite. @ 08/24/23 11:54:36.942
• [7.340 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-auth] ServiceAccounts ServiceAccountIssuerDiscovery should support OIDC discovery of service account issuer [Conformance]
test/e2e/auth/service_accounts.go:529
  STEP: Creating a kubernetes client @ 08/24/23 11:54:36.957
  Aug 24 11:54:36.957: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename svcaccounts @ 08/24/23 11:54:36.958
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 11:54:36.984
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 11:54:36.99
  Aug 24 11:54:37.027: INFO: created pod
  STEP: Saw pod success @ 08/24/23 11:54:41.079
  Aug 24 11:55:11.083: INFO: polling logs
  Aug 24 11:55:11.104: INFO: Pod logs: 
  I0824 11:54:37.948725       1 log.go:194] OK: Got token
  I0824 11:54:37.948785       1 log.go:194] validating with in-cluster discovery
  I0824 11:54:37.948981       1 log.go:194] OK: got issuer https://kubernetes.default.svc.cluster.local
  I0824 11:54:37.949016       1 log.go:194] Full, not-validated claims: 
  openidmetadata.claims{Claims:jwt.Claims{Issuer:"https://kubernetes.default.svc.cluster.local", Subject:"system:serviceaccount:svcaccounts-5827:default", Audience:jwt.Audience{"oidc-discovery-test"}, Expiry:(*jwt.NumericDate)(0xc0002c0140), NotBefore:(*jwt.NumericDate)(0xc0002c0758), IssuedAt:(*jwt.NumericDate)(0xc0002c0150), ID:""}, Kubernetes:openidmetadata.kubeClaims{Namespace:"svcaccounts-5827", ServiceAccount:openidmetadata.kubeName{Name:"default", UID:"30a8e6e2-720d-440e-9707-d0b5d9c06095"}}}
  I0824 11:54:37.972168       1 log.go:194] OK: Constructed OIDC provider for issuer https://kubernetes.default.svc.cluster.local
  I0824 11:54:37.989771       1 log.go:194] OK: Validated signature on JWT
  I0824 11:54:37.989865       1 log.go:194] OK: Got valid claims from token!
  I0824 11:54:37.989891       1 log.go:194] Full, validated claims: 
  &openidmetadata.claims{Claims:jwt.Claims{Issuer:"https://kubernetes.default.svc.cluster.local", Subject:"system:serviceaccount:svcaccounts-5827:default", Audience:jwt.Audience{"oidc-discovery-test"}, Expiry:(*jwt.NumericDate)(0xc00021b3a8), NotBefore:(*jwt.NumericDate)(0xc00021b3d0), IssuedAt:(*jwt.NumericDate)(0xc00021b3b0), ID:""}, Kubernetes:openidmetadata.kubeClaims{Namespace:"svcaccounts-5827", ServiceAccount:openidmetadata.kubeName{Name:"default", UID:"30a8e6e2-720d-440e-9707-d0b5d9c06095"}}}

  Aug 24 11:55:11.104: INFO: completed pod
  Aug 24 11:55:11.118: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "svcaccounts-5827" for this suite. @ 08/24/23 11:55:11.128
• [34.184 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-node] Pods should run through the lifecycle of Pods and PodStatus [Conformance]
test/e2e/common/node/pods.go:897
  STEP: Creating a kubernetes client @ 08/24/23 11:55:11.144
  Aug 24 11:55:11.144: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename pods @ 08/24/23 11:55:11.145
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 11:55:11.173
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 11:55:11.18
  STEP: creating a Pod with a static label @ 08/24/23 11:55:11.2
  STEP: watching for Pod to be ready @ 08/24/23 11:55:11.218
  Aug 24 11:55:11.222: INFO: observed Pod pod-test in namespace pods-7547 in phase Pending with labels: map[test-pod-static:true] & conditions []
  Aug 24 11:55:11.232: INFO: observed Pod pod-test in namespace pods-7547 in phase Pending with labels: map[test-pod-static:true] & conditions [{PodScheduled True 0001-01-01 00:00:00 +0000 UTC 2023-08-24 11:55:11 +0000 UTC  }]
  Aug 24 11:55:11.268: INFO: observed Pod pod-test in namespace pods-7547 in phase Pending with labels: map[test-pod-static:true] & conditions [{Initialized True 0001-01-01 00:00:00 +0000 UTC 2023-08-24 11:55:11 +0000 UTC  } {Ready False 0001-01-01 00:00:00 +0000 UTC 2023-08-24 11:55:11 +0000 UTC ContainersNotReady containers with unready status: [pod-test]} {ContainersReady False 0001-01-01 00:00:00 +0000 UTC 2023-08-24 11:55:11 +0000 UTC ContainersNotReady containers with unready status: [pod-test]} {PodScheduled True 0001-01-01 00:00:00 +0000 UTC 2023-08-24 11:55:11 +0000 UTC  }]
  Aug 24 11:55:12.394: INFO: Found Pod pod-test in namespace pods-7547 in phase Running with labels: map[test-pod-static:true] & conditions [{Initialized True 0001-01-01 00:00:00 +0000 UTC 2023-08-24 11:55:11 +0000 UTC  } {Ready True 0001-01-01 00:00:00 +0000 UTC 2023-08-24 11:55:12 +0000 UTC  } {ContainersReady True 0001-01-01 00:00:00 +0000 UTC 2023-08-24 11:55:12 +0000 UTC  } {PodScheduled True 0001-01-01 00:00:00 +0000 UTC 2023-08-24 11:55:11 +0000 UTC  }]
  STEP: patching the Pod with a new Label and updated data @ 08/24/23 11:55:12.404
  STEP: getting the Pod and ensuring that it's patched @ 08/24/23 11:55:12.426
  STEP: replacing the Pod's status Ready condition to False @ 08/24/23 11:55:12.436
  STEP: check the Pod again to ensure its Ready conditions are False @ 08/24/23 11:55:12.462
  STEP: deleting the Pod via a Collection with a LabelSelector @ 08/24/23 11:55:12.462
  STEP: watching for the Pod to be deleted @ 08/24/23 11:55:12.487
  Aug 24 11:55:12.491: INFO: observed event type MODIFIED
  Aug 24 11:55:14.401: INFO: observed event type MODIFIED
  Aug 24 11:55:14.569: INFO: observed event type MODIFIED
  Aug 24 11:55:15.407: INFO: observed event type MODIFIED
  Aug 24 11:55:15.438: INFO: observed event type MODIFIED
  Aug 24 11:55:15.459: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "pods-7547" for this suite. @ 08/24/23 11:55:15.47
• [4.340 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-network] IngressClass API  should support creating IngressClass API operations [Conformance]
test/e2e/network/ingressclass.go:266
  STEP: Creating a kubernetes client @ 08/24/23 11:55:15.486
  Aug 24 11:55:15.486: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename ingressclass @ 08/24/23 11:55:15.488
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 11:55:15.543
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 11:55:15.55
  STEP: getting /apis @ 08/24/23 11:55:15.557
  STEP: getting /apis/networking.k8s.io @ 08/24/23 11:55:15.566
  STEP: getting /apis/networking.k8s.iov1 @ 08/24/23 11:55:15.569
  STEP: creating @ 08/24/23 11:55:15.571
  STEP: getting @ 08/24/23 11:55:15.616
  STEP: listing @ 08/24/23 11:55:15.624
  STEP: watching @ 08/24/23 11:55:15.632
  Aug 24 11:55:15.632: INFO: starting watch
  STEP: patching @ 08/24/23 11:55:15.635
  STEP: updating @ 08/24/23 11:55:15.648
  Aug 24 11:55:15.661: INFO: waiting for watch events with expected annotations
  Aug 24 11:55:15.662: INFO: saw patched and updated annotations
  STEP: deleting @ 08/24/23 11:55:15.663
  STEP: deleting a collection @ 08/24/23 11:55:15.694
  Aug 24 11:55:15.735: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "ingressclass-1039" for this suite. @ 08/24/23 11:55:15.747
• [0.276 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should not be able to mutate or prevent deletion of webhook configuration objects [Conformance]
test/e2e/apimachinery/webhook.go:273
  STEP: Creating a kubernetes client @ 08/24/23 11:55:15.764
  Aug 24 11:55:15.764: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename webhook @ 08/24/23 11:55:15.765
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 11:55:15.798
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 11:55:15.805
  STEP: Setting up server cert @ 08/24/23 11:55:15.856
  STEP: Create role binding to let webhook read extension-apiserver-authentication @ 08/24/23 11:55:16.103
  STEP: Deploying the webhook pod @ 08/24/23 11:55:16.121
  STEP: Wait for the deployment to be ready @ 08/24/23 11:55:16.149
  Aug 24 11:55:16.166: INFO: new replicaset for deployment "sample-webhook-deployment" is yet to be created
  Aug 24 11:55:18.192: INFO: deployment status: v1.DeploymentStatus{ObservedGeneration:1, Replicas:1, UpdatedReplicas:1, ReadyReplicas:0, AvailableReplicas:0, UnavailableReplicas:1, Conditions:[]v1.DeploymentCondition{v1.DeploymentCondition{Type:"Available", Status:"False", LastUpdateTime:time.Date(2023, time.August, 24, 11, 55, 16, 0, time.Local), LastTransitionTime:time.Date(2023, time.August, 24, 11, 55, 16, 0, time.Local), Reason:"MinimumReplicasUnavailable", Message:"Deployment does not have minimum availability."}, v1.DeploymentCondition{Type:"Progressing", Status:"True", LastUpdateTime:time.Date(2023, time.August, 24, 11, 55, 17, 0, time.Local), LastTransitionTime:time.Date(2023, time.August, 24, 11, 55, 16, 0, time.Local), Reason:"ReplicaSetUpdated", Message:"ReplicaSet \"sample-webhook-deployment-7646f658cc\" is progressing."}}, CollisionCount:(*int32)(nil)}
  STEP: Deploying the webhook service @ 08/24/23 11:55:20.202
  STEP: Verifying the service has paired with the endpoint @ 08/24/23 11:55:20.229
  Aug 24 11:55:21.229: INFO: Waiting for amount of service:e2e-test-webhook endpoints to be 1
  STEP: Registering a validating webhook on ValidatingWebhookConfiguration and MutatingWebhookConfiguration objects, via the AdmissionRegistration API @ 08/24/23 11:55:21.265
  STEP: Registering a mutating webhook on ValidatingWebhookConfiguration and MutatingWebhookConfiguration objects, via the AdmissionRegistration API @ 08/24/23 11:55:21.358
  STEP: Creating a dummy validating-webhook-configuration object @ 08/24/23 11:55:21.402
  STEP: Deleting the validating-webhook-configuration, which should be possible to remove @ 08/24/23 11:55:21.468
  STEP: Creating a dummy mutating-webhook-configuration object @ 08/24/23 11:55:21.482
  STEP: Deleting the mutating-webhook-configuration, which should be possible to remove @ 08/24/23 11:55:21.549
  Aug 24 11:55:21.565: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "webhook-4311" for this suite. @ 08/24/23 11:55:21.855
  STEP: Destroying namespace "webhook-markers-8079" for this suite. @ 08/24/23 11:55:21.868
• [6.195 seconds]
------------------------------
SSSSS
------------------------------
[sig-cli] Kubectl client Kubectl patch should add annotations for pods in rc  [Conformance]
test/e2e/kubectl/kubectl.go:1641
  STEP: Creating a kubernetes client @ 08/24/23 11:55:21.959
  Aug 24 11:55:21.959: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename kubectl @ 08/24/23 11:55:21.96
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 11:55:22.052
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 11:55:22.058
  STEP: creating Agnhost RC @ 08/24/23 11:55:22.066
  Aug 24 11:55:22.066: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1002171096 --namespace=kubectl-9730 create -f -'
  Aug 24 11:55:22.504: INFO: stderr: ""
  Aug 24 11:55:22.504: INFO: stdout: "replicationcontroller/agnhost-primary created\n"
  STEP: Waiting for Agnhost primary to start. @ 08/24/23 11:55:22.504
  Aug 24 11:55:23.515: INFO: Selector matched 1 pods for map[app:agnhost]
  Aug 24 11:55:23.515: INFO: Found 1 / 1
  Aug 24 11:55:23.515: INFO: WaitFor completed with timeout 5m0s.  Pods found = 1 out of 1
  STEP: patching all pods @ 08/24/23 11:55:23.515
  Aug 24 11:55:23.522: INFO: Selector matched 1 pods for map[app:agnhost]
  Aug 24 11:55:23.522: INFO: ForEach: Found 1 pods from the filter.  Now looping through them.
  Aug 24 11:55:23.522: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1002171096 --namespace=kubectl-9730 patch pod agnhost-primary-g4zpc -p {"metadata":{"annotations":{"x":"y"}}}'
  Aug 24 11:55:23.656: INFO: stderr: ""
  Aug 24 11:55:23.656: INFO: stdout: "pod/agnhost-primary-g4zpc patched\n"
  STEP: checking annotations @ 08/24/23 11:55:23.656
  Aug 24 11:55:23.665: INFO: Selector matched 1 pods for map[app:agnhost]
  Aug 24 11:55:23.665: INFO: ForEach: Found 1 pods from the filter.  Now looping through them.
  Aug 24 11:55:23.665: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "kubectl-9730" for this suite. @ 08/24/23 11:55:23.676
• [1.734 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSS
------------------------------
[sig-apps] DisruptionController should create a PodDisruptionBudget [Conformance]
test/e2e/apps/disruption.go:108
  STEP: Creating a kubernetes client @ 08/24/23 11:55:23.694
  Aug 24 11:55:23.694: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename disruption @ 08/24/23 11:55:23.695
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 11:55:23.724
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 11:55:23.731
  STEP: creating the pdb @ 08/24/23 11:55:23.738
  STEP: Waiting for the pdb to be processed @ 08/24/23 11:55:23.751
  STEP: updating the pdb @ 08/24/23 11:55:25.767
  STEP: Waiting for the pdb to be processed @ 08/24/23 11:55:25.787
  STEP: patching the pdb @ 08/24/23 11:55:27.805
  STEP: Waiting for the pdb to be processed @ 08/24/23 11:55:27.849
  STEP: Waiting for the pdb to be deleted @ 08/24/23 11:55:29.879
  Aug 24 11:55:29.885: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "disruption-6341" for this suite. @ 08/24/23 11:55:29.894
• [6.214 seconds]
------------------------------
SSSSS
------------------------------
[sig-node] RuntimeClass  should support RuntimeClasses API operations [Conformance]
test/e2e/common/node/runtimeclass.go:189
  STEP: Creating a kubernetes client @ 08/24/23 11:55:29.909
  Aug 24 11:55:29.909: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename runtimeclass @ 08/24/23 11:55:29.91
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 11:55:29.94
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 11:55:29.947
  STEP: getting /apis @ 08/24/23 11:55:29.953
  STEP: getting /apis/node.k8s.io @ 08/24/23 11:55:29.963
  STEP: getting /apis/node.k8s.io/v1 @ 08/24/23 11:55:29.966
  STEP: creating @ 08/24/23 11:55:29.969
  STEP: watching @ 08/24/23 11:55:30.007
  Aug 24 11:55:30.007: INFO: starting watch
  STEP: getting @ 08/24/23 11:55:30.02
  STEP: listing @ 08/24/23 11:55:30.027
  STEP: patching @ 08/24/23 11:55:30.035
  STEP: updating @ 08/24/23 11:55:30.047
  Aug 24 11:55:30.063: INFO: waiting for watch events with expected annotations
  STEP: deleting @ 08/24/23 11:55:30.063
  STEP: deleting a collection @ 08/24/23 11:55:30.09
  Aug 24 11:55:30.126: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "runtimeclass-2790" for this suite. @ 08/24/23 11:55:30.135
• [0.242 seconds]
------------------------------
SSSSSSSSSSSS
------------------------------
[sig-node] Sysctls [LinuxOnly] [NodeConformance] should support sysctls [MinimumKubeletVersion:1.21] [Conformance]
test/e2e/common/node/sysctl.go:77
  STEP: Creating a kubernetes client @ 08/24/23 11:55:30.151
  Aug 24 11:55:30.151: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename sysctl @ 08/24/23 11:55:30.152
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 11:55:30.181
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 11:55:30.189
  STEP: Creating a pod with the kernel.shm_rmid_forced sysctl @ 08/24/23 11:55:30.196
  STEP: Watching for error events or started pod @ 08/24/23 11:55:30.216
  STEP: Waiting for pod completion @ 08/24/23 11:55:32.225
  STEP: Checking that the pod succeeded @ 08/24/23 11:55:34.252
  STEP: Getting logs from the pod @ 08/24/23 11:55:34.252
  STEP: Checking that the sysctl is actually updated @ 08/24/23 11:55:34.276
  Aug 24 11:55:34.276: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "sysctl-3586" for this suite. @ 08/24/23 11:55:34.287
• [4.153 seconds]
------------------------------
SSS
------------------------------
[sig-node] PreStop should call prestop when killing a pod  [Conformance]
test/e2e/node/pre_stop.go:169
  STEP: Creating a kubernetes client @ 08/24/23 11:55:34.304
  Aug 24 11:55:34.304: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename prestop @ 08/24/23 11:55:34.305
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 11:55:34.344
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 11:55:34.35
  STEP: Creating server pod server in namespace prestop-1659 @ 08/24/23 11:55:34.356
  STEP: Waiting for pods to come up. @ 08/24/23 11:55:34.377
  STEP: Creating tester pod tester in namespace prestop-1659 @ 08/24/23 11:55:36.402
  STEP: Deleting pre-stop pod @ 08/24/23 11:55:38.437
  Aug 24 11:55:43.477: INFO: Saw: {
  	"Hostname": "server",
  	"Sent": null,
  	"Received": {
  		"prestop": 1
  	},
  	"Errors": null,
  	"Log": [
  		"default/nettest has 0 endpoints ([]), which is less than 8 as expected. Waiting for all endpoints to come up.",
  		"default/nettest has 0 endpoints ([]), which is less than 8 as expected. Waiting for all endpoints to come up."
  	],
  	"StillContactingPeers": true
  }
  Aug 24 11:55:43.477: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Deleting the server pod @ 08/24/23 11:55:43.486
  STEP: Destroying namespace "prestop-1659" for this suite. @ 08/24/23 11:55:43.516
• [9.224 seconds]
------------------------------
SSSSSSSSSSSSSSSSS
------------------------------
[sig-apps] ReplicaSet should list and delete a collection of ReplicaSets [Conformance]
test/e2e/apps/replica_set.go:165
  STEP: Creating a kubernetes client @ 08/24/23 11:55:43.529
  Aug 24 11:55:43.529: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename replicaset @ 08/24/23 11:55:43.53
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 11:55:43.567
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 11:55:43.574
  STEP: Create a ReplicaSet @ 08/24/23 11:55:43.58
  STEP: Verify that the required pods have come up @ 08/24/23 11:55:43.591
  Aug 24 11:55:43.604: INFO: Pod name sample-pod: Found 0 pods out of 3
  Aug 24 11:55:48.614: INFO: Pod name sample-pod: Found 3 pods out of 3
  STEP: ensuring each pod is running @ 08/24/23 11:55:48.614
  Aug 24 11:55:48.621: INFO: Replica Status: {Replicas:3 FullyLabeledReplicas:3 ReadyReplicas:3 AvailableReplicas:3 ObservedGeneration:1 Conditions:[]}
  STEP: Listing all ReplicaSets @ 08/24/23 11:55:48.621
  STEP: DeleteCollection of the ReplicaSets @ 08/24/23 11:55:48.637
  STEP: After DeleteCollection verify that ReplicaSets have been deleted @ 08/24/23 11:55:48.665
  Aug 24 11:55:48.674: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "replicaset-25" for this suite. @ 08/24/23 11:55:48.683
• [5.171 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should be able to deny custom resource creation, update and deletion [Conformance]
test/e2e/apimachinery/webhook.go:221
  STEP: Creating a kubernetes client @ 08/24/23 11:55:48.701
  Aug 24 11:55:48.701: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename webhook @ 08/24/23 11:55:48.702
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 11:55:48.863
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 11:55:48.954
  STEP: Setting up server cert @ 08/24/23 11:55:49.061
  STEP: Create role binding to let webhook read extension-apiserver-authentication @ 08/24/23 11:55:49.593
  STEP: Deploying the webhook pod @ 08/24/23 11:55:49.61
  STEP: Wait for the deployment to be ready @ 08/24/23 11:55:49.635
  Aug 24 11:55:49.657: INFO: new replicaset for deployment "sample-webhook-deployment" is yet to be created
  STEP: Deploying the webhook service @ 08/24/23 11:55:51.684
  STEP: Verifying the service has paired with the endpoint @ 08/24/23 11:55:51.71
  Aug 24 11:55:52.710: INFO: Waiting for amount of service:e2e-test-webhook endpoints to be 1
  Aug 24 11:55:52.729: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Registering the custom resource webhook via the AdmissionRegistration API @ 08/24/23 11:55:53.25
  STEP: Creating a custom resource that should be denied by the webhook @ 08/24/23 11:55:53.291
  STEP: Creating a custom resource whose deletion would be denied by the webhook @ 08/24/23 11:55:55.359
  STEP: Updating the custom resource with disallowed data should be denied @ 08/24/23 11:55:55.376
  STEP: Deleting the custom resource should be denied @ 08/24/23 11:55:55.398
  STEP: Remove the offending key and value from the custom resource data @ 08/24/23 11:55:55.417
  STEP: Deleting the updated custom resource should be successful @ 08/24/23 11:55:55.459
  Aug 24 11:55:55.478: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "webhook-55" for this suite. @ 08/24/23 11:55:56.45
  STEP: Destroying namespace "webhook-markers-8655" for this suite. @ 08/24/23 11:55:56.651
• [7.968 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-node] PodTemplates should replace a pod template [Conformance]
test/e2e/common/node/podtemplates.go:176
  STEP: Creating a kubernetes client @ 08/24/23 11:55:56.671
  Aug 24 11:55:56.671: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename podtemplate @ 08/24/23 11:55:56.673
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 11:55:56.755
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 11:55:56.762
  STEP: Create a pod template @ 08/24/23 11:55:56.768
  STEP: Replace a pod template @ 08/24/23 11:55:56.797
  Aug 24 11:55:56.818: INFO: Found updated podtemplate annotation: "true"

  Aug 24 11:55:56.818: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "podtemplate-8172" for this suite. @ 08/24/23 11:55:56.826
• [0.189 seconds]
------------------------------
SSSSSSSSSSSSSS
------------------------------
[sig-storage] Projected downwardAPI should provide container's memory limit [NodeConformance] [Conformance]
test/e2e/common/storage/projected_downwardapi.go:208
  STEP: Creating a kubernetes client @ 08/24/23 11:55:56.861
  Aug 24 11:55:56.861: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename projected @ 08/24/23 11:55:56.862
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 11:55:56.893
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 11:55:56.899
  STEP: Creating a pod to test downward API volume plugin @ 08/24/23 11:55:56.906
  STEP: Saw pod success @ 08/24/23 11:56:00.955
  Aug 24 11:56:00.965: INFO: Trying to get logs from node scw-conformance-default-2af6d8b4c6264cc5b9e5e6 pod downwardapi-volume-62e71438-fc5e-486b-bcd6-4c7c961832c1 container client-container: <nil>
  STEP: delete the pod @ 08/24/23 11:56:00.984
  Aug 24 11:56:01.016: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "projected-1941" for this suite. @ 08/24/23 11:56:01.026
• [4.183 seconds]
------------------------------
SSSSSSSSSSS
------------------------------
[sig-node] Container Lifecycle Hook when create a pod with lifecycle hook should execute prestop http hook properly [NodeConformance] [Conformance]
test/e2e/common/node/lifecycle_hook.go:213
  STEP: Creating a kubernetes client @ 08/24/23 11:56:01.045
  Aug 24 11:56:01.045: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename container-lifecycle-hook @ 08/24/23 11:56:01.046
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 11:56:01.179
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 11:56:01.187
  STEP: create the container to handle the HTTPGet hook request. @ 08/24/23 11:56:01.202
  STEP: create the pod with lifecycle hook @ 08/24/23 11:56:03.254
  STEP: delete the pod with lifecycle hook @ 08/24/23 11:56:05.291
  STEP: check prestop hook @ 08/24/23 11:56:07.327
  Aug 24 11:56:07.372: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "container-lifecycle-hook-1677" for this suite. @ 08/24/23 11:56:07.381
• [6.352 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-node] Containers should be able to override the image's default command and arguments [NodeConformance] [Conformance]
test/e2e/common/node/containers.go:89
  STEP: Creating a kubernetes client @ 08/24/23 11:56:07.399
  Aug 24 11:56:07.399: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename containers @ 08/24/23 11:56:07.401
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 11:56:07.432
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 11:56:07.439
  STEP: Creating a pod to test override all @ 08/24/23 11:56:07.449
  STEP: Saw pod success @ 08/24/23 11:56:11.494
  Aug 24 11:56:11.503: INFO: Trying to get logs from node scw-conformance-default-2af6d8b4c6264cc5b9e5e6 pod client-containers-46305a0b-1846-4979-a948-1cca767ab02f container agnhost-container: <nil>
  STEP: delete the pod @ 08/24/23 11:56:11.519
  Aug 24 11:56:11.547: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "containers-4365" for this suite. @ 08/24/23 11:56:11.557
• [4.176 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-cli] Kubectl client Kubectl replace should update a single-container pod's image  [Conformance]
test/e2e/kubectl/kubectl.go:1741
  STEP: Creating a kubernetes client @ 08/24/23 11:56:11.577
  Aug 24 11:56:11.577: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename kubectl @ 08/24/23 11:56:11.578
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 11:56:11.61
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 11:56:11.617
  STEP: running the image registry.k8s.io/e2e-test-images/httpd:2.4.38-4 @ 08/24/23 11:56:11.625
  Aug 24 11:56:11.625: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1002171096 --namespace=kubectl-5669 run e2e-test-httpd-pod --image=registry.k8s.io/e2e-test-images/httpd:2.4.38-4 --pod-running-timeout=2m0s --labels=run=e2e-test-httpd-pod'
  Aug 24 11:56:11.766: INFO: stderr: ""
  Aug 24 11:56:11.766: INFO: stdout: "pod/e2e-test-httpd-pod created\n"
  STEP: verifying the pod e2e-test-httpd-pod is running @ 08/24/23 11:56:11.767
  STEP: verifying the pod e2e-test-httpd-pod was created @ 08/24/23 11:56:16.819
  Aug 24 11:56:16.819: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1002171096 --namespace=kubectl-5669 get pod e2e-test-httpd-pod -o json'
  Aug 24 11:56:16.937: INFO: stderr: ""
  Aug 24 11:56:16.937: INFO: stdout: "{\n    \"apiVersion\": \"v1\",\n    \"kind\": \"Pod\",\n    \"metadata\": {\n        \"creationTimestamp\": \"2023-08-24T11:56:11Z\",\n        \"labels\": {\n            \"run\": \"e2e-test-httpd-pod\"\n        },\n        \"name\": \"e2e-test-httpd-pod\",\n        \"namespace\": \"kubectl-5669\",\n        \"resourceVersion\": \"3404920763\",\n        \"uid\": \"60aa6530-5091-429c-9c1d-7de0e7f97ec8\"\n    },\n    \"spec\": {\n        \"containers\": [\n            {\n                \"image\": \"registry.k8s.io/e2e-test-images/httpd:2.4.38-4\",\n                \"imagePullPolicy\": \"IfNotPresent\",\n                \"name\": \"e2e-test-httpd-pod\",\n                \"resources\": {},\n                \"terminationMessagePath\": \"/dev/termination-log\",\n                \"terminationMessagePolicy\": \"File\",\n                \"volumeMounts\": [\n                    {\n                        \"mountPath\": \"/var/run/secrets/kubernetes.io/serviceaccount\",\n                        \"name\": \"kube-api-access-nnnqb\",\n                        \"readOnly\": true\n                    }\n                ]\n            }\n        ],\n        \"dnsPolicy\": \"ClusterFirst\",\n        \"enableServiceLinks\": true,\n        \"nodeName\": \"scw-conformance-default-2af6d8b4c6264cc5b9e5e6\",\n        \"preemptionPolicy\": \"PreemptLowerPriority\",\n        \"priority\": 0,\n        \"restartPolicy\": \"Always\",\n        \"schedulerName\": \"default-scheduler\",\n        \"securityContext\": {},\n        \"serviceAccount\": \"default\",\n        \"serviceAccountName\": \"default\",\n        \"terminationGracePeriodSeconds\": 30,\n        \"tolerations\": [\n            {\n                \"effect\": \"NoExecute\",\n                \"key\": \"node.kubernetes.io/not-ready\",\n                \"operator\": \"Exists\",\n                \"tolerationSeconds\": 300\n            },\n            {\n                \"effect\": \"NoExecute\",\n                \"key\": \"node.kubernetes.io/unreachable\",\n                \"operator\": \"Exists\",\n                \"tolerationSeconds\": 300\n            }\n        ],\n        \"volumes\": [\n            {\n                \"name\": \"kube-api-access-nnnqb\",\n                \"projected\": {\n                    \"defaultMode\": 420,\n                    \"sources\": [\n                        {\n                            \"serviceAccountToken\": {\n                                \"expirationSeconds\": 3607,\n                                \"path\": \"token\"\n                            }\n                        },\n                        {\n                            \"configMap\": {\n                                \"items\": [\n                                    {\n                                        \"key\": \"ca.crt\",\n                                        \"path\": \"ca.crt\"\n                                    }\n                                ],\n                                \"name\": \"kube-root-ca.crt\"\n                            }\n                        },\n                        {\n                            \"downwardAPI\": {\n                                \"items\": [\n                                    {\n                                        \"fieldRef\": {\n                                            \"apiVersion\": \"v1\",\n                                            \"fieldPath\": \"metadata.namespace\"\n                                        },\n                                        \"path\": \"namespace\"\n                                    }\n                                ]\n                            }\n                        }\n                    ]\n                }\n            }\n        ]\n    },\n    \"status\": {\n        \"conditions\": [\n            {\n                \"lastProbeTime\": null,\n                \"lastTransitionTime\": \"2023-08-24T11:56:11Z\",\n                \"status\": \"True\",\n                \"type\": \"Initialized\"\n            },\n            {\n                \"lastProbeTime\": null,\n                \"lastTransitionTime\": \"2023-08-24T11:56:12Z\",\n                \"status\": \"True\",\n                \"type\": \"Ready\"\n            },\n            {\n                \"lastProbeTime\": null,\n                \"lastTransitionTime\": \"2023-08-24T11:56:12Z\",\n                \"status\": \"True\",\n                \"type\": \"ContainersReady\"\n            },\n            {\n                \"lastProbeTime\": null,\n                \"lastTransitionTime\": \"2023-08-24T11:56:11Z\",\n                \"status\": \"True\",\n                \"type\": \"PodScheduled\"\n            }\n        ],\n        \"containerStatuses\": [\n            {\n                \"containerID\": \"containerd://918807d70905f44c7569cbfdaa2c1e58f9410461bd847c6467670614847c741d\",\n                \"image\": \"registry.k8s.io/e2e-test-images/httpd:2.4.38-4\",\n                \"imageID\": \"registry.k8s.io/e2e-test-images/httpd@sha256:148b022f5c5da426fc2f3c14b5c0867e58ef05961510c84749ac1fddcb0fef22\",\n                \"lastState\": {},\n                \"name\": \"e2e-test-httpd-pod\",\n                \"ready\": true,\n                \"restartCount\": 0,\n                \"started\": true,\n                \"state\": {\n                    \"running\": {\n                        \"startedAt\": \"2023-08-24T11:56:12Z\"\n                    }\n                }\n            }\n        ],\n        \"hostIP\": \"172.16.36.3\",\n        \"phase\": \"Running\",\n        \"podIP\": \"10.100.0.202\",\n        \"podIPs\": [\n            {\n                \"ip\": \"10.100.0.202\"\n            }\n        ],\n        \"qosClass\": \"BestEffort\",\n        \"startTime\": \"2023-08-24T11:56:11Z\"\n    }\n}\n"
  STEP: replace the image in the pod @ 08/24/23 11:56:16.937
  Aug 24 11:56:16.937: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1002171096 --namespace=kubectl-5669 replace -f -'
  Aug 24 11:56:17.351: INFO: stderr: ""
  Aug 24 11:56:17.351: INFO: stdout: "pod/e2e-test-httpd-pod replaced\n"
  STEP: verifying the pod e2e-test-httpd-pod has the right image registry.k8s.io/e2e-test-images/busybox:1.29-4 @ 08/24/23 11:56:17.351
  Aug 24 11:56:17.359: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1002171096 --namespace=kubectl-5669 delete pods e2e-test-httpd-pod'
  Aug 24 11:56:18.683: INFO: stderr: ""
  Aug 24 11:56:18.683: INFO: stdout: "pod \"e2e-test-httpd-pod\" deleted\n"
  Aug 24 11:56:18.683: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "kubectl-5669" for this suite. @ 08/24/23 11:56:18.693
• [7.130 seconds]
------------------------------
S
------------------------------
[sig-api-machinery] Namespaces [Serial] should ensure that all services are removed when a namespace is deleted [Conformance]
test/e2e/apimachinery/namespace.go:252
  STEP: Creating a kubernetes client @ 08/24/23 11:56:18.707
  Aug 24 11:56:18.707: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename namespaces @ 08/24/23 11:56:18.708
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 11:56:18.736
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 11:56:18.749
  STEP: Creating a test namespace @ 08/24/23 11:56:18.756
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 11:56:18.783
  STEP: Creating a service in the namespace @ 08/24/23 11:56:18.79
  STEP: Deleting the namespace @ 08/24/23 11:56:18.811
  STEP: Waiting for the namespace to be removed. @ 08/24/23 11:56:18.875
  STEP: Recreating the namespace @ 08/24/23 11:56:24.884
  STEP: Verifying there is no service in the namespace @ 08/24/23 11:56:24.909
  Aug 24 11:56:24.916: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "namespaces-3298" for this suite. @ 08/24/23 11:56:24.924
  STEP: Destroying namespace "nsdeletetest-3134" for this suite. @ 08/24/23 11:56:24.949
  Aug 24 11:56:24.956: INFO: Namespace nsdeletetest-3134 was already deleted
  STEP: Destroying namespace "nsdeletetest-7177" for this suite. @ 08/24/23 11:56:24.957
• [6.263 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-api-machinery] Garbage collector should orphan pods created by rc if delete options say so [Conformance]
test/e2e/apimachinery/garbage_collector.go:379
  STEP: Creating a kubernetes client @ 08/24/23 11:56:24.971
  Aug 24 11:56:24.971: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename gc @ 08/24/23 11:56:24.972
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 11:56:25.003
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 11:56:25.01
  STEP: create the rc @ 08/24/23 11:56:25.026
  W0824 11:56:25.039245      22 warnings.go:70] metadata.name: this is used in Pod names and hostnames, which can result in surprising behavior; a DNS label is recommended: [must not contain dots]
  STEP: delete the rc @ 08/24/23 11:56:31.059
  STEP: wait for the rc to be deleted @ 08/24/23 11:56:31.156
  STEP: wait for 30 seconds to see if the garbage collector mistakenly deletes the pods @ 08/24/23 11:56:36.255
  STEP: Gathering metrics @ 08/24/23 11:57:06.289
  W0824 11:57:06.304170      22 metrics_grabber.go:152] Can't find kube-controller-manager pod. Grabbing metrics from kube-controller-manager is disabled.
  Aug 24 11:57:06.304: INFO: For apiserver_request_total:
  For apiserver_request_latency_seconds:
  For apiserver_init_events_total:
  For garbage_collector_attempt_to_delete_queue_latency:
  For garbage_collector_attempt_to_delete_work_duration:
  For garbage_collector_attempt_to_orphan_queue_latency:
  For garbage_collector_attempt_to_orphan_work_duration:
  For garbage_collector_dirty_processing_latency_microseconds:
  For garbage_collector_event_processing_latency_microseconds:
  For garbage_collector_graph_changes_queue_latency:
  For garbage_collector_graph_changes_work_duration:
  For garbage_collector_orphan_processing_latency_microseconds:
  For namespace_queue_latency:
  For namespace_queue_latency_sum:
  For namespace_queue_latency_count:
  For namespace_retries:
  For namespace_work_duration:
  For namespace_work_duration_sum:
  For namespace_work_duration_count:
  For function_duration_seconds:
  For errors_total:
  For evicted_pods_total:

  Aug 24 11:57:06.304: INFO: Deleting pod "simpletest.rc-2dpbd" in namespace "gc-3649"
  Aug 24 11:57:06.330: INFO: Deleting pod "simpletest.rc-2dzkl" in namespace "gc-3649"
  Aug 24 11:57:06.360: INFO: Deleting pod "simpletest.rc-2fbxc" in namespace "gc-3649"
  Aug 24 11:57:06.387: INFO: Deleting pod "simpletest.rc-2h7kg" in namespace "gc-3649"
  Aug 24 11:57:06.463: INFO: Deleting pod "simpletest.rc-45hlv" in namespace "gc-3649"
  Aug 24 11:57:06.549: INFO: Deleting pod "simpletest.rc-4brj9" in namespace "gc-3649"
  Aug 24 11:57:06.578: INFO: Deleting pod "simpletest.rc-4lxkr" in namespace "gc-3649"
  Aug 24 11:57:06.673: INFO: Deleting pod "simpletest.rc-4n6l7" in namespace "gc-3649"
  Aug 24 11:57:06.768: INFO: Deleting pod "simpletest.rc-4nstc" in namespace "gc-3649"
  Aug 24 11:57:06.849: INFO: Deleting pod "simpletest.rc-4vzkn" in namespace "gc-3649"
  Aug 24 11:57:06.949: INFO: Deleting pod "simpletest.rc-4wprh" in namespace "gc-3649"
  Aug 24 11:57:06.974: INFO: Deleting pod "simpletest.rc-52kdx" in namespace "gc-3649"
  Aug 24 11:57:07.073: INFO: Deleting pod "simpletest.rc-552xr" in namespace "gc-3649"
  Aug 24 11:57:07.170: INFO: Deleting pod "simpletest.rc-57x7v" in namespace "gc-3649"
  Aug 24 11:57:07.261: INFO: Deleting pod "simpletest.rc-58xgq" in namespace "gc-3649"
  Aug 24 11:57:07.361: INFO: Deleting pod "simpletest.rc-6j8z2" in namespace "gc-3649"
  Aug 24 11:57:07.451: INFO: Deleting pod "simpletest.rc-7429s" in namespace "gc-3649"
  Aug 24 11:57:07.549: INFO: Deleting pod "simpletest.rc-74lx8" in namespace "gc-3649"
  Aug 24 11:57:07.650: INFO: Deleting pod "simpletest.rc-7bqvv" in namespace "gc-3649"
  Aug 24 11:57:07.749: INFO: Deleting pod "simpletest.rc-7xmtb" in namespace "gc-3649"
  Aug 24 11:57:07.771: INFO: Deleting pod "simpletest.rc-8cr2g" in namespace "gc-3649"
  Aug 24 11:57:07.855: INFO: Deleting pod "simpletest.rc-8ppdz" in namespace "gc-3649"
  Aug 24 11:57:07.956: INFO: Deleting pod "simpletest.rc-959xb" in namespace "gc-3649"
  Aug 24 11:57:08.056: INFO: Deleting pod "simpletest.rc-97pfz" in namespace "gc-3649"
  Aug 24 11:57:08.149: INFO: Deleting pod "simpletest.rc-9cs9p" in namespace "gc-3649"
  Aug 24 11:57:08.249: INFO: Deleting pod "simpletest.rc-9dfd2" in namespace "gc-3649"
  Aug 24 11:57:08.274: INFO: Deleting pod "simpletest.rc-9q4p9" in namespace "gc-3649"
  Aug 24 11:57:08.367: INFO: Deleting pod "simpletest.rc-9x4q8" in namespace "gc-3649"
  Aug 24 11:57:08.456: INFO: Deleting pod "simpletest.rc-b4mrq" in namespace "gc-3649"
  Aug 24 11:57:08.549: INFO: Deleting pod "simpletest.rc-b5l54" in namespace "gc-3649"
  Aug 24 11:57:08.648: INFO: Deleting pod "simpletest.rc-bb9zs" in namespace "gc-3649"
  Aug 24 11:57:08.670: INFO: Deleting pod "simpletest.rc-bhqlk" in namespace "gc-3649"
  Aug 24 11:57:08.765: INFO: Deleting pod "simpletest.rc-blgj5" in namespace "gc-3649"
  Aug 24 11:57:08.861: INFO: Deleting pod "simpletest.rc-bmwfq" in namespace "gc-3649"
  Aug 24 11:57:08.969: INFO: Deleting pod "simpletest.rc-bs29f" in namespace "gc-3649"
  Aug 24 11:57:09.074: INFO: Deleting pod "simpletest.rc-c4mh8" in namespace "gc-3649"
  Aug 24 11:57:09.176: INFO: Deleting pod "simpletest.rc-c4z4z" in namespace "gc-3649"
  Aug 24 11:57:09.270: INFO: Deleting pod "simpletest.rc-c8z6z" in namespace "gc-3649"
  Aug 24 11:57:09.367: INFO: Deleting pod "simpletest.rc-c9cfw" in namespace "gc-3649"
  Aug 24 11:57:09.462: INFO: Deleting pod "simpletest.rc-clz8p" in namespace "gc-3649"
  Aug 24 11:57:09.564: INFO: Deleting pod "simpletest.rc-ct887" in namespace "gc-3649"
  Aug 24 11:57:09.664: INFO: Deleting pod "simpletest.rc-dhm5k" in namespace "gc-3649"
  Aug 24 11:57:09.749: INFO: Deleting pod "simpletest.rc-fcnzh" in namespace "gc-3649"
  Aug 24 11:57:09.856: INFO: Deleting pod "simpletest.rc-fnq79" in namespace "gc-3649"
  Aug 24 11:57:09.959: INFO: Deleting pod "simpletest.rc-fwzk8" in namespace "gc-3649"
  Aug 24 11:57:10.054: INFO: Deleting pod "simpletest.rc-g8lcl" in namespace "gc-3649"
  Aug 24 11:57:10.149: INFO: Deleting pod "simpletest.rc-ghts2" in namespace "gc-3649"
  Aug 24 11:57:10.249: INFO: Deleting pod "simpletest.rc-glv9c" in namespace "gc-3649"
  Aug 24 11:57:10.286: INFO: Deleting pod "simpletest.rc-h2lfc" in namespace "gc-3649"
  Aug 24 11:57:10.948: INFO: Deleting pod "simpletest.rc-h6tch" in namespace "gc-3649"
  Aug 24 11:57:11.360: INFO: Deleting pod "simpletest.rc-hdbz7" in namespace "gc-3649"
  Aug 24 11:57:11.453: INFO: Deleting pod "simpletest.rc-hm4rn" in namespace "gc-3649"
  Aug 24 11:57:11.571: INFO: Deleting pod "simpletest.rc-j8rnr" in namespace "gc-3649"
  Aug 24 11:57:11.672: INFO: Deleting pod "simpletest.rc-jbxpp" in namespace "gc-3649"
  Aug 24 11:57:11.749: INFO: Deleting pod "simpletest.rc-jps6k" in namespace "gc-3649"
  Aug 24 11:57:11.775: INFO: Deleting pod "simpletest.rc-jrrvz" in namespace "gc-3649"
  Aug 24 11:57:11.861: INFO: Deleting pod "simpletest.rc-k7f9d" in namespace "gc-3649"
  Aug 24 11:57:11.966: INFO: Deleting pod "simpletest.rc-kmwz9" in namespace "gc-3649"
  Aug 24 11:57:12.055: INFO: Deleting pod "simpletest.rc-kqc4g" in namespace "gc-3649"
  Aug 24 11:57:12.077: INFO: Deleting pod "simpletest.rc-lbftv" in namespace "gc-3649"
  Aug 24 11:57:12.175: INFO: Deleting pod "simpletest.rc-ldsnj" in namespace "gc-3649"
  Aug 24 11:57:12.272: INFO: Deleting pod "simpletest.rc-lqsxl" in namespace "gc-3649"
  Aug 24 11:57:12.368: INFO: Deleting pod "simpletest.rc-lv6hh" in namespace "gc-3649"
  Aug 24 11:57:12.456: INFO: Deleting pod "simpletest.rc-mqt79" in namespace "gc-3649"
  Aug 24 11:57:12.557: INFO: Deleting pod "simpletest.rc-mwppm" in namespace "gc-3649"
  Aug 24 11:57:12.655: INFO: Deleting pod "simpletest.rc-nfz82" in namespace "gc-3649"
  Aug 24 11:57:12.683: INFO: Deleting pod "simpletest.rc-nnsj9" in namespace "gc-3649"
  Aug 24 11:57:12.779: INFO: Deleting pod "simpletest.rc-pbdts" in namespace "gc-3649"
  Aug 24 11:57:12.868: INFO: Deleting pod "simpletest.rc-pdd9z" in namespace "gc-3649"
  Aug 24 11:57:12.949: INFO: Deleting pod "simpletest.rc-ph9tw" in namespace "gc-3649"
  Aug 24 11:57:13.049: INFO: Deleting pod "simpletest.rc-plmdh" in namespace "gc-3649"
  Aug 24 11:57:13.076: INFO: Deleting pod "simpletest.rc-pt5qm" in namespace "gc-3649"
  Aug 24 11:57:13.170: INFO: Deleting pod "simpletest.rc-qb4j6" in namespace "gc-3649"
  Aug 24 11:57:13.260: INFO: Deleting pod "simpletest.rc-qbh68" in namespace "gc-3649"
  Aug 24 11:57:13.349: INFO: Deleting pod "simpletest.rc-qczdg" in namespace "gc-3649"
  Aug 24 11:57:13.449: INFO: Deleting pod "simpletest.rc-qvgdh" in namespace "gc-3649"
  Aug 24 11:57:13.478: INFO: Deleting pod "simpletest.rc-qxngt" in namespace "gc-3649"
  Aug 24 11:57:13.577: INFO: Deleting pod "simpletest.rc-rcbj9" in namespace "gc-3649"
  Aug 24 11:57:13.670: INFO: Deleting pod "simpletest.rc-rcqsk" in namespace "gc-3649"
  Aug 24 11:57:13.773: INFO: Deleting pod "simpletest.rc-rm5dm" in namespace "gc-3649"
  Aug 24 11:57:13.948: INFO: Deleting pod "simpletest.rc-rnxkk" in namespace "gc-3649"
  Aug 24 11:57:13.971: INFO: Deleting pod "simpletest.rc-rzth8" in namespace "gc-3649"
  Aug 24 11:57:14.073: INFO: Deleting pod "simpletest.rc-s6x9x" in namespace "gc-3649"
  Aug 24 11:57:14.170: INFO: Deleting pod "simpletest.rc-smvmh" in namespace "gc-3649"
  Aug 24 11:57:14.268: INFO: Deleting pod "simpletest.rc-t6z9c" in namespace "gc-3649"
  Aug 24 11:57:14.362: INFO: Deleting pod "simpletest.rc-tk5fk" in namespace "gc-3649"
  Aug 24 11:57:14.449: INFO: Deleting pod "simpletest.rc-tnvzv" in namespace "gc-3649"
  Aug 24 11:57:14.475: INFO: Deleting pod "simpletest.rc-tq5rz" in namespace "gc-3649"
  Aug 24 11:57:14.562: INFO: Deleting pod "simpletest.rc-tqwrv" in namespace "gc-3649"
  Aug 24 11:57:14.662: INFO: Deleting pod "simpletest.rc-tx4p7" in namespace "gc-3649"
  Aug 24 11:57:14.758: INFO: Deleting pod "simpletest.rc-vkwvc" in namespace "gc-3649"
  Aug 24 11:57:14.864: INFO: Deleting pod "simpletest.rc-w7jg9" in namespace "gc-3649"
  Aug 24 11:57:14.954: INFO: Deleting pod "simpletest.rc-wj5bg" in namespace "gc-3649"
  Aug 24 11:57:14.978: INFO: Deleting pod "simpletest.rc-wkqs7" in namespace "gc-3649"
  Aug 24 11:57:15.067: INFO: Deleting pod "simpletest.rc-wv9s9" in namespace "gc-3649"
  Aug 24 11:57:15.169: INFO: Deleting pod "simpletest.rc-xcsxc" in namespace "gc-3649"
  Aug 24 11:57:15.269: INFO: Deleting pod "simpletest.rc-xl42l" in namespace "gc-3649"
  Aug 24 11:57:15.375: INFO: Deleting pod "simpletest.rc-xw7jc" in namespace "gc-3649"
  Aug 24 11:57:15.475: INFO: Deleting pod "simpletest.rc-xxwxr" in namespace "gc-3649"
  Aug 24 11:57:15.557: INFO: Deleting pod "simpletest.rc-zhbv8" in namespace "gc-3649"
  Aug 24 11:57:15.659: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "gc-3649" for this suite. @ 08/24/23 11:57:15.668
• [50.784 seconds]
------------------------------
SS
------------------------------
[sig-storage] Projected downwardAPI should update annotations on modification [NodeConformance] [Conformance]
test/e2e/common/storage/projected_downwardapi.go:163
  STEP: Creating a kubernetes client @ 08/24/23 11:57:15.756
  Aug 24 11:57:15.756: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename projected @ 08/24/23 11:57:15.758
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 11:57:15.802
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 11:57:15.853
  STEP: Creating the pod @ 08/24/23 11:57:15.86
  Aug 24 11:57:18.454: INFO: Successfully updated pod "annotationupdate1a1a8454-5d1f-41d8-bae4-aa42f91e3981"
  Aug 24 11:57:20.495: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "projected-9655" for this suite. @ 08/24/23 11:57:20.504
• [4.762 seconds]
------------------------------
SSSSSSSSSSSSSSSSSS
------------------------------
[sig-storage] EmptyDir volumes should support (root,0666,default) [LinuxOnly] [NodeConformance] [Conformance]
test/e2e/common/storage/empty_dir.go:177
  STEP: Creating a kubernetes client @ 08/24/23 11:57:20.524
  Aug 24 11:57:20.524: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename emptydir @ 08/24/23 11:57:20.525
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 11:57:20.555
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 11:57:20.562
  STEP: Creating a pod to test emptydir 0666 on node default medium @ 08/24/23 11:57:20.568
  STEP: Saw pod success @ 08/24/23 11:57:24.615
  Aug 24 11:57:24.623: INFO: Trying to get logs from node scw-conformance-default-2af6d8b4c6264cc5b9e5e6 pod pod-097723cb-6a27-4de7-9184-635104e536ba container test-container: <nil>
  STEP: delete the pod @ 08/24/23 11:57:24.641
  Aug 24 11:57:24.679: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "emptydir-6793" for this suite. @ 08/24/23 11:57:24.688
• [4.178 seconds]
------------------------------
S
------------------------------
[sig-instrumentation] Events API should ensure that an event can be fetched, patched, deleted, and listed [Conformance]
test/e2e/instrumentation/events.go:98
  STEP: Creating a kubernetes client @ 08/24/23 11:57:24.703
  Aug 24 11:57:24.703: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename events @ 08/24/23 11:57:24.704
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 11:57:24.733
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 11:57:24.739
  STEP: creating a test event @ 08/24/23 11:57:24.753
  STEP: listing events in all namespaces @ 08/24/23 11:57:24.774
  STEP: listing events in test namespace @ 08/24/23 11:57:24.889
  STEP: listing events with field selection filtering on source @ 08/24/23 11:57:24.912
  STEP: listing events with field selection filtering on reportingController @ 08/24/23 11:57:24.972
  STEP: getting the test event @ 08/24/23 11:57:24.986
  STEP: patching the test event @ 08/24/23 11:57:25.071
  STEP: getting the test event @ 08/24/23 11:57:25.092
  STEP: updating the test event @ 08/24/23 11:57:25.172
  STEP: getting the test event @ 08/24/23 11:57:25.185
  STEP: deleting the test event @ 08/24/23 11:57:25.278
  STEP: listing events in all namespaces @ 08/24/23 11:57:25.478
  STEP: listing events in test namespace @ 08/24/23 11:57:25.585
  Aug 24 11:57:25.679: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "events-2041" for this suite. @ 08/24/23 11:57:25.689
• [1.003 seconds]
------------------------------
S
------------------------------
[sig-node] Pods should be submitted and removed [NodeConformance] [Conformance]
test/e2e/common/node/pods.go:227
  STEP: Creating a kubernetes client @ 08/24/23 11:57:25.706
  Aug 24 11:57:25.706: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename pods @ 08/24/23 11:57:25.707
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 11:57:25.736
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 11:57:25.742
  STEP: creating the pod @ 08/24/23 11:57:25.748
  STEP: setting up watch @ 08/24/23 11:57:25.748
  STEP: submitting the pod to kubernetes @ 08/24/23 11:57:25.855
  STEP: verifying the pod is in kubernetes @ 08/24/23 11:57:25.875
  STEP: verifying pod creation was observed @ 08/24/23 11:57:25.883
  STEP: deleting the pod gracefully @ 08/24/23 11:57:27.912
  STEP: verifying pod deletion was observed @ 08/24/23 11:57:27.928
  Aug 24 11:57:30.495: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "pods-7949" for this suite. @ 08/24/23 11:57:30.504
• [4.849 seconds]
------------------------------
SSSSSSSS
------------------------------
[sig-network] DNS should support configurable pod DNS nameservers [Conformance]
test/e2e/network/dns.go:407
  STEP: Creating a kubernetes client @ 08/24/23 11:57:30.556
  Aug 24 11:57:30.556: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename dns @ 08/24/23 11:57:30.557
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 11:57:30.589
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 11:57:30.649
  STEP: Creating a pod with dnsPolicy=None and customized dnsConfig... @ 08/24/23 11:57:30.655
  Aug 24 11:57:30.672: INFO: Created pod &Pod{ObjectMeta:{test-dns-nameservers  dns-4319  5d05382d-c3ba-49d9-b730-486dc8513f8f 3404925352 0 2023-08-24 11:57:30 +0000 UTC <nil> <nil> map[] map[] [] [] [{e2e.test Update v1 2023-08-24 11:57:30 +0000 UTC FieldsV1 {"f:spec":{"f:containers":{"k:{\"name\":\"agnhost-container\"}":{".":{},"f:args":{},"f:image":{},"f:imagePullPolicy":{},"f:name":{},"f:resources":{},"f:securityContext":{},"f:terminationMessagePath":{},"f:terminationMessagePolicy":{}}},"f:dnsConfig":{".":{},"f:nameservers":{},"f:searches":{}},"f:dnsPolicy":{},"f:enableServiceLinks":{},"f:restartPolicy":{},"f:schedulerName":{},"f:securityContext":{},"f:terminationGracePeriodSeconds":{}}} }]},Spec:PodSpec{Volumes:[]Volume{Volume{Name:kube-api-access-vd6zn,VolumeSource:VolumeSource{HostPath:nil,EmptyDir:nil,GCEPersistentDisk:nil,AWSElasticBlockStore:nil,GitRepo:nil,Secret:nil,NFS:nil,ISCSI:nil,Glusterfs:nil,PersistentVolumeClaim:nil,RBD:nil,FlexVolume:nil,Cinder:nil,CephFS:nil,Flocker:nil,DownwardAPI:nil,FC:nil,AzureFile:nil,ConfigMap:nil,VsphereVolume:nil,Quobyte:nil,AzureDisk:nil,PhotonPersistentDisk:nil,PortworxVolume:nil,ScaleIO:nil,Projected:&ProjectedVolumeSource{Sources:[]VolumeProjection{VolumeProjection{Secret:nil,DownwardAPI:nil,ConfigMap:nil,ServiceAccountToken:&ServiceAccountTokenProjection{Audience:,ExpirationSeconds:*3607,Path:token,},},VolumeProjection{Secret:nil,DownwardAPI:nil,ConfigMap:&ConfigMapProjection{LocalObjectReference:LocalObjectReference{Name:kube-root-ca.crt,},Items:[]KeyToPath{KeyToPath{Key:ca.crt,Path:ca.crt,Mode:nil,},},Optional:nil,},ServiceAccountToken:nil,},VolumeProjection{Secret:nil,DownwardAPI:&DownwardAPIProjection{Items:[]DownwardAPIVolumeFile{DownwardAPIVolumeFile{Path:namespace,FieldRef:&ObjectFieldSelector{APIVersion:v1,FieldPath:metadata.namespace,},ResourceFieldRef:nil,Mode:nil,},},},ConfigMap:nil,ServiceAccountToken:nil,},},DefaultMode:*420,},StorageOS:nil,CSI:nil,Ephemeral:nil,},},},Containers:[]Container{Container{Name:agnhost-container,Image:registry.k8s.io/e2e-test-images/agnhost:2.45,Command:[],Args:[pause],WorkingDir:,Ports:[]ContainerPort{},Env:[]EnvVar{},Resources:ResourceRequirements{Limits:ResourceList{},Requests:ResourceList{},Claims:[]ResourceClaim{},},VolumeMounts:[]VolumeMount{VolumeMount{Name:kube-api-access-vd6zn,ReadOnly:true,MountPath:/var/run/secrets/kubernetes.io/serviceaccount,SubPath:,MountPropagation:nil,SubPathExpr:,},},LivenessProbe:nil,ReadinessProbe:nil,Lifecycle:nil,TerminationMessagePath:/dev/termination-log,ImagePullPolicy:IfNotPresent,SecurityContext:&SecurityContext{Capabilities:nil,Privileged:nil,SELinuxOptions:nil,RunAsUser:nil,RunAsNonRoot:nil,ReadOnlyRootFilesystem:nil,AllowPrivilegeEscalation:nil,RunAsGroup:nil,ProcMount:nil,WindowsOptions:nil,SeccompProfile:nil,},Stdin:false,StdinOnce:false,TTY:false,EnvFrom:[]EnvFromSource{},TerminationMessagePolicy:File,VolumeDevices:[]VolumeDevice{},StartupProbe:nil,ResizePolicy:[]ContainerResizePolicy{},RestartPolicy:nil,},},RestartPolicy:Always,TerminationGracePeriodSeconds:*0,ActiveDeadlineSeconds:nil,DNSPolicy:None,NodeSelector:map[string]string{},ServiceAccountName:default,DeprecatedServiceAccount:default,NodeName:,HostNetwork:false,HostPID:false,HostIPC:false,SecurityContext:&PodSecurityContext{SELinuxOptions:nil,RunAsUser:nil,RunAsNonRoot:nil,SupplementalGroups:[],FSGroup:nil,RunAsGroup:nil,Sysctls:[]Sysctl{},WindowsOptions:nil,FSGroupChangePolicy:nil,SeccompProfile:nil,},ImagePullSecrets:[]LocalObjectReference{},Hostname:,Subdomain:,Affinity:nil,SchedulerName:default-scheduler,InitContainers:[]Container{},AutomountServiceAccountToken:nil,Tolerations:[]Toleration{Toleration{Key:node.kubernetes.io/not-ready,Operator:Exists,Value:,Effect:NoExecute,TolerationSeconds:*300,},Toleration{Key:node.kubernetes.io/unreachable,Operator:Exists,Value:,Effect:NoExecute,TolerationSeconds:*300,},},HostAliases:[]HostAlias{},PriorityClassName:,Priority:*0,DNSConfig:&PodDNSConfig{Nameservers:[1.1.1.1],Searches:[resolv.conf.local],Options:[]PodDNSConfigOption{},},ShareProcessNamespace:nil,ReadinessGates:[]PodReadinessGate{},RuntimeClassName:nil,EnableServiceLinks:*true,PreemptionPolicy:*PreemptLowerPriority,Overhead:ResourceList{},TopologySpreadConstraints:[]TopologySpreadConstraint{},EphemeralContainers:[]EphemeralContainer{},SetHostnameAsFQDN:nil,OS:nil,HostUsers:nil,SchedulingGates:[]PodSchedulingGate{},ResourceClaims:[]PodResourceClaim{},},Status:PodStatus{Phase:Pending,Conditions:[]PodCondition{},Message:,Reason:,HostIP:,PodIP:,StartTime:<nil>,ContainerStatuses:[]ContainerStatus{},QOSClass:BestEffort,InitContainerStatuses:[]ContainerStatus{},NominatedNodeName:,PodIPs:[]PodIP{},EphemeralContainerStatuses:[]ContainerStatus{},Resize:,ResourceClaimStatuses:[]PodResourceClaimStatus{},HostIPs:[]HostIP{},},}
  STEP: Verifying customized DNS suffix list is configured on pod... @ 08/24/23 11:57:32.688
  Aug 24 11:57:32.688: INFO: ExecWithOptions {Command:[/agnhost dns-suffix] Namespace:dns-4319 PodName:test-dns-nameservers ContainerName:agnhost-container Stdin:<nil> CaptureStdout:true CaptureStderr:true PreserveWhitespace:false Quiet:false}
  Aug 24 11:57:32.688: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  Aug 24 11:57:32.689: INFO: ExecWithOptions: Clientset creation
  Aug 24 11:57:32.689: INFO: ExecWithOptions: execute(POST https://10.96.0.1:443/api/v1/namespaces/dns-4319/pods/test-dns-nameservers/exec?command=%2Fagnhost&command=dns-suffix&container=agnhost-container&container=agnhost-container&stderr=true&stdout=true)
  STEP: Verifying customized DNS server is configured on pod... @ 08/24/23 11:57:32.833
  Aug 24 11:57:32.833: INFO: ExecWithOptions {Command:[/agnhost dns-server-list] Namespace:dns-4319 PodName:test-dns-nameservers ContainerName:agnhost-container Stdin:<nil> CaptureStdout:true CaptureStderr:true PreserveWhitespace:false Quiet:false}
  Aug 24 11:57:32.834: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  Aug 24 11:57:32.834: INFO: ExecWithOptions: Clientset creation
  Aug 24 11:57:32.835: INFO: ExecWithOptions: execute(POST https://10.96.0.1:443/api/v1/namespaces/dns-4319/pods/test-dns-nameservers/exec?command=%2Fagnhost&command=dns-server-list&container=agnhost-container&container=agnhost-container&stderr=true&stdout=true)
  Aug 24 11:57:32.967: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  Aug 24 11:57:32.978: INFO: Deleting pod test-dns-nameservers...
  STEP: Destroying namespace "dns-4319" for this suite. @ 08/24/23 11:57:33
• [2.458 seconds]
------------------------------
SSSS
------------------------------
[sig-api-machinery] ResourceQuota should create a ResourceQuota and capture the life of a configMap. [Conformance]
test/e2e/apimachinery/resource_quota.go:328
  STEP: Creating a kubernetes client @ 08/24/23 11:57:33.014
  Aug 24 11:57:33.014: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename resourcequota @ 08/24/23 11:57:33.016
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 11:57:33.059
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 11:57:33.065
  STEP: Counting existing ResourceQuota @ 08/24/23 11:57:50.09
  STEP: Creating a ResourceQuota @ 08/24/23 11:57:55.102
  STEP: Ensuring resource quota status is calculated @ 08/24/23 11:57:55.113
  STEP: Creating a ConfigMap @ 08/24/23 11:57:57.125
  STEP: Ensuring resource quota status captures configMap creation @ 08/24/23 11:57:57.15
  STEP: Deleting a ConfigMap @ 08/24/23 11:57:59.163
  STEP: Ensuring resource quota status released usage @ 08/24/23 11:57:59.179
  Aug 24 11:58:01.187: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "resourcequota-3190" for this suite. @ 08/24/23 11:58:01.198
• [28.200 seconds]
------------------------------
SS
------------------------------
[sig-storage] Subpath Atomic writer volumes should support subpaths with configmap pod [Conformance]
test/e2e/storage/subpath.go:69
  STEP: Creating a kubernetes client @ 08/24/23 11:58:01.214
  Aug 24 11:58:01.215: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename subpath @ 08/24/23 11:58:01.215
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 11:58:01.251
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 11:58:01.258
  STEP: Setting up data @ 08/24/23 11:58:01.265
  STEP: Creating pod pod-subpath-test-configmap-lttm @ 08/24/23 11:58:01.287
  STEP: Creating a pod to test atomic-volume-subpath @ 08/24/23 11:58:01.287
  STEP: Saw pod success @ 08/24/23 11:58:25.453
  Aug 24 11:58:25.462: INFO: Trying to get logs from node scw-conformance-default-2af6d8b4c6264cc5b9e5e6 pod pod-subpath-test-configmap-lttm container test-container-subpath-configmap-lttm: <nil>
  STEP: delete the pod @ 08/24/23 11:58:25.481
  STEP: Deleting pod pod-subpath-test-configmap-lttm @ 08/24/23 11:58:25.511
  Aug 24 11:58:25.511: INFO: Deleting pod "pod-subpath-test-configmap-lttm" in namespace "subpath-7024"
  Aug 24 11:58:25.517: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "subpath-7024" for this suite. @ 08/24/23 11:58:25.528
• [24.325 seconds]
------------------------------
SSSSSSSSSSSSSSSS
------------------------------
[sig-storage] EmptyDir volumes should support (root,0666,tmpfs) [LinuxOnly] [NodeConformance] [Conformance]
test/e2e/common/storage/empty_dir.go:107
  STEP: Creating a kubernetes client @ 08/24/23 11:58:25.54
  Aug 24 11:58:25.540: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename emptydir @ 08/24/23 11:58:25.542
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 11:58:25.571
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 11:58:25.578
  STEP: Creating a pod to test emptydir 0666 on tmpfs @ 08/24/23 11:58:25.585
  STEP: Saw pod success @ 08/24/23 11:58:29.632
  Aug 24 11:58:29.641: INFO: Trying to get logs from node scw-conformance-default-2af6d8b4c6264cc5b9e5e6 pod pod-4f7833f8-1982-450d-988a-8dc199db67f5 container test-container: <nil>
  STEP: delete the pod @ 08/24/23 11:58:29.661
  Aug 24 11:58:29.700: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "emptydir-7496" for this suite. @ 08/24/23 11:58:29.71
• [4.184 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-node] Variable Expansion should fail substituting values in a volume subpath with absolute path [Slow] [Conformance]
test/e2e/common/node/expansion.go:189
  STEP: Creating a kubernetes client @ 08/24/23 11:58:29.726
  Aug 24 11:58:29.726: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename var-expansion @ 08/24/23 11:58:29.727
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 11:58:29.759
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 11:58:29.766
  Aug 24 11:58:31.809: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  Aug 24 11:58:31.822: INFO: Deleting pod "var-expansion-e983c1a6-4a7c-49bf-b3cc-47746729b0c5" in namespace "var-expansion-498"
  Aug 24 11:58:31.836: INFO: Wait up to 5m0s for pod "var-expansion-e983c1a6-4a7c-49bf-b3cc-47746729b0c5" to be fully deleted
  STEP: Destroying namespace "var-expansion-498" for this suite. @ 08/24/23 11:58:33.854
• [4.144 seconds]
------------------------------
[sig-storage] Subpath Atomic writer volumes should support subpaths with projected pod [Conformance]
test/e2e/storage/subpath.go:105
  STEP: Creating a kubernetes client @ 08/24/23 11:58:33.87
  Aug 24 11:58:33.870: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename subpath @ 08/24/23 11:58:33.872
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 11:58:33.904
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 11:58:33.952
  STEP: Setting up data @ 08/24/23 11:58:33.959
  STEP: Creating pod pod-subpath-test-projected-t5h2 @ 08/24/23 11:58:33.98
  STEP: Creating a pod to test atomic-volume-subpath @ 08/24/23 11:58:33.98
  STEP: Saw pod success @ 08/24/23 11:58:58.143
  Aug 24 11:58:58.153: INFO: Trying to get logs from node scw-conformance-default-2af6d8b4c6264cc5b9e5e6 pod pod-subpath-test-projected-t5h2 container test-container-subpath-projected-t5h2: <nil>
  STEP: delete the pod @ 08/24/23 11:58:58.173
  STEP: Deleting pod pod-subpath-test-projected-t5h2 @ 08/24/23 11:58:58.212
  Aug 24 11:58:58.212: INFO: Deleting pod "pod-subpath-test-projected-t5h2" in namespace "subpath-3926"
  Aug 24 11:58:58.219: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "subpath-3926" for this suite. @ 08/24/23 11:58:58.227
• [24.375 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-api-machinery] CustomResourcePublishOpenAPI [Privileged:ClusterAdmin] works for CRD with validation schema [Conformance]
test/e2e/apimachinery/crd_publish_openapi.go:69
  STEP: Creating a kubernetes client @ 08/24/23 11:58:58.247
  Aug 24 11:58:58.247: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename crd-publish-openapi @ 08/24/23 11:58:58.248
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 11:58:58.278
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 11:58:58.285
  Aug 24 11:58:58.293: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: kubectl validation (kubectl create and apply) allows request with known and required properties @ 08/24/23 11:59:00.767
  Aug 24 11:59:00.767: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1002171096 --namespace=crd-publish-openapi-6747 --namespace=crd-publish-openapi-6747 create -f -'
  Aug 24 11:59:01.724: INFO: stderr: ""
  Aug 24 11:59:01.724: INFO: stdout: "e2e-test-crd-publish-openapi-7314-crd.crd-publish-openapi-test-foo.example.com/test-foo created\n"
  Aug 24 11:59:01.724: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1002171096 --namespace=crd-publish-openapi-6747 --namespace=crd-publish-openapi-6747 delete e2e-test-crd-publish-openapi-7314-crds test-foo'
  Aug 24 11:59:01.859: INFO: stderr: ""
  Aug 24 11:59:01.859: INFO: stdout: "e2e-test-crd-publish-openapi-7314-crd.crd-publish-openapi-test-foo.example.com \"test-foo\" deleted\n"
  Aug 24 11:59:01.859: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1002171096 --namespace=crd-publish-openapi-6747 --namespace=crd-publish-openapi-6747 apply -f -'
  Aug 24 11:59:02.122: INFO: stderr: ""
  Aug 24 11:59:02.122: INFO: stdout: "e2e-test-crd-publish-openapi-7314-crd.crd-publish-openapi-test-foo.example.com/test-foo created\n"
  Aug 24 11:59:02.122: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1002171096 --namespace=crd-publish-openapi-6747 --namespace=crd-publish-openapi-6747 delete e2e-test-crd-publish-openapi-7314-crds test-foo'
  Aug 24 11:59:02.235: INFO: stderr: ""
  Aug 24 11:59:02.235: INFO: stdout: "e2e-test-crd-publish-openapi-7314-crd.crd-publish-openapi-test-foo.example.com \"test-foo\" deleted\n"
  STEP: kubectl validation (kubectl create and apply) rejects request with value outside defined enum values @ 08/24/23 11:59:02.235
  Aug 24 11:59:02.235: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1002171096 --namespace=crd-publish-openapi-6747 --namespace=crd-publish-openapi-6747 create -f -'
  Aug 24 11:59:02.504: INFO: rc: 1
  STEP: kubectl validation (kubectl create and apply) rejects request with unknown properties when disallowed by the schema @ 08/24/23 11:59:02.504
  Aug 24 11:59:02.504: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1002171096 --namespace=crd-publish-openapi-6747 --namespace=crd-publish-openapi-6747 create -f -'
  Aug 24 11:59:02.739: INFO: rc: 1
  Aug 24 11:59:02.739: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1002171096 --namespace=crd-publish-openapi-6747 --namespace=crd-publish-openapi-6747 apply -f -'
  Aug 24 11:59:03.036: INFO: rc: 1
  STEP: kubectl validation (kubectl create and apply) rejects request without required properties @ 08/24/23 11:59:03.036
  Aug 24 11:59:03.036: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1002171096 --namespace=crd-publish-openapi-6747 --namespace=crd-publish-openapi-6747 create -f -'
  Aug 24 11:59:03.285: INFO: rc: 1
  Aug 24 11:59:03.285: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1002171096 --namespace=crd-publish-openapi-6747 --namespace=crd-publish-openapi-6747 apply -f -'
  Aug 24 11:59:03.500: INFO: rc: 1
  STEP: kubectl explain works to explain CR properties @ 08/24/23 11:59:03.5
  Aug 24 11:59:03.500: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1002171096 --namespace=crd-publish-openapi-6747 explain e2e-test-crd-publish-openapi-7314-crds'
  Aug 24 11:59:03.707: INFO: stderr: ""
  Aug 24 11:59:03.707: INFO: stdout: "GROUP:      crd-publish-openapi-test-foo.example.com\nKIND:       e2e-test-crd-publish-openapi-7314-crd\nVERSION:    v1\n\nDESCRIPTION:\n    Foo CRD for Testing\n    \nFIELDS:\n  apiVersion\t<string>\n    APIVersion defines the versioned schema of this representation of an object.\n    Servers should convert recognized schemas to the latest internal value, and\n    may reject unrecognized values. More info:\n    https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources\n\n  kind\t<string>\n    Kind is a string value representing the REST resource this object\n    represents. Servers may infer this from the endpoint the client submits\n    requests to. Cannot be updated. In CamelCase. More info:\n    https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\n\n  metadata\t<ObjectMeta>\n    Standard object's metadata. More info:\n    https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata\n\n  spec\t<Object>\n    Specification of Foo\n\n  status\t<Object>\n    Status of Foo\n\n\n"
  STEP: kubectl explain works to explain CR properties recursively @ 08/24/23 11:59:03.708
  Aug 24 11:59:03.708: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1002171096 --namespace=crd-publish-openapi-6747 explain e2e-test-crd-publish-openapi-7314-crds.metadata'
  Aug 24 11:59:03.930: INFO: stderr: ""
  Aug 24 11:59:03.930: INFO: stdout: "GROUP:      crd-publish-openapi-test-foo.example.com\nKIND:       e2e-test-crd-publish-openapi-7314-crd\nVERSION:    v1\n\nFIELD: metadata <ObjectMeta>\n\nDESCRIPTION:\n    Standard object's metadata. More info:\n    https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata\n    ObjectMeta is metadata that all persisted resources must have, which\n    includes all objects users must create.\n    \nFIELDS:\n  annotations\t<map[string]string>\n    Annotations is an unstructured key value map stored with a resource that may\n    be set by external tools to store and retrieve arbitrary metadata. They are\n    not queryable and should be preserved when modifying objects. More info:\n    https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations\n\n  creationTimestamp\t<string>\n    CreationTimestamp is a timestamp representing the server time when this\n    object was created. It is not guaranteed to be set in happens-before order\n    across separate operations. Clients may not set this value. It is\n    represented in RFC3339 form and is in UTC.\n    \n    Populated by the system. Read-only. Null for lists. More info:\n    https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata\n\n  deletionGracePeriodSeconds\t<integer>\n    Number of seconds allowed for this object to gracefully terminate before it\n    will be removed from the system. Only set when deletionTimestamp is also\n    set. May only be shortened. Read-only.\n\n  deletionTimestamp\t<string>\n    DeletionTimestamp is RFC 3339 date and time at which this resource will be\n    deleted. This field is set by the server when a graceful deletion is\n    requested by the user, and is not directly settable by a client. The\n    resource is expected to be deleted (no longer visible from resource lists,\n    and not reachable by name) after the time in this field, once the finalizers\n    list is empty. As long as the finalizers list contains items, deletion is\n    blocked. Once the deletionTimestamp is set, this value may not be unset or\n    be set further into the future, although it may be shortened or the resource\n    may be deleted prior to this time. For example, a user may request that a\n    pod is deleted in 30 seconds. The Kubelet will react by sending a graceful\n    termination signal to the containers in the pod. After that 30 seconds, the\n    Kubelet will send a hard termination signal (SIGKILL) to the container and\n    after cleanup, remove the pod from the API. In the presence of network\n    partitions, this object may still exist after this timestamp, until an\n    administrator or automated process can determine the resource is fully\n    terminated. If not set, graceful deletion of the object has not been\n    requested.\n    \n    Populated by the system when a graceful deletion is requested. Read-only.\n    More info:\n    https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata\n\n  finalizers\t<[]string>\n    Must be empty before the object is deleted from the registry. Each entry is\n    an identifier for the responsible component that will remove the entry from\n    the list. If the deletionTimestamp of the object is non-nil, entries in this\n    list can only be removed. Finalizers may be processed and removed in any\n    order.  Order is NOT enforced because it introduces significant risk of\n    stuck finalizers. finalizers is a shared field, any actor with permission\n    can reorder it. If the finalizer list is processed in order, then this can\n    lead to a situation in which the component responsible for the first\n    finalizer in the list is waiting for a signal (field value, external system,\n    or other) produced by a component responsible for a finalizer later in the\n    list, resulting in a deadlock. Without enforced ordering finalizers are free\n    to order amongst themselves and are not vulnerable to ordering changes in\n    the list.\n\n  generateName\t<string>\n    GenerateName is an optional prefix, used by the server, to generate a unique\n    name ONLY IF the Name field has not been provided. If this field is used,\n    the name returned to the client will be different than the name passed. This\n    value will also be combined with a unique suffix. The provided value has the\n    same validation rules as the Name field, and may be truncated by the length\n    of the suffix required to make the value unique on the server.\n    \n    If this field is specified and the generated name exists, the server will\n    return a 409.\n    \n    Applied only if Name is not specified. More info:\n    https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency\n\n  generation\t<integer>\n    A sequence number representing a specific generation of the desired state.\n    Populated by the system. Read-only.\n\n  labels\t<map[string]string>\n    Map of string keys and values that can be used to organize and categorize\n    (scope and select) objects. May match selectors of replication controllers\n    and services. More info:\n    https://kubernetes.io/docs/concepts/overview/working-with-objects/labels\n\n  managedFields\t<[]ManagedFieldsEntry>\n    ManagedFields maps workflow-id and version to the set of fields that are\n    managed by that workflow. This is mostly for internal housekeeping, and\n    users typically shouldn't need to set or understand this field. A workflow\n    can be the user's name, a controller's name, or the name of a specific apply\n    path like \"ci-cd\". The set of fields is always in the version that the\n    workflow used when modifying the object.\n\n  name\t<string>\n    Name must be unique within a namespace. Is required when creating resources,\n    although some resources may allow a client to request the generation of an\n    appropriate name automatically. Name is primarily intended for creation\n    idempotence and configuration definition. Cannot be updated. More info:\n    https://kubernetes.io/docs/concepts/overview/working-with-objects/names#names\n\n  namespace\t<string>\n    Namespace defines the space within which each name must be unique. An empty\n    namespace is equivalent to the \"default\" namespace, but \"default\" is the\n    canonical representation. Not all objects are required to be scoped to a\n    namespace - the value of this field for those objects will be empty.\n    \n    Must be a DNS_LABEL. Cannot be updated. More info:\n    https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces\n\n  ownerReferences\t<[]OwnerReference>\n    List of objects depended by this object. If ALL objects in the list have\n    been deleted, this object will be garbage collected. If this object is\n    managed by a controller, then an entry in this list will point to this\n    controller, with the controller field set to true. There cannot be more than\n    one managing controller.\n\n  resourceVersion\t<string>\n    An opaque value that represents the internal version of this object that can\n    be used by clients to determine when objects have changed. May be used for\n    optimistic concurrency, change detection, and the watch operation on a\n    resource or set of resources. Clients must treat these values as opaque and\n    passed unmodified back to the server. They may only be valid for a\n    particular resource or set of resources.\n    \n    Populated by the system. Read-only. Value must be treated as opaque by\n    clients and . More info:\n    https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency\n\n  selfLink\t<string>\n    Deprecated: selfLink is a legacy read-only field that is no longer populated\n    by the system.\n\n  uid\t<string>\n    UID is the unique in time and space value for this object. It is typically\n    generated by the server on successful creation of a resource and is not\n    allowed to change on PUT operations.\n    \n    Populated by the system. Read-only. More info:\n    https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids\n\n\n"
  Aug 24 11:59:03.930: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1002171096 --namespace=crd-publish-openapi-6747 explain e2e-test-crd-publish-openapi-7314-crds.spec'
  Aug 24 11:59:04.177: INFO: stderr: ""
  Aug 24 11:59:04.177: INFO: stdout: "GROUP:      crd-publish-openapi-test-foo.example.com\nKIND:       e2e-test-crd-publish-openapi-7314-crd\nVERSION:    v1\n\nFIELD: spec <Object>\n\nDESCRIPTION:\n    Specification of Foo\n    \nFIELDS:\n  bars\t<[]Object>\n    List of Bars and their specs.\n\n\n"
  Aug 24 11:59:04.178: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1002171096 --namespace=crd-publish-openapi-6747 explain e2e-test-crd-publish-openapi-7314-crds.spec.bars'
  Aug 24 11:59:04.390: INFO: stderr: ""
  Aug 24 11:59:04.390: INFO: stdout: "GROUP:      crd-publish-openapi-test-foo.example.com\nKIND:       e2e-test-crd-publish-openapi-7314-crd\nVERSION:    v1\n\nFIELD: bars <[]Object>\n\nDESCRIPTION:\n    List of Bars and their specs.\n    \nFIELDS:\n  age\t<string>\n    Age of Bar.\n\n  bazs\t<[]string>\n    List of Bazs.\n\n  feeling\t<string>\n    Whether Bar is feeling great.\n\n  name\t<string> -required-\n    Name of Bar.\n\n\n"
  STEP: kubectl explain works to return error when explain is called on property that doesn't exist @ 08/24/23 11:59:04.39
  Aug 24 11:59:04.390: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1002171096 --namespace=crd-publish-openapi-6747 explain e2e-test-crd-publish-openapi-7314-crds.spec.bars2'
  Aug 24 11:59:04.629: INFO: rc: 1
  Aug 24 11:59:07.207: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "crd-publish-openapi-6747" for this suite. @ 08/24/23 11:59:07.233
• [9.007 seconds]
------------------------------
SSSSSSSSSSSSSSSS
------------------------------
[sig-network] Networking Granular Checks: Pods should function for node-pod communication: udp [LinuxOnly] [NodeConformance] [Conformance]
test/e2e/common/network/networking.go:124
  STEP: Creating a kubernetes client @ 08/24/23 11:59:07.255
  Aug 24 11:59:07.255: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename pod-network-test @ 08/24/23 11:59:07.256
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 11:59:07.283
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 11:59:07.29
  STEP: Performing setup for networking test in namespace pod-network-test-1164 @ 08/24/23 11:59:07.297
  STEP: creating a selector @ 08/24/23 11:59:07.297
  STEP: Creating the service pods in kubernetes @ 08/24/23 11:59:07.297
  Aug 24 11:59:07.297: INFO: Waiting up to 10m0s for all (but 0) nodes to be schedulable
  STEP: Creating test pods @ 08/24/23 11:59:29.502
  Aug 24 11:59:31.574: INFO: Setting MaxTries for pod polling to 34 for networking test based on endpoint count 2
  Aug 24 11:59:31.574: INFO: Going to poll 10.100.0.249 on port 8081 at least 0 times, with a maximum of 34 tries before failing
  Aug 24 11:59:31.582: INFO: ExecWithOptions {Command:[/bin/sh -c echo hostName | nc -w 1 -u 10.100.0.249 8081 | grep -v '^\s*$'] Namespace:pod-network-test-1164 PodName:host-test-container-pod ContainerName:agnhost-container Stdin:<nil> CaptureStdout:true CaptureStderr:true PreserveWhitespace:false Quiet:false}
  Aug 24 11:59:31.582: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  Aug 24 11:59:31.583: INFO: ExecWithOptions: Clientset creation
  Aug 24 11:59:31.583: INFO: ExecWithOptions: execute(POST https://10.96.0.1:443/api/v1/namespaces/pod-network-test-1164/pods/host-test-container-pod/exec?command=%2Fbin%2Fsh&command=-c&command=echo+hostName+%7C+nc+-w+1+-u+10.100.0.249+8081+%7C+grep+-v+%27%5E%5Cs%2A%24%27&container=agnhost-container&container=agnhost-container&stderr=true&stdout=true)
  Aug 24 11:59:32.706: INFO: Found all 1 expected endpoints: [netserver-0]
  Aug 24 11:59:32.706: INFO: Going to poll 10.100.1.28 on port 8081 at least 0 times, with a maximum of 34 tries before failing
  Aug 24 11:59:32.715: INFO: ExecWithOptions {Command:[/bin/sh -c echo hostName | nc -w 1 -u 10.100.1.28 8081 | grep -v '^\s*$'] Namespace:pod-network-test-1164 PodName:host-test-container-pod ContainerName:agnhost-container Stdin:<nil> CaptureStdout:true CaptureStderr:true PreserveWhitespace:false Quiet:false}
  Aug 24 11:59:32.715: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  Aug 24 11:59:32.716: INFO: ExecWithOptions: Clientset creation
  Aug 24 11:59:32.716: INFO: ExecWithOptions: execute(POST https://10.96.0.1:443/api/v1/namespaces/pod-network-test-1164/pods/host-test-container-pod/exec?command=%2Fbin%2Fsh&command=-c&command=echo+hostName+%7C+nc+-w+1+-u+10.100.1.28+8081+%7C+grep+-v+%27%5E%5Cs%2A%24%27&container=agnhost-container&container=agnhost-container&stderr=true&stdout=true)
  Aug 24 11:59:33.842: INFO: Found all 1 expected endpoints: [netserver-1]
  Aug 24 11:59:33.842: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "pod-network-test-1164" for this suite. @ 08/24/23 11:59:33.853
• [26.615 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-storage] Subpath Atomic writer volumes should support subpaths with secret pod [Conformance]
test/e2e/storage/subpath.go:59
  STEP: Creating a kubernetes client @ 08/24/23 11:59:33.872
  Aug 24 11:59:33.872: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename subpath @ 08/24/23 11:59:33.873
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 11:59:33.905
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 11:59:33.948
  STEP: Setting up data @ 08/24/23 11:59:33.955
  STEP: Creating pod pod-subpath-test-secret-w4q6 @ 08/24/23 11:59:33.975
  STEP: Creating a pod to test atomic-volume-subpath @ 08/24/23 11:59:33.975
  STEP: Saw pod success @ 08/24/23 11:59:58.124
  Aug 24 11:59:58.152: INFO: Trying to get logs from node scw-conformance-default-ecf11ec729064adba7e270 pod pod-subpath-test-secret-w4q6 container test-container-subpath-secret-w4q6: <nil>
  STEP: delete the pod @ 08/24/23 11:59:58.202
  STEP: Deleting pod pod-subpath-test-secret-w4q6 @ 08/24/23 11:59:58.23
  Aug 24 11:59:58.231: INFO: Deleting pod "pod-subpath-test-secret-w4q6" in namespace "subpath-3043"
  Aug 24 11:59:58.240: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "subpath-3043" for this suite. @ 08/24/23 11:59:58.249
• [24.390 seconds]
------------------------------
SSSSS
------------------------------
[sig-node] InitContainer [NodeConformance] should invoke init containers on a RestartAlways pod [Conformance]
test/e2e/common/node/init_container.go:256
  STEP: Creating a kubernetes client @ 08/24/23 11:59:58.262
  Aug 24 11:59:58.262: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename init-container @ 08/24/23 11:59:58.263
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 11:59:58.297
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 11:59:58.304
  STEP: creating the pod @ 08/24/23 11:59:58.311
  Aug 24 11:59:58.311: INFO: PodSpec: initContainers in spec.initContainers
  Aug 24 12:00:01.914: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "init-container-948" for this suite. @ 08/24/23 12:00:01.927
• [3.677 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-apps] ReplicaSet should validate Replicaset Status endpoints [Conformance]
test/e2e/apps/replica_set.go:176
  STEP: Creating a kubernetes client @ 08/24/23 12:00:01.94
  Aug 24 12:00:01.940: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename replicaset @ 08/24/23 12:00:01.941
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 12:00:01.967
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 12:00:01.972
  STEP: Create a Replicaset @ 08/24/23 12:00:01.985
  STEP: Verify that the required pods have come up. @ 08/24/23 12:00:01.995
  Aug 24 12:00:02.003: INFO: Pod name sample-pod: Found 0 pods out of 1
  Aug 24 12:00:07.016: INFO: Pod name sample-pod: Found 1 pods out of 1
  STEP: ensuring each pod is running @ 08/24/23 12:00:07.016
  STEP: Getting /status @ 08/24/23 12:00:07.016
  Aug 24 12:00:07.027: INFO: Replicaset test-rs has Conditions: []
  STEP: updating the Replicaset Status @ 08/24/23 12:00:07.027
  Aug 24 12:00:07.047: INFO: updatedStatus.Conditions: []v1.ReplicaSetCondition{v1.ReplicaSetCondition{Type:"StatusUpdate", Status:"True", LastTransitionTime:time.Date(1, time.January, 1, 0, 0, 0, 0, time.UTC), Reason:"E2E", Message:"Set from e2e test"}}
  STEP: watching for the ReplicaSet status to be updated @ 08/24/23 12:00:07.047
  Aug 24 12:00:07.052: INFO: Observed &ReplicaSet event: ADDED
  Aug 24 12:00:07.052: INFO: Observed &ReplicaSet event: MODIFIED
  Aug 24 12:00:07.053: INFO: Observed &ReplicaSet event: MODIFIED
  Aug 24 12:00:07.053: INFO: Observed &ReplicaSet event: MODIFIED
  Aug 24 12:00:07.053: INFO: Found replicaset test-rs in namespace replicaset-7912 with labels: map[name:sample-pod pod:httpd] annotations: map[] & Conditions: [{StatusUpdate True 0001-01-01 00:00:00 +0000 UTC E2E Set from e2e test}]
  Aug 24 12:00:07.053: INFO: Replicaset test-rs has an updated status
  STEP: patching the Replicaset Status @ 08/24/23 12:00:07.053
  Aug 24 12:00:07.053: INFO: Patch payload: {"status":{"conditions":[{"type":"StatusPatched","status":"True"}]}}
  Aug 24 12:00:07.071: INFO: Patched status conditions: []v1.ReplicaSetCondition{v1.ReplicaSetCondition{Type:"StatusPatched", Status:"True", LastTransitionTime:time.Date(1, time.January, 1, 0, 0, 0, 0, time.UTC), Reason:"", Message:""}}
  STEP: watching for the Replicaset status to be patched @ 08/24/23 12:00:07.071
  Aug 24 12:00:07.077: INFO: Observed &ReplicaSet event: ADDED
  Aug 24 12:00:07.077: INFO: Observed &ReplicaSet event: MODIFIED
  Aug 24 12:00:07.077: INFO: Observed &ReplicaSet event: MODIFIED
  Aug 24 12:00:07.077: INFO: Observed &ReplicaSet event: MODIFIED
  Aug 24 12:00:07.077: INFO: Observed replicaset test-rs in namespace replicaset-7912 with annotations: map[] & Conditions: {StatusUpdate True 0001-01-01 00:00:00 +0000 UTC E2E Set from e2e test}
  Aug 24 12:00:07.078: INFO: Observed &ReplicaSet event: MODIFIED
  Aug 24 12:00:07.078: INFO: Found replicaset test-rs in namespace replicaset-7912 with labels: map[name:sample-pod pod:httpd] annotations: map[] & Conditions: {StatusPatched True 0001-01-01 00:00:00 +0000 UTC  }
  Aug 24 12:00:07.078: INFO: Replicaset test-rs has a patched status
  Aug 24 12:00:07.078: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "replicaset-7912" for this suite. @ 08/24/23 12:00:07.087
• [5.161 seconds]
------------------------------
SSS
------------------------------
[sig-cli] Kubectl client Update Demo should scale a replication controller  [Conformance]
test/e2e/kubectl/kubectl.go:354
  STEP: Creating a kubernetes client @ 08/24/23 12:00:07.101
  Aug 24 12:00:07.101: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename kubectl @ 08/24/23 12:00:07.102
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 12:00:07.164
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 12:00:07.171
  STEP: creating a replication controller @ 08/24/23 12:00:07.18
  Aug 24 12:00:07.180: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1002171096 --namespace=kubectl-6359 create -f -'
  Aug 24 12:00:09.608: INFO: stderr: ""
  Aug 24 12:00:09.608: INFO: stdout: "replicationcontroller/update-demo-nautilus created\n"
  STEP: waiting for all containers in name=update-demo pods to come up. @ 08/24/23 12:00:09.608
  Aug 24 12:00:09.608: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1002171096 --namespace=kubectl-6359 get pods -o template --template={{range.items}}{{.metadata.name}} {{end}} -l name=update-demo'
  Aug 24 12:00:09.762: INFO: stderr: ""
  Aug 24 12:00:09.762: INFO: stdout: "update-demo-nautilus-k2b4r update-demo-nautilus-t4drk "
  Aug 24 12:00:09.762: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1002171096 --namespace=kubectl-6359 get pods update-demo-nautilus-k2b4r -o template --template={{if (exists . "status" "containerStatuses")}}{{range .status.containerStatuses}}{{if (and (eq .name "update-demo") (exists . "state" "running"))}}true{{end}}{{end}}{{end}}'
  Aug 24 12:00:09.887: INFO: stderr: ""
  Aug 24 12:00:09.887: INFO: stdout: ""
  Aug 24 12:00:09.887: INFO: update-demo-nautilus-k2b4r is created but not running
  Aug 24 12:00:14.890: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1002171096 --namespace=kubectl-6359 get pods -o template --template={{range.items}}{{.metadata.name}} {{end}} -l name=update-demo'
  Aug 24 12:00:15.010: INFO: stderr: ""
  Aug 24 12:00:15.010: INFO: stdout: "update-demo-nautilus-k2b4r update-demo-nautilus-t4drk "
  Aug 24 12:00:15.010: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1002171096 --namespace=kubectl-6359 get pods update-demo-nautilus-k2b4r -o template --template={{if (exists . "status" "containerStatuses")}}{{range .status.containerStatuses}}{{if (and (eq .name "update-demo") (exists . "state" "running"))}}true{{end}}{{end}}{{end}}'
  Aug 24 12:00:15.116: INFO: stderr: ""
  Aug 24 12:00:15.116: INFO: stdout: "true"
  Aug 24 12:00:15.116: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1002171096 --namespace=kubectl-6359 get pods update-demo-nautilus-k2b4r -o template --template={{if (exists . "spec" "containers")}}{{range .spec.containers}}{{if eq .name "update-demo"}}{{.image}}{{end}}{{end}}{{end}}'
  Aug 24 12:00:15.240: INFO: stderr: ""
  Aug 24 12:00:15.240: INFO: stdout: "registry.k8s.io/e2e-test-images/nautilus:1.7"
  Aug 24 12:00:15.240: INFO: validating pod update-demo-nautilus-k2b4r
  Aug 24 12:00:15.258: INFO: got data: {
    "image": "nautilus.jpg"
  }

  Aug 24 12:00:15.259: INFO: Unmarshalled json jpg/img => {nautilus.jpg} , expecting nautilus.jpg .
  Aug 24 12:00:15.259: INFO: update-demo-nautilus-k2b4r is verified up and running
  Aug 24 12:00:15.259: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1002171096 --namespace=kubectl-6359 get pods update-demo-nautilus-t4drk -o template --template={{if (exists . "status" "containerStatuses")}}{{range .status.containerStatuses}}{{if (and (eq .name "update-demo") (exists . "state" "running"))}}true{{end}}{{end}}{{end}}'
  Aug 24 12:00:15.377: INFO: stderr: ""
  Aug 24 12:00:15.377: INFO: stdout: "true"
  Aug 24 12:00:15.377: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1002171096 --namespace=kubectl-6359 get pods update-demo-nautilus-t4drk -o template --template={{if (exists . "spec" "containers")}}{{range .spec.containers}}{{if eq .name "update-demo"}}{{.image}}{{end}}{{end}}{{end}}'
  Aug 24 12:00:15.489: INFO: stderr: ""
  Aug 24 12:00:15.489: INFO: stdout: "registry.k8s.io/e2e-test-images/nautilus:1.7"
  Aug 24 12:00:15.489: INFO: validating pod update-demo-nautilus-t4drk
  Aug 24 12:00:15.505: INFO: got data: {
    "image": "nautilus.jpg"
  }

  Aug 24 12:00:15.505: INFO: Unmarshalled json jpg/img => {nautilus.jpg} , expecting nautilus.jpg .
  Aug 24 12:00:15.505: INFO: update-demo-nautilus-t4drk is verified up and running
  STEP: scaling down the replication controller @ 08/24/23 12:00:15.505
  Aug 24 12:00:15.508: INFO: scanned /root for discovery docs: <nil>
  Aug 24 12:00:15.508: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1002171096 --namespace=kubectl-6359 scale rc update-demo-nautilus --replicas=1 --timeout=5m'
  Aug 24 12:00:16.667: INFO: stderr: ""
  Aug 24 12:00:16.667: INFO: stdout: "replicationcontroller/update-demo-nautilus scaled\n"
  STEP: waiting for all containers in name=update-demo pods to come up. @ 08/24/23 12:00:16.667
  Aug 24 12:00:16.667: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1002171096 --namespace=kubectl-6359 get pods -o template --template={{range.items}}{{.metadata.name}} {{end}} -l name=update-demo'
  Aug 24 12:00:16.796: INFO: stderr: ""
  Aug 24 12:00:16.796: INFO: stdout: "update-demo-nautilus-k2b4r update-demo-nautilus-t4drk "
  STEP: Replicas for name=update-demo: expected=1 actual=2 @ 08/24/23 12:00:16.796
  Aug 24 12:00:21.800: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1002171096 --namespace=kubectl-6359 get pods -o template --template={{range.items}}{{.metadata.name}} {{end}} -l name=update-demo'
  Aug 24 12:00:21.895: INFO: stderr: ""
  Aug 24 12:00:21.895: INFO: stdout: "update-demo-nautilus-t4drk "
  Aug 24 12:00:21.895: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1002171096 --namespace=kubectl-6359 get pods update-demo-nautilus-t4drk -o template --template={{if (exists . "status" "containerStatuses")}}{{range .status.containerStatuses}}{{if (and (eq .name "update-demo") (exists . "state" "running"))}}true{{end}}{{end}}{{end}}'
  Aug 24 12:00:21.968: INFO: stderr: ""
  Aug 24 12:00:21.968: INFO: stdout: "true"
  Aug 24 12:00:21.968: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1002171096 --namespace=kubectl-6359 get pods update-demo-nautilus-t4drk -o template --template={{if (exists . "spec" "containers")}}{{range .spec.containers}}{{if eq .name "update-demo"}}{{.image}}{{end}}{{end}}{{end}}'
  Aug 24 12:00:22.069: INFO: stderr: ""
  Aug 24 12:00:22.069: INFO: stdout: "registry.k8s.io/e2e-test-images/nautilus:1.7"
  Aug 24 12:00:22.069: INFO: validating pod update-demo-nautilus-t4drk
  Aug 24 12:00:22.080: INFO: got data: {
    "image": "nautilus.jpg"
  }

  Aug 24 12:00:22.080: INFO: Unmarshalled json jpg/img => {nautilus.jpg} , expecting nautilus.jpg .
  Aug 24 12:00:22.080: INFO: update-demo-nautilus-t4drk is verified up and running
  STEP: scaling up the replication controller @ 08/24/23 12:00:22.08
  Aug 24 12:00:22.082: INFO: scanned /root for discovery docs: <nil>
  Aug 24 12:00:22.082: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1002171096 --namespace=kubectl-6359 scale rc update-demo-nautilus --replicas=2 --timeout=5m'
  Aug 24 12:00:23.229: INFO: stderr: ""
  Aug 24 12:00:23.229: INFO: stdout: "replicationcontroller/update-demo-nautilus scaled\n"
  STEP: waiting for all containers in name=update-demo pods to come up. @ 08/24/23 12:00:23.229
  Aug 24 12:00:23.229: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1002171096 --namespace=kubectl-6359 get pods -o template --template={{range.items}}{{.metadata.name}} {{end}} -l name=update-demo'
  Aug 24 12:00:23.340: INFO: stderr: ""
  Aug 24 12:00:23.340: INFO: stdout: "update-demo-nautilus-g2bhc update-demo-nautilus-t4drk "
  Aug 24 12:00:23.340: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1002171096 --namespace=kubectl-6359 get pods update-demo-nautilus-g2bhc -o template --template={{if (exists . "status" "containerStatuses")}}{{range .status.containerStatuses}}{{if (and (eq .name "update-demo") (exists . "state" "running"))}}true{{end}}{{end}}{{end}}'
  Aug 24 12:00:23.448: INFO: stderr: ""
  Aug 24 12:00:23.448: INFO: stdout: ""
  Aug 24 12:00:23.448: INFO: update-demo-nautilus-g2bhc is created but not running
  Aug 24 12:00:28.449: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1002171096 --namespace=kubectl-6359 get pods -o template --template={{range.items}}{{.metadata.name}} {{end}} -l name=update-demo'
  Aug 24 12:00:28.574: INFO: stderr: ""
  Aug 24 12:00:28.574: INFO: stdout: "update-demo-nautilus-g2bhc update-demo-nautilus-t4drk "
  Aug 24 12:00:28.574: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1002171096 --namespace=kubectl-6359 get pods update-demo-nautilus-g2bhc -o template --template={{if (exists . "status" "containerStatuses")}}{{range .status.containerStatuses}}{{if (and (eq .name "update-demo") (exists . "state" "running"))}}true{{end}}{{end}}{{end}}'
  Aug 24 12:00:28.694: INFO: stderr: ""
  Aug 24 12:00:28.694: INFO: stdout: "true"
  Aug 24 12:00:28.694: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1002171096 --namespace=kubectl-6359 get pods update-demo-nautilus-g2bhc -o template --template={{if (exists . "spec" "containers")}}{{range .spec.containers}}{{if eq .name "update-demo"}}{{.image}}{{end}}{{end}}{{end}}'
  Aug 24 12:00:28.814: INFO: stderr: ""
  Aug 24 12:00:28.814: INFO: stdout: "registry.k8s.io/e2e-test-images/nautilus:1.7"
  Aug 24 12:00:28.814: INFO: validating pod update-demo-nautilus-g2bhc
  Aug 24 12:00:28.835: INFO: got data: {
    "image": "nautilus.jpg"
  }

  Aug 24 12:00:28.836: INFO: Unmarshalled json jpg/img => {nautilus.jpg} , expecting nautilus.jpg .
  Aug 24 12:00:28.836: INFO: update-demo-nautilus-g2bhc is verified up and running
  Aug 24 12:00:28.836: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1002171096 --namespace=kubectl-6359 get pods update-demo-nautilus-t4drk -o template --template={{if (exists . "status" "containerStatuses")}}{{range .status.containerStatuses}}{{if (and (eq .name "update-demo") (exists . "state" "running"))}}true{{end}}{{end}}{{end}}'
  Aug 24 12:00:28.957: INFO: stderr: ""
  Aug 24 12:00:28.957: INFO: stdout: "true"
  Aug 24 12:00:28.957: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1002171096 --namespace=kubectl-6359 get pods update-demo-nautilus-t4drk -o template --template={{if (exists . "spec" "containers")}}{{range .spec.containers}}{{if eq .name "update-demo"}}{{.image}}{{end}}{{end}}{{end}}'
  Aug 24 12:00:29.078: INFO: stderr: ""
  Aug 24 12:00:29.078: INFO: stdout: "registry.k8s.io/e2e-test-images/nautilus:1.7"
  Aug 24 12:00:29.078: INFO: validating pod update-demo-nautilus-t4drk
  Aug 24 12:00:29.089: INFO: got data: {
    "image": "nautilus.jpg"
  }

  Aug 24 12:00:29.089: INFO: Unmarshalled json jpg/img => {nautilus.jpg} , expecting nautilus.jpg .
  Aug 24 12:00:29.089: INFO: update-demo-nautilus-t4drk is verified up and running
  STEP: using delete to clean up resources @ 08/24/23 12:00:29.089
  Aug 24 12:00:29.089: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1002171096 --namespace=kubectl-6359 delete --grace-period=0 --force -f -'
  Aug 24 12:00:29.223: INFO: stderr: "Warning: Immediate deletion does not wait for confirmation that the running resource has been terminated. The resource may continue to run on the cluster indefinitely.\n"
  Aug 24 12:00:29.223: INFO: stdout: "replicationcontroller \"update-demo-nautilus\" force deleted\n"
  Aug 24 12:00:29.223: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1002171096 --namespace=kubectl-6359 get rc,svc -l name=update-demo --no-headers'
  Aug 24 12:00:29.361: INFO: stderr: "No resources found in kubectl-6359 namespace.\n"
  Aug 24 12:00:29.361: INFO: stdout: ""
  Aug 24 12:00:29.361: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1002171096 --namespace=kubectl-6359 get pods -l name=update-demo -o go-template={{ range .items }}{{ if not .metadata.deletionTimestamp }}{{ .metadata.name }}{{ "\n" }}{{ end }}{{ end }}'
  Aug 24 12:00:29.450: INFO: stderr: ""
  Aug 24 12:00:29.450: INFO: stdout: ""
  Aug 24 12:00:29.450: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "kubectl-6359" for this suite. @ 08/24/23 12:00:29.461
• [22.374 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-storage] Downward API volume should set DefaultMode on files [LinuxOnly] [NodeConformance] [Conformance]
test/e2e/common/storage/downwardapi_volume.go:69
  STEP: Creating a kubernetes client @ 08/24/23 12:00:29.476
  Aug 24 12:00:29.476: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename downward-api @ 08/24/23 12:00:29.476
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 12:00:29.509
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 12:00:29.516
  STEP: Creating a pod to test downward API volume plugin @ 08/24/23 12:00:29.522
  STEP: Saw pod success @ 08/24/23 12:00:33.584
  Aug 24 12:00:33.593: INFO: Trying to get logs from node scw-conformance-default-2af6d8b4c6264cc5b9e5e6 pod downwardapi-volume-c73f2894-24fd-42cc-bead-3af0fa6af3b5 container client-container: <nil>
  STEP: delete the pod @ 08/24/23 12:00:33.638
  Aug 24 12:00:33.677: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "downward-api-4661" for this suite. @ 08/24/23 12:00:33.686
• [4.226 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-api-machinery] Garbage collector should not be blocked by dependency circle [Conformance]
test/e2e/apimachinery/garbage_collector.go:817
  STEP: Creating a kubernetes client @ 08/24/23 12:00:33.703
  Aug 24 12:00:33.703: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename gc @ 08/24/23 12:00:33.704
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 12:00:33.734
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 12:00:33.749
  Aug 24 12:00:33.856: INFO: pod1.ObjectMeta.OwnerReferences=[]v1.OwnerReference{v1.OwnerReference{APIVersion:"v1", Kind:"Pod", Name:"pod3", UID:"df3ceeed-1b4f-4323-b65c-81ef054603e3", Controller:(*bool)(0xc003b0ad52), BlockOwnerDeletion:(*bool)(0xc003b0ad53)}}
  Aug 24 12:00:33.870: INFO: pod2.ObjectMeta.OwnerReferences=[]v1.OwnerReference{v1.OwnerReference{APIVersion:"v1", Kind:"Pod", Name:"pod1", UID:"b5534dd7-f291-46ad-84f4-64a5ce994a4c", Controller:(*bool)(0xc003b0af76), BlockOwnerDeletion:(*bool)(0xc003b0af77)}}
  Aug 24 12:00:33.955: INFO: pod3.ObjectMeta.OwnerReferences=[]v1.OwnerReference{v1.OwnerReference{APIVersion:"v1", Kind:"Pod", Name:"pod2", UID:"e274baae-f4ca-4ab5-a6ee-bf0edecad4c2", Controller:(*bool)(0xc003eceea6), BlockOwnerDeletion:(*bool)(0xc003eceea7)}}
  Aug 24 12:00:38.981: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "gc-3316" for this suite. @ 08/24/23 12:00:38.99
• [5.300 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-node] Downward API should provide default limits.cpu/memory from node allocatable [NodeConformance] [Conformance]
test/e2e/common/node/downwardapi.go:218
  STEP: Creating a kubernetes client @ 08/24/23 12:00:39.003
  Aug 24 12:00:39.003: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename downward-api @ 08/24/23 12:00:39.004
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 12:00:39.049
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 12:00:39.055
  STEP: Creating a pod to test downward api env vars @ 08/24/23 12:00:39.061
  STEP: Saw pod success @ 08/24/23 12:00:43.106
  Aug 24 12:00:43.114: INFO: Trying to get logs from node scw-conformance-default-2af6d8b4c6264cc5b9e5e6 pod downward-api-9cd18937-50a4-45a8-b962-e8f0a18ac049 container dapi-container: <nil>
  STEP: delete the pod @ 08/24/23 12:00:43.138
  Aug 24 12:00:43.176: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "downward-api-1505" for this suite. @ 08/24/23 12:00:43.185
• [4.198 seconds]
------------------------------
SSS
------------------------------
[sig-network] DNS should provide DNS for ExternalName services [Conformance]
test/e2e/network/dns.go:329
  STEP: Creating a kubernetes client @ 08/24/23 12:00:43.202
  Aug 24 12:00:43.202: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename dns @ 08/24/23 12:00:43.203
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 12:00:43.252
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 12:00:43.259
  STEP: Creating a test externalName service @ 08/24/23 12:00:43.265
  STEP: Running these commands on wheezy: for i in `seq 1 30`; do dig +short dns-test-service-3.dns-5666.svc.cluster.local CNAME > /results/wheezy_udp@dns-test-service-3.dns-5666.svc.cluster.local; sleep 1; done
   @ 08/24/23 12:00:43.275
  STEP: Running these commands on jessie: for i in `seq 1 30`; do dig +short dns-test-service-3.dns-5666.svc.cluster.local CNAME > /results/jessie_udp@dns-test-service-3.dns-5666.svc.cluster.local; sleep 1; done
   @ 08/24/23 12:00:43.275
  STEP: creating a pod to probe DNS @ 08/24/23 12:00:43.275
  STEP: submitting the pod to kubernetes @ 08/24/23 12:00:43.275
  STEP: retrieving the pod @ 08/24/23 12:00:45.312
  STEP: looking for the results for each expected name from probers @ 08/24/23 12:00:45.32
  Aug 24 12:00:45.346: INFO: File jessie_udp@dns-test-service-3.dns-5666.svc.cluster.local from pod  dns-5666/dns-test-1cf92028-1069-43e4-a7bb-93129f21943e contains '' instead of 'foo.example.com.'
  Aug 24 12:00:45.346: INFO: Lookups using dns-5666/dns-test-1cf92028-1069-43e4-a7bb-93129f21943e failed for: [jessie_udp@dns-test-service-3.dns-5666.svc.cluster.local]

  Aug 24 12:00:45.362: INFO: Pod client logs for webserver: 
  Aug 24 12:00:45.379: INFO: Pod client logs for querier: 
  Aug 24 12:00:45.396: INFO: Pod client logs for jessie-querier: 
  Aug 24 12:00:50.423: INFO: DNS probes using dns-test-1cf92028-1069-43e4-a7bb-93129f21943e succeeded

  STEP: changing the externalName to bar.example.com @ 08/24/23 12:00:50.423
  STEP: Running these commands on wheezy: for i in `seq 1 30`; do dig +short dns-test-service-3.dns-5666.svc.cluster.local CNAME > /results/wheezy_udp@dns-test-service-3.dns-5666.svc.cluster.local; sleep 1; done
   @ 08/24/23 12:00:50.442
  STEP: Running these commands on jessie: for i in `seq 1 30`; do dig +short dns-test-service-3.dns-5666.svc.cluster.local CNAME > /results/jessie_udp@dns-test-service-3.dns-5666.svc.cluster.local; sleep 1; done
   @ 08/24/23 12:00:50.442
  STEP: creating a second pod to probe DNS @ 08/24/23 12:00:50.442
  STEP: submitting the pod to kubernetes @ 08/24/23 12:00:50.442
  STEP: retrieving the pod @ 08/24/23 12:01:00.509
  STEP: looking for the results for each expected name from probers @ 08/24/23 12:01:00.518
  Aug 24 12:01:00.545: INFO: DNS probes using dns-test-787ae0fe-66aa-4022-8603-fa7974a9af91 succeeded

  STEP: changing the service to type=ClusterIP @ 08/24/23 12:01:00.545
  W0824 12:01:00.579577      22 warnings.go:70] spec.externalName is ignored when spec.type is not "ExternalName"
  STEP: Running these commands on wheezy: for i in `seq 1 30`; do dig +short dns-test-service-3.dns-5666.svc.cluster.local A > /results/wheezy_udp@dns-test-service-3.dns-5666.svc.cluster.local; sleep 1; done
   @ 08/24/23 12:01:00.579
  STEP: Running these commands on jessie: for i in `seq 1 30`; do dig +short dns-test-service-3.dns-5666.svc.cluster.local A > /results/jessie_udp@dns-test-service-3.dns-5666.svc.cluster.local; sleep 1; done
   @ 08/24/23 12:01:00.579
  STEP: creating a third pod to probe DNS @ 08/24/23 12:01:00.579
  STEP: submitting the pod to kubernetes @ 08/24/23 12:01:00.589
  STEP: retrieving the pod @ 08/24/23 12:01:02.621
  STEP: looking for the results for each expected name from probers @ 08/24/23 12:01:02.629
  Aug 24 12:01:02.656: INFO: DNS probes using dns-test-a08b87bd-e763-4f9e-b68d-d877e47f487d succeeded

  Aug 24 12:01:02.657: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: deleting the pod @ 08/24/23 12:01:02.67
  STEP: deleting the pod @ 08/24/23 12:01:02.694
  STEP: deleting the pod @ 08/24/23 12:01:02.722
  STEP: deleting the test externalName service @ 08/24/23 12:01:02.773
  STEP: Destroying namespace "dns-5666" for this suite. @ 08/24/23 12:01:02.807
• [19.622 seconds]
------------------------------
[sig-api-machinery] Garbage collector should delete pods created by rc when not orphaning [Conformance]
test/e2e/apimachinery/garbage_collector.go:321
  STEP: Creating a kubernetes client @ 08/24/23 12:01:02.824
  Aug 24 12:01:02.824: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename gc @ 08/24/23 12:01:02.824
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 12:01:02.884
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 12:01:02.89
  STEP: create the rc @ 08/24/23 12:01:02.949
  W0824 12:01:02.963372      22 warnings.go:70] metadata.name: this is used in Pod names and hostnames, which can result in surprising behavior; a DNS label is recommended: [must not contain dots]
  STEP: delete the rc @ 08/24/23 12:01:07.972
  STEP: wait for all pods to be garbage collected @ 08/24/23 12:01:07.987
  STEP: Gathering metrics @ 08/24/23 12:01:13.006
  W0824 12:01:13.020411      22 metrics_grabber.go:152] Can't find kube-controller-manager pod. Grabbing metrics from kube-controller-manager is disabled.
  Aug 24 12:01:13.020: INFO: For apiserver_request_total:
  For apiserver_request_latency_seconds:
  For apiserver_init_events_total:
  For garbage_collector_attempt_to_delete_queue_latency:
  For garbage_collector_attempt_to_delete_work_duration:
  For garbage_collector_attempt_to_orphan_queue_latency:
  For garbage_collector_attempt_to_orphan_work_duration:
  For garbage_collector_dirty_processing_latency_microseconds:
  For garbage_collector_event_processing_latency_microseconds:
  For garbage_collector_graph_changes_queue_latency:
  For garbage_collector_graph_changes_work_duration:
  For garbage_collector_orphan_processing_latency_microseconds:
  For namespace_queue_latency:
  For namespace_queue_latency_sum:
  For namespace_queue_latency_count:
  For namespace_retries:
  For namespace_work_duration:
  For namespace_work_duration_sum:
  For namespace_work_duration_count:
  For function_duration_seconds:
  For errors_total:
  For evicted_pods_total:

  Aug 24 12:01:13.020: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "gc-2106" for this suite. @ 08/24/23 12:01:13.029
• [10.222 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-storage] Projected configMap should be consumable from pods in volume [NodeConformance] [Conformance]
test/e2e/common/storage/projected_configmap.go:47
  STEP: Creating a kubernetes client @ 08/24/23 12:01:13.047
  Aug 24 12:01:13.048: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename projected @ 08/24/23 12:01:13.049
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 12:01:13.08
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 12:01:13.087
  STEP: Creating configMap with name projected-configmap-test-volume-9f392b87-5fb2-407e-8abf-f3d020354322 @ 08/24/23 12:01:13.093
  STEP: Creating a pod to test consume configMaps @ 08/24/23 12:01:13.103
  STEP: Saw pod success @ 08/24/23 12:01:17.15
  Aug 24 12:01:17.158: INFO: Trying to get logs from node scw-conformance-default-2af6d8b4c6264cc5b9e5e6 pod pod-projected-configmaps-a5db8ee9-ea7d-43eb-bc0d-07a167cab58d container agnhost-container: <nil>
  STEP: delete the pod @ 08/24/23 12:01:17.176
  Aug 24 12:01:17.208: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "projected-2724" for this suite. @ 08/24/23 12:01:17.217
• [4.183 seconds]
------------------------------
SSS
------------------------------
[sig-storage] Projected configMap should be consumable from pods in volume with mappings as non-root [NodeConformance] [Conformance]
test/e2e/common/storage/projected_configmap.go:109
  STEP: Creating a kubernetes client @ 08/24/23 12:01:17.231
  Aug 24 12:01:17.231: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename projected @ 08/24/23 12:01:17.232
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 12:01:17.262
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 12:01:17.269
  STEP: Creating configMap with name projected-configmap-test-volume-map-17704d7f-aafb-45fd-a7b1-ad445fdd03d8 @ 08/24/23 12:01:17.276
  STEP: Creating a pod to test consume configMaps @ 08/24/23 12:01:17.286
  STEP: Saw pod success @ 08/24/23 12:01:21.333
  Aug 24 12:01:21.341: INFO: Trying to get logs from node scw-conformance-default-2af6d8b4c6264cc5b9e5e6 pod pod-projected-configmaps-3686806d-836a-4393-b282-693cff9baa01 container agnhost-container: <nil>
  STEP: delete the pod @ 08/24/23 12:01:21.359
  Aug 24 12:01:21.398: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "projected-7247" for this suite. @ 08/24/23 12:01:21.451
• [4.236 seconds]
------------------------------
SSSSSSSSSSS
------------------------------
[sig-api-machinery] Watchers should be able to restart watching from the last resource version observed by the previous watch [Conformance]
test/e2e/apimachinery/watch.go:191
  STEP: Creating a kubernetes client @ 08/24/23 12:01:21.468
  Aug 24 12:01:21.468: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename watch @ 08/24/23 12:01:21.469
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 12:01:21.502
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 12:01:21.548
  STEP: creating a watch on configmaps @ 08/24/23 12:01:21.555
  STEP: creating a new configmap @ 08/24/23 12:01:21.558
  STEP: modifying the configmap once @ 08/24/23 12:01:21.568
  STEP: closing the watch once it receives two notifications @ 08/24/23 12:01:21.583
  Aug 24 12:01:21.583: INFO: Got : ADDED &ConfigMap{ObjectMeta:{e2e-watch-test-watch-closed  watch-1393  0624d291-6d6e-42a6-bdee-7ed94764d269 3404936517 0 2023-08-24 12:01:21 +0000 UTC <nil> <nil> map[watch-this-configmap:watch-closed-and-restarted] map[] [] [] [{e2e.test Update v1 2023-08-24 12:01:21 +0000 UTC FieldsV1 {"f:metadata":{"f:labels":{".":{},"f:watch-this-configmap":{}}}} }]},Data:map[string]string{},BinaryData:map[string][]byte{},Immutable:nil,}
  Aug 24 12:01:21.584: INFO: Got : MODIFIED &ConfigMap{ObjectMeta:{e2e-watch-test-watch-closed  watch-1393  0624d291-6d6e-42a6-bdee-7ed94764d269 3404936520 0 2023-08-24 12:01:21 +0000 UTC <nil> <nil> map[watch-this-configmap:watch-closed-and-restarted] map[] [] [] [{e2e.test Update v1 2023-08-24 12:01:21 +0000 UTC FieldsV1 {"f:data":{".":{},"f:mutation":{}},"f:metadata":{"f:labels":{".":{},"f:watch-this-configmap":{}}}} }]},Data:map[string]string{mutation: 1,},BinaryData:map[string][]byte{},Immutable:nil,}
  STEP: modifying the configmap a second time, while the watch is closed @ 08/24/23 12:01:21.584
  STEP: creating a new watch on configmaps from the last resource version observed by the first watch @ 08/24/23 12:01:21.599
  STEP: deleting the configmap @ 08/24/23 12:01:21.602
  STEP: Expecting to observe notifications for all changes to the configmap since the first watch closed @ 08/24/23 12:01:21.615
  Aug 24 12:01:21.615: INFO: Got : MODIFIED &ConfigMap{ObjectMeta:{e2e-watch-test-watch-closed  watch-1393  0624d291-6d6e-42a6-bdee-7ed94764d269 3404936522 0 2023-08-24 12:01:21 +0000 UTC <nil> <nil> map[watch-this-configmap:watch-closed-and-restarted] map[] [] [] [{e2e.test Update v1 2023-08-24 12:01:21 +0000 UTC FieldsV1 {"f:data":{".":{},"f:mutation":{}},"f:metadata":{"f:labels":{".":{},"f:watch-this-configmap":{}}}} }]},Data:map[string]string{mutation: 2,},BinaryData:map[string][]byte{},Immutable:nil,}
  Aug 24 12:01:21.616: INFO: Got : DELETED &ConfigMap{ObjectMeta:{e2e-watch-test-watch-closed  watch-1393  0624d291-6d6e-42a6-bdee-7ed94764d269 3404936523 0 2023-08-24 12:01:21 +0000 UTC <nil> <nil> map[watch-this-configmap:watch-closed-and-restarted] map[] [] [] [{e2e.test Update v1 2023-08-24 12:01:21 +0000 UTC FieldsV1 {"f:data":{".":{},"f:mutation":{}},"f:metadata":{"f:labels":{".":{},"f:watch-this-configmap":{}}}} }]},Data:map[string]string{mutation: 2,},BinaryData:map[string][]byte{},Immutable:nil,}
  Aug 24 12:01:21.616: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "watch-1393" for this suite. @ 08/24/23 12:01:21.625
• [0.169 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-storage] EmptyDir wrapper volumes should not conflict [Conformance]
test/e2e/storage/empty_dir_wrapper.go:67
  STEP: Creating a kubernetes client @ 08/24/23 12:01:21.638
  Aug 24 12:01:21.638: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename emptydir-wrapper @ 08/24/23 12:01:21.638
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 12:01:21.667
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 12:01:21.672
  Aug 24 12:01:23.740: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Cleaning up the secret @ 08/24/23 12:01:23.75
  STEP: Cleaning up the configmap @ 08/24/23 12:01:23.766
  STEP: Cleaning up the pod @ 08/24/23 12:01:23.781
  STEP: Destroying namespace "emptydir-wrapper-5466" for this suite. @ 08/24/23 12:01:23.806
• [2.183 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-node] Container Runtime blackbox test on terminated container should report termination message as empty when pod succeeds and TerminationMessagePolicy FallbackToLogsOnError is set [NodeConformance] [Conformance]
test/e2e/common/node/runtime.go:232
  STEP: Creating a kubernetes client @ 08/24/23 12:01:23.822
  Aug 24 12:01:23.822: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename container-runtime @ 08/24/23 12:01:23.823
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 12:01:23.862
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 12:01:23.87
  STEP: create the container @ 08/24/23 12:01:23.877
  W0824 12:01:23.894685      22 warnings.go:70] metadata.name: this is used in the Pod's hostname, which can result in surprising behavior; a DNS label is recommended: [must be no more than 63 characters]
  STEP: wait for the container to reach Succeeded @ 08/24/23 12:01:23.894
  STEP: get the container status @ 08/24/23 12:01:26.979
  STEP: the container should be terminated @ 08/24/23 12:01:26.986
  STEP: the termination message should be set @ 08/24/23 12:01:26.986
  Aug 24 12:01:26.986: INFO: Expected: &{} to match Container's Termination Message:  --
  STEP: delete the container @ 08/24/23 12:01:26.986
  Aug 24 12:01:27.048: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "container-runtime-3075" for this suite. @ 08/24/23 12:01:27.066
• [3.259 seconds]
------------------------------
SSSSSSSSSSS
------------------------------
[sig-node] ConfigMap should run through a ConfigMap lifecycle [Conformance]
test/e2e/common/node/configmap.go:169
  STEP: Creating a kubernetes client @ 08/24/23 12:01:27.082
  Aug 24 12:01:27.082: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename configmap @ 08/24/23 12:01:27.083
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 12:01:27.164
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 12:01:27.171
  STEP: creating a ConfigMap @ 08/24/23 12:01:27.177
  STEP: fetching the ConfigMap @ 08/24/23 12:01:27.188
  STEP: patching the ConfigMap @ 08/24/23 12:01:27.195
  STEP: listing all ConfigMaps in all namespaces with a label selector @ 08/24/23 12:01:27.254
  STEP: deleting the ConfigMap by collection with a label selector @ 08/24/23 12:01:27.264
  STEP: listing all ConfigMaps in test namespace @ 08/24/23 12:01:27.282
  Aug 24 12:01:27.291: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "configmap-3349" for this suite. @ 08/24/23 12:01:27.349
• [0.282 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-node] Variable Expansion should allow substituting values in a container's command [NodeConformance] [Conformance]
test/e2e/common/node/expansion.go:76
  STEP: Creating a kubernetes client @ 08/24/23 12:01:27.366
  Aug 24 12:01:27.366: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename var-expansion @ 08/24/23 12:01:27.367
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 12:01:27.396
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 12:01:27.453
  STEP: Creating a pod to test substitution in container's command @ 08/24/23 12:01:27.459
  STEP: Saw pod success @ 08/24/23 12:01:31.506
  Aug 24 12:01:31.514: INFO: Trying to get logs from node scw-conformance-default-2af6d8b4c6264cc5b9e5e6 pod var-expansion-2f5bf390-2079-4923-9e26-91ef0d5c227e container dapi-container: <nil>
  STEP: delete the pod @ 08/24/23 12:01:31.531
  Aug 24 12:01:31.568: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "var-expansion-855" for this suite. @ 08/24/23 12:01:31.576
• [4.224 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-network] Proxy version v1 A set of valid responses are returned for both pod and service ProxyWithPath [Conformance]
test/e2e/network/proxy.go:286
  STEP: Creating a kubernetes client @ 08/24/23 12:01:31.594
  Aug 24 12:01:31.594: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename proxy @ 08/24/23 12:01:31.595
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 12:01:31.623
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 12:01:31.63
  Aug 24 12:01:31.636: INFO: Creating pod...
  Aug 24 12:01:33.710: INFO: Creating service...
  Aug 24 12:01:33.732: INFO: Starting http.Client for https://10.96.0.1:443/api/v1/namespaces/proxy-1390/pods/agnhost/proxy/some/path/with/DELETE
  Aug 24 12:01:33.754: INFO: http.Client request:DELETE | StatusCode:200 | Response:foo | Method:DELETE
  Aug 24 12:01:33.754: INFO: Starting http.Client for https://10.96.0.1:443/api/v1/namespaces/proxy-1390/pods/agnhost/proxy/some/path/with/GET
  Aug 24 12:01:33.764: INFO: http.Client request:GET | StatusCode:200 | Response:foo | Method:GET
  Aug 24 12:01:33.764: INFO: Starting http.Client for https://10.96.0.1:443/api/v1/namespaces/proxy-1390/pods/agnhost/proxy/some/path/with/HEAD
  Aug 24 12:01:33.775: INFO: http.Client request:HEAD | StatusCode:200
  Aug 24 12:01:33.775: INFO: Starting http.Client for https://10.96.0.1:443/api/v1/namespaces/proxy-1390/pods/agnhost/proxy/some/path/with/OPTIONS
  Aug 24 12:01:33.788: INFO: http.Client request:OPTIONS | StatusCode:200 | Response:foo | Method:OPTIONS
  Aug 24 12:01:33.788: INFO: Starting http.Client for https://10.96.0.1:443/api/v1/namespaces/proxy-1390/pods/agnhost/proxy/some/path/with/PATCH
  Aug 24 12:01:33.798: INFO: http.Client request:PATCH | StatusCode:200 | Response:foo | Method:PATCH
  Aug 24 12:01:33.798: INFO: Starting http.Client for https://10.96.0.1:443/api/v1/namespaces/proxy-1390/pods/agnhost/proxy/some/path/with/POST
  Aug 24 12:01:33.808: INFO: http.Client request:POST | StatusCode:200 | Response:foo | Method:POST
  Aug 24 12:01:33.808: INFO: Starting http.Client for https://10.96.0.1:443/api/v1/namespaces/proxy-1390/pods/agnhost/proxy/some/path/with/PUT
  Aug 24 12:01:33.819: INFO: http.Client request:PUT | StatusCode:200 | Response:foo | Method:PUT
  Aug 24 12:01:33.819: INFO: Starting http.Client for https://10.96.0.1:443/api/v1/namespaces/proxy-1390/services/test-service/proxy/some/path/with/DELETE
  Aug 24 12:01:33.835: INFO: http.Client request:DELETE | StatusCode:200 | Response:foo | Method:DELETE
  Aug 24 12:01:33.835: INFO: Starting http.Client for https://10.96.0.1:443/api/v1/namespaces/proxy-1390/services/test-service/proxy/some/path/with/GET
  Aug 24 12:01:33.856: INFO: http.Client request:GET | StatusCode:200 | Response:foo | Method:GET
  Aug 24 12:01:33.856: INFO: Starting http.Client for https://10.96.0.1:443/api/v1/namespaces/proxy-1390/services/test-service/proxy/some/path/with/HEAD
  Aug 24 12:01:33.872: INFO: http.Client request:HEAD | StatusCode:200
  Aug 24 12:01:33.872: INFO: Starting http.Client for https://10.96.0.1:443/api/v1/namespaces/proxy-1390/services/test-service/proxy/some/path/with/OPTIONS
  Aug 24 12:01:33.886: INFO: http.Client request:OPTIONS | StatusCode:200 | Response:foo | Method:OPTIONS
  Aug 24 12:01:33.886: INFO: Starting http.Client for https://10.96.0.1:443/api/v1/namespaces/proxy-1390/services/test-service/proxy/some/path/with/PATCH
  Aug 24 12:01:33.902: INFO: http.Client request:PATCH | StatusCode:200 | Response:foo | Method:PATCH
  Aug 24 12:01:33.902: INFO: Starting http.Client for https://10.96.0.1:443/api/v1/namespaces/proxy-1390/services/test-service/proxy/some/path/with/POST
  Aug 24 12:01:33.917: INFO: http.Client request:POST | StatusCode:200 | Response:foo | Method:POST
  Aug 24 12:01:33.917: INFO: Starting http.Client for https://10.96.0.1:443/api/v1/namespaces/proxy-1390/services/test-service/proxy/some/path/with/PUT
  Aug 24 12:01:33.932: INFO: http.Client request:PUT | StatusCode:200 | Response:foo | Method:PUT
  Aug 24 12:01:33.933: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "proxy-1390" for this suite. @ 08/24/23 12:01:33.944
• [2.363 seconds]
------------------------------
SS
------------------------------
[sig-storage] EmptyDir volumes should support (non-root,0777,tmpfs) [LinuxOnly] [NodeConformance] [Conformance]
test/e2e/common/storage/empty_dir.go:147
  STEP: Creating a kubernetes client @ 08/24/23 12:01:33.958
  Aug 24 12:01:33.958: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename emptydir @ 08/24/23 12:01:33.959
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 12:01:33.991
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 12:01:33.997
  STEP: Creating a pod to test emptydir 0777 on tmpfs @ 08/24/23 12:01:34.005
  STEP: Saw pod success @ 08/24/23 12:01:38.052
  Aug 24 12:01:38.059: INFO: Trying to get logs from node scw-conformance-default-2af6d8b4c6264cc5b9e5e6 pod pod-646c7462-9a1e-4be2-9bad-3f917368c998 container test-container: <nil>
  STEP: delete the pod @ 08/24/23 12:01:38.081
  Aug 24 12:01:38.128: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "emptydir-2724" for this suite. @ 08/24/23 12:01:38.139
• [4.232 seconds]
------------------------------
SSSSSSSSSSSSSSSS
------------------------------
[sig-apps] Job should apply changes to a job status [Conformance]
test/e2e/apps/job.go:642
  STEP: Creating a kubernetes client @ 08/24/23 12:01:38.191
  Aug 24 12:01:38.191: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename job @ 08/24/23 12:01:38.192
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 12:01:38.22
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 12:01:38.226
  STEP: Creating a job @ 08/24/23 12:01:38.232
  STEP: Ensure pods equal to parallelism count is attached to the job @ 08/24/23 12:01:38.245
  STEP: patching /status @ 08/24/23 12:01:40.256
  STEP: updating /status @ 08/24/23 12:01:40.271
  STEP: get /status @ 08/24/23 12:01:40.292
  Aug 24 12:01:40.349: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "job-4638" for this suite. @ 08/24/23 12:01:40.359
• [2.184 seconds]
------------------------------
SSSSSSSSSSSSSSSSS
------------------------------
[sig-storage] EmptyDir volumes should support (root,0777,tmpfs) [LinuxOnly] [NodeConformance] [Conformance]
test/e2e/common/storage/empty_dir.go:117
  STEP: Creating a kubernetes client @ 08/24/23 12:01:40.376
  Aug 24 12:01:40.376: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename emptydir @ 08/24/23 12:01:40.377
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 12:01:40.473
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 12:01:40.48
  STEP: Creating a pod to test emptydir 0777 on tmpfs @ 08/24/23 12:01:40.486
  STEP: Saw pod success @ 08/24/23 12:01:44.579
  Aug 24 12:01:44.587: INFO: Trying to get logs from node scw-conformance-default-2af6d8b4c6264cc5b9e5e6 pod pod-282e953d-56c8-400e-a305-e5f02b1e3a13 container test-container: <nil>
  STEP: delete the pod @ 08/24/23 12:01:44.606
  Aug 24 12:01:44.635: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "emptydir-6267" for this suite. @ 08/24/23 12:01:44.645
• [4.286 seconds]
------------------------------
SSSSSSS
------------------------------
[sig-node] Variable Expansion should allow composing env vars into new env vars [NodeConformance] [Conformance]
test/e2e/common/node/expansion.go:47
  STEP: Creating a kubernetes client @ 08/24/23 12:01:44.662
  Aug 24 12:01:44.662: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename var-expansion @ 08/24/23 12:01:44.663
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 12:01:44.706
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 12:01:44.713
  STEP: Creating a pod to test env composition @ 08/24/23 12:01:44.72
  STEP: Saw pod success @ 08/24/23 12:01:48.767
  Aug 24 12:01:48.774: INFO: Trying to get logs from node scw-conformance-default-ecf11ec729064adba7e270 pod var-expansion-34b5caff-5678-47a2-9f76-9f28001973dd container dapi-container: <nil>
  STEP: delete the pod @ 08/24/23 12:01:48.825
  Aug 24 12:01:48.858: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "var-expansion-7543" for this suite. @ 08/24/23 12:01:48.875
• [4.228 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should be able to deny pod and configmap creation [Conformance]
test/e2e/apimachinery/webhook.go:199
  STEP: Creating a kubernetes client @ 08/24/23 12:01:48.891
  Aug 24 12:01:48.891: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename webhook @ 08/24/23 12:01:48.892
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 12:01:48.924
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 12:01:48.931
  STEP: Setting up server cert @ 08/24/23 12:01:48.997
  STEP: Create role binding to let webhook read extension-apiserver-authentication @ 08/24/23 12:01:49.386
  STEP: Deploying the webhook pod @ 08/24/23 12:01:49.405
  STEP: Wait for the deployment to be ready @ 08/24/23 12:01:49.43
  Aug 24 12:01:49.448: INFO: deployment "sample-webhook-deployment" doesn't have the required revision set
  STEP: Deploying the webhook service @ 08/24/23 12:01:51.473
  STEP: Verifying the service has paired with the endpoint @ 08/24/23 12:01:51.5
  Aug 24 12:01:52.500: INFO: Waiting for amount of service:e2e-test-webhook endpoints to be 1
  STEP: Registering the webhook via the AdmissionRegistration API @ 08/24/23 12:01:52.517
  STEP: create a pod that should be denied by the webhook @ 08/24/23 12:01:52.557
  STEP: create a pod that causes the webhook to hang @ 08/24/23 12:01:52.585
  STEP: create a configmap that should be denied by the webhook @ 08/24/23 12:02:02.604
  STEP: create a configmap that should be admitted by the webhook @ 08/24/23 12:02:02.642
  STEP: update (PUT) the admitted configmap to a non-compliant one should be rejected by the webhook @ 08/24/23 12:02:02.672
  STEP: update (PATCH) the admitted configmap to a non-compliant one should be rejected by the webhook @ 08/24/23 12:02:02.694
  STEP: create a namespace that bypass the webhook @ 08/24/23 12:02:02.708
  STEP: create a configmap that violates the webhook policy but is in a whitelisted namespace @ 08/24/23 12:02:02.74
  Aug 24 12:02:02.765: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "webhook-8272" for this suite. @ 08/24/23 12:02:02.905
  STEP: Destroying namespace "webhook-markers-5452" for this suite. @ 08/24/23 12:02:02.949
  STEP: Destroying namespace "exempted-namespace-9741" for this suite. @ 08/24/23 12:02:02.969
• [14.091 seconds]
------------------------------
SSSSSSSSSSSSSSSSSS
------------------------------
[sig-apps] Deployment should validate Deployment Status endpoints [Conformance]
test/e2e/apps/deployment.go:488
  STEP: Creating a kubernetes client @ 08/24/23 12:02:02.983
  Aug 24 12:02:02.983: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename deployment @ 08/24/23 12:02:02.984
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 12:02:03.055
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 12:02:03.062
  STEP: creating a Deployment @ 08/24/23 12:02:03.077
  Aug 24 12:02:03.077: INFO: Creating simple deployment test-deployment-b95dh
  Aug 24 12:02:03.105: INFO: deployment "test-deployment-b95dh" doesn't have the required revision set
  STEP: Getting /status @ 08/24/23 12:02:05.138
  Aug 24 12:02:05.147: INFO: Deployment test-deployment-b95dh has Conditions: [{Available True 2023-08-24 12:02:04 +0000 UTC 2023-08-24 12:02:04 +0000 UTC MinimumReplicasAvailable Deployment has minimum availability.} {Progressing True 2023-08-24 12:02:04 +0000 UTC 2023-08-24 12:02:03 +0000 UTC NewReplicaSetAvailable ReplicaSet "test-deployment-b95dh-5d576bd769" has successfully progressed.}]
  STEP: updating Deployment Status @ 08/24/23 12:02:05.147
  Aug 24 12:02:05.171: INFO: updatedStatus.Conditions: []v1.DeploymentCondition{v1.DeploymentCondition{Type:"Available", Status:"True", LastUpdateTime:time.Date(2023, time.August, 24, 12, 2, 4, 0, time.Local), LastTransitionTime:time.Date(2023, time.August, 24, 12, 2, 4, 0, time.Local), Reason:"MinimumReplicasAvailable", Message:"Deployment has minimum availability."}, v1.DeploymentCondition{Type:"Progressing", Status:"True", LastUpdateTime:time.Date(2023, time.August, 24, 12, 2, 4, 0, time.Local), LastTransitionTime:time.Date(2023, time.August, 24, 12, 2, 3, 0, time.Local), Reason:"NewReplicaSetAvailable", Message:"ReplicaSet \"test-deployment-b95dh-5d576bd769\" has successfully progressed."}, v1.DeploymentCondition{Type:"StatusUpdate", Status:"True", LastUpdateTime:time.Date(1, time.January, 1, 0, 0, 0, 0, time.UTC), LastTransitionTime:time.Date(1, time.January, 1, 0, 0, 0, 0, time.UTC), Reason:"E2E", Message:"Set from e2e test"}}
  STEP: watching for the Deployment status to be updated @ 08/24/23 12:02:05.171
  Aug 24 12:02:05.175: INFO: Observed &Deployment event: ADDED
  Aug 24 12:02:05.175: INFO: Observed Deployment test-deployment-b95dh in namespace deployment-3737 with annotations: map[deployment.kubernetes.io/revision:1] & Conditions: {Progressing True 2023-08-24 12:02:03 +0000 UTC 2023-08-24 12:02:03 +0000 UTC NewReplicaSetCreated Created new replica set "test-deployment-b95dh-5d576bd769"}
  Aug 24 12:02:05.175: INFO: Observed &Deployment event: MODIFIED
  Aug 24 12:02:05.175: INFO: Observed Deployment test-deployment-b95dh in namespace deployment-3737 with annotations: map[deployment.kubernetes.io/revision:1] & Conditions: {Progressing True 2023-08-24 12:02:03 +0000 UTC 2023-08-24 12:02:03 +0000 UTC NewReplicaSetCreated Created new replica set "test-deployment-b95dh-5d576bd769"}
  Aug 24 12:02:05.175: INFO: Observed Deployment test-deployment-b95dh in namespace deployment-3737 with annotations: map[deployment.kubernetes.io/revision:1] & Conditions: {Available False 2023-08-24 12:02:03 +0000 UTC 2023-08-24 12:02:03 +0000 UTC MinimumReplicasUnavailable Deployment does not have minimum availability.}
  Aug 24 12:02:05.175: INFO: Observed &Deployment event: MODIFIED
  Aug 24 12:02:05.176: INFO: Observed Deployment test-deployment-b95dh in namespace deployment-3737 with annotations: map[deployment.kubernetes.io/revision:1] & Conditions: {Available False 2023-08-24 12:02:03 +0000 UTC 2023-08-24 12:02:03 +0000 UTC MinimumReplicasUnavailable Deployment does not have minimum availability.}
  Aug 24 12:02:05.176: INFO: Observed Deployment test-deployment-b95dh in namespace deployment-3737 with annotations: map[deployment.kubernetes.io/revision:1] & Conditions: {Progressing True 2023-08-24 12:02:03 +0000 UTC 2023-08-24 12:02:03 +0000 UTC ReplicaSetUpdated ReplicaSet "test-deployment-b95dh-5d576bd769" is progressing.}
  Aug 24 12:02:05.176: INFO: Observed &Deployment event: MODIFIED
  Aug 24 12:02:05.176: INFO: Observed Deployment test-deployment-b95dh in namespace deployment-3737 with annotations: map[deployment.kubernetes.io/revision:1] & Conditions: {Available True 2023-08-24 12:02:04 +0000 UTC 2023-08-24 12:02:04 +0000 UTC MinimumReplicasAvailable Deployment has minimum availability.}
  Aug 24 12:02:05.176: INFO: Observed Deployment test-deployment-b95dh in namespace deployment-3737 with annotations: map[deployment.kubernetes.io/revision:1] & Conditions: {Progressing True 2023-08-24 12:02:04 +0000 UTC 2023-08-24 12:02:03 +0000 UTC NewReplicaSetAvailable ReplicaSet "test-deployment-b95dh-5d576bd769" has successfully progressed.}
  Aug 24 12:02:05.176: INFO: Observed &Deployment event: MODIFIED
  Aug 24 12:02:05.176: INFO: Observed Deployment test-deployment-b95dh in namespace deployment-3737 with annotations: map[deployment.kubernetes.io/revision:1] & Conditions: {Available True 2023-08-24 12:02:04 +0000 UTC 2023-08-24 12:02:04 +0000 UTC MinimumReplicasAvailable Deployment has minimum availability.}
  Aug 24 12:02:05.176: INFO: Observed Deployment test-deployment-b95dh in namespace deployment-3737 with annotations: map[deployment.kubernetes.io/revision:1] & Conditions: {Progressing True 2023-08-24 12:02:04 +0000 UTC 2023-08-24 12:02:03 +0000 UTC NewReplicaSetAvailable ReplicaSet "test-deployment-b95dh-5d576bd769" has successfully progressed.}
  Aug 24 12:02:05.176: INFO: Found Deployment test-deployment-b95dh in namespace deployment-3737 with labels: map[e2e:testing name:httpd] annotations: map[deployment.kubernetes.io/revision:1] & Conditions: {StatusUpdate True 0001-01-01 00:00:00 +0000 UTC 0001-01-01 00:00:00 +0000 UTC E2E Set from e2e test}
  Aug 24 12:02:05.176: INFO: Deployment test-deployment-b95dh has an updated status
  STEP: patching the Statefulset Status @ 08/24/23 12:02:05.176
  Aug 24 12:02:05.176: INFO: Patch payload: {"status":{"conditions":[{"type":"StatusPatched","status":"True"}]}}
  Aug 24 12:02:05.193: INFO: Patched status conditions: []v1.DeploymentCondition{v1.DeploymentCondition{Type:"StatusPatched", Status:"True", LastUpdateTime:time.Date(1, time.January, 1, 0, 0, 0, 0, time.UTC), LastTransitionTime:time.Date(1, time.January, 1, 0, 0, 0, 0, time.UTC), Reason:"", Message:""}}
  STEP: watching for the Deployment status to be patched @ 08/24/23 12:02:05.193
  Aug 24 12:02:05.197: INFO: Observed &Deployment event: ADDED
  Aug 24 12:02:05.197: INFO: Observed deployment test-deployment-b95dh in namespace deployment-3737 with annotations: map[deployment.kubernetes.io/revision:1] & Conditions: {Progressing True 2023-08-24 12:02:03 +0000 UTC 2023-08-24 12:02:03 +0000 UTC NewReplicaSetCreated Created new replica set "test-deployment-b95dh-5d576bd769"}
  Aug 24 12:02:05.197: INFO: Observed &Deployment event: MODIFIED
  Aug 24 12:02:05.197: INFO: Observed deployment test-deployment-b95dh in namespace deployment-3737 with annotations: map[deployment.kubernetes.io/revision:1] & Conditions: {Progressing True 2023-08-24 12:02:03 +0000 UTC 2023-08-24 12:02:03 +0000 UTC NewReplicaSetCreated Created new replica set "test-deployment-b95dh-5d576bd769"}
  Aug 24 12:02:05.197: INFO: Observed deployment test-deployment-b95dh in namespace deployment-3737 with annotations: map[deployment.kubernetes.io/revision:1] & Conditions: {Available False 2023-08-24 12:02:03 +0000 UTC 2023-08-24 12:02:03 +0000 UTC MinimumReplicasUnavailable Deployment does not have minimum availability.}
  Aug 24 12:02:05.198: INFO: Observed &Deployment event: MODIFIED
  Aug 24 12:02:05.198: INFO: Observed deployment test-deployment-b95dh in namespace deployment-3737 with annotations: map[deployment.kubernetes.io/revision:1] & Conditions: {Available False 2023-08-24 12:02:03 +0000 UTC 2023-08-24 12:02:03 +0000 UTC MinimumReplicasUnavailable Deployment does not have minimum availability.}
  Aug 24 12:02:05.198: INFO: Observed deployment test-deployment-b95dh in namespace deployment-3737 with annotations: map[deployment.kubernetes.io/revision:1] & Conditions: {Progressing True 2023-08-24 12:02:03 +0000 UTC 2023-08-24 12:02:03 +0000 UTC ReplicaSetUpdated ReplicaSet "test-deployment-b95dh-5d576bd769" is progressing.}
  Aug 24 12:02:05.198: INFO: Observed &Deployment event: MODIFIED
  Aug 24 12:02:05.198: INFO: Observed deployment test-deployment-b95dh in namespace deployment-3737 with annotations: map[deployment.kubernetes.io/revision:1] & Conditions: {Available True 2023-08-24 12:02:04 +0000 UTC 2023-08-24 12:02:04 +0000 UTC MinimumReplicasAvailable Deployment has minimum availability.}
  Aug 24 12:02:05.198: INFO: Observed deployment test-deployment-b95dh in namespace deployment-3737 with annotations: map[deployment.kubernetes.io/revision:1] & Conditions: {Progressing True 2023-08-24 12:02:04 +0000 UTC 2023-08-24 12:02:03 +0000 UTC NewReplicaSetAvailable ReplicaSet "test-deployment-b95dh-5d576bd769" has successfully progressed.}
  Aug 24 12:02:05.198: INFO: Observed &Deployment event: MODIFIED
  Aug 24 12:02:05.198: INFO: Observed deployment test-deployment-b95dh in namespace deployment-3737 with annotations: map[deployment.kubernetes.io/revision:1] & Conditions: {Available True 2023-08-24 12:02:04 +0000 UTC 2023-08-24 12:02:04 +0000 UTC MinimumReplicasAvailable Deployment has minimum availability.}
  Aug 24 12:02:05.198: INFO: Observed deployment test-deployment-b95dh in namespace deployment-3737 with annotations: map[deployment.kubernetes.io/revision:1] & Conditions: {Progressing True 2023-08-24 12:02:04 +0000 UTC 2023-08-24 12:02:03 +0000 UTC NewReplicaSetAvailable ReplicaSet "test-deployment-b95dh-5d576bd769" has successfully progressed.}
  Aug 24 12:02:05.198: INFO: Observed deployment test-deployment-b95dh in namespace deployment-3737 with annotations: map[deployment.kubernetes.io/revision:1] & Conditions: {StatusUpdate True 0001-01-01 00:00:00 +0000 UTC 0001-01-01 00:00:00 +0000 UTC E2E Set from e2e test}
  Aug 24 12:02:05.199: INFO: Observed &Deployment event: MODIFIED
  Aug 24 12:02:05.199: INFO: Found deployment test-deployment-b95dh in namespace deployment-3737 with labels: map[e2e:testing name:httpd] annotations: map[deployment.kubernetes.io/revision:1] & Conditions: {StatusPatched True 0001-01-01 00:00:00 +0000 UTC 0001-01-01 00:00:00 +0000 UTC  }
  Aug 24 12:02:05.199: INFO: Deployment test-deployment-b95dh has a patched status
  Aug 24 12:02:05.206: INFO: Deployment "test-deployment-b95dh":
  (v1.Deployment) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=21) "test-deployment-b95dh",
      GenerateName: (string) "",
      Namespace: (string) (len=15) "deployment-3737",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "a63441c8-bbcd-40a2-973a-3915d129d6b9",
      ResourceVersion: (string) (len=10) "3404938896",
      Generation: (int64) 1,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63828475323,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=3) "e2e": (string) (len=7) "testing",
        (string) (len=4) "name": (string) (len=5) "httpd"
      },
      Annotations: (map[string]string) (len=1) {
        (string) (len=33) "deployment.kubernetes.io/revision": (string) (len=1) "1"
      },
      OwnerReferences: ([]v1.OwnerReference) <nil>,
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=3) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "e2e.test",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828475323,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=657) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 6c 61 62 65 6c 73  22 3a 7b 22 2e 22 3a 7b  |f:labels":{".":{|
              00000020  7d 2c 22 66 3a 65 32 65  22 3a 7b 7d 2c 22 66 3a  |},"f:e2e":{},"f:|
              00000030  6e 61 6d 65 22 3a 7b 7d  7d 7d 2c 22 66 3a 73 70  |name":{}}},"f:sp|
              00000040  65 63 22 3a 7b 22 66 3a  70 72 6f 67 72 65 73 73  |ec":{"f:progress|
              00000050  44 65 61 64 6c 69 6e 65  53 65 63 6f 6e 64 73 22  |DeadlineSeconds"|
              00000060  3a 7b 7d 2c 22 66 3a 72  65 70 6c 69 63 61 73 22  |:{},"f:replicas"|
              00000070  3a 7b 7d 2c 22 66 3a 72  65 76 69 73 69 6f 6e 48  |:{},"f:revisionH|
              00000080  69 73 74 6f 72 79 4c 69  6d 69 74 22 3a 7b 7d 2c  |istoryLimit":{},|
              00000090  22 66 3a 73 65 6c 65 63  74 6f 72 22 3a 7b 7d 2c  |"f:selector":{},|
              000000a0  22 66 3a 73 74 72 61 74  65 67 79 22 3a 7b 22 66  |"f:strategy":{"f|
              000000b0  3a 72 6f 6c 6c 69 6e 67  55 70 64 61 74 65 22 3a  |:rollingUpdate":|
              000000c0  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6d 61 78 53 75  |{".":{},"f:maxSu|
              000000d0  72 67 65 22 3a 7b 7d 2c  22 66 3a 6d 61 78 55 6e  |rge":{},"f:maxUn|
              000000e0  61 76 61 69 6c 61 62 6c  65 22 3a 7b 7d 7d 2c 22  |available":{}},"|
              000000f0  66 3a 74 79 70 65 22 3a  7b 7d 7d 2c 22 66 3a 74  |f:type":{}},"f:t|
              00000100  65 6d 70 6c 61 74 65 22  3a 7b 22 66 3a 6d 65 74  |emplate":{"f:met|
              00000110  61 64 61 74 61 22 3a 7b  22 66 3a 6c 61 62 65 6c  |adata":{"f:label|
              00000120  73 22 3a 7b 22 2e 22 3a  7b 7d 2c 22 66 3a 65 32  |s":{".":{},"f:e2|
              00000130  65 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |e":{},"f:name":{|
              00000140  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              00000150  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              00000160  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 68 74 74  |:{\"name\":\"htt|
              00000170  70 64 5c 22 7d 22 3a 7b  22 2e 22 3a 7b 7d 2c 22  |pd\"}":{".":{},"|
              00000180  66 3a 69 6d 61 67 65 22  3a 7b 7d 2c 22 66 3a 69  |f:image":{},"f:i|
              00000190  6d 61 67 65 50 75 6c 6c  50 6f 6c 69 63 79 22 3a  |magePullPolicy":|
              000001a0  7b 7d 2c 22 66 3a 6e 61  6d 65 22 3a 7b 7d 2c 22  |{},"f:name":{},"|
              000001b0  66 3a 72 65 73 6f 75 72  63 65 73 22 3a 7b 7d 2c  |f:resources":{},|
              000001c0  22 66 3a 73 65 63 75 72  69 74 79 43 6f 6e 74 65  |"f:securityConte|
              000001d0  78 74 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |xt":{},"f:termin|
              000001e0  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 61 74 68  |ationMessagePath|
              000001f0  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000200  69 6f 6e 4d 65 73 73 61  67 65 50 6f 6c 69 63 79  |ionMessagePolicy|
              00000210  22 3a 7b 7d 7d 7d 2c 22  66 3a 64 6e 73 50 6f 6c  |":{}}},"f:dnsPol|
              00000220  69 63 79 22 3a 7b 7d 2c  22 66 3a 72 65 73 74 61  |icy":{},"f:resta|
              00000230  72 74 50 6f 6c 69 63 79  22 3a 7b 7d 2c 22 66 3a  |rtPolicy":{},"f:|
              00000240  73 63 68 65 64 75 6c 65  72 4e 61 6d 65 22 3a 7b  |schedulerName":{|
              00000250  7d 2c 22 66 3a 73 65 63  75 72 69 74 79 43 6f 6e  |},"f:securityCon|
              00000260  74 65 78 74 22 3a 7b 7d  2c 22 66 3a 74 65 72 6d  |text":{},"f:term|
              00000270  69 6e 61 74 69 6f 6e 47  72 61 63 65 50 65 72 69  |inationGracePeri|
              00000280  6f 64 53 65 63 6f 6e 64  73 22 3a 7b 7d 7d 7d 7d  |odSeconds":{}}}}|
              00000290  7d                                                |}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828475324,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=224) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 61 6e 6e 6f 74 61  74 69 6f 6e 73 22 3a 7b  |f:annotations":{|
              00000020  22 2e 22 3a 7b 7d 2c 22  66 3a 64 65 70 6c 6f 79  |".":{},"f:deploy|
              00000030  6d 65 6e 74 2e 6b 75 62  65 72 6e 65 74 65 73 2e  |ment.kubernetes.|
              00000040  69 6f 2f 72 65 76 69 73  69 6f 6e 22 3a 7b 7d 7d  |io/revision":{}}|
              00000050  7d 2c 22 66 3a 73 74 61  74 75 73 22 3a 7b 22 66  |},"f:status":{"f|
              00000060  3a 61 76 61 69 6c 61 62  6c 65 52 65 70 6c 69 63  |:availableReplic|
              00000070  61 73 22 3a 7b 7d 2c 22  66 3a 63 6f 6e 64 69 74  |as":{},"f:condit|
              00000080  69 6f 6e 73 22 3a 7b 7d  2c 22 66 3a 6f 62 73 65  |ions":{},"f:obse|
              00000090  72 76 65 64 47 65 6e 65  72 61 74 69 6f 6e 22 3a  |rvedGeneration":|
              000000a0  7b 7d 2c 22 66 3a 72 65  61 64 79 52 65 70 6c 69  |{},"f:readyRepli|
              000000b0  63 61 73 22 3a 7b 7d 2c  22 66 3a 72 65 70 6c 69  |cas":{},"f:repli|
              000000c0  63 61 73 22 3a 7b 7d 2c  22 66 3a 75 70 64 61 74  |cas":{},"f:updat|
              000000d0  65 64 52 65 70 6c 69 63  61 73 22 3a 7b 7d 7d 7d  |edReplicas":{}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "e2e.test",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828475325,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=147) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  63 6f 6e 64 69 74 69 6f  6e 73 22 3a 7b 22 6b 3a  |conditions":{"k:|
              00000020  7b 5c 22 74 79 70 65 5c  22 3a 5c 22 53 74 61 74  |{\"type\":\"Stat|
              00000030  75 73 50 61 74 63 68 65  64 5c 22 7d 22 3a 7b 22  |usPatched\"}":{"|
              00000040  2e 22 3a 7b 7d 2c 22 66  3a 6c 61 73 74 54 72 61  |.":{},"f:lastTra|
              00000050  6e 73 69 74 69 6f 6e 54  69 6d 65 22 3a 7b 7d 2c  |nsitionTime":{},|
              00000060  22 66 3a 6c 61 73 74 55  70 64 61 74 65 54 69 6d  |"f:lastUpdateTim|
              00000070  65 22 3a 7b 7d 2c 22 66  3a 73 74 61 74 75 73 22  |e":{},"f:status"|
              00000080  3a 7b 7d 2c 22 66 3a 74  79 70 65 22 3a 7b 7d 7d  |:{},"f:type":{}}|
              00000090  7d 7d 7d                                          |}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.DeploymentSpec) {
      Replicas: (*int32)(1),
      Selector: (*v1.LabelSelector)({
        MatchLabels: (map[string]string) (len=2) {
          (string) (len=3) "e2e": (string) (len=7) "testing",
          (string) (len=4) "name": (string) (len=5) "httpd"
        },
        MatchExpressions: ([]v1.LabelSelectorRequirement) <nil>
      }),
      Template: (v1.PodTemplateSpec) {
        ObjectMeta: (v1.ObjectMeta) {
          Name: (string) "",
          GenerateName: (string) "",
          Namespace: (string) "",
          SelfLink: (string) "",
          UID: (types.UID) "",
          ResourceVersion: (string) "",
          Generation: (int64) 0,
          CreationTimestamp: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          DeletionTimestamp: (*v1.Time)(<nil>),
          DeletionGracePeriodSeconds: (*int64)(<nil>),
          Labels: (map[string]string) (len=2) {
            (string) (len=4) "name": (string) (len=5) "httpd",
            (string) (len=3) "e2e": (string) (len=7) "testing"
          },
          Annotations: (map[string]string) <nil>,
          OwnerReferences: ([]v1.OwnerReference) <nil>,
          Finalizers: ([]string) <nil>,
          ManagedFields: ([]v1.ManagedFieldsEntry) <nil>
        },
        Spec: (v1.PodSpec) {
          Volumes: ([]v1.Volume) <nil>,
          InitContainers: ([]v1.Container) <nil>,
          Containers: ([]v1.Container) (len=1) {
            (v1.Container) {
              Name: (string) (len=5) "httpd",
              Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
              Command: ([]string) <nil>,
              Args: ([]string) <nil>,
              WorkingDir: (string) "",
              Ports: ([]v1.ContainerPort) <nil>,
              EnvFrom: ([]v1.EnvFromSource) <nil>,
              Env: ([]v1.EnvVar) <nil>,
              Resources: (v1.ResourceRequirements) {
                Limits: (v1.ResourceList) <nil>,
                Requests: (v1.ResourceList) <nil>,
                Claims: ([]v1.ResourceClaim) <nil>
              },
              ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
              RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
              VolumeMounts: ([]v1.VolumeMount) <nil>,
              VolumeDevices: ([]v1.VolumeDevice) <nil>,
              LivenessProbe: (*v1.Probe)(<nil>),
              ReadinessProbe: (*v1.Probe)(<nil>),
              StartupProbe: (*v1.Probe)(<nil>),
              Lifecycle: (*v1.Lifecycle)(<nil>),
              TerminationMessagePath: (string) (len=20) "/dev/termination-log",
              TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
              ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
              SecurityContext: (*v1.SecurityContext)({
                Capabilities: (*v1.Capabilities)(<nil>),
                Privileged: (*bool)(<nil>),
                SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
                WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
                RunAsUser: (*int64)(<nil>),
                RunAsGroup: (*int64)(<nil>),
                RunAsNonRoot: (*bool)(<nil>),
                ReadOnlyRootFilesystem: (*bool)(<nil>),
                AllowPrivilegeEscalation: (*bool)(<nil>),
                ProcMount: (*v1.ProcMountType)(<nil>),
                SeccompProfile: (*v1.SeccompProfile)(<nil>)
              }),
              Stdin: (bool) false,
              StdinOnce: (bool) false,
              TTY: (bool) false
            }
          },
          EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
          RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
          TerminationGracePeriodSeconds: (*int64)(0),
          ActiveDeadlineSeconds: (*int64)(<nil>),
          DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
          NodeSelector: (map[string]string) <nil>,
          ServiceAccountName: (string) "",
          DeprecatedServiceAccount: (string) "",
          AutomountServiceAccountToken: (*bool)(<nil>),
          NodeName: (string) "",
          HostNetwork: (bool) false,
          HostPID: (bool) false,
          HostIPC: (bool) false,
          ShareProcessNamespace: (*bool)(<nil>),
          SecurityContext: (*v1.PodSecurityContext)({
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            SupplementalGroups: ([]int64) <nil>,
            FSGroup: (*int64)(<nil>),
            Sysctls: ([]v1.Sysctl) <nil>,
            FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
          Hostname: (string) "",
          Subdomain: (string) "",
          Affinity: (*v1.Affinity)(<nil>),
          SchedulerName: (string) (len=17) "default-scheduler",
          Tolerations: ([]v1.Toleration) <nil>,
          HostAliases: ([]v1.HostAlias) <nil>,
          PriorityClassName: (string) "",
          Priority: (*int32)(<nil>),
          DNSConfig: (*v1.PodDNSConfig)(<nil>),
          ReadinessGates: ([]v1.PodReadinessGate) <nil>,
          RuntimeClassName: (*string)(<nil>),
          EnableServiceLinks: (*bool)(<nil>),
          PreemptionPolicy: (*v1.PreemptionPolicy)(<nil>),
          Overhead: (v1.ResourceList) <nil>,
          TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
          SetHostnameAsFQDN: (*bool)(<nil>),
          OS: (*v1.PodOS)(<nil>),
          HostUsers: (*bool)(<nil>),
          SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
          ResourceClaims: ([]v1.PodResourceClaim) <nil>
        }
      },
      Strategy: (v1.DeploymentStrategy) {
        Type: (v1.DeploymentStrategyType) (len=13) "RollingUpdate",
        RollingUpdate: (*v1.RollingUpdateDeployment)({
          MaxUnavailable: (*intstr.IntOrString)({
            Type: (intstr.Type) 1,
            IntVal: (int32) 0,
            StrVal: (string) (len=3) "25%"
          }),
          MaxSurge: (*intstr.IntOrString)({
            Type: (intstr.Type) 1,
            IntVal: (int32) 0,
            StrVal: (string) (len=3) "25%"
          })
        })
      },
      MinReadySeconds: (int32) 0,
      RevisionHistoryLimit: (*int32)(10),
      Paused: (bool) false,
      ProgressDeadlineSeconds: (*int32)(600)
    },
    Status: (v1.DeploymentStatus) {
      ObservedGeneration: (int64) 1,
      Replicas: (int32) 1,
      UpdatedReplicas: (int32) 1,
      ReadyReplicas: (int32) 1,
      AvailableReplicas: (int32) 1,
      UnavailableReplicas: (int32) 0,
      Conditions: ([]v1.DeploymentCondition) (len=1) {
        (v1.DeploymentCondition) {
          Type: (v1.DeploymentConditionType) (len=13) "StatusPatched",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastUpdateTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      CollisionCount: (*int32)(<nil>)
    }
  }


  Aug 24 12:02:05.216: INFO: New ReplicaSet "test-deployment-b95dh-5d576bd769" of Deployment "test-deployment-b95dh":
  (v1.ReplicaSet) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=32) "test-deployment-b95dh-5d576bd769",
      GenerateName: (string) "",
      Namespace: (string) (len=15) "deployment-3737",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "db1120e8-04b6-44d5-beb6-a26f4ebcb2ae",
      ResourceVersion: (string) (len=10) "3404938861",
      Generation: (int64) 1,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63828475323,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=3) {
        (string) (len=3) "e2e": (string) (len=7) "testing",
        (string) (len=4) "name": (string) (len=5) "httpd",
        (string) (len=17) "pod-template-hash": (string) (len=10) "5d576bd769"
      },
      Annotations: (map[string]string) (len=3) {
        (string) (len=41) "deployment.kubernetes.io/desired-replicas": (string) (len=1) "1",
        (string) (len=37) "deployment.kubernetes.io/max-replicas": (string) (len=1) "2",
        (string) (len=33) "deployment.kubernetes.io/revision": (string) (len=1) "1"
      },
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "Deployment",
          Name: (string) (len=21) "test-deployment-b95dh",
          UID: (types.UID) (len=36) "a63441c8-bbcd-40a2-973a-3915d129d6b9",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828475323,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=803) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 61 6e 6e 6f 74 61  74 69 6f 6e 73 22 3a 7b  |f:annotations":{|
              00000020  22 2e 22 3a 7b 7d 2c 22  66 3a 64 65 70 6c 6f 79  |".":{},"f:deploy|
              00000030  6d 65 6e 74 2e 6b 75 62  65 72 6e 65 74 65 73 2e  |ment.kubernetes.|
              00000040  69 6f 2f 64 65 73 69 72  65 64 2d 72 65 70 6c 69  |io/desired-repli|
              00000050  63 61 73 22 3a 7b 7d 2c  22 66 3a 64 65 70 6c 6f  |cas":{},"f:deplo|
              00000060  79 6d 65 6e 74 2e 6b 75  62 65 72 6e 65 74 65 73  |yment.kubernetes|
              00000070  2e 69 6f 2f 6d 61 78 2d  72 65 70 6c 69 63 61 73  |.io/max-replicas|
              00000080  22 3a 7b 7d 2c 22 66 3a  64 65 70 6c 6f 79 6d 65  |":{},"f:deployme|
              00000090  6e 74 2e 6b 75 62 65 72  6e 65 74 65 73 2e 69 6f  |nt.kubernetes.io|
              000000a0  2f 72 65 76 69 73 69 6f  6e 22 3a 7b 7d 7d 2c 22  |/revision":{}},"|
              000000b0  66 3a 6c 61 62 65 6c 73  22 3a 7b 22 2e 22 3a 7b  |f:labels":{".":{|
              000000c0  7d 2c 22 66 3a 65 32 65  22 3a 7b 7d 2c 22 66 3a  |},"f:e2e":{},"f:|
              000000d0  6e 61 6d 65 22 3a 7b 7d  2c 22 66 3a 70 6f 64 2d  |name":{},"f:pod-|
              000000e0  74 65 6d 70 6c 61 74 65  2d 68 61 73 68 22 3a 7b  |template-hash":{|
              000000f0  7d 7d 2c 22 66 3a 6f 77  6e 65 72 52 65 66 65 72  |}},"f:ownerRefer|
              00000100  65 6e 63 65 73 22 3a 7b  22 2e 22 3a 7b 7d 2c 22  |ences":{".":{},"|
              00000110  6b 3a 7b 5c 22 75 69 64  5c 22 3a 5c 22 61 36 33  |k:{\"uid\":\"a63|
              00000120  34 34 31 63 38 2d 62 62  63 64 2d 34 30 61 32 2d  |441c8-bbcd-40a2-|
              00000130  39 37 33 61 2d 33 39 31  35 64 31 32 39 64 36 62  |973a-3915d129d6b|
              00000140  39 5c 22 7d 22 3a 7b 7d  7d 7d 2c 22 66 3a 73 70  |9\"}":{}}},"f:sp|
              00000150  65 63 22 3a 7b 22 66 3a  72 65 70 6c 69 63 61 73  |ec":{"f:replicas|
              00000160  22 3a 7b 7d 2c 22 66 3a  73 65 6c 65 63 74 6f 72  |":{},"f:selector|
              00000170  22 3a 7b 7d 2c 22 66 3a  74 65 6d 70 6c 61 74 65  |":{},"f:template|
              00000180  22 3a 7b 22 66 3a 6d 65  74 61 64 61 74 61 22 3a  |":{"f:metadata":|
              00000190  7b 22 66 3a 6c 61 62 65  6c 73 22 3a 7b 22 2e 22  |{"f:labels":{"."|
              000001a0  3a 7b 7d 2c 22 66 3a 65  32 65 22 3a 7b 7d 2c 22  |:{},"f:e2e":{},"|
              000001b0  66 3a 6e 61 6d 65 22 3a  7b 7d 2c 22 66 3a 70 6f  |f:name":{},"f:po|
              000001c0  64 2d 74 65 6d 70 6c 61  74 65 2d 68 61 73 68 22  |d-template-hash"|
              000001d0  3a 7b 7d 7d 7d 2c 22 66  3a 73 70 65 63 22 3a 7b  |:{}}},"f:spec":{|
              000001e0  22 66 3a 63 6f 6e 74 61  69 6e 65 72 73 22 3a 7b  |"f:containers":{|
              000001f0  22 6b 3a 7b 5c 22 6e 61  6d 65 5c 22 3a 5c 22 68  |"k:{\"name\":\"h|
              00000200  74 74 70 64 5c 22 7d 22  3a 7b 22 2e 22 3a 7b 7d  |ttpd\"}":{".":{}|
              00000210  2c 22 66 3a 69 6d 61 67  65 22 3a 7b 7d 2c 22 66  |,"f:image":{},"f|
              00000220  3a 69 6d 61 67 65 50 75  6c 6c 50 6f 6c 69 63 79  |:imagePullPolicy|
              00000230  22 3a 7b 7d 2c 22 66 3a  6e 61 6d 65 22 3a 7b 7d  |":{},"f:name":{}|
              00000240  2c 22 66 3a 72 65 73 6f  75 72 63 65 73 22 3a 7b  |,"f:resources":{|
              00000250  7d 2c 22 66 3a 73 65 63  75 72 69 74 79 43 6f 6e  |},"f:securityCon|
              00000260  74 65 78 74 22 3a 7b 7d  2c 22 66 3a 74 65 72 6d  |text":{},"f:term|
              00000270  69 6e 61 74 69 6f 6e 4d  65 73 73 61 67 65 50 61  |inationMessagePa|
              00000280  74 68 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |th":{},"f:termin|
              00000290  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 6f 6c 69  |ationMessagePoli|
              000002a0  63 79 22 3a 7b 7d 7d 7d  2c 22 66 3a 64 6e 73 50  |cy":{}}},"f:dnsP|
              000002b0  6f 6c 69 63 79 22 3a 7b  7d 2c 22 66 3a 72 65 73  |olicy":{},"f:res|
              000002c0  74 61 72 74 50 6f 6c 69  63 79 22 3a 7b 7d 2c 22  |tartPolicy":{},"|
              000002d0  66 3a 73 63 68 65 64 75  6c 65 72 4e 61 6d 65 22  |f:schedulerName"|
              000002e0  3a 7b 7d 2c 22 66 3a 73  65 63 75 72 69 74 79 43  |:{},"f:securityC|
              000002f0  6f 6e 74 65 78 74 22 3a  7b 7d 2c 22 66 3a 74 65  |ontext":{},"f:te|
              00000300  72 6d 69 6e 61 74 69 6f  6e 47 72 61 63 65 50 65  |rminationGracePe|
              00000310  72 69 6f 64 53 65 63 6f  6e 64 73 22 3a 7b 7d 7d  |riodSeconds":{}}|
              00000320  7d 7d 7d                                          |}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828475324,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=130) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  61 76 61 69 6c 61 62 6c  65 52 65 70 6c 69 63 61  |availableReplica|
              00000020  73 22 3a 7b 7d 2c 22 66  3a 66 75 6c 6c 79 4c 61  |s":{},"f:fullyLa|
              00000030  62 65 6c 65 64 52 65 70  6c 69 63 61 73 22 3a 7b  |beledReplicas":{|
              00000040  7d 2c 22 66 3a 6f 62 73  65 72 76 65 64 47 65 6e  |},"f:observedGen|
              00000050  65 72 61 74 69 6f 6e 22  3a 7b 7d 2c 22 66 3a 72  |eration":{},"f:r|
              00000060  65 61 64 79 52 65 70 6c  69 63 61 73 22 3a 7b 7d  |eadyReplicas":{}|
              00000070  2c 22 66 3a 72 65 70 6c  69 63 61 73 22 3a 7b 7d  |,"f:replicas":{}|
              00000080  7d 7d                                             |}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.ReplicaSetSpec) {
      Replicas: (*int32)(1),
      MinReadySeconds: (int32) 0,
      Selector: (*v1.LabelSelector)({
        MatchLabels: (map[string]string) (len=3) {
          (string) (len=3) "e2e": (string) (len=7) "testing",
          (string) (len=4) "name": (string) (len=5) "httpd",
          (string) (len=17) "pod-template-hash": (string) (len=10) "5d576bd769"
        },
        MatchExpressions: ([]v1.LabelSelectorRequirement) <nil>
      }),
      Template: (v1.PodTemplateSpec) {
        ObjectMeta: (v1.ObjectMeta) {
          Name: (string) "",
          GenerateName: (string) "",
          Namespace: (string) "",
          SelfLink: (string) "",
          UID: (types.UID) "",
          ResourceVersion: (string) "",
          Generation: (int64) 0,
          CreationTimestamp: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          DeletionTimestamp: (*v1.Time)(<nil>),
          DeletionGracePeriodSeconds: (*int64)(<nil>),
          Labels: (map[string]string) (len=3) {
            (string) (len=3) "e2e": (string) (len=7) "testing",
            (string) (len=4) "name": (string) (len=5) "httpd",
            (string) (len=17) "pod-template-hash": (string) (len=10) "5d576bd769"
          },
          Annotations: (map[string]string) <nil>,
          OwnerReferences: ([]v1.OwnerReference) <nil>,
          Finalizers: ([]string) <nil>,
          ManagedFields: ([]v1.ManagedFieldsEntry) <nil>
        },
        Spec: (v1.PodSpec) {
          Volumes: ([]v1.Volume) <nil>,
          InitContainers: ([]v1.Container) <nil>,
          Containers: ([]v1.Container) (len=1) {
            (v1.Container) {
              Name: (string) (len=5) "httpd",
              Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
              Command: ([]string) <nil>,
              Args: ([]string) <nil>,
              WorkingDir: (string) "",
              Ports: ([]v1.ContainerPort) <nil>,
              EnvFrom: ([]v1.EnvFromSource) <nil>,
              Env: ([]v1.EnvVar) <nil>,
              Resources: (v1.ResourceRequirements) {
                Limits: (v1.ResourceList) <nil>,
                Requests: (v1.ResourceList) <nil>,
                Claims: ([]v1.ResourceClaim) <nil>
              },
              ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
              RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
              VolumeMounts: ([]v1.VolumeMount) <nil>,
              VolumeDevices: ([]v1.VolumeDevice) <nil>,
              LivenessProbe: (*v1.Probe)(<nil>),
              ReadinessProbe: (*v1.Probe)(<nil>),
              StartupProbe: (*v1.Probe)(<nil>),
              Lifecycle: (*v1.Lifecycle)(<nil>),
              TerminationMessagePath: (string) (len=20) "/dev/termination-log",
              TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
              ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
              SecurityContext: (*v1.SecurityContext)({
                Capabilities: (*v1.Capabilities)(<nil>),
                Privileged: (*bool)(<nil>),
                SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
                WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
                RunAsUser: (*int64)(<nil>),
                RunAsGroup: (*int64)(<nil>),
                RunAsNonRoot: (*bool)(<nil>),
                ReadOnlyRootFilesystem: (*bool)(<nil>),
                AllowPrivilegeEscalation: (*bool)(<nil>),
                ProcMount: (*v1.ProcMountType)(<nil>),
                SeccompProfile: (*v1.SeccompProfile)(<nil>)
              }),
              Stdin: (bool) false,
              StdinOnce: (bool) false,
              TTY: (bool) false
            }
          },
          EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
          RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
          TerminationGracePeriodSeconds: (*int64)(0),
          ActiveDeadlineSeconds: (*int64)(<nil>),
          DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
          NodeSelector: (map[string]string) <nil>,
          ServiceAccountName: (string) "",
          DeprecatedServiceAccount: (string) "",
          AutomountServiceAccountToken: (*bool)(<nil>),
          NodeName: (string) "",
          HostNetwork: (bool) false,
          HostPID: (bool) false,
          HostIPC: (bool) false,
          ShareProcessNamespace: (*bool)(<nil>),
          SecurityContext: (*v1.PodSecurityContext)({
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            SupplementalGroups: ([]int64) <nil>,
            FSGroup: (*int64)(<nil>),
            Sysctls: ([]v1.Sysctl) <nil>,
            FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
          Hostname: (string) "",
          Subdomain: (string) "",
          Affinity: (*v1.Affinity)(<nil>),
          SchedulerName: (string) (len=17) "default-scheduler",
          Tolerations: ([]v1.Toleration) <nil>,
          HostAliases: ([]v1.HostAlias) <nil>,
          PriorityClassName: (string) "",
          Priority: (*int32)(<nil>),
          DNSConfig: (*v1.PodDNSConfig)(<nil>),
          ReadinessGates: ([]v1.PodReadinessGate) <nil>,
          RuntimeClassName: (*string)(<nil>),
          EnableServiceLinks: (*bool)(<nil>),
          PreemptionPolicy: (*v1.PreemptionPolicy)(<nil>),
          Overhead: (v1.ResourceList) <nil>,
          TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
          SetHostnameAsFQDN: (*bool)(<nil>),
          OS: (*v1.PodOS)(<nil>),
          HostUsers: (*bool)(<nil>),
          SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
          ResourceClaims: ([]v1.PodResourceClaim) <nil>
        }
      }
    },
    Status: (v1.ReplicaSetStatus) {
      Replicas: (int32) 1,
      FullyLabeledReplicas: (int32) 1,
      ReadyReplicas: (int32) 1,
      AvailableReplicas: (int32) 1,
      ObservedGeneration: (int64) 1,
      Conditions: ([]v1.ReplicaSetCondition) <nil>
    }
  }

  Aug 24 12:02:05.226: INFO: Pod "test-deployment-b95dh-5d576bd769-fx9wx" is available:
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=38) "test-deployment-b95dh-5d576bd769-fx9wx",
      GenerateName: (string) (len=33) "test-deployment-b95dh-5d576bd769-",
      Namespace: (string) (len=15) "deployment-3737",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "389f8eea-8749-497e-b207-b4244c61560f",
      ResourceVersion: (string) (len=10) "3404938860",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63828475323,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=3) {
        (string) (len=17) "pod-template-hash": (string) (len=10) "5d576bd769",
        (string) (len=3) "e2e": (string) (len=7) "testing",
        (string) (len=4) "name": (string) (len=5) "httpd"
      },
      Annotations: (map[string]string) <nil>,
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=32) "test-deployment-b95dh-5d576bd769",
          UID: (types.UID) (len=36) "db1120e8-04b6-44d5-beb6-a26f4ebcb2ae",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828475323,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=548) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 65 32 65 22 3a 7b 7d  |.":{},"f:e2e":{}|
              00000040  2c 22 66 3a 6e 61 6d 65  22 3a 7b 7d 2c 22 66 3a  |,"f:name":{},"f:|
              00000050  70 6f 64 2d 74 65 6d 70  6c 61 74 65 2d 68 61 73  |pod-template-has|
              00000060  68 22 3a 7b 7d 7d 2c 22  66 3a 6f 77 6e 65 72 52  |h":{}},"f:ownerR|
              00000070  65 66 65 72 65 6e 63 65  73 22 3a 7b 22 2e 22 3a  |eferences":{".":|
              00000080  7b 7d 2c 22 6b 3a 7b 5c  22 75 69 64 5c 22 3a 5c  |{},"k:{\"uid\":\|
              00000090  22 64 62 31 31 32 30 65  38 2d 30 34 62 36 2d 34  |"db1120e8-04b6-4|
              000000a0  34 64 35 2d 62 65 62 36  2d 61 32 36 66 34 65 62  |4d5-beb6-a26f4eb|
              000000b0  63 62 32 61 65 5c 22 7d  22 3a 7b 7d 7d 7d 2c 22  |cb2ae\"}":{}}},"|
              000000c0  66 3a 73 70 65 63 22 3a  7b 22 66 3a 63 6f 6e 74  |f:spec":{"f:cont|
              000000d0  61 69 6e 65 72 73 22 3a  7b 22 6b 3a 7b 5c 22 6e  |ainers":{"k:{\"n|
              000000e0  61 6d 65 5c 22 3a 5c 22  68 74 74 70 64 5c 22 7d  |ame\":\"httpd\"}|
              000000f0  22 3a 7b 22 2e 22 3a 7b  7d 2c 22 66 3a 69 6d 61  |":{".":{},"f:ima|
              00000100  67 65 22 3a 7b 7d 2c 22  66 3a 69 6d 61 67 65 50  |ge":{},"f:imageP|
              00000110  75 6c 6c 50 6f 6c 69 63  79 22 3a 7b 7d 2c 22 66  |ullPolicy":{},"f|
              00000120  3a 6e 61 6d 65 22 3a 7b  7d 2c 22 66 3a 72 65 73  |:name":{},"f:res|
              00000130  6f 75 72 63 65 73 22 3a  7b 7d 2c 22 66 3a 73 65  |ources":{},"f:se|
              00000140  63 75 72 69 74 79 43 6f  6e 74 65 78 74 22 3a 7b  |curityContext":{|
              00000150  7d 2c 22 66 3a 74 65 72  6d 69 6e 61 74 69 6f 6e  |},"f:termination|
              00000160  4d 65 73 73 61 67 65 50  61 74 68 22 3a 7b 7d 2c  |MessagePath":{},|
              00000170  22 66 3a 74 65 72 6d 69  6e 61 74 69 6f 6e 4d 65  |"f:terminationMe|
              00000180  73 73 61 67 65 50 6f 6c  69 63 79 22 3a 7b 7d 7d  |ssagePolicy":{}}|
              00000190  7d 2c 22 66 3a 64 6e 73  50 6f 6c 69 63 79 22 3a  |},"f:dnsPolicy":|
              000001a0  7b 7d 2c 22 66 3a 65 6e  61 62 6c 65 53 65 72 76  |{},"f:enableServ|
              000001b0  69 63 65 4c 69 6e 6b 73  22 3a 7b 7d 2c 22 66 3a  |iceLinks":{},"f:|
              000001c0  72 65 73 74 61 72 74 50  6f 6c 69 63 79 22 3a 7b  |restartPolicy":{|
              000001d0  7d 2c 22 66 3a 73 63 68  65 64 75 6c 65 72 4e 61  |},"f:schedulerNa|
              000001e0  6d 65 22 3a 7b 7d 2c 22  66 3a 73 65 63 75 72 69  |me":{},"f:securi|
              000001f0  74 79 43 6f 6e 74 65 78  74 22 3a 7b 7d 2c 22 66  |tyContext":{},"f|
              00000200  3a 74 65 72 6d 69 6e 61  74 69 6f 6e 47 72 61 63  |:terminationGrac|
              00000210  65 50 65 72 69 6f 64 53  65 63 6f 6e 64 73 22 3a  |ePeriodSeconds":|
              00000220  7b 7d 7d 7d                                       |{}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=7) "kubelet",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828475324,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=519) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  63 6f 6e 64 69 74 69 6f  6e 73 22 3a 7b 22 6b 3a  |conditions":{"k:|
              00000020  7b 5c 22 74 79 70 65 5c  22 3a 5c 22 43 6f 6e 74  |{\"type\":\"Cont|
              00000030  61 69 6e 65 72 73 52 65  61 64 79 5c 22 7d 22 3a  |ainersReady\"}":|
              00000040  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000050  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000060  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000070  6d 65 22 3a 7b 7d 2c 22  66 3a 73 74 61 74 75 73  |me":{},"f:status|
              00000080  22 3a 7b 7d 2c 22 66 3a  74 79 70 65 22 3a 7b 7d  |":{},"f:type":{}|
              00000090  7d 2c 22 6b 3a 7b 5c 22  74 79 70 65 5c 22 3a 5c  |},"k:{\"type\":\|
              000000a0  22 49 6e 69 74 69 61 6c  69 7a 65 64 5c 22 7d 22  |"Initialized\"}"|
              000000b0  3a 7b 22 2e 22 3a 7b 7d  2c 22 66 3a 6c 61 73 74  |:{".":{},"f:last|
              000000c0  50 72 6f 62 65 54 69 6d  65 22 3a 7b 7d 2c 22 66  |ProbeTime":{},"f|
              000000d0  3a 6c 61 73 74 54 72 61  6e 73 69 74 69 6f 6e 54  |:lastTransitionT|
              000000e0  69 6d 65 22 3a 7b 7d 2c  22 66 3a 73 74 61 74 75  |ime":{},"f:statu|
              000000f0  73 22 3a 7b 7d 2c 22 66  3a 74 79 70 65 22 3a 7b  |s":{},"f:type":{|
              00000100  7d 7d 2c 22 6b 3a 7b 5c  22 74 79 70 65 5c 22 3a  |}},"k:{\"type\":|
              00000110  5c 22 52 65 61 64 79 5c  22 7d 22 3a 7b 22 2e 22  |\"Ready\"}":{"."|
              00000120  3a 7b 7d 2c 22 66 3a 6c  61 73 74 50 72 6f 62 65  |:{},"f:lastProbe|
              00000130  54 69 6d 65 22 3a 7b 7d  2c 22 66 3a 6c 61 73 74  |Time":{},"f:last|
              00000140  54 72 61 6e 73 69 74 69  6f 6e 54 69 6d 65 22 3a  |TransitionTime":|
              00000150  7b 7d 2c 22 66 3a 73 74  61 74 75 73 22 3a 7b 7d  |{},"f:status":{}|
              00000160  2c 22 66 3a 74 79 70 65  22 3a 7b 7d 7d 7d 2c 22  |,"f:type":{}}},"|
              00000170  66 3a 63 6f 6e 74 61 69  6e 65 72 53 74 61 74 75  |f:containerStatu|
              00000180  73 65 73 22 3a 7b 7d 2c  22 66 3a 68 6f 73 74 49  |ses":{},"f:hostI|
              00000190  50 22 3a 7b 7d 2c 22 66  3a 70 68 61 73 65 22 3a  |P":{},"f:phase":|
              000001a0  7b 7d 2c 22 66 3a 70 6f  64 49 50 22 3a 7b 7d 2c  |{},"f:podIP":{},|
              000001b0  22 66 3a 70 6f 64 49 50  73 22 3a 7b 22 2e 22 3a  |"f:podIPs":{".":|
              000001c0  7b 7d 2c 22 6b 3a 7b 5c  22 69 70 5c 22 3a 5c 22  |{},"k:{\"ip\":\"|
              000001d0  31 30 2e 31 30 30 2e 31  2e 31 38 34 5c 22 7d 22  |10.100.1.184\"}"|
              000001e0  3a 7b 22 2e 22 3a 7b 7d  2c 22 66 3a 69 70 22 3a  |:{".":{},"f:ip":|
              000001f0  7b 7d 7d 7d 2c 22 66 3a  73 74 61 72 74 54 69 6d  |{}}},"f:startTim|
              00000200  65 22 3a 7b 7d 7d 7d                              |e":{}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-4jk7q",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  })
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=5) "httpd",
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-4jk7q",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(0),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=46) "scw-conformance-default-ecf11ec729064adba7e270",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Running",
      Conditions: ([]v1.PodCondition) (len=4) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=11) "Initialized",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828475323,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=5) "Ready",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828475324,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=15) "ContainersReady",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828475324,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828475323,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) (len=11) "172.16.36.2",
      HostIPs: ([]v1.HostIP) <nil>,
      PodIP: (string) (len=12) "10.100.1.184",
      PodIPs: ([]v1.PodIP) (len=1) {
        (v1.PodIP) {
          IP: (string) (len=12) "10.100.1.184"
        }
      },
      StartTime: (*v1.Time)({
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63828475323,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      }),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) (len=1) {
        (v1.ContainerStatus) {
          Name: (string) (len=5) "httpd",
          State: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)({
              StartedAt: (v1.Time) {
                Time: (time.Time) {
                  wall: (uint64) 0,
                  ext: (int64) 63828475323,
                  loc: (*time.Location)(<already shown>)
                }
              }
            }),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          LastTerminationState: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          Ready: (bool) true,
          RestartCount: (int32) 0,
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          ImageID: (string) (len=109) "registry.k8s.io/e2e-test-images/httpd@sha256:148b022f5c5da426fc2f3c14b5c0867e58ef05961510c84749ac1fddcb0fef22",
          ContainerID: (string) (len=77) "containerd://c79b9a6291541d98b3307b13f95fb675063c176f0b71badaad49f86384ff06c8",
          Started: (*bool)(true),
          AllocatedResources: (v1.ResourceList) <nil>,
          Resources: (*v1.ResourceRequirements)(<nil>)
        }
      },
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }

  Aug 24 12:02:05.228: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "deployment-3737" for this suite. @ 08/24/23 12:02:05.237
• [2.269 seconds]
------------------------------
SSSSSSSSSS
------------------------------
[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should mutate custom resource [Conformance]
test/e2e/apimachinery/webhook.go:285
  STEP: Creating a kubernetes client @ 08/24/23 12:02:05.253
  Aug 24 12:02:05.253: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename webhook @ 08/24/23 12:02:05.254
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 12:02:05.283
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 12:02:05.29
  STEP: Setting up server cert @ 08/24/23 12:02:05.334
  STEP: Create role binding to let webhook read extension-apiserver-authentication @ 08/24/23 12:02:05.543
  STEP: Deploying the webhook pod @ 08/24/23 12:02:05.554
  STEP: Wait for the deployment to be ready @ 08/24/23 12:02:05.577
  Aug 24 12:02:05.598: INFO: deployment "sample-webhook-deployment" doesn't have the required revision set
  STEP: Deploying the webhook service @ 08/24/23 12:02:07.627
  STEP: Verifying the service has paired with the endpoint @ 08/24/23 12:02:07.649
  Aug 24 12:02:08.649: INFO: Waiting for amount of service:e2e-test-webhook endpoints to be 1
  Aug 24 12:02:08.666: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Registering the mutating webhook for custom resource e2e-test-webhook-6847-crds.webhook.example.com via the AdmissionRegistration API @ 08/24/23 12:02:09.189
  STEP: Creating a custom resource that should be mutated by the webhook @ 08/24/23 12:02:09.254
  Aug 24 12:02:11.332: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "webhook-670" for this suite. @ 08/24/23 12:02:11.983
  STEP: Destroying namespace "webhook-markers-4216" for this suite. @ 08/24/23 12:02:11.996
• [6.758 seconds]
------------------------------
SSSSSSSSSSSSSSSS
------------------------------
[sig-node] Kubelet when scheduling a busybox command in a pod should print the output to logs [NodeConformance] [Conformance]
test/e2e/common/node/kubelet.go:52
  STEP: Creating a kubernetes client @ 08/24/23 12:02:12.012
  Aug 24 12:02:12.012: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename kubelet-test @ 08/24/23 12:02:12.012
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 12:02:12.041
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 12:02:12.048
  Aug 24 12:02:14.117: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "kubelet-test-2677" for this suite. @ 08/24/23 12:02:14.127
• [2.129 seconds]
------------------------------
SSSSS
------------------------------
[sig-node] Security Context should support pod.Spec.SecurityContext.RunAsUser And pod.Spec.SecurityContext.RunAsGroup [LinuxOnly] [Conformance]
test/e2e/node/security_context.go:129
  STEP: Creating a kubernetes client @ 08/24/23 12:02:14.141
  Aug 24 12:02:14.141: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename security-context @ 08/24/23 12:02:14.142
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 12:02:14.174
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 12:02:14.181
  STEP: Creating a pod to test pod.Spec.SecurityContext.RunAsUser @ 08/24/23 12:02:14.188
  STEP: Saw pod success @ 08/24/23 12:02:18.255
  Aug 24 12:02:18.265: INFO: Trying to get logs from node scw-conformance-default-ecf11ec729064adba7e270 pod security-context-6b4c31ab-e272-4720-9188-7561b2e45aa3 container test-container: <nil>
  STEP: delete the pod @ 08/24/23 12:02:18.37
  Aug 24 12:02:18.461: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "security-context-8911" for this suite. @ 08/24/23 12:02:18.471
• [4.346 seconds]
------------------------------
SSSSSSSSS
------------------------------
[sig-storage] EmptyDir volumes should support (root,0644,tmpfs) [LinuxOnly] [NodeConformance] [Conformance]
test/e2e/common/storage/empty_dir.go:97
  STEP: Creating a kubernetes client @ 08/24/23 12:02:18.488
  Aug 24 12:02:18.488: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename emptydir @ 08/24/23 12:02:18.489
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 12:02:18.578
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 12:02:18.585
  STEP: Creating a pod to test emptydir 0644 on tmpfs @ 08/24/23 12:02:18.592
  STEP: Saw pod success @ 08/24/23 12:02:22.693
  Aug 24 12:02:22.702: INFO: Trying to get logs from node scw-conformance-default-2af6d8b4c6264cc5b9e5e6 pod pod-6b06ebbf-476a-4803-a46d-9e0da58dcc59 container test-container: <nil>
  STEP: delete the pod @ 08/24/23 12:02:22.72
  Aug 24 12:02:22.760: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "emptydir-240" for this suite. @ 08/24/23 12:02:22.771
• [4.297 seconds]
------------------------------
SSSSSSSS
------------------------------
[sig-storage] EmptyDir volumes should support (non-root,0666,tmpfs) [LinuxOnly] [NodeConformance] [Conformance]
test/e2e/common/storage/empty_dir.go:137
  STEP: Creating a kubernetes client @ 08/24/23 12:02:22.786
  Aug 24 12:02:22.786: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename emptydir @ 08/24/23 12:02:22.787
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 12:02:22.813
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 12:02:22.82
  STEP: Creating a pod to test emptydir 0666 on tmpfs @ 08/24/23 12:02:22.827
  STEP: Saw pod success @ 08/24/23 12:02:26.873
  Aug 24 12:02:26.879: INFO: Trying to get logs from node scw-conformance-default-2af6d8b4c6264cc5b9e5e6 pod pod-f509a53c-57ef-4fe8-832d-1408732fa63a container test-container: <nil>
  STEP: delete the pod @ 08/24/23 12:02:26.893
  Aug 24 12:02:26.929: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "emptydir-6113" for this suite. @ 08/24/23 12:02:26.939
• [4.167 seconds]
------------------------------
SSSSSSSS
------------------------------
[sig-network] EndpointSliceMirroring should mirror a custom Endpoints resource through create update and delete [Conformance]
test/e2e/network/endpointslicemirroring.go:55
  STEP: Creating a kubernetes client @ 08/24/23 12:02:26.955
  Aug 24 12:02:26.955: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename endpointslicemirroring @ 08/24/23 12:02:26.956
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 12:02:26.989
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 12:02:26.995
  STEP: mirroring a new custom Endpoint @ 08/24/23 12:02:27.026
  Aug 24 12:02:27.044: INFO: Waiting for at least 1 EndpointSlice to exist, got 0
  STEP: mirroring an update to a custom Endpoint @ 08/24/23 12:02:29.053
  Aug 24 12:02:29.071: INFO: Expected EndpointSlice to have 10.2.3.4 as address, got 10.1.2.3
  STEP: mirroring deletion of a custom Endpoint @ 08/24/23 12:02:31.081
  Aug 24 12:02:31.104: INFO: Waiting for 0 EndpointSlices to exist, got 1
  Aug 24 12:02:33.113: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "endpointslicemirroring-7886" for this suite. @ 08/24/23 12:02:33.127
• [6.186 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-network] Services should be able to change the type from ClusterIP to ExternalName [Conformance]
test/e2e/network/service.go:1493
  STEP: Creating a kubernetes client @ 08/24/23 12:02:33.145
  Aug 24 12:02:33.145: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename services @ 08/24/23 12:02:33.146
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 12:02:33.177
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 12:02:33.184
  STEP: creating a service clusterip-service with the type=ClusterIP in namespace services-599 @ 08/24/23 12:02:33.189
  STEP: Creating active service to test reachability when its FQDN is referred as externalName for another service @ 08/24/23 12:02:33.213
  STEP: creating service externalsvc in namespace services-599 @ 08/24/23 12:02:33.213
  STEP: creating replication controller externalsvc in namespace services-599 @ 08/24/23 12:02:33.235
  I0824 12:02:33.254802      22 runners.go:197] Created replication controller with name: externalsvc, namespace: services-599, replica count: 2
  I0824 12:02:36.306015      22 runners.go:197] externalsvc Pods: 2 out of 2 created, 2 running, 0 pending, 0 waiting, 0 inactive, 0 terminating, 0 unknown, 0 runningButNotReady 
  STEP: changing the ClusterIP service to type=ExternalName @ 08/24/23 12:02:36.318
  Aug 24 12:02:36.351: INFO: Creating new exec pod
  Aug 24 12:02:38.380: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1002171096 --namespace=services-599 exec execpodhzz7p -- /bin/sh -x -c nslookup clusterip-service.services-599.svc.cluster.local'
  Aug 24 12:02:38.698: INFO: stderr: "+ nslookup clusterip-service.services-599.svc.cluster.local\n"
  Aug 24 12:02:38.698: INFO: stdout: "Server:\t\t10.96.0.10\nAddress:\t10.96.0.10#53\n\nclusterip-service.services-599.svc.cluster.local\tcanonical name = externalsvc.services-599.svc.cluster.local.\nName:\texternalsvc.services-599.svc.cluster.local\nAddress: 10.96.44.40\n\n"
  Aug 24 12:02:38.698: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: deleting ReplicationController externalsvc in namespace services-599, will wait for the garbage collector to delete the pods @ 08/24/23 12:02:38.708
  Aug 24 12:02:38.780: INFO: Deleting ReplicationController externalsvc took: 13.69998ms
  Aug 24 12:02:38.881: INFO: Terminating ReplicationController externalsvc pods took: 100.860137ms
  Aug 24 12:02:41.622: INFO: Cleaning up the ClusterIP to ExternalName test service
  STEP: Destroying namespace "services-599" for this suite. @ 08/24/23 12:02:41.646
• [8.516 seconds]
------------------------------
SSSSSSSSS
------------------------------
[sig-api-machinery] ResourceQuota should create a ResourceQuota and capture the life of a service. [Conformance]
test/e2e/apimachinery/resource_quota.go:101
  STEP: Creating a kubernetes client @ 08/24/23 12:02:41.661
  Aug 24 12:02:41.661: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename resourcequota @ 08/24/23 12:02:41.661
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 12:02:41.689
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 12:02:41.696
  STEP: Counting existing ResourceQuota @ 08/24/23 12:02:41.749
  STEP: Creating a ResourceQuota @ 08/24/23 12:02:46.758
  STEP: Ensuring resource quota status is calculated @ 08/24/23 12:02:46.772
  STEP: Creating a Service @ 08/24/23 12:02:48.782
  STEP: Creating a NodePort Service @ 08/24/23 12:02:48.824
  STEP: Not allowing a LoadBalancer Service with NodePort to be created that exceeds remaining quota @ 08/24/23 12:02:48.916
  STEP: Ensuring resource quota status captures service creation @ 08/24/23 12:02:48.991
  STEP: Deleting Services @ 08/24/23 12:02:51.002
  STEP: Ensuring resource quota status released usage @ 08/24/23 12:02:51.08
  Aug 24 12:02:53.089: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "resourcequota-492" for this suite. @ 08/24/23 12:02:53.099
• [11.452 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-node] Probing container with readiness probe should not be ready before initial delay and never restart [NodeConformance] [Conformance]
test/e2e/common/node/container_probe.go:71
  STEP: Creating a kubernetes client @ 08/24/23 12:02:53.114
  Aug 24 12:02:53.114: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename container-probe @ 08/24/23 12:02:53.114
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 12:02:53.145
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 12:02:53.152
  Aug 24 12:03:15.313: INFO: Container started at 2023-08-24 12:02:54 +0000 UTC, pod became ready at 2023-08-24 12:03:13 +0000 UTC
  Aug 24 12:03:15.313: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "container-probe-6610" for this suite. @ 08/24/23 12:03:15.322
• [22.223 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-api-machinery] Watchers should receive events on concurrent watches in same order [Conformance]
test/e2e/apimachinery/watch.go:334
  STEP: Creating a kubernetes client @ 08/24/23 12:03:15.338
  Aug 24 12:03:15.338: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename watch @ 08/24/23 12:03:15.339
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 12:03:15.378
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 12:03:15.385
  STEP: getting a starting resourceVersion @ 08/24/23 12:03:15.392
  STEP: starting a background goroutine to produce watch events @ 08/24/23 12:03:15.403
  STEP: creating watches starting from each resource version of the events produced and verifying they all receive resource versions in the same order @ 08/24/23 12:03:15.404
  Aug 24 12:03:18.156: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "watch-6134" for this suite. @ 08/24/23 12:03:18.201
• [2.917 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-node] RuntimeClass should reject a Pod requesting a deleted RuntimeClass [NodeConformance] [Conformance]
test/e2e/common/node/runtimeclass.go:156
  STEP: Creating a kubernetes client @ 08/24/23 12:03:18.259
  Aug 24 12:03:18.259: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename runtimeclass @ 08/24/23 12:03:18.26
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 12:03:18.289
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 12:03:18.296
  STEP: Deleting RuntimeClass runtimeclass-8773-delete-me @ 08/24/23 12:03:18.312
  STEP: Waiting for the RuntimeClass to disappear @ 08/24/23 12:03:18.327
  Aug 24 12:03:18.351: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "runtimeclass-8773" for this suite. @ 08/24/23 12:03:18.362
• [0.116 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-storage] Secrets should be consumable from pods in volume with defaultMode set [LinuxOnly] [NodeConformance] [Conformance]
test/e2e/common/storage/secrets_volume.go:57
  STEP: Creating a kubernetes client @ 08/24/23 12:03:18.377
  Aug 24 12:03:18.377: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename secrets @ 08/24/23 12:03:18.378
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 12:03:18.408
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 12:03:18.415
  STEP: Creating secret with name secret-test-80968dfb-c694-46c2-aa6b-4b3d1ee336ad @ 08/24/23 12:03:18.424
  STEP: Creating a pod to test consume secrets @ 08/24/23 12:03:18.435
  STEP: Saw pod success @ 08/24/23 12:03:22.487
  Aug 24 12:03:22.501: INFO: Trying to get logs from node scw-conformance-default-2af6d8b4c6264cc5b9e5e6 pod pod-secrets-c78258c8-9781-468f-aaf6-abf9b234828b container secret-volume-test: <nil>
  STEP: delete the pod @ 08/24/23 12:03:22.519
  Aug 24 12:03:22.554: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "secrets-5066" for this suite. @ 08/24/23 12:03:22.566
• [4.203 seconds]
------------------------------
SSSSSS
------------------------------
[sig-network] Services should be able to switch session affinity for service with type clusterIP [LinuxOnly] [Conformance]
test/e2e/network/service.go:2187
  STEP: Creating a kubernetes client @ 08/24/23 12:03:22.583
  Aug 24 12:03:22.583: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename services @ 08/24/23 12:03:22.585
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 12:03:22.616
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 12:03:22.621
  STEP: creating service in namespace services-1570 @ 08/24/23 12:03:22.626
  STEP: creating service affinity-clusterip-transition in namespace services-1570 @ 08/24/23 12:03:22.626
  STEP: creating replication controller affinity-clusterip-transition in namespace services-1570 @ 08/24/23 12:03:22.648
  I0824 12:03:22.662275      22 runners.go:197] Created replication controller with name: affinity-clusterip-transition, namespace: services-1570, replica count: 3
  I0824 12:03:25.713781      22 runners.go:197] affinity-clusterip-transition Pods: 3 out of 3 created, 3 running, 0 pending, 0 waiting, 0 inactive, 0 terminating, 0 unknown, 0 runningButNotReady 
  Aug 24 12:03:25.730: INFO: Creating new exec pod
  Aug 24 12:03:28.758: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1002171096 --namespace=services-1570 exec execpod-affinityjdwpr -- /bin/sh -x -c echo hostName | nc -v -t -w 2 affinity-clusterip-transition 80'
  Aug 24 12:03:29.014: INFO: stderr: "+ echo hostName\n+ nc -v -t -w 2 affinity-clusterip-transition 80\nConnection to affinity-clusterip-transition 80 port [tcp/http] succeeded!\n"
  Aug 24 12:03:29.014: INFO: stdout: "HTTP/1.1 400 Bad Request\r\nContent-Type: text/plain; charset=utf-8\r\nConnection: close\r\n\r\n400 Bad Request"
  Aug 24 12:03:29.014: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1002171096 --namespace=services-1570 exec execpod-affinityjdwpr -- /bin/sh -x -c echo hostName | nc -v -t -w 2 10.96.204.54 80'
  Aug 24 12:03:29.249: INFO: stderr: "+ echo hostName\n+ nc -v -t -w 2 10.96.204.54 80\nConnection to 10.96.204.54 80 port [tcp/http] succeeded!\n"
  Aug 24 12:03:29.249: INFO: stdout: "HTTP/1.1 400 Bad Request\r\nContent-Type: text/plain; charset=utf-8\r\nConnection: close\r\n\r\n400 Bad Request"
  Aug 24 12:03:29.272: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1002171096 --namespace=services-1570 exec execpod-affinityjdwpr -- /bin/sh -x -c for i in $(seq 0 15); do echo; curl -q -s --connect-timeout 2 http://10.96.204.54:80/ ; done'
  Aug 24 12:03:29.615: INFO: stderr: "+ seq 0 15\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.96.204.54:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.96.204.54:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.96.204.54:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.96.204.54:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.96.204.54:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.96.204.54:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.96.204.54:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.96.204.54:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.96.204.54:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.96.204.54:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.96.204.54:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.96.204.54:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.96.204.54:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.96.204.54:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.96.204.54:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.96.204.54:80/\n"
  Aug 24 12:03:29.615: INFO: stdout: "\naffinity-clusterip-transition-x7fg5\naffinity-clusterip-transition-nm6m4\naffinity-clusterip-transition-sd6bx\naffinity-clusterip-transition-nm6m4\naffinity-clusterip-transition-nm6m4\naffinity-clusterip-transition-sd6bx\naffinity-clusterip-transition-nm6m4\naffinity-clusterip-transition-x7fg5\naffinity-clusterip-transition-nm6m4\naffinity-clusterip-transition-nm6m4\naffinity-clusterip-transition-nm6m4\naffinity-clusterip-transition-sd6bx\naffinity-clusterip-transition-sd6bx\naffinity-clusterip-transition-sd6bx\naffinity-clusterip-transition-x7fg5\naffinity-clusterip-transition-sd6bx"
  Aug 24 12:03:29.615: INFO: Received response from host: affinity-clusterip-transition-x7fg5
  Aug 24 12:03:29.615: INFO: Received response from host: affinity-clusterip-transition-nm6m4
  Aug 24 12:03:29.615: INFO: Received response from host: affinity-clusterip-transition-sd6bx
  Aug 24 12:03:29.615: INFO: Received response from host: affinity-clusterip-transition-nm6m4
  Aug 24 12:03:29.616: INFO: Received response from host: affinity-clusterip-transition-nm6m4
  Aug 24 12:03:29.616: INFO: Received response from host: affinity-clusterip-transition-sd6bx
  Aug 24 12:03:29.616: INFO: Received response from host: affinity-clusterip-transition-nm6m4
  Aug 24 12:03:29.616: INFO: Received response from host: affinity-clusterip-transition-x7fg5
  Aug 24 12:03:29.616: INFO: Received response from host: affinity-clusterip-transition-nm6m4
  Aug 24 12:03:29.616: INFO: Received response from host: affinity-clusterip-transition-nm6m4
  Aug 24 12:03:29.616: INFO: Received response from host: affinity-clusterip-transition-nm6m4
  Aug 24 12:03:29.616: INFO: Received response from host: affinity-clusterip-transition-sd6bx
  Aug 24 12:03:29.616: INFO: Received response from host: affinity-clusterip-transition-sd6bx
  Aug 24 12:03:29.616: INFO: Received response from host: affinity-clusterip-transition-sd6bx
  Aug 24 12:03:29.616: INFO: Received response from host: affinity-clusterip-transition-x7fg5
  Aug 24 12:03:29.616: INFO: Received response from host: affinity-clusterip-transition-sd6bx
  Aug 24 12:03:29.636: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1002171096 --namespace=services-1570 exec execpod-affinityjdwpr -- /bin/sh -x -c for i in $(seq 0 15); do echo; curl -q -s --connect-timeout 2 http://10.96.204.54:80/ ; done'
  Aug 24 12:03:29.933: INFO: stderr: "+ seq 0 15\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.96.204.54:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.96.204.54:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.96.204.54:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.96.204.54:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.96.204.54:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.96.204.54:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.96.204.54:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.96.204.54:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.96.204.54:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.96.204.54:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.96.204.54:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.96.204.54:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.96.204.54:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.96.204.54:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.96.204.54:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.96.204.54:80/\n"
  Aug 24 12:03:29.933: INFO: stdout: "\naffinity-clusterip-transition-nm6m4\naffinity-clusterip-transition-nm6m4\naffinity-clusterip-transition-nm6m4\naffinity-clusterip-transition-nm6m4\naffinity-clusterip-transition-nm6m4\naffinity-clusterip-transition-nm6m4\naffinity-clusterip-transition-nm6m4\naffinity-clusterip-transition-nm6m4\naffinity-clusterip-transition-nm6m4\naffinity-clusterip-transition-nm6m4\naffinity-clusterip-transition-nm6m4\naffinity-clusterip-transition-nm6m4\naffinity-clusterip-transition-nm6m4\naffinity-clusterip-transition-nm6m4\naffinity-clusterip-transition-nm6m4\naffinity-clusterip-transition-nm6m4"
  Aug 24 12:03:29.933: INFO: Received response from host: affinity-clusterip-transition-nm6m4
  Aug 24 12:03:29.933: INFO: Received response from host: affinity-clusterip-transition-nm6m4
  Aug 24 12:03:29.933: INFO: Received response from host: affinity-clusterip-transition-nm6m4
  Aug 24 12:03:29.933: INFO: Received response from host: affinity-clusterip-transition-nm6m4
  Aug 24 12:03:29.933: INFO: Received response from host: affinity-clusterip-transition-nm6m4
  Aug 24 12:03:29.933: INFO: Received response from host: affinity-clusterip-transition-nm6m4
  Aug 24 12:03:29.933: INFO: Received response from host: affinity-clusterip-transition-nm6m4
  Aug 24 12:03:29.933: INFO: Received response from host: affinity-clusterip-transition-nm6m4
  Aug 24 12:03:29.933: INFO: Received response from host: affinity-clusterip-transition-nm6m4
  Aug 24 12:03:29.934: INFO: Received response from host: affinity-clusterip-transition-nm6m4
  Aug 24 12:03:29.934: INFO: Received response from host: affinity-clusterip-transition-nm6m4
  Aug 24 12:03:29.934: INFO: Received response from host: affinity-clusterip-transition-nm6m4
  Aug 24 12:03:29.934: INFO: Received response from host: affinity-clusterip-transition-nm6m4
  Aug 24 12:03:29.934: INFO: Received response from host: affinity-clusterip-transition-nm6m4
  Aug 24 12:03:29.934: INFO: Received response from host: affinity-clusterip-transition-nm6m4
  Aug 24 12:03:29.934: INFO: Received response from host: affinity-clusterip-transition-nm6m4
  Aug 24 12:03:29.934: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  Aug 24 12:03:29.943: INFO: Cleaning up the exec pod
  STEP: deleting ReplicationController affinity-clusterip-transition in namespace services-1570, will wait for the garbage collector to delete the pods @ 08/24/23 12:03:29.964
  Aug 24 12:03:30.036: INFO: Deleting ReplicationController affinity-clusterip-transition took: 14.181063ms
  Aug 24 12:03:30.137: INFO: Terminating ReplicationController affinity-clusterip-transition pods took: 100.830486ms
  STEP: Destroying namespace "services-1570" for this suite. @ 08/24/23 12:03:32.877
• [10.309 seconds]
------------------------------
S
------------------------------
[sig-api-machinery] Watchers should observe add, update, and delete watch notifications on configmaps [Conformance]
test/e2e/apimachinery/watch.go:60
  STEP: Creating a kubernetes client @ 08/24/23 12:03:32.893
  Aug 24 12:03:32.893: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename watch @ 08/24/23 12:03:32.894
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 12:03:32.926
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 12:03:32.952
  STEP: creating a watch on configmaps with label A @ 08/24/23 12:03:32.96
  STEP: creating a watch on configmaps with label B @ 08/24/23 12:03:32.963
  STEP: creating a watch on configmaps with label A or B @ 08/24/23 12:03:32.966
  STEP: creating a configmap with label A and ensuring the correct watchers observe the notification @ 08/24/23 12:03:32.969
  Aug 24 12:03:32.989: INFO: Got : ADDED &ConfigMap{ObjectMeta:{e2e-watch-test-configmap-a  watch-2076  44bed294-b2bb-4b9d-8712-03abb96c6c6a 3404943411 0 2023-08-24 12:03:32 +0000 UTC <nil> <nil> map[watch-this-configmap:multiple-watchers-A] map[] [] [] [{e2e.test Update v1 2023-08-24 12:03:32 +0000 UTC FieldsV1 {"f:metadata":{"f:labels":{".":{},"f:watch-this-configmap":{}}}} }]},Data:map[string]string{},BinaryData:map[string][]byte{},Immutable:nil,}
  Aug 24 12:03:32.989: INFO: Got : ADDED &ConfigMap{ObjectMeta:{e2e-watch-test-configmap-a  watch-2076  44bed294-b2bb-4b9d-8712-03abb96c6c6a 3404943411 0 2023-08-24 12:03:32 +0000 UTC <nil> <nil> map[watch-this-configmap:multiple-watchers-A] map[] [] [] [{e2e.test Update v1 2023-08-24 12:03:32 +0000 UTC FieldsV1 {"f:metadata":{"f:labels":{".":{},"f:watch-this-configmap":{}}}} }]},Data:map[string]string{},BinaryData:map[string][]byte{},Immutable:nil,}
  STEP: modifying configmap A and ensuring the correct watchers observe the notification @ 08/24/23 12:03:32.989
  Aug 24 12:03:33.005: INFO: Got : MODIFIED &ConfigMap{ObjectMeta:{e2e-watch-test-configmap-a  watch-2076  44bed294-b2bb-4b9d-8712-03abb96c6c6a 3404943414 0 2023-08-24 12:03:32 +0000 UTC <nil> <nil> map[watch-this-configmap:multiple-watchers-A] map[] [] [] [{e2e.test Update v1 2023-08-24 12:03:33 +0000 UTC FieldsV1 {"f:data":{".":{},"f:mutation":{}},"f:metadata":{"f:labels":{".":{},"f:watch-this-configmap":{}}}} }]},Data:map[string]string{mutation: 1,},BinaryData:map[string][]byte{},Immutable:nil,}
  Aug 24 12:03:33.006: INFO: Got : MODIFIED &ConfigMap{ObjectMeta:{e2e-watch-test-configmap-a  watch-2076  44bed294-b2bb-4b9d-8712-03abb96c6c6a 3404943414 0 2023-08-24 12:03:32 +0000 UTC <nil> <nil> map[watch-this-configmap:multiple-watchers-A] map[] [] [] [{e2e.test Update v1 2023-08-24 12:03:33 +0000 UTC FieldsV1 {"f:data":{".":{},"f:mutation":{}},"f:metadata":{"f:labels":{".":{},"f:watch-this-configmap":{}}}} }]},Data:map[string]string{mutation: 1,},BinaryData:map[string][]byte{},Immutable:nil,}
  STEP: modifying configmap A again and ensuring the correct watchers observe the notification @ 08/24/23 12:03:33.006
  Aug 24 12:03:33.024: INFO: Got : MODIFIED &ConfigMap{ObjectMeta:{e2e-watch-test-configmap-a  watch-2076  44bed294-b2bb-4b9d-8712-03abb96c6c6a 3404943416 0 2023-08-24 12:03:32 +0000 UTC <nil> <nil> map[watch-this-configmap:multiple-watchers-A] map[] [] [] [{e2e.test Update v1 2023-08-24 12:03:33 +0000 UTC FieldsV1 {"f:data":{".":{},"f:mutation":{}},"f:metadata":{"f:labels":{".":{},"f:watch-this-configmap":{}}}} }]},Data:map[string]string{mutation: 2,},BinaryData:map[string][]byte{},Immutable:nil,}
  Aug 24 12:03:33.025: INFO: Got : MODIFIED &ConfigMap{ObjectMeta:{e2e-watch-test-configmap-a  watch-2076  44bed294-b2bb-4b9d-8712-03abb96c6c6a 3404943416 0 2023-08-24 12:03:32 +0000 UTC <nil> <nil> map[watch-this-configmap:multiple-watchers-A] map[] [] [] [{e2e.test Update v1 2023-08-24 12:03:33 +0000 UTC FieldsV1 {"f:data":{".":{},"f:mutation":{}},"f:metadata":{"f:labels":{".":{},"f:watch-this-configmap":{}}}} }]},Data:map[string]string{mutation: 2,},BinaryData:map[string][]byte{},Immutable:nil,}
  STEP: deleting configmap A and ensuring the correct watchers observe the notification @ 08/24/23 12:03:33.025
  Aug 24 12:03:33.039: INFO: Got : DELETED &ConfigMap{ObjectMeta:{e2e-watch-test-configmap-a  watch-2076  44bed294-b2bb-4b9d-8712-03abb96c6c6a 3404943418 0 2023-08-24 12:03:32 +0000 UTC <nil> <nil> map[watch-this-configmap:multiple-watchers-A] map[] [] [] [{e2e.test Update v1 2023-08-24 12:03:33 +0000 UTC FieldsV1 {"f:data":{".":{},"f:mutation":{}},"f:metadata":{"f:labels":{".":{},"f:watch-this-configmap":{}}}} }]},Data:map[string]string{mutation: 2,},BinaryData:map[string][]byte{},Immutable:nil,}
  Aug 24 12:03:33.039: INFO: Got : DELETED &ConfigMap{ObjectMeta:{e2e-watch-test-configmap-a  watch-2076  44bed294-b2bb-4b9d-8712-03abb96c6c6a 3404943418 0 2023-08-24 12:03:32 +0000 UTC <nil> <nil> map[watch-this-configmap:multiple-watchers-A] map[] [] [] [{e2e.test Update v1 2023-08-24 12:03:33 +0000 UTC FieldsV1 {"f:data":{".":{},"f:mutation":{}},"f:metadata":{"f:labels":{".":{},"f:watch-this-configmap":{}}}} }]},Data:map[string]string{mutation: 2,},BinaryData:map[string][]byte{},Immutable:nil,}
  STEP: creating a configmap with label B and ensuring the correct watchers observe the notification @ 08/24/23 12:03:33.039
  Aug 24 12:03:33.051: INFO: Got : ADDED &ConfigMap{ObjectMeta:{e2e-watch-test-configmap-b  watch-2076  f3b252f1-6007-42b5-8368-83025f25fbb2 3404943422 0 2023-08-24 12:03:33 +0000 UTC <nil> <nil> map[watch-this-configmap:multiple-watchers-B] map[] [] [] [{e2e.test Update v1 2023-08-24 12:03:33 +0000 UTC FieldsV1 {"f:metadata":{"f:labels":{".":{},"f:watch-this-configmap":{}}}} }]},Data:map[string]string{},BinaryData:map[string][]byte{},Immutable:nil,}
  Aug 24 12:03:33.051: INFO: Got : ADDED &ConfigMap{ObjectMeta:{e2e-watch-test-configmap-b  watch-2076  f3b252f1-6007-42b5-8368-83025f25fbb2 3404943422 0 2023-08-24 12:03:33 +0000 UTC <nil> <nil> map[watch-this-configmap:multiple-watchers-B] map[] [] [] [{e2e.test Update v1 2023-08-24 12:03:33 +0000 UTC FieldsV1 {"f:metadata":{"f:labels":{".":{},"f:watch-this-configmap":{}}}} }]},Data:map[string]string{},BinaryData:map[string][]byte{},Immutable:nil,}
  STEP: deleting configmap B and ensuring the correct watchers observe the notification @ 08/24/23 12:03:43.053
  Aug 24 12:03:43.069: INFO: Got : DELETED &ConfigMap{ObjectMeta:{e2e-watch-test-configmap-b  watch-2076  f3b252f1-6007-42b5-8368-83025f25fbb2 3404943874 0 2023-08-24 12:03:33 +0000 UTC <nil> <nil> map[watch-this-configmap:multiple-watchers-B] map[] [] [] [{e2e.test Update v1 2023-08-24 12:03:33 +0000 UTC FieldsV1 {"f:metadata":{"f:labels":{".":{},"f:watch-this-configmap":{}}}} }]},Data:map[string]string{},BinaryData:map[string][]byte{},Immutable:nil,}
  Aug 24 12:03:43.069: INFO: Got : DELETED &ConfigMap{ObjectMeta:{e2e-watch-test-configmap-b  watch-2076  f3b252f1-6007-42b5-8368-83025f25fbb2 3404943874 0 2023-08-24 12:03:33 +0000 UTC <nil> <nil> map[watch-this-configmap:multiple-watchers-B] map[] [] [] [{e2e.test Update v1 2023-08-24 12:03:33 +0000 UTC FieldsV1 {"f:metadata":{"f:labels":{".":{},"f:watch-this-configmap":{}}}} }]},Data:map[string]string{},BinaryData:map[string][]byte{},Immutable:nil,}
  Aug 24 12:03:53.070: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "watch-2076" for this suite. @ 08/24/23 12:03:53.084
• [20.206 seconds]
------------------------------
SSSSSSSSSSSSSS
------------------------------
[sig-auth] ServiceAccounts should mount projected service account token [Conformance]
test/e2e/auth/service_accounts.go:275
  STEP: Creating a kubernetes client @ 08/24/23 12:03:53.1
  Aug 24 12:03:53.100: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename svcaccounts @ 08/24/23 12:03:53.101
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 12:03:53.133
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 12:03:53.14
  STEP: Creating a pod to test service account token:  @ 08/24/23 12:03:53.15
  STEP: Saw pod success @ 08/24/23 12:03:57.202
  Aug 24 12:03:57.210: INFO: Trying to get logs from node scw-conformance-default-2af6d8b4c6264cc5b9e5e6 pod test-pod-cb5c8db3-431a-4552-a642-4db02995c018 container agnhost-container: <nil>
  STEP: delete the pod @ 08/24/23 12:03:57.228
  Aug 24 12:03:57.263: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "svcaccounts-6244" for this suite. @ 08/24/23 12:03:57.272
• [4.189 seconds]
------------------------------
S
------------------------------
[sig-storage] Projected configMap should be consumable from pods in volume with defaultMode set [LinuxOnly] [NodeConformance] [Conformance]
test/e2e/common/storage/projected_configmap.go:57
  STEP: Creating a kubernetes client @ 08/24/23 12:03:57.289
  Aug 24 12:03:57.289: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename projected @ 08/24/23 12:03:57.29
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 12:03:57.322
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 12:03:57.329
  STEP: Creating configMap with name projected-configmap-test-volume-88a7dee2-1bc2-4f0d-800d-550bc661b23f @ 08/24/23 12:03:57.337
  STEP: Creating a pod to test consume configMaps @ 08/24/23 12:03:57.356
  STEP: Saw pod success @ 08/24/23 12:04:01.405
  Aug 24 12:04:01.412: INFO: Trying to get logs from node scw-conformance-default-2af6d8b4c6264cc5b9e5e6 pod pod-projected-configmaps-c62c803a-3a43-4bc3-8016-41bceb316800 container agnhost-container: <nil>
  STEP: delete the pod @ 08/24/23 12:04:01.437
  Aug 24 12:04:01.477: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "projected-864" for this suite. @ 08/24/23 12:04:01.488
• [4.218 seconds]
------------------------------
SSSSSSSSSSSSS
------------------------------
[sig-api-machinery] FieldValidation should create/apply an invalid CR with extra properties for CRD with validation schema [Conformance]
test/e2e/apimachinery/field_validation.go:350
  STEP: Creating a kubernetes client @ 08/24/23 12:04:01.507
  Aug 24 12:04:01.507: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename field-validation @ 08/24/23 12:04:01.507
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 12:04:01.536
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 12:04:01.542
  Aug 24 12:04:01.548: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  W0824 12:04:01.549429      22 field_validation.go:423] props: &JSONSchemaProps{ID:,Schema:,Ref:nil,Description:,Type:object,Format:,Title:,Default:nil,Maximum:nil,ExclusiveMaximum:false,Minimum:nil,ExclusiveMinimum:false,MaxLength:nil,MinLength:nil,Pattern:,MaxItems:nil,MinItems:nil,UniqueItems:false,MultipleOf:nil,Enum:[]JSON{},MaxProperties:nil,MinProperties:nil,Required:[],Items:nil,AllOf:[]JSONSchemaProps{},OneOf:[]JSONSchemaProps{},AnyOf:[]JSONSchemaProps{},Not:nil,Properties:map[string]JSONSchemaProps{spec: {  <nil>  object   nil <nil> false <nil> false <nil> <nil>  <nil> <nil> false <nil> [] <nil> <nil> [] nil [] [] [] nil map[cronSpec:{  <nil>  string   nil <nil> false <nil> false <nil> <nil> ^(\d+|\*)(/\d+)?(\s+(\d+|\*)(/\d+)?){4}$ <nil> <nil> false <nil> [] <nil> <nil> [] nil [] [] [] nil map[] nil map[] map[] nil map[] nil nil false <nil> false false [] <nil> <nil> []} foo:{  <nil>  string   nil <nil> false <nil> false <nil> <nil>  <nil> <nil> false <nil> [] <nil> <nil> [] nil [] [] [] nil map[] nil map[] map[] nil map[] nil nil false <nil> false false [] <nil> <nil> []} ports:{  <nil>  array   nil <nil> false <nil> false <nil> <nil>  <nil> <nil> false <nil> [] <nil> <nil> [] &JSONSchemaPropsOrArray{Schema:&JSONSchemaProps{ID:,Schema:,Ref:nil,Description:,Type:object,Format:,Title:,Default:nil,Maximum:nil,ExclusiveMaximum:false,Minimum:nil,ExclusiveMinimum:false,MaxLength:nil,MinLength:nil,Pattern:,MaxItems:nil,MinItems:nil,UniqueItems:false,MultipleOf:nil,Enum:[]JSON{},MaxProperties:nil,MinProperties:nil,Required:[containerPort protocol],Items:nil,AllOf:[]JSONSchemaProps{},OneOf:[]JSONSchemaProps{},AnyOf:[]JSONSchemaProps{},Not:nil,Properties:map[string]JSONSchemaProps{containerPort: {  <nil>  integer int32  nil <nil> false <nil> false <nil> <nil>  <nil> <nil> false <nil> [] <nil> <nil> [] nil [] [] [] nil map[] nil map[] map[] nil map[] nil nil false <nil> false false [] <nil> <nil> []},hostIP: {  <nil>  string   nil <nil> false <nil> false <nil> <nil>  <nil> <nil> false <nil> [] <nil> <nil> [] nil [] [] [] nil map[] nil map[] map[] nil map[] nil nil false <nil> false false [] <nil> <nil> []},hostPort: {  <nil>  integer int32  nil <nil> false <nil> false <nil> <nil>  <nil> <nil> false <nil> [] <nil> <nil> [] nil [] [] [] nil map[] nil map[] map[] nil map[] nil nil false <nil> false false [] <nil> <nil> []},name: {  <nil>  string   nil <nil> false <nil> false <nil> <nil>  <nil> <nil> false <nil> [] <nil> <nil> [] nil [] [] [] nil map[] nil map[] map[] nil map[] nil nil false <nil> false false [] <nil> <nil> []},protocol: {  <nil>  string   nil <nil> false <nil> false <nil> <nil>  <nil> <nil> false <nil> [] <nil> <nil> [] nil [] [] [] nil map[] nil map[] map[] nil map[] nil nil false <nil> false false [] <nil> <nil> []},},AdditionalProperties:nil,PatternProperties:map[string]JSONSchemaProps{},Dependencies:JSONSchemaDependencies{},AdditionalItems:nil,Definitions:JSONSchemaDefinitions{},ExternalDocs:nil,Example:nil,Nullable:false,XPreserveUnknownFields:nil,XEmbeddedResource:false,XIntOrString:false,XListMapKeys:[],XListType:nil,XMapType:nil,XValidations:[]ValidationRule{},},JSONSchemas:[]JSONSchemaProps{},} [] [] [] nil map[] nil map[] map[] nil map[] nil nil false <nil> false false [containerPort protocol] 0xc00140ac80 <nil> []}] nil map[] map[] nil map[] nil nil false <nil> false false [] <nil> <nil> []},},AdditionalProperties:nil,PatternProperties:map[string]JSONSchemaProps{},Dependencies:JSONSchemaDependencies{},AdditionalItems:nil,Definitions:JSONSchemaDefinitions{},ExternalDocs:nil,Example:nil,Nullable:false,XPreserveUnknownFields:nil,XEmbeddedResource:false,XIntOrString:false,XListMapKeys:[],XListType:nil,XMapType:nil,XValidations:[]ValidationRule{},}
  W0824 12:04:04.165356      22 warnings.go:70] unknown field "alpha"
  W0824 12:04:04.165392      22 warnings.go:70] unknown field "beta"
  W0824 12:04:04.165403      22 warnings.go:70] unknown field "delta"
  W0824 12:04:04.165410      22 warnings.go:70] unknown field "epsilon"
  W0824 12:04:04.165416      22 warnings.go:70] unknown field "gamma"
  Aug 24 12:04:04.723: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "field-validation-6905" for this suite. @ 08/24/23 12:04:04.762
• [3.269 seconds]
------------------------------
SSSSSSSSSSSSSS
------------------------------
[sig-node] ConfigMap should be consumable via the environment [NodeConformance] [Conformance]
test/e2e/common/node/configmap.go:93
  STEP: Creating a kubernetes client @ 08/24/23 12:04:04.777
  Aug 24 12:04:04.777: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename configmap @ 08/24/23 12:04:04.778
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 12:04:04.807
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 12:04:04.813
  STEP: Creating configMap configmap-8029/configmap-test-f24cd430-2adc-46ba-bf2a-62aecc39c32d @ 08/24/23 12:04:04.82
  STEP: Creating a pod to test consume configMaps @ 08/24/23 12:04:04.83
  STEP: Saw pod success @ 08/24/23 12:04:08.885
  Aug 24 12:04:08.892: INFO: Trying to get logs from node scw-conformance-default-2af6d8b4c6264cc5b9e5e6 pod pod-configmaps-dabc5f0e-effe-43c1-afc8-5a393c8ea5fe container env-test: <nil>
  STEP: delete the pod @ 08/24/23 12:04:08.91
  Aug 24 12:04:08.940: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "configmap-8029" for this suite. @ 08/24/23 12:04:08.951
• [4.188 seconds]
------------------------------
SSSS
------------------------------
[sig-node] Containers should use the image defaults if command and args are blank [NodeConformance] [Conformance]
test/e2e/common/node/containers.go:41
  STEP: Creating a kubernetes client @ 08/24/23 12:04:08.965
  Aug 24 12:04:08.965: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename containers @ 08/24/23 12:04:08.966
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 12:04:08.997
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 12:04:09.002
  Aug 24 12:04:11.060: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "containers-6829" for this suite. @ 08/24/23 12:04:11.07
• [2.118 seconds]
------------------------------
SSSSSSSS
------------------------------
[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should unconditionally reject operations on fail closed webhook [Conformance]
test/e2e/apimachinery/webhook.go:238
  STEP: Creating a kubernetes client @ 08/24/23 12:04:11.084
  Aug 24 12:04:11.084: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename webhook @ 08/24/23 12:04:11.085
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 12:04:11.121
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 12:04:11.127
  STEP: Setting up server cert @ 08/24/23 12:04:11.174
  STEP: Create role binding to let webhook read extension-apiserver-authentication @ 08/24/23 12:04:11.706
  STEP: Deploying the webhook pod @ 08/24/23 12:04:11.726
  STEP: Wait for the deployment to be ready @ 08/24/23 12:04:11.755
  Aug 24 12:04:11.771: INFO: deployment "sample-webhook-deployment" doesn't have the required revision set
  STEP: Deploying the webhook service @ 08/24/23 12:04:13.795
  STEP: Verifying the service has paired with the endpoint @ 08/24/23 12:04:13.82
  Aug 24 12:04:14.821: INFO: Waiting for amount of service:e2e-test-webhook endpoints to be 1
  STEP: Registering a webhook that server cannot talk to, with fail closed policy, via the AdmissionRegistration API @ 08/24/23 12:04:14.838
  STEP: create a namespace for the webhook @ 08/24/23 12:04:14.88
  STEP: create a configmap should be unconditionally rejected by the webhook @ 08/24/23 12:04:14.954
  Aug 24 12:04:14.976: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "webhook-5816" for this suite. @ 08/24/23 12:04:15.123
  STEP: Destroying namespace "webhook-markers-9995" for this suite. @ 08/24/23 12:04:15.165
  STEP: Destroying namespace "fail-closed-namespace-2211" for this suite. @ 08/24/23 12:04:15.179
• [4.110 seconds]
------------------------------
S
------------------------------
[sig-node] Probing container should *not* be restarted with a GRPC liveness probe [NodeConformance] [Conformance]
test/e2e/common/node/container_probe.go:527
  STEP: Creating a kubernetes client @ 08/24/23 12:04:15.194
  Aug 24 12:04:15.195: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename container-probe @ 08/24/23 12:04:15.195
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 12:04:15.277
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 12:04:15.284
  STEP: Creating pod test-grpc-2cefc0c0-cdaf-4cf0-8e4b-1e63ccc7be78 in namespace container-probe-9293 @ 08/24/23 12:04:15.29
  STEP: checking the pod's current state and verifying that restartCount is present @ 08/24/23 12:04:17.358
  Aug 24 12:04:17.367: INFO: Initial restart count of pod test-grpc-2cefc0c0-cdaf-4cf0-8e4b-1e63ccc7be78 is 0
  Aug 24 12:04:17.376: INFO: Get pod test-grpc-2cefc0c0-cdaf-4cf0-8e4b-1e63ccc7be78 in namespace container-probe-9293
  Aug 24 12:04:19.387: INFO: Get pod test-grpc-2cefc0c0-cdaf-4cf0-8e4b-1e63ccc7be78 in namespace container-probe-9293
  Aug 24 12:04:21.396: INFO: Get pod test-grpc-2cefc0c0-cdaf-4cf0-8e4b-1e63ccc7be78 in namespace container-probe-9293
  Aug 24 12:04:23.404: INFO: Get pod test-grpc-2cefc0c0-cdaf-4cf0-8e4b-1e63ccc7be78 in namespace container-probe-9293
  Aug 24 12:04:25.416: INFO: Get pod test-grpc-2cefc0c0-cdaf-4cf0-8e4b-1e63ccc7be78 in namespace container-probe-9293
  Aug 24 12:04:27.429: INFO: Get pod test-grpc-2cefc0c0-cdaf-4cf0-8e4b-1e63ccc7be78 in namespace container-probe-9293
  Aug 24 12:04:29.438: INFO: Get pod test-grpc-2cefc0c0-cdaf-4cf0-8e4b-1e63ccc7be78 in namespace container-probe-9293
  Aug 24 12:04:31.449: INFO: Get pod test-grpc-2cefc0c0-cdaf-4cf0-8e4b-1e63ccc7be78 in namespace container-probe-9293
  Aug 24 12:04:33.459: INFO: Get pod test-grpc-2cefc0c0-cdaf-4cf0-8e4b-1e63ccc7be78 in namespace container-probe-9293
  Aug 24 12:04:35.471: INFO: Get pod test-grpc-2cefc0c0-cdaf-4cf0-8e4b-1e63ccc7be78 in namespace container-probe-9293
  Aug 24 12:04:37.483: INFO: Get pod test-grpc-2cefc0c0-cdaf-4cf0-8e4b-1e63ccc7be78 in namespace container-probe-9293
  Aug 24 12:04:39.491: INFO: Get pod test-grpc-2cefc0c0-cdaf-4cf0-8e4b-1e63ccc7be78 in namespace container-probe-9293
  Aug 24 12:04:41.502: INFO: Get pod test-grpc-2cefc0c0-cdaf-4cf0-8e4b-1e63ccc7be78 in namespace container-probe-9293
  Aug 24 12:04:43.514: INFO: Get pod test-grpc-2cefc0c0-cdaf-4cf0-8e4b-1e63ccc7be78 in namespace container-probe-9293
  Aug 24 12:04:45.522: INFO: Get pod test-grpc-2cefc0c0-cdaf-4cf0-8e4b-1e63ccc7be78 in namespace container-probe-9293
  Aug 24 12:04:47.532: INFO: Get pod test-grpc-2cefc0c0-cdaf-4cf0-8e4b-1e63ccc7be78 in namespace container-probe-9293
  Aug 24 12:04:49.541: INFO: Get pod test-grpc-2cefc0c0-cdaf-4cf0-8e4b-1e63ccc7be78 in namespace container-probe-9293
  Aug 24 12:04:51.552: INFO: Get pod test-grpc-2cefc0c0-cdaf-4cf0-8e4b-1e63ccc7be78 in namespace container-probe-9293
  Aug 24 12:04:53.562: INFO: Get pod test-grpc-2cefc0c0-cdaf-4cf0-8e4b-1e63ccc7be78 in namespace container-probe-9293
  Aug 24 12:04:55.573: INFO: Get pod test-grpc-2cefc0c0-cdaf-4cf0-8e4b-1e63ccc7be78 in namespace container-probe-9293
  Aug 24 12:04:57.582: INFO: Get pod test-grpc-2cefc0c0-cdaf-4cf0-8e4b-1e63ccc7be78 in namespace container-probe-9293
  Aug 24 12:04:59.590: INFO: Get pod test-grpc-2cefc0c0-cdaf-4cf0-8e4b-1e63ccc7be78 in namespace container-probe-9293
  Aug 24 12:05:01.601: INFO: Get pod test-grpc-2cefc0c0-cdaf-4cf0-8e4b-1e63ccc7be78 in namespace container-probe-9293
  Aug 24 12:05:03.614: INFO: Get pod test-grpc-2cefc0c0-cdaf-4cf0-8e4b-1e63ccc7be78 in namespace container-probe-9293
  Aug 24 12:05:05.627: INFO: Get pod test-grpc-2cefc0c0-cdaf-4cf0-8e4b-1e63ccc7be78 in namespace container-probe-9293
  Aug 24 12:05:07.640: INFO: Get pod test-grpc-2cefc0c0-cdaf-4cf0-8e4b-1e63ccc7be78 in namespace container-probe-9293
  Aug 24 12:05:09.652: INFO: Get pod test-grpc-2cefc0c0-cdaf-4cf0-8e4b-1e63ccc7be78 in namespace container-probe-9293
  Aug 24 12:05:11.662: INFO: Get pod test-grpc-2cefc0c0-cdaf-4cf0-8e4b-1e63ccc7be78 in namespace container-probe-9293
  Aug 24 12:05:13.671: INFO: Get pod test-grpc-2cefc0c0-cdaf-4cf0-8e4b-1e63ccc7be78 in namespace container-probe-9293
  Aug 24 12:05:15.684: INFO: Get pod test-grpc-2cefc0c0-cdaf-4cf0-8e4b-1e63ccc7be78 in namespace container-probe-9293
  Aug 24 12:05:17.695: INFO: Get pod test-grpc-2cefc0c0-cdaf-4cf0-8e4b-1e63ccc7be78 in namespace container-probe-9293
  Aug 24 12:05:19.705: INFO: Get pod test-grpc-2cefc0c0-cdaf-4cf0-8e4b-1e63ccc7be78 in namespace container-probe-9293
  Aug 24 12:05:21.717: INFO: Get pod test-grpc-2cefc0c0-cdaf-4cf0-8e4b-1e63ccc7be78 in namespace container-probe-9293
  Aug 24 12:05:23.726: INFO: Get pod test-grpc-2cefc0c0-cdaf-4cf0-8e4b-1e63ccc7be78 in namespace container-probe-9293
  Aug 24 12:05:25.738: INFO: Get pod test-grpc-2cefc0c0-cdaf-4cf0-8e4b-1e63ccc7be78 in namespace container-probe-9293
  Aug 24 12:05:27.753: INFO: Get pod test-grpc-2cefc0c0-cdaf-4cf0-8e4b-1e63ccc7be78 in namespace container-probe-9293
  Aug 24 12:05:29.763: INFO: Get pod test-grpc-2cefc0c0-cdaf-4cf0-8e4b-1e63ccc7be78 in namespace container-probe-9293
  Aug 24 12:05:31.772: INFO: Get pod test-grpc-2cefc0c0-cdaf-4cf0-8e4b-1e63ccc7be78 in namespace container-probe-9293
  Aug 24 12:05:33.783: INFO: Get pod test-grpc-2cefc0c0-cdaf-4cf0-8e4b-1e63ccc7be78 in namespace container-probe-9293
  Aug 24 12:05:35.796: INFO: Get pod test-grpc-2cefc0c0-cdaf-4cf0-8e4b-1e63ccc7be78 in namespace container-probe-9293
  Aug 24 12:05:37.807: INFO: Get pod test-grpc-2cefc0c0-cdaf-4cf0-8e4b-1e63ccc7be78 in namespace container-probe-9293
  Aug 24 12:05:39.816: INFO: Get pod test-grpc-2cefc0c0-cdaf-4cf0-8e4b-1e63ccc7be78 in namespace container-probe-9293
  Aug 24 12:05:41.825: INFO: Get pod test-grpc-2cefc0c0-cdaf-4cf0-8e4b-1e63ccc7be78 in namespace container-probe-9293
  Aug 24 12:05:43.835: INFO: Get pod test-grpc-2cefc0c0-cdaf-4cf0-8e4b-1e63ccc7be78 in namespace container-probe-9293
  Aug 24 12:05:45.846: INFO: Get pod test-grpc-2cefc0c0-cdaf-4cf0-8e4b-1e63ccc7be78 in namespace container-probe-9293
  Aug 24 12:05:47.856: INFO: Get pod test-grpc-2cefc0c0-cdaf-4cf0-8e4b-1e63ccc7be78 in namespace container-probe-9293
  Aug 24 12:05:49.867: INFO: Get pod test-grpc-2cefc0c0-cdaf-4cf0-8e4b-1e63ccc7be78 in namespace container-probe-9293
  Aug 24 12:05:51.879: INFO: Get pod test-grpc-2cefc0c0-cdaf-4cf0-8e4b-1e63ccc7be78 in namespace container-probe-9293
  Aug 24 12:05:53.890: INFO: Get pod test-grpc-2cefc0c0-cdaf-4cf0-8e4b-1e63ccc7be78 in namespace container-probe-9293
  Aug 24 12:05:55.899: INFO: Get pod test-grpc-2cefc0c0-cdaf-4cf0-8e4b-1e63ccc7be78 in namespace container-probe-9293
  Aug 24 12:05:57.909: INFO: Get pod test-grpc-2cefc0c0-cdaf-4cf0-8e4b-1e63ccc7be78 in namespace container-probe-9293
  Aug 24 12:05:59.917: INFO: Get pod test-grpc-2cefc0c0-cdaf-4cf0-8e4b-1e63ccc7be78 in namespace container-probe-9293
  Aug 24 12:06:01.927: INFO: Get pod test-grpc-2cefc0c0-cdaf-4cf0-8e4b-1e63ccc7be78 in namespace container-probe-9293
  Aug 24 12:06:03.937: INFO: Get pod test-grpc-2cefc0c0-cdaf-4cf0-8e4b-1e63ccc7be78 in namespace container-probe-9293
  Aug 24 12:06:05.949: INFO: Get pod test-grpc-2cefc0c0-cdaf-4cf0-8e4b-1e63ccc7be78 in namespace container-probe-9293
  Aug 24 12:06:07.960: INFO: Get pod test-grpc-2cefc0c0-cdaf-4cf0-8e4b-1e63ccc7be78 in namespace container-probe-9293
  Aug 24 12:06:09.970: INFO: Get pod test-grpc-2cefc0c0-cdaf-4cf0-8e4b-1e63ccc7be78 in namespace container-probe-9293
  Aug 24 12:06:11.981: INFO: Get pod test-grpc-2cefc0c0-cdaf-4cf0-8e4b-1e63ccc7be78 in namespace container-probe-9293
  Aug 24 12:06:13.995: INFO: Get pod test-grpc-2cefc0c0-cdaf-4cf0-8e4b-1e63ccc7be78 in namespace container-probe-9293
  Aug 24 12:06:16.005: INFO: Get pod test-grpc-2cefc0c0-cdaf-4cf0-8e4b-1e63ccc7be78 in namespace container-probe-9293
  Aug 24 12:06:18.016: INFO: Get pod test-grpc-2cefc0c0-cdaf-4cf0-8e4b-1e63ccc7be78 in namespace container-probe-9293
  Aug 24 12:06:20.025: INFO: Get pod test-grpc-2cefc0c0-cdaf-4cf0-8e4b-1e63ccc7be78 in namespace container-probe-9293
  Aug 24 12:06:22.035: INFO: Get pod test-grpc-2cefc0c0-cdaf-4cf0-8e4b-1e63ccc7be78 in namespace container-probe-9293
  Aug 24 12:06:24.046: INFO: Get pod test-grpc-2cefc0c0-cdaf-4cf0-8e4b-1e63ccc7be78 in namespace container-probe-9293
  Aug 24 12:06:26.057: INFO: Get pod test-grpc-2cefc0c0-cdaf-4cf0-8e4b-1e63ccc7be78 in namespace container-probe-9293
  Aug 24 12:06:28.067: INFO: Get pod test-grpc-2cefc0c0-cdaf-4cf0-8e4b-1e63ccc7be78 in namespace container-probe-9293
  Aug 24 12:06:30.077: INFO: Get pod test-grpc-2cefc0c0-cdaf-4cf0-8e4b-1e63ccc7be78 in namespace container-probe-9293
  Aug 24 12:06:32.088: INFO: Get pod test-grpc-2cefc0c0-cdaf-4cf0-8e4b-1e63ccc7be78 in namespace container-probe-9293
  Aug 24 12:06:34.100: INFO: Get pod test-grpc-2cefc0c0-cdaf-4cf0-8e4b-1e63ccc7be78 in namespace container-probe-9293
  Aug 24 12:06:36.112: INFO: Get pod test-grpc-2cefc0c0-cdaf-4cf0-8e4b-1e63ccc7be78 in namespace container-probe-9293
  Aug 24 12:06:38.121: INFO: Get pod test-grpc-2cefc0c0-cdaf-4cf0-8e4b-1e63ccc7be78 in namespace container-probe-9293
  Aug 24 12:06:40.130: INFO: Get pod test-grpc-2cefc0c0-cdaf-4cf0-8e4b-1e63ccc7be78 in namespace container-probe-9293
  Aug 24 12:06:42.138: INFO: Get pod test-grpc-2cefc0c0-cdaf-4cf0-8e4b-1e63ccc7be78 in namespace container-probe-9293
  Aug 24 12:06:44.148: INFO: Get pod test-grpc-2cefc0c0-cdaf-4cf0-8e4b-1e63ccc7be78 in namespace container-probe-9293
  Aug 24 12:06:46.161: INFO: Get pod test-grpc-2cefc0c0-cdaf-4cf0-8e4b-1e63ccc7be78 in namespace container-probe-9293
  Aug 24 12:06:48.172: INFO: Get pod test-grpc-2cefc0c0-cdaf-4cf0-8e4b-1e63ccc7be78 in namespace container-probe-9293
  Aug 24 12:06:50.183: INFO: Get pod test-grpc-2cefc0c0-cdaf-4cf0-8e4b-1e63ccc7be78 in namespace container-probe-9293
  Aug 24 12:06:52.194: INFO: Get pod test-grpc-2cefc0c0-cdaf-4cf0-8e4b-1e63ccc7be78 in namespace container-probe-9293
  Aug 24 12:06:54.202: INFO: Get pod test-grpc-2cefc0c0-cdaf-4cf0-8e4b-1e63ccc7be78 in namespace container-probe-9293
  Aug 24 12:06:56.214: INFO: Get pod test-grpc-2cefc0c0-cdaf-4cf0-8e4b-1e63ccc7be78 in namespace container-probe-9293
  Aug 24 12:06:58.223: INFO: Get pod test-grpc-2cefc0c0-cdaf-4cf0-8e4b-1e63ccc7be78 in namespace container-probe-9293
  Aug 24 12:07:00.234: INFO: Get pod test-grpc-2cefc0c0-cdaf-4cf0-8e4b-1e63ccc7be78 in namespace container-probe-9293
  Aug 24 12:07:02.243: INFO: Get pod test-grpc-2cefc0c0-cdaf-4cf0-8e4b-1e63ccc7be78 in namespace container-probe-9293
  Aug 24 12:07:04.253: INFO: Get pod test-grpc-2cefc0c0-cdaf-4cf0-8e4b-1e63ccc7be78 in namespace container-probe-9293
  Aug 24 12:07:06.265: INFO: Get pod test-grpc-2cefc0c0-cdaf-4cf0-8e4b-1e63ccc7be78 in namespace container-probe-9293
  Aug 24 12:07:08.274: INFO: Get pod test-grpc-2cefc0c0-cdaf-4cf0-8e4b-1e63ccc7be78 in namespace container-probe-9293
  Aug 24 12:07:10.283: INFO: Get pod test-grpc-2cefc0c0-cdaf-4cf0-8e4b-1e63ccc7be78 in namespace container-probe-9293
  Aug 24 12:07:12.293: INFO: Get pod test-grpc-2cefc0c0-cdaf-4cf0-8e4b-1e63ccc7be78 in namespace container-probe-9293
  Aug 24 12:07:14.305: INFO: Get pod test-grpc-2cefc0c0-cdaf-4cf0-8e4b-1e63ccc7be78 in namespace container-probe-9293
  Aug 24 12:07:16.316: INFO: Get pod test-grpc-2cefc0c0-cdaf-4cf0-8e4b-1e63ccc7be78 in namespace container-probe-9293
  Aug 24 12:07:18.325: INFO: Get pod test-grpc-2cefc0c0-cdaf-4cf0-8e4b-1e63ccc7be78 in namespace container-probe-9293
  Aug 24 12:07:20.335: INFO: Get pod test-grpc-2cefc0c0-cdaf-4cf0-8e4b-1e63ccc7be78 in namespace container-probe-9293
  Aug 24 12:07:22.346: INFO: Get pod test-grpc-2cefc0c0-cdaf-4cf0-8e4b-1e63ccc7be78 in namespace container-probe-9293
  Aug 24 12:07:24.356: INFO: Get pod test-grpc-2cefc0c0-cdaf-4cf0-8e4b-1e63ccc7be78 in namespace container-probe-9293
  Aug 24 12:07:26.369: INFO: Get pod test-grpc-2cefc0c0-cdaf-4cf0-8e4b-1e63ccc7be78 in namespace container-probe-9293
  Aug 24 12:07:28.379: INFO: Get pod test-grpc-2cefc0c0-cdaf-4cf0-8e4b-1e63ccc7be78 in namespace container-probe-9293
  Aug 24 12:07:30.393: INFO: Get pod test-grpc-2cefc0c0-cdaf-4cf0-8e4b-1e63ccc7be78 in namespace container-probe-9293
  Aug 24 12:07:32.403: INFO: Get pod test-grpc-2cefc0c0-cdaf-4cf0-8e4b-1e63ccc7be78 in namespace container-probe-9293
  Aug 24 12:07:34.414: INFO: Get pod test-grpc-2cefc0c0-cdaf-4cf0-8e4b-1e63ccc7be78 in namespace container-probe-9293
  Aug 24 12:07:36.425: INFO: Get pod test-grpc-2cefc0c0-cdaf-4cf0-8e4b-1e63ccc7be78 in namespace container-probe-9293
  Aug 24 12:07:38.435: INFO: Get pod test-grpc-2cefc0c0-cdaf-4cf0-8e4b-1e63ccc7be78 in namespace container-probe-9293
  Aug 24 12:07:40.443: INFO: Get pod test-grpc-2cefc0c0-cdaf-4cf0-8e4b-1e63ccc7be78 in namespace container-probe-9293
  Aug 24 12:07:42.454: INFO: Get pod test-grpc-2cefc0c0-cdaf-4cf0-8e4b-1e63ccc7be78 in namespace container-probe-9293
  Aug 24 12:07:44.461: INFO: Get pod test-grpc-2cefc0c0-cdaf-4cf0-8e4b-1e63ccc7be78 in namespace container-probe-9293
  Aug 24 12:07:46.474: INFO: Get pod test-grpc-2cefc0c0-cdaf-4cf0-8e4b-1e63ccc7be78 in namespace container-probe-9293
  Aug 24 12:07:48.485: INFO: Get pod test-grpc-2cefc0c0-cdaf-4cf0-8e4b-1e63ccc7be78 in namespace container-probe-9293
  Aug 24 12:07:50.494: INFO: Get pod test-grpc-2cefc0c0-cdaf-4cf0-8e4b-1e63ccc7be78 in namespace container-probe-9293
  Aug 24 12:07:52.505: INFO: Get pod test-grpc-2cefc0c0-cdaf-4cf0-8e4b-1e63ccc7be78 in namespace container-probe-9293
  Aug 24 12:07:54.515: INFO: Get pod test-grpc-2cefc0c0-cdaf-4cf0-8e4b-1e63ccc7be78 in namespace container-probe-9293
  Aug 24 12:07:56.527: INFO: Get pod test-grpc-2cefc0c0-cdaf-4cf0-8e4b-1e63ccc7be78 in namespace container-probe-9293
  Aug 24 12:07:58.540: INFO: Get pod test-grpc-2cefc0c0-cdaf-4cf0-8e4b-1e63ccc7be78 in namespace container-probe-9293
  Aug 24 12:08:00.549: INFO: Get pod test-grpc-2cefc0c0-cdaf-4cf0-8e4b-1e63ccc7be78 in namespace container-probe-9293
  Aug 24 12:08:02.558: INFO: Get pod test-grpc-2cefc0c0-cdaf-4cf0-8e4b-1e63ccc7be78 in namespace container-probe-9293
  Aug 24 12:08:04.567: INFO: Get pod test-grpc-2cefc0c0-cdaf-4cf0-8e4b-1e63ccc7be78 in namespace container-probe-9293
  Aug 24 12:08:06.579: INFO: Get pod test-grpc-2cefc0c0-cdaf-4cf0-8e4b-1e63ccc7be78 in namespace container-probe-9293
  Aug 24 12:08:08.587: INFO: Get pod test-grpc-2cefc0c0-cdaf-4cf0-8e4b-1e63ccc7be78 in namespace container-probe-9293
  Aug 24 12:08:10.598: INFO: Get pod test-grpc-2cefc0c0-cdaf-4cf0-8e4b-1e63ccc7be78 in namespace container-probe-9293
  Aug 24 12:08:12.608: INFO: Get pod test-grpc-2cefc0c0-cdaf-4cf0-8e4b-1e63ccc7be78 in namespace container-probe-9293
  Aug 24 12:08:14.620: INFO: Get pod test-grpc-2cefc0c0-cdaf-4cf0-8e4b-1e63ccc7be78 in namespace container-probe-9293
  Aug 24 12:08:16.633: INFO: Get pod test-grpc-2cefc0c0-cdaf-4cf0-8e4b-1e63ccc7be78 in namespace container-probe-9293
  Aug 24 12:08:18.634: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: deleting the pod @ 08/24/23 12:08:18.645
  STEP: Destroying namespace "container-probe-9293" for this suite. @ 08/24/23 12:08:18.674
• [243.496 seconds]
------------------------------
SSSSSSSSS
------------------------------
[sig-storage] Projected secret should be consumable from pods in volume [NodeConformance] [Conformance]
test/e2e/common/storage/projected_secret.go:46
  STEP: Creating a kubernetes client @ 08/24/23 12:08:18.691
  Aug 24 12:08:18.691: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename projected @ 08/24/23 12:08:18.693
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 12:08:18.757
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 12:08:18.765
  STEP: Creating projection with secret that has name projected-secret-test-70b13ed0-bc16-4be3-a39a-795fd06903a2 @ 08/24/23 12:08:18.772
  STEP: Creating a pod to test consume secrets @ 08/24/23 12:08:18.784
  STEP: Saw pod success @ 08/24/23 12:08:22.831
  Aug 24 12:08:22.840: INFO: Trying to get logs from node scw-conformance-default-2af6d8b4c6264cc5b9e5e6 pod pod-projected-secrets-b229fcdc-215e-42c1-927b-d00f56ab8da8 container projected-secret-volume-test: <nil>
  STEP: delete the pod @ 08/24/23 12:08:22.892
  Aug 24 12:08:22.934: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "projected-3390" for this suite. @ 08/24/23 12:08:22.943
• [4.270 seconds]
------------------------------
SSSSSSSSSSSSSSSS
------------------------------
[sig-api-machinery] CustomResourcePublishOpenAPI [Privileged:ClusterAdmin] works for multiple CRDs of same group but different versions [Conformance]
test/e2e/apimachinery/crd_publish_openapi.go:309
  STEP: Creating a kubernetes client @ 08/24/23 12:08:22.962
  Aug 24 12:08:22.962: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename crd-publish-openapi @ 08/24/23 12:08:22.964
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 12:08:22.999
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 12:08:23.005
  STEP: CRs in the same group but different versions (one multiversion CRD) show up in OpenAPI documentation @ 08/24/23 12:08:23.011
  Aug 24 12:08:23.011: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: CRs in the same group but different versions (two CRDs) show up in OpenAPI documentation @ 08/24/23 12:08:31.479
  Aug 24 12:08:31.480: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  Aug 24 12:08:33.250: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  Aug 24 12:08:41.017: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "crd-publish-openapi-6131" for this suite. @ 08/24/23 12:08:41.038
• [18.094 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-node] PodTemplates should run the lifecycle of PodTemplates [Conformance]
test/e2e/common/node/podtemplates.go:53
  STEP: Creating a kubernetes client @ 08/24/23 12:08:41.058
  Aug 24 12:08:41.058: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename podtemplate @ 08/24/23 12:08:41.059
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 12:08:41.092
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 12:08:41.099
  Aug 24 12:08:41.191: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "podtemplate-7779" for this suite. @ 08/24/23 12:08:41.201
• [0.159 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-apps] StatefulSet Basic StatefulSet functionality [StatefulSetBasic] should list, patch and delete a collection of StatefulSets [Conformance]
test/e2e/apps/statefulset.go:914
  STEP: Creating a kubernetes client @ 08/24/23 12:08:41.22
  Aug 24 12:08:41.220: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename statefulset @ 08/24/23 12:08:41.221
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 12:08:41.253
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 12:08:41.262
  STEP: Creating service test in namespace statefulset-8893 @ 08/24/23 12:08:41.27
  Aug 24 12:08:41.306: INFO: Found 0 stateful pods, waiting for 1
  Aug 24 12:08:51.320: INFO: Waiting for pod test-ss-0 to enter Running - Ready=true, currently Running - Ready=true
  STEP: patching the StatefulSet @ 08/24/23 12:08:51.338
  W0824 12:08:51.355037      22 warnings.go:70] unknown field "spec.template.spec.TerminationGracePeriodSeconds"
  Aug 24 12:08:51.372: INFO: Found 1 stateful pods, waiting for 2
  Aug 24 12:09:01.388: INFO: Waiting for pod test-ss-0 to enter Running - Ready=true, currently Running - Ready=true
  Aug 24 12:09:01.388: INFO: Waiting for pod test-ss-1 to enter Running - Ready=true, currently Running - Ready=true
  STEP: Listing all StatefulSets @ 08/24/23 12:09:01.406
  STEP: Delete all of the StatefulSets @ 08/24/23 12:09:01.414
  STEP: Verify that StatefulSets have been deleted @ 08/24/23 12:09:01.432
  Aug 24 12:09:01.441: INFO: Deleting all statefulset in ns statefulset-8893
  Aug 24 12:09:01.462: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "statefulset-8893" for this suite. @ 08/24/23 12:09:01.477
• [20.336 seconds]
------------------------------
SSSSSSSSS
------------------------------
[sig-apps] ReplicationController should surface a failure condition on a common issue like exceeded quota [Conformance]
test/e2e/apps/rc.go:85
  STEP: Creating a kubernetes client @ 08/24/23 12:09:01.557
  Aug 24 12:09:01.558: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename replication-controller @ 08/24/23 12:09:01.559
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 12:09:01.59
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 12:09:01.598
  Aug 24 12:09:01.605: INFO: Creating quota "condition-test" that allows only two pods to run in the current namespace
  STEP: Creating rc "condition-test" that asks for more than the allowed pod quota @ 08/24/23 12:09:02.659
  STEP: Checking rc "condition-test" has the desired failure condition set @ 08/24/23 12:09:02.67
  STEP: Scaling down rc "condition-test" to satisfy pod quota @ 08/24/23 12:09:03.691
  Aug 24 12:09:03.716: INFO: Updating replication controller "condition-test"
  STEP: Checking rc "condition-test" has no failure condition set @ 08/24/23 12:09:03.716
  Aug 24 12:09:04.738: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "replication-controller-7220" for this suite. @ 08/24/23 12:09:04.747
• [3.203 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-storage] Projected configMap should be consumable from pods in volume with mappings and Item mode set [LinuxOnly] [NodeConformance] [Conformance]
test/e2e/common/storage/projected_configmap.go:99
  STEP: Creating a kubernetes client @ 08/24/23 12:09:04.762
  Aug 24 12:09:04.762: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename projected @ 08/24/23 12:09:04.762
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 12:09:04.791
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 12:09:04.798
  STEP: Creating configMap with name projected-configmap-test-volume-map-d513a65d-fb35-4b49-b831-5e2f83c66327 @ 08/24/23 12:09:04.804
  STEP: Creating a pod to test consume configMaps @ 08/24/23 12:09:04.821
  STEP: Saw pod success @ 08/24/23 12:09:08.873
  Aug 24 12:09:08.881: INFO: Trying to get logs from node scw-conformance-default-2af6d8b4c6264cc5b9e5e6 pod pod-projected-configmaps-391776fb-b284-41ac-9332-ad0c220126bc container agnhost-container: <nil>
  STEP: delete the pod @ 08/24/23 12:09:08.897
  Aug 24 12:09:08.932: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "projected-4035" for this suite. @ 08/24/23 12:09:08.943
• [4.194 seconds]
------------------------------
SSSSSSSSSSSSSSSSS
------------------------------
[sig-node] Probing container should be restarted with a exec "cat /tmp/health" liveness probe [NodeConformance] [Conformance]
test/e2e/common/node/container_probe.go:134
  STEP: Creating a kubernetes client @ 08/24/23 12:09:08.957
  Aug 24 12:09:08.957: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename container-probe @ 08/24/23 12:09:08.957
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 12:09:08.987
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 12:09:08.993
  STEP: Creating pod busybox-c6ce23ae-3650-4a84-8525-517966a8ecca in namespace container-probe-5033 @ 08/24/23 12:09:09
  STEP: checking the pod's current state and verifying that restartCount is present @ 08/24/23 12:09:11.034
  Aug 24 12:09:11.042: INFO: Initial restart count of pod busybox-c6ce23ae-3650-4a84-8525-517966a8ecca is 0
  Aug 24 12:09:11.049: INFO: Get pod busybox-c6ce23ae-3650-4a84-8525-517966a8ecca in namespace container-probe-5033
  Aug 24 12:09:13.059: INFO: Get pod busybox-c6ce23ae-3650-4a84-8525-517966a8ecca in namespace container-probe-5033
  Aug 24 12:09:15.074: INFO: Get pod busybox-c6ce23ae-3650-4a84-8525-517966a8ecca in namespace container-probe-5033
  Aug 24 12:09:17.083: INFO: Get pod busybox-c6ce23ae-3650-4a84-8525-517966a8ecca in namespace container-probe-5033
  Aug 24 12:09:19.093: INFO: Get pod busybox-c6ce23ae-3650-4a84-8525-517966a8ecca in namespace container-probe-5033
  Aug 24 12:09:21.104: INFO: Get pod busybox-c6ce23ae-3650-4a84-8525-517966a8ecca in namespace container-probe-5033
  Aug 24 12:09:23.114: INFO: Get pod busybox-c6ce23ae-3650-4a84-8525-517966a8ecca in namespace container-probe-5033
  Aug 24 12:09:25.124: INFO: Get pod busybox-c6ce23ae-3650-4a84-8525-517966a8ecca in namespace container-probe-5033
  Aug 24 12:09:27.133: INFO: Get pod busybox-c6ce23ae-3650-4a84-8525-517966a8ecca in namespace container-probe-5033
  Aug 24 12:09:29.144: INFO: Get pod busybox-c6ce23ae-3650-4a84-8525-517966a8ecca in namespace container-probe-5033
  Aug 24 12:09:31.154: INFO: Get pod busybox-c6ce23ae-3650-4a84-8525-517966a8ecca in namespace container-probe-5033
  Aug 24 12:09:33.167: INFO: Get pod busybox-c6ce23ae-3650-4a84-8525-517966a8ecca in namespace container-probe-5033
  Aug 24 12:09:35.179: INFO: Get pod busybox-c6ce23ae-3650-4a84-8525-517966a8ecca in namespace container-probe-5033
  Aug 24 12:09:37.189: INFO: Get pod busybox-c6ce23ae-3650-4a84-8525-517966a8ecca in namespace container-probe-5033
  Aug 24 12:09:39.199: INFO: Get pod busybox-c6ce23ae-3650-4a84-8525-517966a8ecca in namespace container-probe-5033
  Aug 24 12:09:41.209: INFO: Get pod busybox-c6ce23ae-3650-4a84-8525-517966a8ecca in namespace container-probe-5033
  Aug 24 12:09:43.220: INFO: Get pod busybox-c6ce23ae-3650-4a84-8525-517966a8ecca in namespace container-probe-5033
  Aug 24 12:09:45.231: INFO: Get pod busybox-c6ce23ae-3650-4a84-8525-517966a8ecca in namespace container-probe-5033
  Aug 24 12:09:47.244: INFO: Get pod busybox-c6ce23ae-3650-4a84-8525-517966a8ecca in namespace container-probe-5033
  Aug 24 12:09:49.253: INFO: Get pod busybox-c6ce23ae-3650-4a84-8525-517966a8ecca in namespace container-probe-5033
  Aug 24 12:09:51.263: INFO: Get pod busybox-c6ce23ae-3650-4a84-8525-517966a8ecca in namespace container-probe-5033
  Aug 24 12:09:53.273: INFO: Get pod busybox-c6ce23ae-3650-4a84-8525-517966a8ecca in namespace container-probe-5033
  Aug 24 12:09:55.283: INFO: Get pod busybox-c6ce23ae-3650-4a84-8525-517966a8ecca in namespace container-probe-5033
  Aug 24 12:09:57.295: INFO: Get pod busybox-c6ce23ae-3650-4a84-8525-517966a8ecca in namespace container-probe-5033
  Aug 24 12:09:59.305: INFO: Get pod busybox-c6ce23ae-3650-4a84-8525-517966a8ecca in namespace container-probe-5033
  Aug 24 12:10:01.316: INFO: Get pod busybox-c6ce23ae-3650-4a84-8525-517966a8ecca in namespace container-probe-5033
  Aug 24 12:10:01.316: INFO: Restart count of pod container-probe-5033/busybox-c6ce23ae-3650-4a84-8525-517966a8ecca is now 1 (50.273704379s elapsed)
  Aug 24 12:10:01.316: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: deleting the pod @ 08/24/23 12:10:01.326
  STEP: Destroying namespace "container-probe-5033" for this suite. @ 08/24/23 12:10:01.353
• [52.412 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-node] Security Context should support container.SecurityContext.RunAsUser And container.SecurityContext.RunAsGroup [LinuxOnly] [Conformance]
test/e2e/node/security_context.go:164
  STEP: Creating a kubernetes client @ 08/24/23 12:10:01.37
  Aug 24 12:10:01.370: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename security-context @ 08/24/23 12:10:01.371
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 12:10:01.447
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 12:10:01.453
  STEP: Creating a pod to test pod.Spec.SecurityContext.RunAsUser @ 08/24/23 12:10:01.46
  STEP: Saw pod success @ 08/24/23 12:10:05.51
  Aug 24 12:10:05.517: INFO: Trying to get logs from node scw-conformance-default-2af6d8b4c6264cc5b9e5e6 pod security-context-c4963c00-49c3-4604-ad69-831846223b98 container test-container: <nil>
  STEP: delete the pod @ 08/24/23 12:10:05.534
  Aug 24 12:10:05.561: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "security-context-350" for this suite. @ 08/24/23 12:10:05.571
• [4.219 seconds]
------------------------------
SSSSSS
------------------------------
[sig-cli] Kubectl client Kubectl expose should create services for rc  [Conformance]
test/e2e/kubectl/kubectl.go:1481
  STEP: Creating a kubernetes client @ 08/24/23 12:10:05.589
  Aug 24 12:10:05.589: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename kubectl @ 08/24/23 12:10:05.59
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 12:10:05.62
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 12:10:05.628
  STEP: creating Agnhost RC @ 08/24/23 12:10:05.635
  Aug 24 12:10:05.635: INFO: namespace kubectl-6662
  Aug 24 12:10:05.635: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1002171096 --namespace=kubectl-6662 create -f -'
  Aug 24 12:10:05.977: INFO: stderr: ""
  Aug 24 12:10:05.977: INFO: stdout: "replicationcontroller/agnhost-primary created\n"
  STEP: Waiting for Agnhost primary to start. @ 08/24/23 12:10:05.977
  Aug 24 12:10:06.985: INFO: Selector matched 1 pods for map[app:agnhost]
  Aug 24 12:10:06.985: INFO: Found 0 / 1
  Aug 24 12:10:07.986: INFO: Selector matched 1 pods for map[app:agnhost]
  Aug 24 12:10:07.986: INFO: Found 1 / 1
  Aug 24 12:10:07.986: INFO: WaitFor completed with timeout 5m0s.  Pods found = 1 out of 1
  Aug 24 12:10:07.994: INFO: Selector matched 1 pods for map[app:agnhost]
  Aug 24 12:10:07.994: INFO: ForEach: Found 1 pods from the filter.  Now looping through them.
  Aug 24 12:10:07.994: INFO: wait on agnhost-primary startup in kubectl-6662 
  Aug 24 12:10:07.994: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1002171096 --namespace=kubectl-6662 logs agnhost-primary-hkxxb agnhost-primary'
  Aug 24 12:10:08.135: INFO: stderr: ""
  Aug 24 12:10:08.135: INFO: stdout: "Paused\n"
  STEP: exposing RC @ 08/24/23 12:10:08.135
  Aug 24 12:10:08.135: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1002171096 --namespace=kubectl-6662 expose rc agnhost-primary --name=rm2 --port=1234 --target-port=6379'
  Aug 24 12:10:08.283: INFO: stderr: ""
  Aug 24 12:10:08.283: INFO: stdout: "service/rm2 exposed\n"
  Aug 24 12:10:08.293: INFO: Service rm2 in namespace kubectl-6662 found.
  STEP: exposing service @ 08/24/23 12:10:10.311
  Aug 24 12:10:10.311: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1002171096 --namespace=kubectl-6662 expose service rm2 --name=rm3 --port=2345 --target-port=6379'
  Aug 24 12:10:10.467: INFO: stderr: ""
  Aug 24 12:10:10.467: INFO: stdout: "service/rm3 exposed\n"
  Aug 24 12:10:10.477: INFO: Service rm3 in namespace kubectl-6662 found.
  Aug 24 12:10:12.494: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "kubectl-6662" for this suite. @ 08/24/23 12:10:12.505
• [6.932 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-node] ConfigMap should be consumable via environment variable [NodeConformance] [Conformance]
test/e2e/common/node/configmap.go:45
  STEP: Creating a kubernetes client @ 08/24/23 12:10:12.522
  Aug 24 12:10:12.522: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename configmap @ 08/24/23 12:10:12.522
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 12:10:12.553
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 12:10:12.561
  STEP: Creating configMap configmap-2638/configmap-test-801ee78e-0514-4729-9896-9ad6e7aae8df @ 08/24/23 12:10:12.568
  STEP: Creating a pod to test consume configMaps @ 08/24/23 12:10:12.579
  STEP: Saw pod success @ 08/24/23 12:10:16.626
  Aug 24 12:10:16.634: INFO: Trying to get logs from node scw-conformance-default-2af6d8b4c6264cc5b9e5e6 pod pod-configmaps-86040477-b853-44ab-9964-f83e32a33499 container env-test: <nil>
  STEP: delete the pod @ 08/24/23 12:10:16.653
  Aug 24 12:10:16.685: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "configmap-2638" for this suite. @ 08/24/23 12:10:16.695
• [4.188 seconds]
------------------------------
SSSSSSSSSSSSSS
------------------------------
[sig-apps] ControllerRevision [Serial] should manage the lifecycle of a ControllerRevision [Conformance]
test/e2e/apps/controller_revision.go:124
  STEP: Creating a kubernetes client @ 08/24/23 12:10:16.71
  Aug 24 12:10:16.710: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename controllerrevisions @ 08/24/23 12:10:16.712
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 12:10:16.747
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 12:10:16.753
  STEP: Creating DaemonSet "e2e-x6ncv-daemon-set" @ 08/24/23 12:10:16.803
  STEP: Check that daemon pods launch on every node of the cluster. @ 08/24/23 12:10:16.816
  Aug 24 12:10:16.867: INFO: Number of nodes with available pods controlled by daemonset e2e-x6ncv-daemon-set: 0
  Aug 24 12:10:16.867: INFO: Node scw-conformance-default-2af6d8b4c6264cc5b9e5e6 is running 0 daemon pod, expected 1
  Aug 24 12:10:17.884: INFO: Number of nodes with available pods controlled by daemonset e2e-x6ncv-daemon-set: 1
  Aug 24 12:10:17.884: INFO: Node scw-conformance-default-ecf11ec729064adba7e270 is running 0 daemon pod, expected 1
  Aug 24 12:10:18.888: INFO: Number of nodes with available pods controlled by daemonset e2e-x6ncv-daemon-set: 2
  Aug 24 12:10:18.888: INFO: Number of running nodes: 2, number of available pods: 2 in daemonset e2e-x6ncv-daemon-set
  STEP: Confirm DaemonSet "e2e-x6ncv-daemon-set" successfully created with "daemonset-name=e2e-x6ncv-daemon-set" label @ 08/24/23 12:10:18.896
  STEP: Listing all ControllerRevisions with label "daemonset-name=e2e-x6ncv-daemon-set" @ 08/24/23 12:10:18.913
  Aug 24 12:10:18.922: INFO: Located ControllerRevision: "e2e-x6ncv-daemon-set-68577b9954"
  STEP: Patching ControllerRevision "e2e-x6ncv-daemon-set-68577b9954" @ 08/24/23 12:10:18.932
  Aug 24 12:10:18.948: INFO: e2e-x6ncv-daemon-set-68577b9954 has been patched
  STEP: Create a new ControllerRevision @ 08/24/23 12:10:18.948
  Aug 24 12:10:18.960: INFO: Created ControllerRevision: e2e-x6ncv-daemon-set-647dbf9f8d
  STEP: Confirm that there are two ControllerRevisions @ 08/24/23 12:10:18.96
  Aug 24 12:10:18.961: INFO: Requesting list of ControllerRevisions to confirm quantity
  Aug 24 12:10:18.969: INFO: Found 2 ControllerRevisions
  STEP: Deleting ControllerRevision "e2e-x6ncv-daemon-set-68577b9954" @ 08/24/23 12:10:18.969
  STEP: Confirm that there is only one ControllerRevision @ 08/24/23 12:10:18.986
  Aug 24 12:10:18.986: INFO: Requesting list of ControllerRevisions to confirm quantity
  Aug 24 12:10:18.993: INFO: Found 1 ControllerRevisions
  STEP: Updating ControllerRevision "e2e-x6ncv-daemon-set-647dbf9f8d" @ 08/24/23 12:10:19.001
  Aug 24 12:10:19.022: INFO: e2e-x6ncv-daemon-set-647dbf9f8d has been updated
  STEP: Generate another ControllerRevision by patching the Daemonset @ 08/24/23 12:10:19.022
  W0824 12:10:19.037860      22 warnings.go:70] unknown field "updateStrategy"
  STEP: Confirm that there are two ControllerRevisions @ 08/24/23 12:10:19.038
  Aug 24 12:10:19.038: INFO: Requesting list of ControllerRevisions to confirm quantity
  Aug 24 12:10:20.046: INFO: Requesting list of ControllerRevisions to confirm quantity
  Aug 24 12:10:20.054: INFO: Found 2 ControllerRevisions
  STEP: Removing a ControllerRevision via 'DeleteCollection' with labelSelector: "e2e-x6ncv-daemon-set-647dbf9f8d=updated" @ 08/24/23 12:10:20.054
  STEP: Confirm that there is only one ControllerRevision @ 08/24/23 12:10:20.09
  Aug 24 12:10:20.090: INFO: Requesting list of ControllerRevisions to confirm quantity
  Aug 24 12:10:20.096: INFO: Found 1 ControllerRevisions
  Aug 24 12:10:20.107: INFO: ControllerRevision "e2e-x6ncv-daemon-set-5db558cd65" has revision 3
  STEP: Deleting DaemonSet "e2e-x6ncv-daemon-set" @ 08/24/23 12:10:20.114
  STEP: deleting DaemonSet.extensions e2e-x6ncv-daemon-set in namespace controllerrevisions-4306, will wait for the garbage collector to delete the pods @ 08/24/23 12:10:20.114
  Aug 24 12:10:20.183: INFO: Deleting DaemonSet.extensions e2e-x6ncv-daemon-set took: 12.040211ms
  Aug 24 12:10:20.283: INFO: Terminating DaemonSet.extensions e2e-x6ncv-daemon-set pods took: 100.662244ms
  Aug 24 12:10:23.455: INFO: Number of nodes with available pods controlled by daemonset e2e-x6ncv-daemon-set: 0
  Aug 24 12:10:23.455: INFO: Number of running nodes: 0, number of available pods: 0 in daemonset e2e-x6ncv-daemon-set
  Aug 24 12:10:23.463: INFO: daemonset: {"kind":"DaemonSetList","apiVersion":"apps/v1","metadata":{"resourceVersion":"3404962699"},"items":null}

  Aug 24 12:10:23.472: INFO: pods: {"kind":"PodList","apiVersion":"v1","metadata":{"resourceVersion":"3404962699"},"items":null}

  Aug 24 12:10:23.500: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "controllerrevisions-4306" for this suite. @ 08/24/23 12:10:23.508
• [6.813 seconds]
------------------------------
SSSSSSSSSSSSSS
------------------------------
[sig-storage] ConfigMap should be consumable from pods in volume with defaultMode set [LinuxOnly] [NodeConformance] [Conformance]
test/e2e/common/storage/configmap_volume.go:57
  STEP: Creating a kubernetes client @ 08/24/23 12:10:23.525
  Aug 24 12:10:23.525: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename configmap @ 08/24/23 12:10:23.525
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 12:10:23.559
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 12:10:23.566
  STEP: Creating configMap with name configmap-test-volume-64b125e2-36e2-4aa2-92d7-9e956b8658a4 @ 08/24/23 12:10:23.573
  STEP: Creating a pod to test consume configMaps @ 08/24/23 12:10:23.584
  STEP: Saw pod success @ 08/24/23 12:10:27.676
  Aug 24 12:10:27.682: INFO: Trying to get logs from node scw-conformance-default-2af6d8b4c6264cc5b9e5e6 pod pod-configmaps-63441df4-6f02-4094-9c9e-28e1e82183a5 container agnhost-container: <nil>
  STEP: delete the pod @ 08/24/23 12:10:27.701
  Aug 24 12:10:27.735: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "configmap-4505" for this suite. @ 08/24/23 12:10:27.744
• [4.235 seconds]
------------------------------
SSSSSSSS
------------------------------
[sig-cli] Kubectl client Kubectl diff should check if kubectl diff finds a difference for Deployments [Conformance]
test/e2e/kubectl/kubectl.go:996
  STEP: Creating a kubernetes client @ 08/24/23 12:10:27.761
  Aug 24 12:10:27.761: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename kubectl @ 08/24/23 12:10:27.763
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 12:10:27.792
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 12:10:27.798
  STEP: create deployment with httpd image @ 08/24/23 12:10:27.805
  Aug 24 12:10:27.805: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1002171096 --namespace=kubectl-7123 create -f -'
  Aug 24 12:10:28.124: INFO: stderr: ""
  Aug 24 12:10:28.124: INFO: stdout: "deployment.apps/httpd-deployment created\n"
  STEP: verify diff finds difference between live and declared image @ 08/24/23 12:10:28.124
  Aug 24 12:10:28.124: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1002171096 --namespace=kubectl-7123 diff -f -'
  Aug 24 12:10:28.385: INFO: rc: 1
  Aug 24 12:10:28.386: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1002171096 --namespace=kubectl-7123 delete -f -'
  Aug 24 12:10:28.472: INFO: stderr: ""
  Aug 24 12:10:28.472: INFO: stdout: "deployment.apps \"httpd-deployment\" deleted\n"
  Aug 24 12:10:28.472: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "kubectl-7123" for this suite. @ 08/24/23 12:10:28.482
• [0.733 seconds]
------------------------------
SSSSSSSSS
------------------------------
[sig-api-machinery] FieldValidation should detect unknown metadata fields in both the root and embedded object of a CR [Conformance]
test/e2e/apimachinery/field_validation.go:474
  STEP: Creating a kubernetes client @ 08/24/23 12:10:28.495
  Aug 24 12:10:28.495: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename field-validation @ 08/24/23 12:10:28.496
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 12:10:28.551
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 12:10:28.557
  Aug 24 12:10:28.563: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  W0824 12:10:31.199670      22 warnings.go:70] unknown field "alpha"
  W0824 12:10:31.199702      22 warnings.go:70] unknown field "beta"
  W0824 12:10:31.199709      22 warnings.go:70] unknown field "delta"
  W0824 12:10:31.199716      22 warnings.go:70] unknown field "epsilon"
  W0824 12:10:31.199722      22 warnings.go:70] unknown field "gamma"
  Aug 24 12:10:31.759: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "field-validation-9147" for this suite. @ 08/24/23 12:10:31.803
• [3.324 seconds]
------------------------------
SSSSSSSSSSS
------------------------------
[sig-node] Probing container should *not* be restarted with a tcp:8080 liveness probe [NodeConformance] [Conformance]
test/e2e/common/node/container_probe.go:183
  STEP: Creating a kubernetes client @ 08/24/23 12:10:31.82
  Aug 24 12:10:31.820: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename container-probe @ 08/24/23 12:10:31.821
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 12:10:31.854
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 12:10:31.86
  STEP: Creating pod liveness-8ed841cc-e70e-4a00-8e3f-19c48efe0a8a in namespace container-probe-3990 @ 08/24/23 12:10:31.868
  STEP: checking the pod's current state and verifying that restartCount is present @ 08/24/23 12:10:33.905
  Aug 24 12:10:33.914: INFO: Initial restart count of pod liveness-8ed841cc-e70e-4a00-8e3f-19c48efe0a8a is 0
  Aug 24 12:10:33.921: INFO: Get pod liveness-8ed841cc-e70e-4a00-8e3f-19c48efe0a8a in namespace container-probe-3990
  Aug 24 12:10:35.935: INFO: Get pod liveness-8ed841cc-e70e-4a00-8e3f-19c48efe0a8a in namespace container-probe-3990
  Aug 24 12:10:37.944: INFO: Get pod liveness-8ed841cc-e70e-4a00-8e3f-19c48efe0a8a in namespace container-probe-3990
  Aug 24 12:10:39.955: INFO: Get pod liveness-8ed841cc-e70e-4a00-8e3f-19c48efe0a8a in namespace container-probe-3990
  Aug 24 12:10:41.965: INFO: Get pod liveness-8ed841cc-e70e-4a00-8e3f-19c48efe0a8a in namespace container-probe-3990
  Aug 24 12:10:43.976: INFO: Get pod liveness-8ed841cc-e70e-4a00-8e3f-19c48efe0a8a in namespace container-probe-3990
  Aug 24 12:10:45.987: INFO: Get pod liveness-8ed841cc-e70e-4a00-8e3f-19c48efe0a8a in namespace container-probe-3990
  Aug 24 12:10:47.997: INFO: Get pod liveness-8ed841cc-e70e-4a00-8e3f-19c48efe0a8a in namespace container-probe-3990
  Aug 24 12:10:50.007: INFO: Get pod liveness-8ed841cc-e70e-4a00-8e3f-19c48efe0a8a in namespace container-probe-3990
  Aug 24 12:10:52.018: INFO: Get pod liveness-8ed841cc-e70e-4a00-8e3f-19c48efe0a8a in namespace container-probe-3990
  Aug 24 12:10:54.027: INFO: Get pod liveness-8ed841cc-e70e-4a00-8e3f-19c48efe0a8a in namespace container-probe-3990
  Aug 24 12:10:56.038: INFO: Get pod liveness-8ed841cc-e70e-4a00-8e3f-19c48efe0a8a in namespace container-probe-3990
  Aug 24 12:10:58.049: INFO: Get pod liveness-8ed841cc-e70e-4a00-8e3f-19c48efe0a8a in namespace container-probe-3990
  Aug 24 12:11:00.059: INFO: Get pod liveness-8ed841cc-e70e-4a00-8e3f-19c48efe0a8a in namespace container-probe-3990
  Aug 24 12:11:02.070: INFO: Get pod liveness-8ed841cc-e70e-4a00-8e3f-19c48efe0a8a in namespace container-probe-3990
  Aug 24 12:11:04.081: INFO: Get pod liveness-8ed841cc-e70e-4a00-8e3f-19c48efe0a8a in namespace container-probe-3990
  Aug 24 12:11:06.094: INFO: Get pod liveness-8ed841cc-e70e-4a00-8e3f-19c48efe0a8a in namespace container-probe-3990
  Aug 24 12:11:08.104: INFO: Get pod liveness-8ed841cc-e70e-4a00-8e3f-19c48efe0a8a in namespace container-probe-3990
  Aug 24 12:11:10.113: INFO: Get pod liveness-8ed841cc-e70e-4a00-8e3f-19c48efe0a8a in namespace container-probe-3990
  Aug 24 12:11:12.125: INFO: Get pod liveness-8ed841cc-e70e-4a00-8e3f-19c48efe0a8a in namespace container-probe-3990
  Aug 24 12:11:14.136: INFO: Get pod liveness-8ed841cc-e70e-4a00-8e3f-19c48efe0a8a in namespace container-probe-3990
  Aug 24 12:11:16.148: INFO: Get pod liveness-8ed841cc-e70e-4a00-8e3f-19c48efe0a8a in namespace container-probe-3990
  Aug 24 12:11:18.159: INFO: Get pod liveness-8ed841cc-e70e-4a00-8e3f-19c48efe0a8a in namespace container-probe-3990
  Aug 24 12:11:20.170: INFO: Get pod liveness-8ed841cc-e70e-4a00-8e3f-19c48efe0a8a in namespace container-probe-3990
  Aug 24 12:11:22.183: INFO: Get pod liveness-8ed841cc-e70e-4a00-8e3f-19c48efe0a8a in namespace container-probe-3990
  Aug 24 12:11:24.191: INFO: Get pod liveness-8ed841cc-e70e-4a00-8e3f-19c48efe0a8a in namespace container-probe-3990
  Aug 24 12:11:26.205: INFO: Get pod liveness-8ed841cc-e70e-4a00-8e3f-19c48efe0a8a in namespace container-probe-3990
  Aug 24 12:11:28.215: INFO: Get pod liveness-8ed841cc-e70e-4a00-8e3f-19c48efe0a8a in namespace container-probe-3990
  Aug 24 12:11:30.226: INFO: Get pod liveness-8ed841cc-e70e-4a00-8e3f-19c48efe0a8a in namespace container-probe-3990
  Aug 24 12:11:32.237: INFO: Get pod liveness-8ed841cc-e70e-4a00-8e3f-19c48efe0a8a in namespace container-probe-3990
  Aug 24 12:11:34.254: INFO: Get pod liveness-8ed841cc-e70e-4a00-8e3f-19c48efe0a8a in namespace container-probe-3990
  Aug 24 12:11:36.266: INFO: Get pod liveness-8ed841cc-e70e-4a00-8e3f-19c48efe0a8a in namespace container-probe-3990
  Aug 24 12:11:38.277: INFO: Get pod liveness-8ed841cc-e70e-4a00-8e3f-19c48efe0a8a in namespace container-probe-3990
  Aug 24 12:11:40.287: INFO: Get pod liveness-8ed841cc-e70e-4a00-8e3f-19c48efe0a8a in namespace container-probe-3990
  Aug 24 12:11:42.299: INFO: Get pod liveness-8ed841cc-e70e-4a00-8e3f-19c48efe0a8a in namespace container-probe-3990
  Aug 24 12:11:44.309: INFO: Get pod liveness-8ed841cc-e70e-4a00-8e3f-19c48efe0a8a in namespace container-probe-3990
  Aug 24 12:11:46.320: INFO: Get pod liveness-8ed841cc-e70e-4a00-8e3f-19c48efe0a8a in namespace container-probe-3990
  Aug 24 12:11:48.333: INFO: Get pod liveness-8ed841cc-e70e-4a00-8e3f-19c48efe0a8a in namespace container-probe-3990
  Aug 24 12:11:50.357: INFO: Get pod liveness-8ed841cc-e70e-4a00-8e3f-19c48efe0a8a in namespace container-probe-3990
  Aug 24 12:11:52.371: INFO: Get pod liveness-8ed841cc-e70e-4a00-8e3f-19c48efe0a8a in namespace container-probe-3990
  Aug 24 12:11:54.382: INFO: Get pod liveness-8ed841cc-e70e-4a00-8e3f-19c48efe0a8a in namespace container-probe-3990
  Aug 24 12:11:56.393: INFO: Get pod liveness-8ed841cc-e70e-4a00-8e3f-19c48efe0a8a in namespace container-probe-3990
  Aug 24 12:11:58.403: INFO: Get pod liveness-8ed841cc-e70e-4a00-8e3f-19c48efe0a8a in namespace container-probe-3990
  Aug 24 12:12:00.414: INFO: Get pod liveness-8ed841cc-e70e-4a00-8e3f-19c48efe0a8a in namespace container-probe-3990
  Aug 24 12:12:02.426: INFO: Get pod liveness-8ed841cc-e70e-4a00-8e3f-19c48efe0a8a in namespace container-probe-3990
  Aug 24 12:12:04.437: INFO: Get pod liveness-8ed841cc-e70e-4a00-8e3f-19c48efe0a8a in namespace container-probe-3990
  Aug 24 12:12:06.450: INFO: Get pod liveness-8ed841cc-e70e-4a00-8e3f-19c48efe0a8a in namespace container-probe-3990
  Aug 24 12:12:08.461: INFO: Get pod liveness-8ed841cc-e70e-4a00-8e3f-19c48efe0a8a in namespace container-probe-3990
  Aug 24 12:12:10.471: INFO: Get pod liveness-8ed841cc-e70e-4a00-8e3f-19c48efe0a8a in namespace container-probe-3990
  Aug 24 12:12:12.485: INFO: Get pod liveness-8ed841cc-e70e-4a00-8e3f-19c48efe0a8a in namespace container-probe-3990
  Aug 24 12:12:14.495: INFO: Get pod liveness-8ed841cc-e70e-4a00-8e3f-19c48efe0a8a in namespace container-probe-3990
  Aug 24 12:12:16.506: INFO: Get pod liveness-8ed841cc-e70e-4a00-8e3f-19c48efe0a8a in namespace container-probe-3990
  Aug 24 12:12:18.517: INFO: Get pod liveness-8ed841cc-e70e-4a00-8e3f-19c48efe0a8a in namespace container-probe-3990
  Aug 24 12:12:20.526: INFO: Get pod liveness-8ed841cc-e70e-4a00-8e3f-19c48efe0a8a in namespace container-probe-3990
  Aug 24 12:12:22.565: INFO: Get pod liveness-8ed841cc-e70e-4a00-8e3f-19c48efe0a8a in namespace container-probe-3990
  Aug 24 12:12:24.574: INFO: Get pod liveness-8ed841cc-e70e-4a00-8e3f-19c48efe0a8a in namespace container-probe-3990
  Aug 24 12:12:26.585: INFO: Get pod liveness-8ed841cc-e70e-4a00-8e3f-19c48efe0a8a in namespace container-probe-3990
  Aug 24 12:12:28.597: INFO: Get pod liveness-8ed841cc-e70e-4a00-8e3f-19c48efe0a8a in namespace container-probe-3990
  Aug 24 12:12:30.607: INFO: Get pod liveness-8ed841cc-e70e-4a00-8e3f-19c48efe0a8a in namespace container-probe-3990
  Aug 24 12:12:32.615: INFO: Get pod liveness-8ed841cc-e70e-4a00-8e3f-19c48efe0a8a in namespace container-probe-3990
  Aug 24 12:12:34.626: INFO: Get pod liveness-8ed841cc-e70e-4a00-8e3f-19c48efe0a8a in namespace container-probe-3990
  Aug 24 12:12:36.638: INFO: Get pod liveness-8ed841cc-e70e-4a00-8e3f-19c48efe0a8a in namespace container-probe-3990
  Aug 24 12:12:38.647: INFO: Get pod liveness-8ed841cc-e70e-4a00-8e3f-19c48efe0a8a in namespace container-probe-3990
  Aug 24 12:12:40.656: INFO: Get pod liveness-8ed841cc-e70e-4a00-8e3f-19c48efe0a8a in namespace container-probe-3990
  Aug 24 12:12:42.666: INFO: Get pod liveness-8ed841cc-e70e-4a00-8e3f-19c48efe0a8a in namespace container-probe-3990
  Aug 24 12:12:44.676: INFO: Get pod liveness-8ed841cc-e70e-4a00-8e3f-19c48efe0a8a in namespace container-probe-3990
  Aug 24 12:12:46.687: INFO: Get pod liveness-8ed841cc-e70e-4a00-8e3f-19c48efe0a8a in namespace container-probe-3990
  Aug 24 12:12:48.696: INFO: Get pod liveness-8ed841cc-e70e-4a00-8e3f-19c48efe0a8a in namespace container-probe-3990
  Aug 24 12:12:50.708: INFO: Get pod liveness-8ed841cc-e70e-4a00-8e3f-19c48efe0a8a in namespace container-probe-3990
  Aug 24 12:12:52.717: INFO: Get pod liveness-8ed841cc-e70e-4a00-8e3f-19c48efe0a8a in namespace container-probe-3990
  Aug 24 12:12:54.728: INFO: Get pod liveness-8ed841cc-e70e-4a00-8e3f-19c48efe0a8a in namespace container-probe-3990
  Aug 24 12:12:56.738: INFO: Get pod liveness-8ed841cc-e70e-4a00-8e3f-19c48efe0a8a in namespace container-probe-3990
  Aug 24 12:12:58.749: INFO: Get pod liveness-8ed841cc-e70e-4a00-8e3f-19c48efe0a8a in namespace container-probe-3990
  Aug 24 12:13:00.758: INFO: Get pod liveness-8ed841cc-e70e-4a00-8e3f-19c48efe0a8a in namespace container-probe-3990
  Aug 24 12:13:02.769: INFO: Get pod liveness-8ed841cc-e70e-4a00-8e3f-19c48efe0a8a in namespace container-probe-3990
  Aug 24 12:13:04.780: INFO: Get pod liveness-8ed841cc-e70e-4a00-8e3f-19c48efe0a8a in namespace container-probe-3990
  Aug 24 12:13:06.790: INFO: Get pod liveness-8ed841cc-e70e-4a00-8e3f-19c48efe0a8a in namespace container-probe-3990
  Aug 24 12:13:08.799: INFO: Get pod liveness-8ed841cc-e70e-4a00-8e3f-19c48efe0a8a in namespace container-probe-3990
  Aug 24 12:13:10.811: INFO: Get pod liveness-8ed841cc-e70e-4a00-8e3f-19c48efe0a8a in namespace container-probe-3990
  Aug 24 12:13:12.821: INFO: Get pod liveness-8ed841cc-e70e-4a00-8e3f-19c48efe0a8a in namespace container-probe-3990
  Aug 24 12:13:14.831: INFO: Get pod liveness-8ed841cc-e70e-4a00-8e3f-19c48efe0a8a in namespace container-probe-3990
  Aug 24 12:13:16.844: INFO: Get pod liveness-8ed841cc-e70e-4a00-8e3f-19c48efe0a8a in namespace container-probe-3990
  Aug 24 12:13:18.855: INFO: Get pod liveness-8ed841cc-e70e-4a00-8e3f-19c48efe0a8a in namespace container-probe-3990
  Aug 24 12:13:20.867: INFO: Get pod liveness-8ed841cc-e70e-4a00-8e3f-19c48efe0a8a in namespace container-probe-3990
  Aug 24 12:13:22.876: INFO: Get pod liveness-8ed841cc-e70e-4a00-8e3f-19c48efe0a8a in namespace container-probe-3990
  Aug 24 12:13:24.886: INFO: Get pod liveness-8ed841cc-e70e-4a00-8e3f-19c48efe0a8a in namespace container-probe-3990
  Aug 24 12:13:26.899: INFO: Get pod liveness-8ed841cc-e70e-4a00-8e3f-19c48efe0a8a in namespace container-probe-3990
  Aug 24 12:13:28.909: INFO: Get pod liveness-8ed841cc-e70e-4a00-8e3f-19c48efe0a8a in namespace container-probe-3990
  Aug 24 12:13:30.922: INFO: Get pod liveness-8ed841cc-e70e-4a00-8e3f-19c48efe0a8a in namespace container-probe-3990
  Aug 24 12:13:32.934: INFO: Get pod liveness-8ed841cc-e70e-4a00-8e3f-19c48efe0a8a in namespace container-probe-3990
  Aug 24 12:13:34.944: INFO: Get pod liveness-8ed841cc-e70e-4a00-8e3f-19c48efe0a8a in namespace container-probe-3990
  Aug 24 12:13:36.957: INFO: Get pod liveness-8ed841cc-e70e-4a00-8e3f-19c48efe0a8a in namespace container-probe-3990
  Aug 24 12:13:38.967: INFO: Get pod liveness-8ed841cc-e70e-4a00-8e3f-19c48efe0a8a in namespace container-probe-3990
  Aug 24 12:13:40.977: INFO: Get pod liveness-8ed841cc-e70e-4a00-8e3f-19c48efe0a8a in namespace container-probe-3990
  Aug 24 12:13:42.986: INFO: Get pod liveness-8ed841cc-e70e-4a00-8e3f-19c48efe0a8a in namespace container-probe-3990
  Aug 24 12:13:44.997: INFO: Get pod liveness-8ed841cc-e70e-4a00-8e3f-19c48efe0a8a in namespace container-probe-3990
  Aug 24 12:13:47.008: INFO: Get pod liveness-8ed841cc-e70e-4a00-8e3f-19c48efe0a8a in namespace container-probe-3990
  Aug 24 12:13:49.019: INFO: Get pod liveness-8ed841cc-e70e-4a00-8e3f-19c48efe0a8a in namespace container-probe-3990
  Aug 24 12:13:51.054: INFO: Get pod liveness-8ed841cc-e70e-4a00-8e3f-19c48efe0a8a in namespace container-probe-3990
  Aug 24 12:13:53.063: INFO: Get pod liveness-8ed841cc-e70e-4a00-8e3f-19c48efe0a8a in namespace container-probe-3990
  Aug 24 12:13:55.074: INFO: Get pod liveness-8ed841cc-e70e-4a00-8e3f-19c48efe0a8a in namespace container-probe-3990
  Aug 24 12:13:57.088: INFO: Get pod liveness-8ed841cc-e70e-4a00-8e3f-19c48efe0a8a in namespace container-probe-3990
  Aug 24 12:13:59.098: INFO: Get pod liveness-8ed841cc-e70e-4a00-8e3f-19c48efe0a8a in namespace container-probe-3990
  Aug 24 12:14:01.111: INFO: Get pod liveness-8ed841cc-e70e-4a00-8e3f-19c48efe0a8a in namespace container-probe-3990
  Aug 24 12:14:03.121: INFO: Get pod liveness-8ed841cc-e70e-4a00-8e3f-19c48efe0a8a in namespace container-probe-3990
  Aug 24 12:14:05.131: INFO: Get pod liveness-8ed841cc-e70e-4a00-8e3f-19c48efe0a8a in namespace container-probe-3990
  Aug 24 12:14:07.141: INFO: Get pod liveness-8ed841cc-e70e-4a00-8e3f-19c48efe0a8a in namespace container-probe-3990
  Aug 24 12:14:09.151: INFO: Get pod liveness-8ed841cc-e70e-4a00-8e3f-19c48efe0a8a in namespace container-probe-3990
  Aug 24 12:14:11.164: INFO: Get pod liveness-8ed841cc-e70e-4a00-8e3f-19c48efe0a8a in namespace container-probe-3990
  Aug 24 12:14:13.176: INFO: Get pod liveness-8ed841cc-e70e-4a00-8e3f-19c48efe0a8a in namespace container-probe-3990
  Aug 24 12:14:15.187: INFO: Get pod liveness-8ed841cc-e70e-4a00-8e3f-19c48efe0a8a in namespace container-probe-3990
  Aug 24 12:14:17.199: INFO: Get pod liveness-8ed841cc-e70e-4a00-8e3f-19c48efe0a8a in namespace container-probe-3990
  Aug 24 12:14:19.210: INFO: Get pod liveness-8ed841cc-e70e-4a00-8e3f-19c48efe0a8a in namespace container-probe-3990
  Aug 24 12:14:21.221: INFO: Get pod liveness-8ed841cc-e70e-4a00-8e3f-19c48efe0a8a in namespace container-probe-3990
  Aug 24 12:14:23.231: INFO: Get pod liveness-8ed841cc-e70e-4a00-8e3f-19c48efe0a8a in namespace container-probe-3990
  Aug 24 12:14:25.241: INFO: Get pod liveness-8ed841cc-e70e-4a00-8e3f-19c48efe0a8a in namespace container-probe-3990
  Aug 24 12:14:27.252: INFO: Get pod liveness-8ed841cc-e70e-4a00-8e3f-19c48efe0a8a in namespace container-probe-3990
  Aug 24 12:14:29.261: INFO: Get pod liveness-8ed841cc-e70e-4a00-8e3f-19c48efe0a8a in namespace container-probe-3990
  Aug 24 12:14:31.271: INFO: Get pod liveness-8ed841cc-e70e-4a00-8e3f-19c48efe0a8a in namespace container-probe-3990
  Aug 24 12:14:33.284: INFO: Get pod liveness-8ed841cc-e70e-4a00-8e3f-19c48efe0a8a in namespace container-probe-3990
  Aug 24 12:14:35.284: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: deleting the pod @ 08/24/23 12:14:35.295
  STEP: Destroying namespace "container-probe-3990" for this suite. @ 08/24/23 12:14:35.322
• [243.518 seconds]
------------------------------
SSSSSS
------------------------------
[sig-node] Sysctls [LinuxOnly] [NodeConformance] should reject invalid sysctls [MinimumKubeletVersion:1.21] [Conformance]
test/e2e/common/node/sysctl.go:123
  STEP: Creating a kubernetes client @ 08/24/23 12:14:35.338
  Aug 24 12:14:35.339: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename sysctl @ 08/24/23 12:14:35.34
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 12:14:35.373
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 12:14:35.379
  STEP: Creating a pod with one valid and two invalid sysctls @ 08/24/23 12:14:35.386
  Aug 24 12:14:35.399: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "sysctl-8516" for this suite. @ 08/24/23 12:14:35.409
• [0.085 seconds]
------------------------------
[sig-api-machinery] ResourceQuota should verify ResourceQuota with terminating scopes. [Conformance]
test/e2e/apimachinery/resource_quota.go:693
  STEP: Creating a kubernetes client @ 08/24/23 12:14:35.424
  Aug 24 12:14:35.424: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename resourcequota @ 08/24/23 12:14:35.425
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 12:14:35.46
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 12:14:35.465
  STEP: Creating a ResourceQuota with terminating scope @ 08/24/23 12:14:35.471
  STEP: Ensuring ResourceQuota status is calculated @ 08/24/23 12:14:35.482
  STEP: Creating a ResourceQuota with not terminating scope @ 08/24/23 12:14:37.493
  STEP: Ensuring ResourceQuota status is calculated @ 08/24/23 12:14:37.505
  STEP: Creating a long running pod @ 08/24/23 12:14:39.515
  STEP: Ensuring resource quota with not terminating scope captures the pod usage @ 08/24/23 12:14:39.549
  STEP: Ensuring resource quota with terminating scope ignored the pod usage @ 08/24/23 12:14:41.557
  STEP: Deleting the pod @ 08/24/23 12:14:43.567
  STEP: Ensuring resource quota status released the pod usage @ 08/24/23 12:14:43.595
  STEP: Creating a terminating pod @ 08/24/23 12:14:45.604
  STEP: Ensuring resource quota with terminating scope captures the pod usage @ 08/24/23 12:14:45.629
  STEP: Ensuring resource quota with not terminating scope ignored the pod usage @ 08/24/23 12:14:47.641
  STEP: Deleting the pod @ 08/24/23 12:14:49.65
  STEP: Ensuring resource quota status released the pod usage @ 08/24/23 12:14:49.676
  Aug 24 12:14:51.684: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "resourcequota-6506" for this suite. @ 08/24/23 12:14:51.695
• [16.289 seconds]
------------------------------
[sig-storage] Downward API volume should update labels on modification [NodeConformance] [Conformance]
test/e2e/common/storage/downwardapi_volume.go:131
  STEP: Creating a kubernetes client @ 08/24/23 12:14:51.713
  Aug 24 12:14:51.713: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename downward-api @ 08/24/23 12:14:51.714
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 12:14:51.743
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 12:14:51.75
  STEP: Creating the pod @ 08/24/23 12:14:51.756
  Aug 24 12:14:54.428: INFO: Successfully updated pod "labelsupdate45033801-90be-4a20-9d0c-9cfba049308f"
  Aug 24 12:14:56.470: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "downward-api-3632" for this suite. @ 08/24/23 12:14:56.48
• [4.782 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should mutate configmap [Conformance]
test/e2e/apimachinery/webhook.go:250
  STEP: Creating a kubernetes client @ 08/24/23 12:14:56.497
  Aug 24 12:14:56.497: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename webhook @ 08/24/23 12:14:56.498
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 12:14:56.527
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 12:14:56.534
  STEP: Setting up server cert @ 08/24/23 12:14:56.581
  STEP: Create role binding to let webhook read extension-apiserver-authentication @ 08/24/23 12:14:56.861
  STEP: Deploying the webhook pod @ 08/24/23 12:14:56.881
  STEP: Wait for the deployment to be ready @ 08/24/23 12:14:56.906
  Aug 24 12:14:56.923: INFO: deployment "sample-webhook-deployment" doesn't have the required revision set
  STEP: Deploying the webhook service @ 08/24/23 12:14:58.951
  STEP: Verifying the service has paired with the endpoint @ 08/24/23 12:14:58.976
  Aug 24 12:14:59.977: INFO: Waiting for amount of service:e2e-test-webhook endpoints to be 1
  STEP: Registering the mutating configmap webhook via the AdmissionRegistration API @ 08/24/23 12:14:59.992
  STEP: create a configmap that should be updated by the webhook @ 08/24/23 12:15:00.036
  Aug 24 12:15:00.075: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "webhook-5706" for this suite. @ 08/24/23 12:15:00.185
  STEP: Destroying namespace "webhook-markers-1196" for this suite. @ 08/24/23 12:15:00.201
• [3.764 seconds]
------------------------------
SSSSSSSSSS
------------------------------
[sig-apps] DisruptionController should update/patch PodDisruptionBudget status [Conformance]
test/e2e/apps/disruption.go:164
  STEP: Creating a kubernetes client @ 08/24/23 12:15:00.263
  Aug 24 12:15:00.263: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename disruption @ 08/24/23 12:15:00.265
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 12:15:00.294
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 12:15:00.301
  STEP: Waiting for the pdb to be processed @ 08/24/23 12:15:00.319
  STEP: Updating PodDisruptionBudget status @ 08/24/23 12:15:02.334
  STEP: Waiting for all pods to be running @ 08/24/23 12:15:02.352
  Aug 24 12:15:02.366: INFO: running pods: 0 < 1
  STEP: locating a running pod @ 08/24/23 12:15:04.375
  STEP: Waiting for the pdb to be processed @ 08/24/23 12:15:04.406
  STEP: Patching PodDisruptionBudget status @ 08/24/23 12:15:04.422
  STEP: Waiting for the pdb to be processed @ 08/24/23 12:15:04.445
  Aug 24 12:15:04.453: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "disruption-2173" for this suite. @ 08/24/23 12:15:04.463
• [4.212 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-node] Kubelet when scheduling a read only busybox container should not write to root filesystem [LinuxOnly] [NodeConformance] [Conformance]
test/e2e/common/node/kubelet.go:184
  STEP: Creating a kubernetes client @ 08/24/23 12:15:04.476
  Aug 24 12:15:04.476: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename kubelet-test @ 08/24/23 12:15:04.477
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 12:15:04.506
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 12:15:04.512
  Aug 24 12:15:06.594: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "kubelet-test-5833" for this suite. @ 08/24/23 12:15:06.605
• [2.148 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-storage] Secrets should be able to mount in a volume regardless of a different secret existing with same name in different namespace [NodeConformance] [Conformance]
test/e2e/common/storage/secrets_volume.go:99
  STEP: Creating a kubernetes client @ 08/24/23 12:15:06.625
  Aug 24 12:15:06.625: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename secrets @ 08/24/23 12:15:06.626
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 12:15:06.658
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 12:15:06.665
  STEP: Creating secret with name secret-test-bb2218b7-d73d-4861-937b-f295db33ace8 @ 08/24/23 12:15:06.714
  STEP: Creating a pod to test consume secrets @ 08/24/23 12:15:06.725
  STEP: Saw pod success @ 08/24/23 12:15:10.793
  Aug 24 12:15:10.801: INFO: Trying to get logs from node scw-conformance-default-2af6d8b4c6264cc5b9e5e6 pod pod-secrets-752babec-a3a4-4d81-8eab-2b1972fd6a29 container secret-volume-test: <nil>
  STEP: delete the pod @ 08/24/23 12:15:10.817
  Aug 24 12:15:10.851: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "secrets-544" for this suite. @ 08/24/23 12:15:10.86
  STEP: Destroying namespace "secret-namespace-7327" for this suite. @ 08/24/23 12:15:10.877
• [4.268 seconds]
------------------------------
SSSSSSSSSSSSSSSSS
------------------------------
[sig-node] InitContainer [NodeConformance] should not start app containers and fail the pod if init containers fail on a RestartNever pod [Conformance]
test/e2e/common/node/init_container.go:459
  STEP: Creating a kubernetes client @ 08/24/23 12:15:10.895
  Aug 24 12:15:10.895: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename init-container @ 08/24/23 12:15:10.896
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 12:15:10.927
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 12:15:10.934
  STEP: creating the pod @ 08/24/23 12:15:10.952
  Aug 24 12:15:10.952: INFO: PodSpec: initContainers in spec.initContainers
  Aug 24 12:15:14.696: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "init-container-8158" for this suite. @ 08/24/23 12:15:14.707
• [3.829 seconds]
------------------------------
SS
------------------------------
[sig-apps] StatefulSet Basic StatefulSet functionality [StatefulSetBasic] should have a working scale subresource [Conformance]
test/e2e/apps/statefulset.go:854
  STEP: Creating a kubernetes client @ 08/24/23 12:15:14.724
  Aug 24 12:15:14.724: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename statefulset @ 08/24/23 12:15:14.726
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 12:15:14.759
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 12:15:14.766
  STEP: Creating service test in namespace statefulset-367 @ 08/24/23 12:15:14.774
  STEP: Creating statefulset ss in namespace statefulset-367 @ 08/24/23 12:15:14.784
  Aug 24 12:15:14.803: INFO: Found 0 stateful pods, waiting for 1
  Aug 24 12:15:24.814: INFO: Waiting for pod ss-0 to enter Running - Ready=true, currently Running - Ready=true
  STEP: getting scale subresource @ 08/24/23 12:15:24.834
  STEP: updating a scale subresource @ 08/24/23 12:15:24.843
  STEP: verifying the statefulset Spec.Replicas was modified @ 08/24/23 12:15:24.854
  STEP: Patch a scale subresource @ 08/24/23 12:15:24.866
  STEP: verifying the statefulset Spec.Replicas was modified @ 08/24/23 12:15:24.88
  Aug 24 12:15:24.889: INFO: Deleting all statefulset in ns statefulset-367
  Aug 24 12:15:24.897: INFO: Scaling statefulset ss to 0
  Aug 24 12:15:34.978: INFO: Waiting for statefulset status.replicas updated to 0
  Aug 24 12:15:34.987: INFO: Deleting statefulset ss
  Aug 24 12:15:35.015: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "statefulset-367" for this suite. @ 08/24/23 12:15:35.026
• [20.316 seconds]
------------------------------
SSSSSSSSS
------------------------------
[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should mutate pod and apply defaults after mutation [Conformance]
test/e2e/apimachinery/webhook.go:261
  STEP: Creating a kubernetes client @ 08/24/23 12:15:35.041
  Aug 24 12:15:35.041: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename webhook @ 08/24/23 12:15:35.041
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 12:15:35.07
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 12:15:35.077
  STEP: Setting up server cert @ 08/24/23 12:15:35.121
  STEP: Create role binding to let webhook read extension-apiserver-authentication @ 08/24/23 12:15:35.581
  STEP: Deploying the webhook pod @ 08/24/23 12:15:35.599
  STEP: Wait for the deployment to be ready @ 08/24/23 12:15:35.625
  Aug 24 12:15:35.644: INFO: deployment "sample-webhook-deployment" doesn't have the required revision set
  STEP: Deploying the webhook service @ 08/24/23 12:15:37.67
  STEP: Verifying the service has paired with the endpoint @ 08/24/23 12:15:37.701
  Aug 24 12:15:38.701: INFO: Waiting for amount of service:e2e-test-webhook endpoints to be 1
  STEP: Registering the mutating pod webhook via the AdmissionRegistration API @ 08/24/23 12:15:38.72
  STEP: create a pod that should be updated by the webhook @ 08/24/23 12:15:38.761
  Aug 24 12:15:38.805: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "webhook-1617" for this suite. @ 08/24/23 12:15:38.969
  STEP: Destroying namespace "webhook-markers-4507" for this suite. @ 08/24/23 12:15:38.982
• [4.008 seconds]
------------------------------
[sig-apps] CronJob should replace jobs when ReplaceConcurrent [Conformance]
test/e2e/apps/cronjob.go:161
  STEP: Creating a kubernetes client @ 08/24/23 12:15:39.049
  Aug 24 12:15:39.049: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename cronjob @ 08/24/23 12:15:39.05
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 12:15:39.082
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 12:15:39.089
  STEP: Creating a ReplaceConcurrent cronjob @ 08/24/23 12:15:39.097
  STEP: Ensuring a job is scheduled @ 08/24/23 12:15:39.11
  STEP: Ensuring exactly one is scheduled @ 08/24/23 12:16:01.121
  STEP: Ensuring exactly one running job exists by listing jobs explicitly @ 08/24/23 12:16:01.127
  STEP: Ensuring the job is replaced with a new one @ 08/24/23 12:16:01.135
  STEP: Removing cronjob @ 08/24/23 12:17:01.145
  Aug 24 12:17:01.172: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "cronjob-375" for this suite. @ 08/24/23 12:17:01.182
• [82.147 seconds]
------------------------------
SSSSSSSSSSSSSSS
------------------------------
[sig-api-machinery] CustomResourcePublishOpenAPI [Privileged:ClusterAdmin] works for CRD preserving unknown fields at the schema root [Conformance]
test/e2e/apimachinery/crd_publish_openapi.go:194
  STEP: Creating a kubernetes client @ 08/24/23 12:17:01.198
  Aug 24 12:17:01.198: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename crd-publish-openapi @ 08/24/23 12:17:01.199
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 12:17:01.264
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 12:17:01.271
  Aug 24 12:17:01.277: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: kubectl validation (kubectl create and apply) allows request with any unknown properties @ 08/24/23 12:17:03.055
  Aug 24 12:17:03.055: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1002171096 --namespace=crd-publish-openapi-1493 --namespace=crd-publish-openapi-1493 create -f -'
  Aug 24 12:17:04.953: INFO: stderr: ""
  Aug 24 12:17:04.953: INFO: stdout: "e2e-test-crd-publish-openapi-9934-crd.crd-publish-openapi-test-unknown-at-root.example.com/test-cr created\n"
  Aug 24 12:17:04.953: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1002171096 --namespace=crd-publish-openapi-1493 --namespace=crd-publish-openapi-1493 delete e2e-test-crd-publish-openapi-9934-crds test-cr'
  Aug 24 12:17:05.072: INFO: stderr: ""
  Aug 24 12:17:05.072: INFO: stdout: "e2e-test-crd-publish-openapi-9934-crd.crd-publish-openapi-test-unknown-at-root.example.com \"test-cr\" deleted\n"
  Aug 24 12:17:05.073: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1002171096 --namespace=crd-publish-openapi-1493 --namespace=crd-publish-openapi-1493 apply -f -'
  Aug 24 12:17:05.383: INFO: stderr: ""
  Aug 24 12:17:05.383: INFO: stdout: "e2e-test-crd-publish-openapi-9934-crd.crd-publish-openapi-test-unknown-at-root.example.com/test-cr created\n"
  Aug 24 12:17:05.383: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1002171096 --namespace=crd-publish-openapi-1493 --namespace=crd-publish-openapi-1493 delete e2e-test-crd-publish-openapi-9934-crds test-cr'
  Aug 24 12:17:05.500: INFO: stderr: ""
  Aug 24 12:17:05.500: INFO: stdout: "e2e-test-crd-publish-openapi-9934-crd.crd-publish-openapi-test-unknown-at-root.example.com \"test-cr\" deleted\n"
  STEP: kubectl explain works to explain CR @ 08/24/23 12:17:05.5
  Aug 24 12:17:05.500: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1002171096 --namespace=crd-publish-openapi-1493 explain e2e-test-crd-publish-openapi-9934-crds'
  Aug 24 12:17:05.782: INFO: stderr: ""
  Aug 24 12:17:05.782: INFO: stdout: "GROUP:      crd-publish-openapi-test-unknown-at-root.example.com\nKIND:       e2e-test-crd-publish-openapi-9934-crd\nVERSION:    v1\n\nDESCRIPTION:\n    preserve-unknown-properties at root for Testing\n    \nFIELDS:\n  apiVersion\t<string>\n    APIVersion defines the versioned schema of this representation of an object.\n    Servers should convert recognized schemas to the latest internal value, and\n    may reject unrecognized values. More info:\n    https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources\n\n  kind\t<string>\n    Kind is a string value representing the REST resource this object\n    represents. Servers may infer this from the endpoint the client submits\n    requests to. Cannot be updated. In CamelCase. More info:\n    https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\n\n  metadata\t<ObjectMeta>\n    Standard object's metadata. More info:\n    https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata\n\n  spec\t<Object>\n    Specification of Waldo\n\n  status\t<Object>\n    Status of Waldo\n\n\n"
  Aug 24 12:17:07.874: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "crd-publish-openapi-1493" for this suite. @ 08/24/23 12:17:07.899
• [6.716 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-storage] ConfigMap should be consumable from pods in volume [NodeConformance] [Conformance]
test/e2e/common/storage/configmap_volume.go:47
  STEP: Creating a kubernetes client @ 08/24/23 12:17:07.915
  Aug 24 12:17:07.915: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename configmap @ 08/24/23 12:17:07.917
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 12:17:07.973
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 12:17:07.979
  STEP: Creating configMap with name configmap-test-volume-63a3afbc-39ef-4de6-b2de-4eadbfd131ba @ 08/24/23 12:17:07.985
  STEP: Creating a pod to test consume configMaps @ 08/24/23 12:17:07.996
  STEP: Saw pod success @ 08/24/23 12:17:12.045
  Aug 24 12:17:12.054: INFO: Trying to get logs from node scw-conformance-default-ecf11ec729064adba7e270 pod pod-configmaps-f8cb1325-845e-4e59-9300-ac380523ec5f container agnhost-container: <nil>
  STEP: delete the pod @ 08/24/23 12:17:12.1
  Aug 24 12:17:12.127: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "configmap-2106" for this suite. @ 08/24/23 12:17:12.138
• [4.237 seconds]
------------------------------
[sig-apps] Job should delete a job [Conformance]
test/e2e/apps/job.go:485
  STEP: Creating a kubernetes client @ 08/24/23 12:17:12.153
  Aug 24 12:17:12.153: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename job @ 08/24/23 12:17:12.154
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 12:17:12.183
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 12:17:12.19
  STEP: Creating a job @ 08/24/23 12:17:12.198
  STEP: Ensuring active pods == parallelism @ 08/24/23 12:17:12.21
  STEP: delete a job @ 08/24/23 12:17:14.221
  STEP: deleting Job.batch foo in namespace job-6390, will wait for the garbage collector to delete the pods @ 08/24/23 12:17:14.221
  Aug 24 12:17:14.294: INFO: Deleting Job.batch foo took: 14.000343ms
  Aug 24 12:17:14.395: INFO: Terminating Job.batch foo pods took: 101.125465ms
  STEP: Ensuring job was deleted @ 08/24/23 12:17:46.096
  Aug 24 12:17:46.106: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "job-6390" for this suite. @ 08/24/23 12:17:46.116
• [33.977 seconds]
------------------------------
SSSSSSSSSSSSSS
------------------------------
[sig-storage] Secrets should be consumable in multiple volumes in a pod [NodeConformance] [Conformance]
test/e2e/common/storage/secrets_volume.go:125
  STEP: Creating a kubernetes client @ 08/24/23 12:17:46.13
  Aug 24 12:17:46.130: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename secrets @ 08/24/23 12:17:46.131
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 12:17:46.163
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 12:17:46.17
  STEP: Creating secret with name secret-test-69c8e6ae-1280-44e0-ae3b-7ff66be18691 @ 08/24/23 12:17:46.176
  STEP: Creating a pod to test consume secrets @ 08/24/23 12:17:46.186
  STEP: Saw pod success @ 08/24/23 12:17:50.236
  Aug 24 12:17:50.244: INFO: Trying to get logs from node scw-conformance-default-2af6d8b4c6264cc5b9e5e6 pod pod-secrets-732509e4-e70d-4656-a244-797788ec7471 container secret-volume-test: <nil>
  STEP: delete the pod @ 08/24/23 12:17:50.293
  Aug 24 12:17:50.328: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "secrets-7281" for this suite. @ 08/24/23 12:17:50.339
• [4.226 seconds]
------------------------------
SSSSSSSSSSSSSS
------------------------------
[sig-node] RuntimeClass should schedule a Pod requesting a RuntimeClass and initialize its Overhead [NodeConformance] [Conformance]
test/e2e/common/node/runtimeclass.go:129
  STEP: Creating a kubernetes client @ 08/24/23 12:17:50.358
  Aug 24 12:17:50.358: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename runtimeclass @ 08/24/23 12:17:50.359
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 12:17:50.392
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 12:17:50.399
  Aug 24 12:17:52.465: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "runtimeclass-9917" for this suite. @ 08/24/23 12:17:52.491
• [2.150 seconds]
------------------------------
SSSSSS
------------------------------
[sig-instrumentation] Events should delete a collection of events [Conformance]
test/e2e/instrumentation/core_events.go:175
  STEP: Creating a kubernetes client @ 08/24/23 12:17:52.508
  Aug 24 12:17:52.508: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename events @ 08/24/23 12:17:52.508
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 12:17:52.538
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 12:17:52.545
  STEP: Create set of events @ 08/24/23 12:17:52.552
  Aug 24 12:17:52.564: INFO: created test-event-1
  Aug 24 12:17:52.575: INFO: created test-event-2
  Aug 24 12:17:52.586: INFO: created test-event-3
  STEP: get a list of Events with a label in the current namespace @ 08/24/23 12:17:52.586
  STEP: delete collection of events @ 08/24/23 12:17:52.594
  Aug 24 12:17:52.594: INFO: requesting DeleteCollection of events
  STEP: check that the list of events matches the requested quantity @ 08/24/23 12:17:52.693
  Aug 24 12:17:52.693: INFO: requesting list of events to confirm quantity
  Aug 24 12:17:52.699: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "events-8439" for this suite. @ 08/24/23 12:17:52.708
• [0.218 seconds]
------------------------------
SSSS
------------------------------
[sig-cli] Kubectl client Kubectl run pod should create a pod from an image when restart is Never  [Conformance]
test/e2e/kubectl/kubectl.go:1707
  STEP: Creating a kubernetes client @ 08/24/23 12:17:52.726
  Aug 24 12:17:52.726: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename kubectl @ 08/24/23 12:17:52.728
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 12:17:52.759
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 12:17:52.766
  STEP: running the image registry.k8s.io/e2e-test-images/httpd:2.4.38-4 @ 08/24/23 12:17:52.774
  Aug 24 12:17:52.774: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1002171096 --namespace=kubectl-1275 run e2e-test-httpd-pod --restart=Never --pod-running-timeout=2m0s --image=registry.k8s.io/e2e-test-images/httpd:2.4.38-4'
  Aug 24 12:17:52.877: INFO: stderr: ""
  Aug 24 12:17:52.877: INFO: stdout: "pod/e2e-test-httpd-pod created\n"
  STEP: verifying the pod e2e-test-httpd-pod was created @ 08/24/23 12:17:52.877
  Aug 24 12:17:52.885: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1002171096 --namespace=kubectl-1275 delete pods e2e-test-httpd-pod'
  Aug 24 12:17:55.051: INFO: stderr: ""
  Aug 24 12:17:55.051: INFO: stdout: "pod \"e2e-test-httpd-pod\" deleted\n"
  Aug 24 12:17:55.051: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "kubectl-1275" for this suite. @ 08/24/23 12:17:55.062
• [2.349 seconds]
------------------------------
SSSSSSSSSS
------------------------------
[sig-node] Downward API should provide host IP as an env var [NodeConformance] [Conformance]
test/e2e/common/node/downwardapi.go:91
  STEP: Creating a kubernetes client @ 08/24/23 12:17:55.076
  Aug 24 12:17:55.076: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename downward-api @ 08/24/23 12:17:55.077
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 12:17:55.108
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 12:17:55.116
  STEP: Creating a pod to test downward api env vars @ 08/24/23 12:17:55.122
  STEP: Saw pod success @ 08/24/23 12:17:59.255
  Aug 24 12:17:59.265: INFO: Trying to get logs from node scw-conformance-default-2af6d8b4c6264cc5b9e5e6 pod downward-api-fb3705a6-00b1-4f64-a48e-77f82734d4eb container dapi-container: <nil>
  STEP: delete the pod @ 08/24/23 12:17:59.287
  Aug 24 12:17:59.370: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "downward-api-9563" for this suite. @ 08/24/23 12:17:59.38
• [4.319 seconds]
------------------------------
SSSSS
------------------------------
[sig-apps] ReplicationController should serve a basic image on each replica with a public image  [Conformance]
test/e2e/apps/rc.go:69
  STEP: Creating a kubernetes client @ 08/24/23 12:17:59.396
  Aug 24 12:17:59.396: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename replication-controller @ 08/24/23 12:17:59.397
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 12:17:59.456
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 12:17:59.464
  STEP: Creating replication controller my-hostname-basic-e009bada-e95d-40b7-9b49-1e49b6cded81 @ 08/24/23 12:17:59.471
  Aug 24 12:17:59.493: INFO: Pod name my-hostname-basic-e009bada-e95d-40b7-9b49-1e49b6cded81: Found 0 pods out of 1
  Aug 24 12:18:04.505: INFO: Pod name my-hostname-basic-e009bada-e95d-40b7-9b49-1e49b6cded81: Found 1 pods out of 1
  Aug 24 12:18:04.505: INFO: Ensuring all pods for ReplicationController "my-hostname-basic-e009bada-e95d-40b7-9b49-1e49b6cded81" are running
  Aug 24 12:18:04.512: INFO: Pod "my-hostname-basic-e009bada-e95d-40b7-9b49-1e49b6cded81-ljw8h" is running and ready(conditions: [{Type:Initialized Status:True LastProbeTime:0001-01-01 00:00:00 +0000 UTC LastTransitionTime:2023-08-24 12:17:59 +0000 UTC Reason: Message:} {Type:Ready Status:True LastProbeTime:0001-01-01 00:00:00 +0000 UTC LastTransitionTime:2023-08-24 12:18:01 +0000 UTC Reason: Message:} {Type:ContainersReady Status:True LastProbeTime:0001-01-01 00:00:00 +0000 UTC LastTransitionTime:2023-08-24 12:18:01 +0000 UTC Reason: Message:} {Type:PodScheduled Status:True LastProbeTime:0001-01-01 00:00:00 +0000 UTC LastTransitionTime:2023-08-24 12:17:59 +0000 UTC Reason: Message:}])
  Aug 24 12:18:04.512: INFO: Trying to dial the pod
  STEP: trying to dial each unique pod @ 08/24/23 12:18:04.512
  Aug 24 12:18:04.574: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "replication-controller-6776" for this suite. @ 08/24/23 12:18:04.587
• [5.254 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSS
------------------------------
[sig-auth] ServiceAccounts should allow opting out of API token automount  [Conformance]
test/e2e/auth/service_accounts.go:161
  STEP: Creating a kubernetes client @ 08/24/23 12:18:04.651
  Aug 24 12:18:04.651: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename svcaccounts @ 08/24/23 12:18:04.652
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 12:18:04.683
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 12:18:04.691
  Aug 24 12:18:04.793: INFO: created pod pod-service-account-defaultsa
  Aug 24 12:18:04.793: INFO: pod pod-service-account-defaultsa service account token volume mount: true
  Aug 24 12:18:04.849: INFO: created pod pod-service-account-mountsa
  Aug 24 12:18:04.849: INFO: pod pod-service-account-mountsa service account token volume mount: true
  Aug 24 12:18:04.863: INFO: created pod pod-service-account-nomountsa
  Aug 24 12:18:04.863: INFO: pod pod-service-account-nomountsa service account token volume mount: false
  Aug 24 12:18:04.950: INFO: created pod pod-service-account-defaultsa-mountspec
  Aug 24 12:18:04.950: INFO: pod pod-service-account-defaultsa-mountspec service account token volume mount: true
  Aug 24 12:18:04.961: INFO: created pod pod-service-account-mountsa-mountspec
  Aug 24 12:18:04.961: INFO: pod pod-service-account-mountsa-mountspec service account token volume mount: true
  Aug 24 12:18:05.049: INFO: created pod pod-service-account-nomountsa-mountspec
  Aug 24 12:18:05.049: INFO: pod pod-service-account-nomountsa-mountspec service account token volume mount: true
  Aug 24 12:18:05.062: INFO: created pod pod-service-account-defaultsa-nomountspec
  Aug 24 12:18:05.062: INFO: pod pod-service-account-defaultsa-nomountspec service account token volume mount: false
  Aug 24 12:18:05.156: INFO: created pod pod-service-account-mountsa-nomountspec
  Aug 24 12:18:05.156: INFO: pod pod-service-account-mountsa-nomountspec service account token volume mount: false
  Aug 24 12:18:05.259: INFO: created pod pod-service-account-nomountsa-nomountspec
  Aug 24 12:18:05.259: INFO: pod pod-service-account-nomountsa-nomountspec service account token volume mount: false
  Aug 24 12:18:05.259: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "svcaccounts-6739" for this suite. @ 08/24/23 12:18:05.351
• [0.800 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-node] Kubelet when scheduling a busybox command that always fails in a pod should have an terminated reason [NodeConformance] [Conformance]
test/e2e/common/node/kubelet.go:110
  STEP: Creating a kubernetes client @ 08/24/23 12:18:05.457
  Aug 24 12:18:05.458: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename kubelet-test @ 08/24/23 12:18:05.458
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 12:18:05.661
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 12:18:05.668
  Aug 24 12:18:09.787: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "kubelet-test-6004" for this suite. @ 08/24/23 12:18:09.795
• [4.353 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSS
------------------------------
[sig-cli] Kubectl client Kubectl label should update the label on a resource  [Conformance]
test/e2e/kubectl/kubectl.go:1575
  STEP: Creating a kubernetes client @ 08/24/23 12:18:09.825
  Aug 24 12:18:09.825: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename kubectl @ 08/24/23 12:18:09.826
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 12:18:09.86
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 12:18:09.866
  STEP: creating the pod @ 08/24/23 12:18:09.873
  Aug 24 12:18:09.873: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1002171096 --namespace=kubectl-7094 create -f -'
  Aug 24 12:18:12.069: INFO: stderr: ""
  Aug 24 12:18:12.069: INFO: stdout: "pod/pause created\n"
  STEP: adding the label testing-label with value testing-label-value to a pod @ 08/24/23 12:18:14.085
  Aug 24 12:18:14.086: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1002171096 --namespace=kubectl-7094 label pods pause testing-label=testing-label-value'
  Aug 24 12:18:14.227: INFO: stderr: ""
  Aug 24 12:18:14.227: INFO: stdout: "pod/pause labeled\n"
  STEP: verifying the pod has the label testing-label with the value testing-label-value @ 08/24/23 12:18:14.228
  Aug 24 12:18:14.228: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1002171096 --namespace=kubectl-7094 get pod pause -L testing-label'
  Aug 24 12:18:14.349: INFO: stderr: ""
  Aug 24 12:18:14.349: INFO: stdout: "NAME    READY   STATUS    RESTARTS   AGE   TESTING-LABEL\npause   1/1     Running   0          2s    testing-label-value\n"
  STEP: removing the label testing-label of a pod @ 08/24/23 12:18:14.349
  Aug 24 12:18:14.349: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1002171096 --namespace=kubectl-7094 label pods pause testing-label-'
  Aug 24 12:18:14.487: INFO: stderr: ""
  Aug 24 12:18:14.487: INFO: stdout: "pod/pause unlabeled\n"
  STEP: verifying the pod doesn't have the label testing-label @ 08/24/23 12:18:14.487
  Aug 24 12:18:14.487: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1002171096 --namespace=kubectl-7094 get pod pause -L testing-label'
  Aug 24 12:18:14.602: INFO: stderr: ""
  Aug 24 12:18:14.602: INFO: stdout: "NAME    READY   STATUS    RESTARTS   AGE   TESTING-LABEL\npause   1/1     Running   0          2s    \n"
  STEP: using delete to clean up resources @ 08/24/23 12:18:14.602
  Aug 24 12:18:14.603: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1002171096 --namespace=kubectl-7094 delete --grace-period=0 --force -f -'
  Aug 24 12:18:14.760: INFO: stderr: "Warning: Immediate deletion does not wait for confirmation that the running resource has been terminated. The resource may continue to run on the cluster indefinitely.\n"
  Aug 24 12:18:14.760: INFO: stdout: "pod \"pause\" force deleted\n"
  Aug 24 12:18:14.761: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1002171096 --namespace=kubectl-7094 get rc,svc -l name=pause --no-headers'
  Aug 24 12:18:15.468: INFO: stderr: "No resources found in kubectl-7094 namespace.\n"
  Aug 24 12:18:15.468: INFO: stdout: ""
  Aug 24 12:18:15.468: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1002171096 --namespace=kubectl-7094 get pods -l name=pause -o go-template={{ range .items }}{{ if not .metadata.deletionTimestamp }}{{ .metadata.name }}{{ "\n" }}{{ end }}{{ end }}'
  Aug 24 12:18:15.659: INFO: stderr: ""
  Aug 24 12:18:15.659: INFO: stdout: ""
  Aug 24 12:18:15.659: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "kubectl-7094" for this suite. @ 08/24/23 12:18:15.674
• [5.865 seconds]
------------------------------
SSSSSS
------------------------------
[sig-network] Networking Granular Checks: Pods should function for intra-pod communication: udp [NodeConformance] [Conformance]
test/e2e/common/network/networking.go:95
  STEP: Creating a kubernetes client @ 08/24/23 12:18:15.69
  Aug 24 12:18:15.690: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename pod-network-test @ 08/24/23 12:18:15.692
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 12:18:15.773
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 12:18:15.779
  STEP: Performing setup for networking test in namespace pod-network-test-5395 @ 08/24/23 12:18:15.786
  STEP: creating a selector @ 08/24/23 12:18:15.786
  STEP: Creating the service pods in kubernetes @ 08/24/23 12:18:15.786
  Aug 24 12:18:15.786: INFO: Waiting up to 10m0s for all (but 0) nodes to be schedulable
  STEP: Creating test pods @ 08/24/23 12:18:27.966
  Aug 24 12:18:30.010: INFO: Setting MaxTries for pod polling to 34 for networking test based on endpoint count 2
  Aug 24 12:18:30.010: INFO: Breadth first check of 10.100.0.29 on host 172.16.36.3...
  Aug 24 12:18:30.019: INFO: ExecWithOptions {Command:[/bin/sh -c curl -g -q -s 'http://10.100.0.15:9080/dial?request=hostname&protocol=udp&host=10.100.0.29&port=8081&tries=1'] Namespace:pod-network-test-5395 PodName:test-container-pod ContainerName:webserver Stdin:<nil> CaptureStdout:true CaptureStderr:true PreserveWhitespace:false Quiet:false}
  Aug 24 12:18:30.019: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  Aug 24 12:18:30.020: INFO: ExecWithOptions: Clientset creation
  Aug 24 12:18:30.020: INFO: ExecWithOptions: execute(POST https://10.96.0.1:443/api/v1/namespaces/pod-network-test-5395/pods/test-container-pod/exec?command=%2Fbin%2Fsh&command=-c&command=curl+-g+-q+-s+%27http%3A%2F%2F10.100.0.15%3A9080%2Fdial%3Frequest%3Dhostname%26protocol%3Dudp%26host%3D10.100.0.29%26port%3D8081%26tries%3D1%27&container=webserver&container=webserver&stderr=true&stdout=true)
  Aug 24 12:18:30.147: INFO: Waiting for responses: map[]
  Aug 24 12:18:30.147: INFO: reached 10.100.0.29 after 0/1 tries
  Aug 24 12:18:30.147: INFO: Breadth first check of 10.100.1.20 on host 172.16.36.2...
  Aug 24 12:18:30.156: INFO: ExecWithOptions {Command:[/bin/sh -c curl -g -q -s 'http://10.100.0.15:9080/dial?request=hostname&protocol=udp&host=10.100.1.20&port=8081&tries=1'] Namespace:pod-network-test-5395 PodName:test-container-pod ContainerName:webserver Stdin:<nil> CaptureStdout:true CaptureStderr:true PreserveWhitespace:false Quiet:false}
  Aug 24 12:18:30.156: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  Aug 24 12:18:30.157: INFO: ExecWithOptions: Clientset creation
  Aug 24 12:18:30.157: INFO: ExecWithOptions: execute(POST https://10.96.0.1:443/api/v1/namespaces/pod-network-test-5395/pods/test-container-pod/exec?command=%2Fbin%2Fsh&command=-c&command=curl+-g+-q+-s+%27http%3A%2F%2F10.100.0.15%3A9080%2Fdial%3Frequest%3Dhostname%26protocol%3Dudp%26host%3D10.100.1.20%26port%3D8081%26tries%3D1%27&container=webserver&container=webserver&stderr=true&stdout=true)
  Aug 24 12:18:30.279: INFO: Waiting for responses: map[]
  Aug 24 12:18:30.279: INFO: reached 10.100.1.20 after 0/1 tries
  Aug 24 12:18:30.279: INFO: Going to retry 0 out of 2 pods....
  Aug 24 12:18:30.279: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "pod-network-test-5395" for this suite. @ 08/24/23 12:18:30.29
• [14.615 seconds]
------------------------------
SSSSSS
------------------------------
[sig-apps] Daemon set [Serial] should run and stop complex daemon [Conformance]
test/e2e/apps/daemon_set.go:205
  STEP: Creating a kubernetes client @ 08/24/23 12:18:30.306
  Aug 24 12:18:30.306: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename daemonsets @ 08/24/23 12:18:30.308
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 12:18:30.338
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 12:18:30.346
  Aug 24 12:18:30.393: INFO: Creating daemon "daemon-set" with a node selector
  STEP: Initially, daemon pods should not be running on any nodes. @ 08/24/23 12:18:30.407
  Aug 24 12:18:30.415: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 0
  Aug 24 12:18:30.415: INFO: Number of running nodes: 0, number of available pods: 0 in daemonset daemon-set
  STEP: Change node label to blue, check that daemon pod is launched. @ 08/24/23 12:18:30.415
  Aug 24 12:18:30.467: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 0
  Aug 24 12:18:30.467: INFO: Node scw-conformance-default-2af6d8b4c6264cc5b9e5e6 is running 0 daemon pod, expected 1
  Aug 24 12:18:31.476: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 0
  Aug 24 12:18:31.477: INFO: Node scw-conformance-default-2af6d8b4c6264cc5b9e5e6 is running 0 daemon pod, expected 1
  Aug 24 12:18:32.478: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 1
  Aug 24 12:18:32.478: INFO: Number of running nodes: 1, number of available pods: 1 in daemonset daemon-set
  STEP: Update the node label to green, and wait for daemons to be unscheduled @ 08/24/23 12:18:32.486
  Aug 24 12:18:32.529: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 1
  Aug 24 12:18:32.529: INFO: Number of running nodes: 0, number of available pods: 1 in daemonset daemon-set
  Aug 24 12:18:33.542: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 0
  Aug 24 12:18:33.542: INFO: Number of running nodes: 0, number of available pods: 0 in daemonset daemon-set
  STEP: Update DaemonSet node selector to green, and change its update strategy to RollingUpdate @ 08/24/23 12:18:33.542
  Aug 24 12:18:33.566: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 0
  Aug 24 12:18:33.566: INFO: Node scw-conformance-default-2af6d8b4c6264cc5b9e5e6 is running 0 daemon pod, expected 1
  Aug 24 12:18:34.576: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 0
  Aug 24 12:18:34.576: INFO: Node scw-conformance-default-2af6d8b4c6264cc5b9e5e6 is running 0 daemon pod, expected 1
  Aug 24 12:18:35.576: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 1
  Aug 24 12:18:35.576: INFO: Number of running nodes: 1, number of available pods: 1 in daemonset daemon-set
  STEP: Deleting DaemonSet "daemon-set" @ 08/24/23 12:18:35.594
  STEP: deleting DaemonSet.extensions daemon-set in namespace daemonsets-225, will wait for the garbage collector to delete the pods @ 08/24/23 12:18:35.594
  Aug 24 12:18:35.668: INFO: Deleting DaemonSet.extensions daemon-set took: 13.699393ms
  Aug 24 12:18:35.769: INFO: Terminating DaemonSet.extensions daemon-set pods took: 100.854256ms
  Aug 24 12:18:37.377: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 0
  Aug 24 12:18:37.378: INFO: Number of running nodes: 0, number of available pods: 0 in daemonset daemon-set
  Aug 24 12:18:37.387: INFO: daemonset: {"kind":"DaemonSetList","apiVersion":"apps/v1","metadata":{"resourceVersion":"3404986244"},"items":null}

  Aug 24 12:18:37.394: INFO: pods: {"kind":"PodList","apiVersion":"v1","metadata":{"resourceVersion":"3404986245"},"items":null}

  Aug 24 12:18:37.458: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "daemonsets-225" for this suite. @ 08/24/23 12:18:37.468
• [7.178 seconds]
------------------------------
[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] listing mutating webhooks should work [Conformance]
test/e2e/apimachinery/webhook.go:646
  STEP: Creating a kubernetes client @ 08/24/23 12:18:37.485
  Aug 24 12:18:37.485: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename webhook @ 08/24/23 12:18:37.486
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 12:18:37.573
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 12:18:37.58
  STEP: Setting up server cert @ 08/24/23 12:18:37.649
  STEP: Create role binding to let webhook read extension-apiserver-authentication @ 08/24/23 12:18:37.88
  STEP: Deploying the webhook pod @ 08/24/23 12:18:37.901
  STEP: Wait for the deployment to be ready @ 08/24/23 12:18:37.922
  Aug 24 12:18:37.937: INFO: new replicaset for deployment "sample-webhook-deployment" is yet to be created
  STEP: Deploying the webhook service @ 08/24/23 12:18:39.965
  STEP: Verifying the service has paired with the endpoint @ 08/24/23 12:18:39.99
  Aug 24 12:18:40.991: INFO: Waiting for amount of service:e2e-test-webhook endpoints to be 1
  STEP: Listing all of the created validation webhooks @ 08/24/23 12:18:41.143
  STEP: Creating a configMap that should be mutated @ 08/24/23 12:18:41.182
  STEP: Deleting the collection of validation webhooks @ 08/24/23 12:18:41.274
  STEP: Creating a configMap that should not be mutated @ 08/24/23 12:18:41.394
  Aug 24 12:18:41.423: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "webhook-9026" for this suite. @ 08/24/23 12:18:41.524
  STEP: Destroying namespace "webhook-markers-2303" for this suite. @ 08/24/23 12:18:41.557
• [4.086 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-api-machinery] Namespaces [Serial] should patch a Namespace [Conformance]
test/e2e/apimachinery/namespace.go:272
  STEP: Creating a kubernetes client @ 08/24/23 12:18:41.572
  Aug 24 12:18:41.572: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename namespaces @ 08/24/23 12:18:41.574
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 12:18:41.649
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 12:18:41.656
  STEP: creating a Namespace @ 08/24/23 12:18:41.663
  STEP: patching the Namespace @ 08/24/23 12:18:41.695
  STEP: get the Namespace and ensuring it has the label @ 08/24/23 12:18:41.749
  Aug 24 12:18:41.757: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "namespaces-4713" for this suite. @ 08/24/23 12:18:41.767
  STEP: Destroying namespace "nspatchtest-f584a017-9899-4ade-b26d-04f8b1541c82-1878" for this suite. @ 08/24/23 12:18:41.785
• [0.227 seconds]
------------------------------
S
------------------------------
[sig-node] Containers should be able to override the image's default arguments (container cmd) [NodeConformance] [Conformance]
test/e2e/common/node/containers.go:61
  STEP: Creating a kubernetes client @ 08/24/23 12:18:41.799
  Aug 24 12:18:41.799: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename containers @ 08/24/23 12:18:41.8
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 12:18:41.861
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 12:18:41.867
  STEP: Creating a pod to test override arguments @ 08/24/23 12:18:41.873
  STEP: Saw pod success @ 08/24/23 12:18:45.921
  Aug 24 12:18:45.929: INFO: Trying to get logs from node scw-conformance-default-2af6d8b4c6264cc5b9e5e6 pod client-containers-df9c0bfd-39e5-445a-9601-c42f84eac5b3 container agnhost-container: <nil>
  STEP: delete the pod @ 08/24/23 12:18:45.946
  Aug 24 12:18:45.982: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "containers-1321" for this suite. @ 08/24/23 12:18:45.999
• [4.215 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-node] Variable Expansion should allow substituting values in a volume subpath [Conformance]
test/e2e/common/node/expansion.go:115
  STEP: Creating a kubernetes client @ 08/24/23 12:18:46.016
  Aug 24 12:18:46.016: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename var-expansion @ 08/24/23 12:18:46.017
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 12:18:46.046
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 12:18:46.053
  STEP: Creating a pod to test substitution in volume subpath @ 08/24/23 12:18:46.059
  STEP: Saw pod success @ 08/24/23 12:18:50.159
  Aug 24 12:18:50.167: INFO: Trying to get logs from node scw-conformance-default-2af6d8b4c6264cc5b9e5e6 pod var-expansion-1bd143ba-27d8-4891-b511-4ca06725c8ad container dapi-container: <nil>
  STEP: delete the pod @ 08/24/23 12:18:50.185
  Aug 24 12:18:50.220: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "var-expansion-3570" for this suite. @ 08/24/23 12:18:50.228
• [4.228 seconds]
------------------------------
SSS
------------------------------
[sig-storage] Downward API volume should provide container's cpu limit [NodeConformance] [Conformance]
test/e2e/common/storage/downwardapi_volume.go:194
  STEP: Creating a kubernetes client @ 08/24/23 12:18:50.244
  Aug 24 12:18:50.245: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename downward-api @ 08/24/23 12:18:50.246
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 12:18:50.278
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 12:18:50.285
  STEP: Creating a pod to test downward API volume plugin @ 08/24/23 12:18:50.291
  STEP: Saw pod success @ 08/24/23 12:18:54.342
  Aug 24 12:18:54.350: INFO: Trying to get logs from node scw-conformance-default-2af6d8b4c6264cc5b9e5e6 pod downwardapi-volume-7a55d33e-f7d9-4463-9715-ba5de4672e04 container client-container: <nil>
  STEP: delete the pod @ 08/24/23 12:18:54.372
  Aug 24 12:18:54.408: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "downward-api-6315" for this suite. @ 08/24/23 12:18:54.418
• [4.191 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-node] Variable Expansion should fail substituting values in a volume subpath with backticks [Slow] [Conformance]
test/e2e/common/node/expansion.go:155
  STEP: Creating a kubernetes client @ 08/24/23 12:18:54.436
  Aug 24 12:18:54.436: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename var-expansion @ 08/24/23 12:18:54.437
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 12:18:54.469
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 12:18:54.475
  Aug 24 12:18:56.555: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  Aug 24 12:18:56.564: INFO: Deleting pod "var-expansion-83c3aa8a-b977-4df1-b136-fb7601fe3ca5" in namespace "var-expansion-317"
  Aug 24 12:18:56.583: INFO: Wait up to 5m0s for pod "var-expansion-83c3aa8a-b977-4df1-b136-fb7601fe3ca5" to be fully deleted
  STEP: Destroying namespace "var-expansion-317" for this suite. @ 08/24/23 12:18:58.602
• [4.180 seconds]
------------------------------
SSSSSSSSSSS
------------------------------
[sig-storage] Projected downwardAPI should update labels on modification [NodeConformance] [Conformance]
test/e2e/common/storage/projected_downwardapi.go:131
  STEP: Creating a kubernetes client @ 08/24/23 12:18:58.618
  Aug 24 12:18:58.618: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename projected @ 08/24/23 12:18:58.619
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 12:18:58.648
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 12:18:58.654
  STEP: Creating the pod @ 08/24/23 12:18:58.661
  Aug 24 12:19:01.249: INFO: Successfully updated pod "labelsupdate7db33125-c4e1-4348-9189-ab4d9e82e2e2"
  Aug 24 12:19:03.287: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "projected-2481" for this suite. @ 08/24/23 12:19:03.297
• [4.692 seconds]
------------------------------
SSSS
------------------------------
[sig-storage] Projected downwardAPI should provide podname only [NodeConformance] [Conformance]
test/e2e/common/storage/projected_downwardapi.go:54
  STEP: Creating a kubernetes client @ 08/24/23 12:19:03.311
  Aug 24 12:19:03.311: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename projected @ 08/24/23 12:19:03.311
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 12:19:03.339
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 12:19:03.345
  STEP: Creating a pod to test downward API volume plugin @ 08/24/23 12:19:03.352
  STEP: Saw pod success @ 08/24/23 12:19:07.398
  Aug 24 12:19:07.407: INFO: Trying to get logs from node scw-conformance-default-2af6d8b4c6264cc5b9e5e6 pod downwardapi-volume-50de97b7-a1cd-4622-8c0e-e906221bb400 container client-container: <nil>
  STEP: delete the pod @ 08/24/23 12:19:07.424
  Aug 24 12:19:07.456: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "projected-9819" for this suite. @ 08/24/23 12:19:07.464
• [4.167 seconds]
------------------------------
SSSSSS
------------------------------
[sig-node] Downward API should provide pod UID as env vars [NodeConformance] [Conformance]
test/e2e/common/node/downwardapi.go:268
  STEP: Creating a kubernetes client @ 08/24/23 12:19:07.478
  Aug 24 12:19:07.478: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename downward-api @ 08/24/23 12:19:07.479
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 12:19:07.51
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 12:19:07.518
  STEP: Creating a pod to test downward api env vars @ 08/24/23 12:19:07.526
  STEP: Saw pod success @ 08/24/23 12:19:11.59
  Aug 24 12:19:11.598: INFO: Trying to get logs from node scw-conformance-default-2af6d8b4c6264cc5b9e5e6 pod downward-api-888df5da-180c-4bf8-822f-ec3b7e0c0d33 container dapi-container: <nil>
  STEP: delete the pod @ 08/24/23 12:19:11.617
  Aug 24 12:19:11.647: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "downward-api-1951" for this suite. @ 08/24/23 12:19:11.657
• [4.197 seconds]
------------------------------
SSSSSSSSSSS
------------------------------
[sig-storage] ConfigMap should be consumable from pods in volume as non-root [NodeConformance] [Conformance]
test/e2e/common/storage/configmap_volume.go:74
  STEP: Creating a kubernetes client @ 08/24/23 12:19:11.676
  Aug 24 12:19:11.676: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename configmap @ 08/24/23 12:19:11.677
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 12:19:11.71
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 12:19:11.717
  STEP: Creating configMap with name configmap-test-volume-eaeaa059-585c-4ebb-a430-c28f50fec9ed @ 08/24/23 12:19:11.723
  STEP: Creating a pod to test consume configMaps @ 08/24/23 12:19:11.736
  STEP: Saw pod success @ 08/24/23 12:19:15.794
  Aug 24 12:19:15.802: INFO: Trying to get logs from node scw-conformance-default-2af6d8b4c6264cc5b9e5e6 pod pod-configmaps-4be37b16-4365-4744-a35a-c8a09bb23bf4 container agnhost-container: <nil>
  STEP: delete the pod @ 08/24/23 12:19:15.819
  Aug 24 12:19:15.851: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "configmap-7057" for this suite. @ 08/24/23 12:19:15.861
• [4.199 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-storage] Downward API volume should provide container's memory request [NodeConformance] [Conformance]
test/e2e/common/storage/downwardapi_volume.go:236
  STEP: Creating a kubernetes client @ 08/24/23 12:19:15.877
  Aug 24 12:19:15.877: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename downward-api @ 08/24/23 12:19:15.878
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 12:19:15.906
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 12:19:15.913
  STEP: Creating a pod to test downward API volume plugin @ 08/24/23 12:19:15.919
  STEP: Saw pod success @ 08/24/23 12:19:19.967
  Aug 24 12:19:19.980: INFO: Trying to get logs from node scw-conformance-default-2af6d8b4c6264cc5b9e5e6 pod downwardapi-volume-46867486-0aea-47a6-b2b3-a3c32ec48a70 container client-container: <nil>
  STEP: delete the pod @ 08/24/23 12:19:19.997
  Aug 24 12:19:20.036: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "downward-api-4576" for this suite. @ 08/24/23 12:19:20.045
• [4.182 seconds]
------------------------------
SSSSSS
------------------------------
[sig-network] EndpointSlice should create and delete Endpoints and EndpointSlices for a Service with a selector specified [Conformance]
test/e2e/network/endpointslice.go:104
  STEP: Creating a kubernetes client @ 08/24/23 12:19:20.059
  Aug 24 12:19:20.059: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename endpointslice @ 08/24/23 12:19:20.059
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 12:19:20.09
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 12:19:20.097
  Aug 24 12:19:22.223: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "endpointslice-8051" for this suite. @ 08/24/23 12:19:22.232
• [2.196 seconds]
------------------------------
SSSSSSSSSSSSSSSSSS
------------------------------
[sig-api-machinery] Watchers should observe an object deletion if it stops meeting the requirements of the selector [Conformance]
test/e2e/apimachinery/watch.go:257
  STEP: Creating a kubernetes client @ 08/24/23 12:19:22.256
  Aug 24 12:19:22.256: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename watch @ 08/24/23 12:19:22.257
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 12:19:22.288
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 12:19:22.295
  STEP: creating a watch on configmaps with a certain label @ 08/24/23 12:19:22.301
  STEP: creating a new configmap @ 08/24/23 12:19:22.304
  STEP: modifying the configmap once @ 08/24/23 12:19:22.314
  STEP: changing the label value of the configmap @ 08/24/23 12:19:22.332
  STEP: Expecting to observe a delete notification for the watched object @ 08/24/23 12:19:22.347
  Aug 24 12:19:22.347: INFO: Got : ADDED &ConfigMap{ObjectMeta:{e2e-watch-test-label-changed  watch-5338  93a2cbae-a3a6-4f9f-9844-d311e252a63c 3404988580 0 2023-08-24 12:19:22 +0000 UTC <nil> <nil> map[watch-this-configmap:label-changed-and-restored] map[] [] [] [{e2e.test Update v1 2023-08-24 12:19:22 +0000 UTC FieldsV1 {"f:metadata":{"f:labels":{".":{},"f:watch-this-configmap":{}}}} }]},Data:map[string]string{},BinaryData:map[string][]byte{},Immutable:nil,}
  Aug 24 12:19:22.347: INFO: Got : MODIFIED &ConfigMap{ObjectMeta:{e2e-watch-test-label-changed  watch-5338  93a2cbae-a3a6-4f9f-9844-d311e252a63c 3404988587 0 2023-08-24 12:19:22 +0000 UTC <nil> <nil> map[watch-this-configmap:label-changed-and-restored] map[] [] [] [{e2e.test Update v1 2023-08-24 12:19:22 +0000 UTC FieldsV1 {"f:data":{".":{},"f:mutation":{}},"f:metadata":{"f:labels":{".":{},"f:watch-this-configmap":{}}}} }]},Data:map[string]string{mutation: 1,},BinaryData:map[string][]byte{},Immutable:nil,}
  Aug 24 12:19:22.348: INFO: Got : DELETED &ConfigMap{ObjectMeta:{e2e-watch-test-label-changed  watch-5338  93a2cbae-a3a6-4f9f-9844-d311e252a63c 3404988594 0 2023-08-24 12:19:22 +0000 UTC <nil> <nil> map[watch-this-configmap:label-changed-and-restored] map[] [] [] [{e2e.test Update v1 2023-08-24 12:19:22 +0000 UTC FieldsV1 {"f:data":{".":{},"f:mutation":{}},"f:metadata":{"f:labels":{".":{},"f:watch-this-configmap":{}}}} }]},Data:map[string]string{mutation: 1,},BinaryData:map[string][]byte{},Immutable:nil,}
  STEP: modifying the configmap a second time @ 08/24/23 12:19:22.348
  STEP: Expecting not to observe a notification because the object no longer meets the selector's requirements @ 08/24/23 12:19:22.367
  STEP: changing the label value of the configmap back @ 08/24/23 12:19:32.368
  STEP: modifying the configmap a third time @ 08/24/23 12:19:32.388
  STEP: deleting the configmap @ 08/24/23 12:19:32.405
  STEP: Expecting to observe an add notification for the watched object when the label value was restored @ 08/24/23 12:19:32.422
  Aug 24 12:19:32.422: INFO: Got : ADDED &ConfigMap{ObjectMeta:{e2e-watch-test-label-changed  watch-5338  93a2cbae-a3a6-4f9f-9844-d311e252a63c 3404989094 0 2023-08-24 12:19:22 +0000 UTC <nil> <nil> map[watch-this-configmap:label-changed-and-restored] map[] [] [] [{e2e.test Update v1 2023-08-24 12:19:32 +0000 UTC FieldsV1 {"f:data":{".":{},"f:mutation":{}},"f:metadata":{"f:labels":{".":{},"f:watch-this-configmap":{}}}} }]},Data:map[string]string{mutation: 2,},BinaryData:map[string][]byte{},Immutable:nil,}
  Aug 24 12:19:32.423: INFO: Got : MODIFIED &ConfigMap{ObjectMeta:{e2e-watch-test-label-changed  watch-5338  93a2cbae-a3a6-4f9f-9844-d311e252a63c 3404989095 0 2023-08-24 12:19:22 +0000 UTC <nil> <nil> map[watch-this-configmap:label-changed-and-restored] map[] [] [] [{e2e.test Update v1 2023-08-24 12:19:32 +0000 UTC FieldsV1 {"f:data":{".":{},"f:mutation":{}},"f:metadata":{"f:labels":{".":{},"f:watch-this-configmap":{}}}} }]},Data:map[string]string{mutation: 3,},BinaryData:map[string][]byte{},Immutable:nil,}
  Aug 24 12:19:32.423: INFO: Got : DELETED &ConfigMap{ObjectMeta:{e2e-watch-test-label-changed  watch-5338  93a2cbae-a3a6-4f9f-9844-d311e252a63c 3404989100 0 2023-08-24 12:19:22 +0000 UTC <nil> <nil> map[watch-this-configmap:label-changed-and-restored] map[] [] [] [{e2e.test Update v1 2023-08-24 12:19:32 +0000 UTC FieldsV1 {"f:data":{".":{},"f:mutation":{}},"f:metadata":{"f:labels":{".":{},"f:watch-this-configmap":{}}}} }]},Data:map[string]string{mutation: 3,},BinaryData:map[string][]byte{},Immutable:nil,}
  Aug 24 12:19:32.423: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "watch-5338" for this suite. @ 08/24/23 12:19:32.434
• [10.190 seconds]
------------------------------
SSS
------------------------------
[sig-apps] StatefulSet Basic StatefulSet functionality [StatefulSetBasic] Should recreate evicted statefulset [Conformance]
test/e2e/apps/statefulset.go:745
  STEP: Creating a kubernetes client @ 08/24/23 12:19:32.447
  Aug 24 12:19:32.447: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename statefulset @ 08/24/23 12:19:32.448
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 12:19:32.473
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 12:19:32.479
  STEP: Creating service test in namespace statefulset-1305 @ 08/24/23 12:19:32.485
  STEP: Looking for a node to schedule stateful set and pod @ 08/24/23 12:19:32.498
  STEP: Creating pod with conflicting port in namespace statefulset-1305 @ 08/24/23 12:19:32.525
  STEP: Waiting until pod test-pod will start running in namespace statefulset-1305 @ 08/24/23 12:19:32.549
  STEP: Creating statefulset with conflicting port in namespace statefulset-1305 @ 08/24/23 12:19:34.567
  STEP: Waiting until stateful pod ss-0 will be recreated and deleted at least once in namespace statefulset-1305 @ 08/24/23 12:19:34.58
  Aug 24 12:19:34.637: INFO: Observed stateful pod in namespace: statefulset-1305, name: ss-0, uid: 46918002-8012-4cad-834e-fe2c5069fdbc, status phase: Pending. Waiting for statefulset controller to delete.
  Aug 24 12:19:34.661: INFO: Observed stateful pod in namespace: statefulset-1305, name: ss-0, uid: 46918002-8012-4cad-834e-fe2c5069fdbc, status phase: Failed. Waiting for statefulset controller to delete.
  Aug 24 12:19:34.685: INFO: Observed stateful pod in namespace: statefulset-1305, name: ss-0, uid: 46918002-8012-4cad-834e-fe2c5069fdbc, status phase: Failed. Waiting for statefulset controller to delete.
  Aug 24 12:19:34.697: INFO: Observed delete event for stateful pod ss-0 in namespace statefulset-1305
  STEP: Removing pod with conflicting port in namespace statefulset-1305 @ 08/24/23 12:19:34.697
  STEP: Waiting when stateful pod ss-0 will be recreated in namespace statefulset-1305 and will be in running state @ 08/24/23 12:19:34.766
  Aug 24 12:19:36.787: INFO: Deleting all statefulset in ns statefulset-1305
  Aug 24 12:19:36.796: INFO: Scaling statefulset ss to 0
  Aug 24 12:19:46.839: INFO: Waiting for statefulset status.replicas updated to 0
  Aug 24 12:19:46.847: INFO: Deleting statefulset ss
  Aug 24 12:19:46.878: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "statefulset-1305" for this suite. @ 08/24/23 12:19:46.888
• [14.455 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-auth] ServiceAccounts should guarantee kube-root-ca.crt exist in any namespace [Conformance]
test/e2e/auth/service_accounts.go:740
  STEP: Creating a kubernetes client @ 08/24/23 12:19:46.904
  Aug 24 12:19:46.904: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename svcaccounts @ 08/24/23 12:19:46.905
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 12:19:46.954
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 12:19:46.961
  Aug 24 12:19:46.975: INFO: Got root ca configmap in namespace "svcaccounts-1190"
  Aug 24 12:19:46.990: INFO: Deleted root ca configmap in namespace "svcaccounts-1190"
  STEP: waiting for a new root ca configmap created @ 08/24/23 12:19:47.491
  Aug 24 12:19:47.500: INFO: Recreated root ca configmap in namespace "svcaccounts-1190"
  Aug 24 12:19:47.513: INFO: Updated root ca configmap in namespace "svcaccounts-1190"
  STEP: waiting for the root ca configmap reconciled @ 08/24/23 12:19:48.014
  Aug 24 12:19:48.022: INFO: Reconciled root ca configmap in namespace "svcaccounts-1190"
  Aug 24 12:19:48.022: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "svcaccounts-1190" for this suite. @ 08/24/23 12:19:48.033
• [1.142 seconds]
------------------------------
SSSSSSSSSSSS
------------------------------
[sig-apps] ReplicationController should get and update a ReplicationController scale [Conformance]
test/e2e/apps/rc.go:424
  STEP: Creating a kubernetes client @ 08/24/23 12:19:48.046
  Aug 24 12:19:48.046: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename replication-controller @ 08/24/23 12:19:48.047
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 12:19:48.077
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 12:19:48.084
  STEP: Creating ReplicationController "e2e-rc-vb5gc" @ 08/24/23 12:19:48.091
  Aug 24 12:19:48.104: INFO: Get Replication Controller "e2e-rc-vb5gc" to confirm replicas
  Aug 24 12:19:49.112: INFO: Get Replication Controller "e2e-rc-vb5gc" to confirm replicas
  Aug 24 12:19:49.121: INFO: Found 1 replicas for "e2e-rc-vb5gc" replication controller
  STEP: Getting scale subresource for ReplicationController "e2e-rc-vb5gc" @ 08/24/23 12:19:49.121
  STEP: Updating a scale subresource @ 08/24/23 12:19:49.129
  STEP: Verifying replicas where modified for replication controller "e2e-rc-vb5gc" @ 08/24/23 12:19:49.142
  Aug 24 12:19:49.142: INFO: Get Replication Controller "e2e-rc-vb5gc" to confirm replicas
  Aug 24 12:19:50.152: INFO: Get Replication Controller "e2e-rc-vb5gc" to confirm replicas
  Aug 24 12:19:50.160: INFO: Found 2 replicas for "e2e-rc-vb5gc" replication controller
  Aug 24 12:19:50.160: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "replication-controller-5604" for this suite. @ 08/24/23 12:19:50.17
• [2.137 seconds]
------------------------------
SSSSSSSSSSSS
------------------------------
[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should deny crd creation [Conformance]
test/e2e/apimachinery/webhook.go:301
  STEP: Creating a kubernetes client @ 08/24/23 12:19:50.185
  Aug 24 12:19:50.185: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename webhook @ 08/24/23 12:19:50.186
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 12:19:50.215
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 12:19:50.221
  STEP: Setting up server cert @ 08/24/23 12:19:50.268
  STEP: Create role binding to let webhook read extension-apiserver-authentication @ 08/24/23 12:19:50.679
  STEP: Deploying the webhook pod @ 08/24/23 12:19:50.698
  STEP: Wait for the deployment to be ready @ 08/24/23 12:19:50.724
  Aug 24 12:19:50.740: INFO: deployment "sample-webhook-deployment" doesn't have the required revision set
  STEP: Deploying the webhook service @ 08/24/23 12:19:52.764
  STEP: Verifying the service has paired with the endpoint @ 08/24/23 12:19:52.785
  Aug 24 12:19:53.785: INFO: Waiting for amount of service:e2e-test-webhook endpoints to be 1
  STEP: Registering the crd webhook via the AdmissionRegistration API @ 08/24/23 12:19:53.802
  STEP: Creating a custom resource definition that should be denied by the webhook @ 08/24/23 12:19:53.84
  Aug 24 12:19:53.840: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  Aug 24 12:19:53.867: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "webhook-858" for this suite. @ 08/24/23 12:19:54
  STEP: Destroying namespace "webhook-markers-3079" for this suite. @ 08/24/23 12:19:54.05
• [3.880 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-storage] Secrets should be immutable if `immutable` field is set [Conformance]
test/e2e/common/storage/secrets_volume.go:386
  STEP: Creating a kubernetes client @ 08/24/23 12:19:54.066
  Aug 24 12:19:54.066: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename secrets @ 08/24/23 12:19:54.067
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 12:19:54.097
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 12:19:54.105
  Aug 24 12:19:54.224: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "secrets-3026" for this suite. @ 08/24/23 12:19:54.235
• [0.183 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-apps] Daemon set [Serial] should retry creating failed daemon pods [Conformance]
test/e2e/apps/daemon_set.go:305
  STEP: Creating a kubernetes client @ 08/24/23 12:19:54.251
  Aug 24 12:19:54.251: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename daemonsets @ 08/24/23 12:19:54.252
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 12:19:54.278
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 12:19:54.285
  STEP: Creating a simple DaemonSet "daemon-set" @ 08/24/23 12:19:54.328
  STEP: Check that daemon pods launch on every node of the cluster. @ 08/24/23 12:19:54.339
  Aug 24 12:19:54.363: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 0
  Aug 24 12:19:54.363: INFO: Node scw-conformance-default-2af6d8b4c6264cc5b9e5e6 is running 0 daemon pod, expected 1
  Aug 24 12:19:55.385: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 0
  Aug 24 12:19:55.385: INFO: Node scw-conformance-default-2af6d8b4c6264cc5b9e5e6 is running 0 daemon pod, expected 1
  Aug 24 12:19:56.383: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 2
  Aug 24 12:19:56.383: INFO: Number of running nodes: 2, number of available pods: 2 in daemonset daemon-set
  STEP: Set a daemon pod's phase to 'Failed', check that the daemon pod is revived. @ 08/24/23 12:19:56.391
  Aug 24 12:19:56.457: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 2
  Aug 24 12:19:56.457: INFO: Number of running nodes: 2, number of available pods: 2 in daemonset daemon-set
  STEP: Wait for the failed daemon pod to be completely deleted. @ 08/24/23 12:19:56.457
  STEP: Deleting DaemonSet "daemon-set" @ 08/24/23 12:19:57.485
  STEP: deleting DaemonSet.extensions daemon-set in namespace daemonsets-1434, will wait for the garbage collector to delete the pods @ 08/24/23 12:19:57.485
  Aug 24 12:19:57.560: INFO: Deleting DaemonSet.extensions daemon-set took: 16.609462ms
  Aug 24 12:19:57.661: INFO: Terminating DaemonSet.extensions daemon-set pods took: 100.828277ms
  Aug 24 12:19:59.673: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 0
  Aug 24 12:19:59.673: INFO: Number of running nodes: 0, number of available pods: 0 in daemonset daemon-set
  Aug 24 12:19:59.681: INFO: daemonset: {"kind":"DaemonSetList","apiVersion":"apps/v1","metadata":{"resourceVersion":"3404990458"},"items":null}

  Aug 24 12:19:59.749: INFO: pods: {"kind":"PodList","apiVersion":"v1","metadata":{"resourceVersion":"3404990458"},"items":null}

  Aug 24 12:19:59.778: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "daemonsets-1434" for this suite. @ 08/24/23 12:19:59.787
• [5.611 seconds]
------------------------------
SSS
------------------------------
[sig-storage] Projected secret should be consumable in multiple volumes in a pod [NodeConformance] [Conformance]
test/e2e/common/storage/projected_secret.go:119
  STEP: Creating a kubernetes client @ 08/24/23 12:19:59.863
  Aug 24 12:19:59.863: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename projected @ 08/24/23 12:19:59.864
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 12:19:59.949
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 12:19:59.957
  STEP: Creating secret with name projected-secret-test-d0381e4b-9dca-4590-9002-cec110c2504d @ 08/24/23 12:19:59.964
  STEP: Creating a pod to test consume secrets @ 08/24/23 12:19:59.975
  STEP: Saw pod success @ 08/24/23 12:20:04.097
  Aug 24 12:20:04.104: INFO: Trying to get logs from node scw-conformance-default-2af6d8b4c6264cc5b9e5e6 pod pod-projected-secrets-545a9787-5c5a-418f-b2e0-67e5651ce3d4 container secret-volume-test: <nil>
  STEP: delete the pod @ 08/24/23 12:20:04.129
  Aug 24 12:20:04.167: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "projected-7640" for this suite. @ 08/24/23 12:20:04.175
• [4.327 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSS
------------------------------
[sig-storage] Projected downwardAPI should provide container's cpu limit [NodeConformance] [Conformance]
test/e2e/common/storage/projected_downwardapi.go:194
  STEP: Creating a kubernetes client @ 08/24/23 12:20:04.192
  Aug 24 12:20:04.192: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename projected @ 08/24/23 12:20:04.193
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 12:20:04.224
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 12:20:04.229
  STEP: Creating a pod to test downward API volume plugin @ 08/24/23 12:20:04.236
  STEP: Saw pod success @ 08/24/23 12:20:08.288
  Aug 24 12:20:08.296: INFO: Trying to get logs from node scw-conformance-default-2af6d8b4c6264cc5b9e5e6 pod downwardapi-volume-b408c275-31a3-468f-ba8c-daae61a4333b container client-container: <nil>
  STEP: delete the pod @ 08/24/23 12:20:08.315
  Aug 24 12:20:08.343: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "projected-6501" for this suite. @ 08/24/23 12:20:08.354
• [4.177 seconds]
------------------------------
[sig-storage] Projected configMap should be consumable from pods in volume with mappings [NodeConformance] [Conformance]
test/e2e/common/storage/projected_configmap.go:89
  STEP: Creating a kubernetes client @ 08/24/23 12:20:08.369
  Aug 24 12:20:08.369: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename projected @ 08/24/23 12:20:08.37
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 12:20:08.398
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 12:20:08.405
  STEP: Creating configMap with name projected-configmap-test-volume-map-34bcee4b-290f-4218-bbba-c0195a4f9d95 @ 08/24/23 12:20:08.41
  STEP: Creating a pod to test consume configMaps @ 08/24/23 12:20:08.421
  STEP: Saw pod success @ 08/24/23 12:20:12.468
  Aug 24 12:20:12.475: INFO: Trying to get logs from node scw-conformance-default-2af6d8b4c6264cc5b9e5e6 pod pod-projected-configmaps-20b4fbba-bcdf-45b3-be63-5f0486dd79ac container agnhost-container: <nil>
  STEP: delete the pod @ 08/24/23 12:20:12.492
  Aug 24 12:20:12.522: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "projected-7209" for this suite. @ 08/24/23 12:20:12.533
• [4.180 seconds]
------------------------------
SS
------------------------------
[sig-apps] CronJob should support CronJob API operations [Conformance]
test/e2e/apps/cronjob.go:324
  STEP: Creating a kubernetes client @ 08/24/23 12:20:12.55
  Aug 24 12:20:12.550: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename cronjob @ 08/24/23 12:20:12.551
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 12:20:12.586
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 12:20:12.593
  STEP: Creating a cronjob @ 08/24/23 12:20:12.599
  STEP: creating @ 08/24/23 12:20:12.599
  STEP: getting @ 08/24/23 12:20:12.612
  STEP: listing @ 08/24/23 12:20:12.623
  STEP: watching @ 08/24/23 12:20:12.629
  Aug 24 12:20:12.629: INFO: starting watch
  STEP: cluster-wide listing @ 08/24/23 12:20:12.632
  STEP: cluster-wide watching @ 08/24/23 12:20:12.64
  Aug 24 12:20:12.640: INFO: starting watch
  STEP: patching @ 08/24/23 12:20:12.643
  STEP: updating @ 08/24/23 12:20:12.657
  Aug 24 12:20:12.678: INFO: waiting for watch events with expected annotations
  Aug 24 12:20:12.678: INFO: saw patched and updated annotations
  STEP: patching /status @ 08/24/23 12:20:12.678
  STEP: updating /status @ 08/24/23 12:20:12.692
  STEP: get /status @ 08/24/23 12:20:12.709
  STEP: deleting @ 08/24/23 12:20:12.719
  STEP: deleting a collection @ 08/24/23 12:20:12.758
  Aug 24 12:20:12.789: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "cronjob-6962" for this suite. @ 08/24/23 12:20:12.8
• [0.262 seconds]
------------------------------
SSSSSSSSSSSSSSSSSS
------------------------------
[sig-storage] Subpath Atomic writer volumes should support subpaths with configmap pod with mountPath of existing file [Conformance]
test/e2e/storage/subpath.go:79
  STEP: Creating a kubernetes client @ 08/24/23 12:20:12.814
  Aug 24 12:20:12.814: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename subpath @ 08/24/23 12:20:12.815
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 12:20:12.84
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 12:20:12.847
  STEP: Setting up data @ 08/24/23 12:20:12.853
  STEP: Creating pod pod-subpath-test-configmap-c8hc @ 08/24/23 12:20:12.875
  STEP: Creating a pod to test atomic-volume-subpath @ 08/24/23 12:20:12.875
  STEP: Saw pod success @ 08/24/23 12:20:37.031
  Aug 24 12:20:37.038: INFO: Trying to get logs from node scw-conformance-default-2af6d8b4c6264cc5b9e5e6 pod pod-subpath-test-configmap-c8hc container test-container-subpath-configmap-c8hc: <nil>
  STEP: delete the pod @ 08/24/23 12:20:37.055
  STEP: Deleting pod pod-subpath-test-configmap-c8hc @ 08/24/23 12:20:37.091
  Aug 24 12:20:37.091: INFO: Deleting pod "pod-subpath-test-configmap-c8hc" in namespace "subpath-9334"
  Aug 24 12:20:37.100: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "subpath-9334" for this suite. @ 08/24/23 12:20:37.11
• [24.318 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-apps] StatefulSet Basic StatefulSet functionality [StatefulSetBasic] should perform rolling updates and roll backs of template modifications [Conformance]
test/e2e/apps/statefulset.go:318
  STEP: Creating a kubernetes client @ 08/24/23 12:20:37.132
  Aug 24 12:20:37.132: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename statefulset @ 08/24/23 12:20:37.133
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 12:20:37.163
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 12:20:37.169
  STEP: Creating service test in namespace statefulset-5047 @ 08/24/23 12:20:37.174
  STEP: Creating a new StatefulSet @ 08/24/23 12:20:37.186
  Aug 24 12:20:37.208: INFO: Found 0 stateful pods, waiting for 3
  Aug 24 12:20:47.221: INFO: Waiting for pod ss2-0 to enter Running - Ready=true, currently Running - Ready=true
  Aug 24 12:20:47.221: INFO: Waiting for pod ss2-1 to enter Running - Ready=true, currently Running - Ready=true
  Aug 24 12:20:47.221: INFO: Waiting for pod ss2-2 to enter Running - Ready=true, currently Running - Ready=true
  Aug 24 12:20:47.248: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1002171096 --namespace=statefulset-5047 exec ss2-1 -- /bin/sh -x -c mv -v /usr/local/apache2/htdocs/index.html /tmp/ || true'
  Aug 24 12:20:47.516: INFO: stderr: "+ mv -v /usr/local/apache2/htdocs/index.html /tmp/\n"
  Aug 24 12:20:47.516: INFO: stdout: "'/usr/local/apache2/htdocs/index.html' -> '/tmp/index.html'\n"
  Aug 24 12:20:47.516: INFO: stdout of mv -v /usr/local/apache2/htdocs/index.html /tmp/ || true on ss2-1: '/usr/local/apache2/htdocs/index.html' -> '/tmp/index.html'

  STEP: Updating StatefulSet template: update image from registry.k8s.io/e2e-test-images/httpd:2.4.38-4 to registry.k8s.io/e2e-test-images/httpd:2.4.39-4 @ 08/24/23 12:20:57.555
  Aug 24 12:20:57.590: INFO: Updating stateful set ss2
  STEP: Creating a new revision @ 08/24/23 12:20:57.59
  STEP: Updating Pods in reverse ordinal order @ 08/24/23 12:21:07.627
  Aug 24 12:21:07.636: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1002171096 --namespace=statefulset-5047 exec ss2-1 -- /bin/sh -x -c mv -v /tmp/index.html /usr/local/apache2/htdocs/ || true'
  Aug 24 12:21:07.890: INFO: stderr: "+ mv -v /tmp/index.html /usr/local/apache2/htdocs/\n"
  Aug 24 12:21:07.890: INFO: stdout: "'/tmp/index.html' -> '/usr/local/apache2/htdocs/index.html'\n"
  Aug 24 12:21:07.890: INFO: stdout of mv -v /tmp/index.html /usr/local/apache2/htdocs/ || true on ss2-1: '/tmp/index.html' -> '/usr/local/apache2/htdocs/index.html'

  STEP: Rolling back to a previous revision @ 08/24/23 12:21:17.953
  Aug 24 12:21:17.953: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1002171096 --namespace=statefulset-5047 exec ss2-1 -- /bin/sh -x -c mv -v /usr/local/apache2/htdocs/index.html /tmp/ || true'
  Aug 24 12:21:18.205: INFO: stderr: "+ mv -v /usr/local/apache2/htdocs/index.html /tmp/\n"
  Aug 24 12:21:18.205: INFO: stdout: "'/usr/local/apache2/htdocs/index.html' -> '/tmp/index.html'\n"
  Aug 24 12:21:18.205: INFO: stdout of mv -v /usr/local/apache2/htdocs/index.html /tmp/ || true on ss2-1: '/usr/local/apache2/htdocs/index.html' -> '/tmp/index.html'

  Aug 24 12:21:28.279: INFO: Updating stateful set ss2
  STEP: Rolling back update in reverse ordinal order @ 08/24/23 12:21:38.322
  Aug 24 12:21:38.332: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1002171096 --namespace=statefulset-5047 exec ss2-1 -- /bin/sh -x -c mv -v /tmp/index.html /usr/local/apache2/htdocs/ || true'
  Aug 24 12:21:38.570: INFO: stderr: "+ mv -v /tmp/index.html /usr/local/apache2/htdocs/\n"
  Aug 24 12:21:38.570: INFO: stdout: "'/tmp/index.html' -> '/usr/local/apache2/htdocs/index.html'\n"
  Aug 24 12:21:38.570: INFO: stdout of mv -v /tmp/index.html /usr/local/apache2/htdocs/ || true on ss2-1: '/tmp/index.html' -> '/usr/local/apache2/htdocs/index.html'

  Aug 24 12:21:48.630: INFO: Deleting all statefulset in ns statefulset-5047
  Aug 24 12:21:48.639: INFO: Scaling statefulset ss2 to 0
  Aug 24 12:21:58.711: INFO: Waiting for statefulset status.replicas updated to 0
  Aug 24 12:21:58.725: INFO: Deleting statefulset ss2
  Aug 24 12:21:58.753: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "statefulset-5047" for this suite. @ 08/24/23 12:21:58.763
• [81.656 seconds]
------------------------------
SSSSSSSSSSS
------------------------------
[sig-storage] Projected configMap optional updates should be reflected in volume [NodeConformance] [Conformance]
test/e2e/common/storage/projected_configmap.go:174
  STEP: Creating a kubernetes client @ 08/24/23 12:21:58.79
  Aug 24 12:21:58.790: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename projected @ 08/24/23 12:21:58.791
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 12:21:58.881
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 12:21:58.89
  STEP: Creating configMap with name cm-test-opt-del-cef3ed61-f8f5-4e99-b0b4-e27ac3061ae3 @ 08/24/23 12:21:58.91
  STEP: Creating configMap with name cm-test-opt-upd-0e93c798-0891-47b8-88be-4cc1e118dcf9 @ 08/24/23 12:21:58.919
  STEP: Creating the pod @ 08/24/23 12:21:58.928
  STEP: Deleting configmap cm-test-opt-del-cef3ed61-f8f5-4e99-b0b4-e27ac3061ae3 @ 08/24/23 12:22:01.037
  STEP: Updating configmap cm-test-opt-upd-0e93c798-0891-47b8-88be-4cc1e118dcf9 @ 08/24/23 12:22:01.053
  STEP: Creating configMap with name cm-test-opt-create-4d794486-dcc5-4116-88c1-5133f28e2ae9 @ 08/24/23 12:22:01.065
  STEP: waiting to observe update in volume @ 08/24/23 12:22:01.076
  Aug 24 12:22:03.152: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "projected-3888" for this suite. @ 08/24/23 12:22:03.161
• [4.386 seconds]
------------------------------
SSSSSSSSSSSSSSSSSS
------------------------------
[sig-cli] Kubectl client Kubectl cluster-info should check if Kubernetes control plane services is included in cluster-info  [Conformance]
test/e2e/kubectl/kubectl.go:1316
  STEP: Creating a kubernetes client @ 08/24/23 12:22:03.177
  Aug 24 12:22:03.177: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename kubectl @ 08/24/23 12:22:03.178
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 12:22:03.206
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 12:22:03.214
  STEP: validating cluster-info @ 08/24/23 12:22:03.22
  Aug 24 12:22:03.221: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1002171096 --namespace=kubectl-1478 cluster-info'
  Aug 24 12:22:03.314: INFO: stderr: ""
  Aug 24 12:22:03.314: INFO: stdout: "\x1b[0;32mKubernetes control plane\x1b[0m is running at \x1b[0;33mhttps://10.96.0.1:443\x1b[0m\n\nTo further debug and diagnose cluster problems, use 'kubectl cluster-info dump'.\n"
  Aug 24 12:22:03.314: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "kubectl-1478" for this suite. @ 08/24/23 12:22:03.323
• [0.160 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-apps] Deployment RollingUpdateDeployment should delete old pods and create new ones [Conformance]
test/e2e/apps/deployment.go:105
  STEP: Creating a kubernetes client @ 08/24/23 12:22:03.338
  Aug 24 12:22:03.338: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename deployment @ 08/24/23 12:22:03.339
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 12:22:03.366
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 12:22:03.371
  Aug 24 12:22:03.376: INFO: Creating replica set "test-rolling-update-controller" (going to be adopted)
  Aug 24 12:22:03.395: INFO: Pod name sample-pod: Found 0 pods out of 1
  Aug 24 12:22:08.405: INFO: Pod name sample-pod: Found 1 pods out of 1
  STEP: ensuring each pod is running @ 08/24/23 12:22:08.405
  Aug 24 12:22:08.405: INFO: Creating deployment "test-rolling-update-deployment"
  Aug 24 12:22:08.457: INFO: Ensuring deployment "test-rolling-update-deployment" gets the next revision from the one the adopted replica set "test-rolling-update-controller" has
  Aug 24 12:22:08.474: INFO: new replicaset for deployment "test-rolling-update-deployment" is yet to be created
  Aug 24 12:22:10.491: INFO: Ensuring status for deployment "test-rolling-update-deployment" is the expected
  Aug 24 12:22:10.499: INFO: Ensuring deployment "test-rolling-update-deployment" has one old replica set (the one it adopted)
  Aug 24 12:22:10.522: INFO: Deployment "test-rolling-update-deployment":
  (v1.Deployment) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=30) "test-rolling-update-deployment",
      GenerateName: (string) "",
      Namespace: (string) (len=15) "deployment-7421",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "bb345d12-e0f8-4253-b9a4-f37a5abd2a93",
      ResourceVersion: (string) (len=10) "3404997180",
      Generation: (int64) 1,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63828476528,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=1) {
        (string) (len=4) "name": (string) (len=10) "sample-pod"
      },
      Annotations: (map[string]string) (len=1) {
        (string) (len=33) "deployment.kubernetes.io/revision": (string) (len=19) "3546343826724305833"
      },
      OwnerReferences: ([]v1.OwnerReference) <nil>,
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "e2e.test",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828476528,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=637) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 6c 61 62 65 6c 73  22 3a 7b 22 2e 22 3a 7b  |f:labels":{".":{|
              00000020  7d 2c 22 66 3a 6e 61 6d  65 22 3a 7b 7d 7d 7d 2c  |},"f:name":{}}},|
              00000030  22 66 3a 73 70 65 63 22  3a 7b 22 66 3a 70 72 6f  |"f:spec":{"f:pro|
              00000040  67 72 65 73 73 44 65 61  64 6c 69 6e 65 53 65 63  |gressDeadlineSec|
              00000050  6f 6e 64 73 22 3a 7b 7d  2c 22 66 3a 72 65 70 6c  |onds":{},"f:repl|
              00000060  69 63 61 73 22 3a 7b 7d  2c 22 66 3a 72 65 76 69  |icas":{},"f:revi|
              00000070  73 69 6f 6e 48 69 73 74  6f 72 79 4c 69 6d 69 74  |sionHistoryLimit|
              00000080  22 3a 7b 7d 2c 22 66 3a  73 65 6c 65 63 74 6f 72  |":{},"f:selector|
              00000090  22 3a 7b 7d 2c 22 66 3a  73 74 72 61 74 65 67 79  |":{},"f:strategy|
              000000a0  22 3a 7b 22 66 3a 72 6f  6c 6c 69 6e 67 55 70 64  |":{"f:rollingUpd|
              000000b0  61 74 65 22 3a 7b 22 2e  22 3a 7b 7d 2c 22 66 3a  |ate":{".":{},"f:|
              000000c0  6d 61 78 53 75 72 67 65  22 3a 7b 7d 2c 22 66 3a  |maxSurge":{},"f:|
              000000d0  6d 61 78 55 6e 61 76 61  69 6c 61 62 6c 65 22 3a  |maxUnavailable":|
              000000e0  7b 7d 7d 2c 22 66 3a 74  79 70 65 22 3a 7b 7d 7d  |{}},"f:type":{}}|
              000000f0  2c 22 66 3a 74 65 6d 70  6c 61 74 65 22 3a 7b 22  |,"f:template":{"|
              00000100  66 3a 6d 65 74 61 64 61  74 61 22 3a 7b 22 66 3a  |f:metadata":{"f:|
              00000110  6c 61 62 65 6c 73 22 3a  7b 22 2e 22 3a 7b 7d 2c  |labels":{".":{},|
              00000120  22 66 3a 6e 61 6d 65 22  3a 7b 7d 7d 7d 2c 22 66  |"f:name":{}}},"f|
              00000130  3a 73 70 65 63 22 3a 7b  22 66 3a 63 6f 6e 74 61  |:spec":{"f:conta|
              00000140  69 6e 65 72 73 22 3a 7b  22 6b 3a 7b 5c 22 6e 61  |iners":{"k:{\"na|
              00000150  6d 65 5c 22 3a 5c 22 61  67 6e 68 6f 73 74 5c 22  |me\":\"agnhost\"|
              00000160  7d 22 3a 7b 22 2e 22 3a  7b 7d 2c 22 66 3a 69 6d  |}":{".":{},"f:im|
              00000170  61 67 65 22 3a 7b 7d 2c  22 66 3a 69 6d 61 67 65  |age":{},"f:image|
              00000180  50 75 6c 6c 50 6f 6c 69  63 79 22 3a 7b 7d 2c 22  |PullPolicy":{},"|
              00000190  66 3a 6e 61 6d 65 22 3a  7b 7d 2c 22 66 3a 72 65  |f:name":{},"f:re|
              000001a0  73 6f 75 72 63 65 73 22  3a 7b 7d 2c 22 66 3a 73  |sources":{},"f:s|
              000001b0  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              000001c0  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              000001d0  6e 4d 65 73 73 61 67 65  50 61 74 68 22 3a 7b 7d  |nMessagePath":{}|
              000001e0  2c 22 66 3a 74 65 72 6d  69 6e 61 74 69 6f 6e 4d  |,"f:terminationM|
              000001f0  65 73 73 61 67 65 50 6f  6c 69 63 79 22 3a 7b 7d  |essagePolicy":{}|
              00000200  7d 7d 2c 22 66 3a 64 6e  73 50 6f 6c 69 63 79 22  |}},"f:dnsPolicy"|
              00000210  3a 7b 7d 2c 22 66 3a 72  65 73 74 61 72 74 50 6f  |:{},"f:restartPo|
              00000220  6c 69 63 79 22 3a 7b 7d  2c 22 66 3a 73 63 68 65  |licy":{},"f:sche|
              00000230  64 75 6c 65 72 4e 61 6d  65 22 3a 7b 7d 2c 22 66  |dulerName":{},"f|
              00000240  3a 73 65 63 75 72 69 74  79 43 6f 6e 74 65 78 74  |:securityContext|
              00000250  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000260  69 6f 6e 47 72 61 63 65  50 65 72 69 6f 64 53 65  |ionGracePeriodSe|
              00000270  63 6f 6e 64 73 22 3a 7b  7d 7d 7d 7d 7d           |conds":{}}}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828476530,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=514) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 61 6e 6e 6f 74 61  74 69 6f 6e 73 22 3a 7b  |f:annotations":{|
              00000020  22 2e 22 3a 7b 7d 2c 22  66 3a 64 65 70 6c 6f 79  |".":{},"f:deploy|
              00000030  6d 65 6e 74 2e 6b 75 62  65 72 6e 65 74 65 73 2e  |ment.kubernetes.|
              00000040  69 6f 2f 72 65 76 69 73  69 6f 6e 22 3a 7b 7d 7d  |io/revision":{}}|
              00000050  7d 2c 22 66 3a 73 74 61  74 75 73 22 3a 7b 22 66  |},"f:status":{"f|
              00000060  3a 61 76 61 69 6c 61 62  6c 65 52 65 70 6c 69 63  |:availableReplic|
              00000070  61 73 22 3a 7b 7d 2c 22  66 3a 63 6f 6e 64 69 74  |as":{},"f:condit|
              00000080  69 6f 6e 73 22 3a 7b 22  2e 22 3a 7b 7d 2c 22 6b  |ions":{".":{},"k|
              00000090  3a 7b 5c 22 74 79 70 65  5c 22 3a 5c 22 41 76 61  |:{\"type\":\"Ava|
              000000a0  69 6c 61 62 6c 65 5c 22  7d 22 3a 7b 22 2e 22 3a  |ilable\"}":{".":|
              000000b0  7b 7d 2c 22 66 3a 6c 61  73 74 54 72 61 6e 73 69  |{},"f:lastTransi|
              000000c0  74 69 6f 6e 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |tionTime":{},"f:|
              000000d0  6c 61 73 74 55 70 64 61  74 65 54 69 6d 65 22 3a  |lastUpdateTime":|
              000000e0  7b 7d 2c 22 66 3a 6d 65  73 73 61 67 65 22 3a 7b  |{},"f:message":{|
              000000f0  7d 2c 22 66 3a 72 65 61  73 6f 6e 22 3a 7b 7d 2c  |},"f:reason":{},|
              00000100  22 66 3a 73 74 61 74 75  73 22 3a 7b 7d 2c 22 66  |"f:status":{},"f|
              00000110  3a 74 79 70 65 22 3a 7b  7d 7d 2c 22 6b 3a 7b 5c  |:type":{}},"k:{\|
              00000120  22 74 79 70 65 5c 22 3a  5c 22 50 72 6f 67 72 65  |"type\":\"Progre|
              00000130  73 73 69 6e 67 5c 22 7d  22 3a 7b 22 2e 22 3a 7b  |ssing\"}":{".":{|
              00000140  7d 2c 22 66 3a 6c 61 73  74 54 72 61 6e 73 69 74  |},"f:lastTransit|
              00000150  69 6f 6e 54 69 6d 65 22  3a 7b 7d 2c 22 66 3a 6c  |ionTime":{},"f:l|
              00000160  61 73 74 55 70 64 61 74  65 54 69 6d 65 22 3a 7b  |astUpdateTime":{|
              00000170  7d 2c 22 66 3a 6d 65 73  73 61 67 65 22 3a 7b 7d  |},"f:message":{}|
              00000180  2c 22 66 3a 72 65 61 73  6f 6e 22 3a 7b 7d 2c 22  |,"f:reason":{},"|
              00000190  66 3a 73 74 61 74 75 73  22 3a 7b 7d 2c 22 66 3a  |f:status":{},"f:|
              000001a0  74 79 70 65 22 3a 7b 7d  7d 7d 2c 22 66 3a 6f 62  |type":{}}},"f:ob|
              000001b0  73 65 72 76 65 64 47 65  6e 65 72 61 74 69 6f 6e  |servedGeneration|
              000001c0  22 3a 7b 7d 2c 22 66 3a  72 65 61 64 79 52 65 70  |":{},"f:readyRep|
              000001d0  6c 69 63 61 73 22 3a 7b  7d 2c 22 66 3a 72 65 70  |licas":{},"f:rep|
              000001e0  6c 69 63 61 73 22 3a 7b  7d 2c 22 66 3a 75 70 64  |licas":{},"f:upd|
              000001f0  61 74 65 64 52 65 70 6c  69 63 61 73 22 3a 7b 7d  |atedReplicas":{}|
              00000200  7d 7d                                             |}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.DeploymentSpec) {
      Replicas: (*int32)(1),
      Selector: (*v1.LabelSelector)({
        MatchLabels: (map[string]string) (len=1) {
          (string) (len=4) "name": (string) (len=10) "sample-pod"
        },
        MatchExpressions: ([]v1.LabelSelectorRequirement) <nil>
      }),
      Template: (v1.PodTemplateSpec) {
        ObjectMeta: (v1.ObjectMeta) {
          Name: (string) "",
          GenerateName: (string) "",
          Namespace: (string) "",
          SelfLink: (string) "",
          UID: (types.UID) "",
          ResourceVersion: (string) "",
          Generation: (int64) 0,
          CreationTimestamp: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          DeletionTimestamp: (*v1.Time)(<nil>),
          DeletionGracePeriodSeconds: (*int64)(<nil>),
          Labels: (map[string]string) (len=1) {
            (string) (len=4) "name": (string) (len=10) "sample-pod"
          },
          Annotations: (map[string]string) <nil>,
          OwnerReferences: ([]v1.OwnerReference) <nil>,
          Finalizers: ([]string) <nil>,
          ManagedFields: ([]v1.ManagedFieldsEntry) <nil>
        },
        Spec: (v1.PodSpec) {
          Volumes: ([]v1.Volume) <nil>,
          InitContainers: ([]v1.Container) <nil>,
          Containers: ([]v1.Container) (len=1) {
            (v1.Container) {
              Name: (string) (len=7) "agnhost",
              Image: (string) (len=44) "registry.k8s.io/e2e-test-images/agnhost:2.45",
              Command: ([]string) <nil>,
              Args: ([]string) <nil>,
              WorkingDir: (string) "",
              Ports: ([]v1.ContainerPort) <nil>,
              EnvFrom: ([]v1.EnvFromSource) <nil>,
              Env: ([]v1.EnvVar) <nil>,
              Resources: (v1.ResourceRequirements) {
                Limits: (v1.ResourceList) <nil>,
                Requests: (v1.ResourceList) <nil>,
                Claims: ([]v1.ResourceClaim) <nil>
              },
              ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
              RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
              VolumeMounts: ([]v1.VolumeMount) <nil>,
              VolumeDevices: ([]v1.VolumeDevice) <nil>,
              LivenessProbe: (*v1.Probe)(<nil>),
              ReadinessProbe: (*v1.Probe)(<nil>),
              StartupProbe: (*v1.Probe)(<nil>),
              Lifecycle: (*v1.Lifecycle)(<nil>),
              TerminationMessagePath: (string) (len=20) "/dev/termination-log",
              TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
              ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
              SecurityContext: (*v1.SecurityContext)({
                Capabilities: (*v1.Capabilities)(<nil>),
                Privileged: (*bool)(<nil>),
                SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
                WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
                RunAsUser: (*int64)(<nil>),
                RunAsGroup: (*int64)(<nil>),
                RunAsNonRoot: (*bool)(<nil>),
                ReadOnlyRootFilesystem: (*bool)(<nil>),
                AllowPrivilegeEscalation: (*bool)(<nil>),
                ProcMount: (*v1.ProcMountType)(<nil>),
                SeccompProfile: (*v1.SeccompProfile)(<nil>)
              }),
              Stdin: (bool) false,
              StdinOnce: (bool) false,
              TTY: (bool) false
            }
          },
          EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
          RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
          TerminationGracePeriodSeconds: (*int64)(0),
          ActiveDeadlineSeconds: (*int64)(<nil>),
          DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
          NodeSelector: (map[string]string) <nil>,
          ServiceAccountName: (string) "",
          DeprecatedServiceAccount: (string) "",
          AutomountServiceAccountToken: (*bool)(<nil>),
          NodeName: (string) "",
          HostNetwork: (bool) false,
          HostPID: (bool) false,
          HostIPC: (bool) false,
          ShareProcessNamespace: (*bool)(<nil>),
          SecurityContext: (*v1.PodSecurityContext)({
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            SupplementalGroups: ([]int64) <nil>,
            FSGroup: (*int64)(<nil>),
            Sysctls: ([]v1.Sysctl) <nil>,
            FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
          Hostname: (string) "",
          Subdomain: (string) "",
          Affinity: (*v1.Affinity)(<nil>),
          SchedulerName: (string) (len=17) "default-scheduler",
          Tolerations: ([]v1.Toleration) <nil>,
          HostAliases: ([]v1.HostAlias) <nil>,
          PriorityClassName: (string) "",
          Priority: (*int32)(<nil>),
          DNSConfig: (*v1.PodDNSConfig)(<nil>),
          ReadinessGates: ([]v1.PodReadinessGate) <nil>,
          RuntimeClassName: (*string)(<nil>),
          EnableServiceLinks: (*bool)(<nil>),
          PreemptionPolicy: (*v1.PreemptionPolicy)(<nil>),
          Overhead: (v1.ResourceList) <nil>,
          TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
          SetHostnameAsFQDN: (*bool)(<nil>),
          OS: (*v1.PodOS)(<nil>),
          HostUsers: (*bool)(<nil>),
          SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
          ResourceClaims: ([]v1.PodResourceClaim) <nil>
        }
      },
      Strategy: (v1.DeploymentStrategy) {
        Type: (v1.DeploymentStrategyType) (len=13) "RollingUpdate",
        RollingUpdate: (*v1.RollingUpdateDeployment)({
          MaxUnavailable: (*intstr.IntOrString)({
            Type: (intstr.Type) 1,
            IntVal: (int32) 0,
            StrVal: (string) (len=3) "25%"
          }),
          MaxSurge: (*intstr.IntOrString)({
            Type: (intstr.Type) 1,
            IntVal: (int32) 0,
            StrVal: (string) (len=3) "25%"
          })
        })
      },
      MinReadySeconds: (int32) 0,
      RevisionHistoryLimit: (*int32)(10),
      Paused: (bool) false,
      ProgressDeadlineSeconds: (*int32)(600)
    },
    Status: (v1.DeploymentStatus) {
      ObservedGeneration: (int64) 1,
      Replicas: (int32) 1,
      UpdatedReplicas: (int32) 1,
      ReadyReplicas: (int32) 1,
      AvailableReplicas: (int32) 1,
      UnavailableReplicas: (int32) 0,
      Conditions: ([]v1.DeploymentCondition) (len=2) {
        (v1.DeploymentCondition) {
          Type: (v1.DeploymentConditionType) (len=9) "Available",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastUpdateTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828476528,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828476528,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=24) "MinimumReplicasAvailable",
          Message: (string) (len=36) "Deployment has minimum availability."
        },
        (v1.DeploymentCondition) {
          Type: (v1.DeploymentConditionType) (len=11) "Progressing",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastUpdateTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828476530,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828476528,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=22) "NewReplicaSetAvailable",
          Message: (string) (len=82) "ReplicaSet \"test-rolling-update-deployment-7f5c55c64\" has successfully progressed."
        }
      },
      CollisionCount: (*int32)(<nil>)
    }
  }


  Aug 24 12:22:10.535: INFO: New ReplicaSet "test-rolling-update-deployment-7f5c55c64" of Deployment "test-rolling-update-deployment":
  (v1.ReplicaSet) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=40) "test-rolling-update-deployment-7f5c55c64",
      GenerateName: (string) "",
      Namespace: (string) (len=15) "deployment-7421",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "481909e2-5179-457f-8b6c-d02a3b612881",
      ResourceVersion: (string) (len=10) "3404997160",
      Generation: (int64) 1,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63828476528,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=10) "sample-pod",
        (string) (len=17) "pod-template-hash": (string) (len=9) "7f5c55c64"
      },
      Annotations: (map[string]string) (len=3) {
        (string) (len=37) "deployment.kubernetes.io/max-replicas": (string) (len=1) "2",
        (string) (len=33) "deployment.kubernetes.io/revision": (string) (len=19) "3546343826724305833",
        (string) (len=41) "deployment.kubernetes.io/desired-replicas": (string) (len=1) "1"
      },
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "Deployment",
          Name: (string) (len=30) "test-rolling-update-deployment",
          UID: (types.UID) (len=36) "bb345d12-e0f8-4253-b9a4-f37a5abd2a93",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828476528,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=783) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 61 6e 6e 6f 74 61  74 69 6f 6e 73 22 3a 7b  |f:annotations":{|
              00000020  22 2e 22 3a 7b 7d 2c 22  66 3a 64 65 70 6c 6f 79  |".":{},"f:deploy|
              00000030  6d 65 6e 74 2e 6b 75 62  65 72 6e 65 74 65 73 2e  |ment.kubernetes.|
              00000040  69 6f 2f 64 65 73 69 72  65 64 2d 72 65 70 6c 69  |io/desired-repli|
              00000050  63 61 73 22 3a 7b 7d 2c  22 66 3a 64 65 70 6c 6f  |cas":{},"f:deplo|
              00000060  79 6d 65 6e 74 2e 6b 75  62 65 72 6e 65 74 65 73  |yment.kubernetes|
              00000070  2e 69 6f 2f 6d 61 78 2d  72 65 70 6c 69 63 61 73  |.io/max-replicas|
              00000080  22 3a 7b 7d 2c 22 66 3a  64 65 70 6c 6f 79 6d 65  |":{},"f:deployme|
              00000090  6e 74 2e 6b 75 62 65 72  6e 65 74 65 73 2e 69 6f  |nt.kubernetes.io|
              000000a0  2f 72 65 76 69 73 69 6f  6e 22 3a 7b 7d 7d 2c 22  |/revision":{}},"|
              000000b0  66 3a 6c 61 62 65 6c 73  22 3a 7b 22 2e 22 3a 7b  |f:labels":{".":{|
              000000c0  7d 2c 22 66 3a 6e 61 6d  65 22 3a 7b 7d 2c 22 66  |},"f:name":{},"f|
              000000d0  3a 70 6f 64 2d 74 65 6d  70 6c 61 74 65 2d 68 61  |:pod-template-ha|
              000000e0  73 68 22 3a 7b 7d 7d 2c  22 66 3a 6f 77 6e 65 72  |sh":{}},"f:owner|
              000000f0  52 65 66 65 72 65 6e 63  65 73 22 3a 7b 22 2e 22  |References":{"."|
              00000100  3a 7b 7d 2c 22 6b 3a 7b  5c 22 75 69 64 5c 22 3a  |:{},"k:{\"uid\":|
              00000110  5c 22 62 62 33 34 35 64  31 32 2d 65 30 66 38 2d  |\"bb345d12-e0f8-|
              00000120  34 32 35 33 2d 62 39 61  34 2d 66 33 37 61 35 61  |4253-b9a4-f37a5a|
              00000130  62 64 32 61 39 33 5c 22  7d 22 3a 7b 7d 7d 7d 2c  |bd2a93\"}":{}}},|
              00000140  22 66 3a 73 70 65 63 22  3a 7b 22 66 3a 72 65 70  |"f:spec":{"f:rep|
              00000150  6c 69 63 61 73 22 3a 7b  7d 2c 22 66 3a 73 65 6c  |licas":{},"f:sel|
              00000160  65 63 74 6f 72 22 3a 7b  7d 2c 22 66 3a 74 65 6d  |ector":{},"f:tem|
              00000170  70 6c 61 74 65 22 3a 7b  22 66 3a 6d 65 74 61 64  |plate":{"f:metad|
              00000180  61 74 61 22 3a 7b 22 66  3a 6c 61 62 65 6c 73 22  |ata":{"f:labels"|
              00000190  3a 7b 22 2e 22 3a 7b 7d  2c 22 66 3a 6e 61 6d 65  |:{".":{},"f:name|
              000001a0  22 3a 7b 7d 2c 22 66 3a  70 6f 64 2d 74 65 6d 70  |":{},"f:pod-temp|
              000001b0  6c 61 74 65 2d 68 61 73  68 22 3a 7b 7d 7d 7d 2c  |late-hash":{}}},|
              000001c0  22 66 3a 73 70 65 63 22  3a 7b 22 66 3a 63 6f 6e  |"f:spec":{"f:con|
              000001d0  74 61 69 6e 65 72 73 22  3a 7b 22 6b 3a 7b 5c 22  |tainers":{"k:{\"|
              000001e0  6e 61 6d 65 5c 22 3a 5c  22 61 67 6e 68 6f 73 74  |name\":\"agnhost|
              000001f0  5c 22 7d 22 3a 7b 22 2e  22 3a 7b 7d 2c 22 66 3a  |\"}":{".":{},"f:|
              00000200  69 6d 61 67 65 22 3a 7b  7d 2c 22 66 3a 69 6d 61  |image":{},"f:ima|
              00000210  67 65 50 75 6c 6c 50 6f  6c 69 63 79 22 3a 7b 7d  |gePullPolicy":{}|
              00000220  2c 22 66 3a 6e 61 6d 65  22 3a 7b 7d 2c 22 66 3a  |,"f:name":{},"f:|
              00000230  72 65 73 6f 75 72 63 65  73 22 3a 7b 7d 2c 22 66  |resources":{},"f|
              00000240  3a 73 65 63 75 72 69 74  79 43 6f 6e 74 65 78 74  |:securityContext|
              00000250  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000260  69 6f 6e 4d 65 73 73 61  67 65 50 61 74 68 22 3a  |ionMessagePath":|
              00000270  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000280  6e 4d 65 73 73 61 67 65  50 6f 6c 69 63 79 22 3a  |nMessagePolicy":|
              00000290  7b 7d 7d 7d 2c 22 66 3a  64 6e 73 50 6f 6c 69 63  |{}}},"f:dnsPolic|
              000002a0  79 22 3a 7b 7d 2c 22 66  3a 72 65 73 74 61 72 74  |y":{},"f:restart|
              000002b0  50 6f 6c 69 63 79 22 3a  7b 7d 2c 22 66 3a 73 63  |Policy":{},"f:sc|
              000002c0  68 65 64 75 6c 65 72 4e  61 6d 65 22 3a 7b 7d 2c  |hedulerName":{},|
              000002d0  22 66 3a 73 65 63 75 72  69 74 79 43 6f 6e 74 65  |"f:securityConte|
              000002e0  78 74 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |xt":{},"f:termin|
              000002f0  61 74 69 6f 6e 47 72 61  63 65 50 65 72 69 6f 64  |ationGracePeriod|
              00000300  53 65 63 6f 6e 64 73 22  3a 7b 7d 7d 7d 7d 7d     |Seconds":{}}}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828476529,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=130) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  61 76 61 69 6c 61 62 6c  65 52 65 70 6c 69 63 61  |availableReplica|
              00000020  73 22 3a 7b 7d 2c 22 66  3a 66 75 6c 6c 79 4c 61  |s":{},"f:fullyLa|
              00000030  62 65 6c 65 64 52 65 70  6c 69 63 61 73 22 3a 7b  |beledReplicas":{|
              00000040  7d 2c 22 66 3a 6f 62 73  65 72 76 65 64 47 65 6e  |},"f:observedGen|
              00000050  65 72 61 74 69 6f 6e 22  3a 7b 7d 2c 22 66 3a 72  |eration":{},"f:r|
              00000060  65 61 64 79 52 65 70 6c  69 63 61 73 22 3a 7b 7d  |eadyReplicas":{}|
              00000070  2c 22 66 3a 72 65 70 6c  69 63 61 73 22 3a 7b 7d  |,"f:replicas":{}|
              00000080  7d 7d                                             |}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.ReplicaSetSpec) {
      Replicas: (*int32)(1),
      MinReadySeconds: (int32) 0,
      Selector: (*v1.LabelSelector)({
        MatchLabels: (map[string]string) (len=2) {
          (string) (len=4) "name": (string) (len=10) "sample-pod",
          (string) (len=17) "pod-template-hash": (string) (len=9) "7f5c55c64"
        },
        MatchExpressions: ([]v1.LabelSelectorRequirement) <nil>
      }),
      Template: (v1.PodTemplateSpec) {
        ObjectMeta: (v1.ObjectMeta) {
          Name: (string) "",
          GenerateName: (string) "",
          Namespace: (string) "",
          SelfLink: (string) "",
          UID: (types.UID) "",
          ResourceVersion: (string) "",
          Generation: (int64) 0,
          CreationTimestamp: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          DeletionTimestamp: (*v1.Time)(<nil>),
          DeletionGracePeriodSeconds: (*int64)(<nil>),
          Labels: (map[string]string) (len=2) {
            (string) (len=4) "name": (string) (len=10) "sample-pod",
            (string) (len=17) "pod-template-hash": (string) (len=9) "7f5c55c64"
          },
          Annotations: (map[string]string) <nil>,
          OwnerReferences: ([]v1.OwnerReference) <nil>,
          Finalizers: ([]string) <nil>,
          ManagedFields: ([]v1.ManagedFieldsEntry) <nil>
        },
        Spec: (v1.PodSpec) {
          Volumes: ([]v1.Volume) <nil>,
          InitContainers: ([]v1.Container) <nil>,
          Containers: ([]v1.Container) (len=1) {
            (v1.Container) {
              Name: (string) (len=7) "agnhost",
              Image: (string) (len=44) "registry.k8s.io/e2e-test-images/agnhost:2.45",
              Command: ([]string) <nil>,
              Args: ([]string) <nil>,
              WorkingDir: (string) "",
              Ports: ([]v1.ContainerPort) <nil>,
              EnvFrom: ([]v1.EnvFromSource) <nil>,
              Env: ([]v1.EnvVar) <nil>,
              Resources: (v1.ResourceRequirements) {
                Limits: (v1.ResourceList) <nil>,
                Requests: (v1.ResourceList) <nil>,
                Claims: ([]v1.ResourceClaim) <nil>
              },
              ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
              RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
              VolumeMounts: ([]v1.VolumeMount) <nil>,
              VolumeDevices: ([]v1.VolumeDevice) <nil>,
              LivenessProbe: (*v1.Probe)(<nil>),
              ReadinessProbe: (*v1.Probe)(<nil>),
              StartupProbe: (*v1.Probe)(<nil>),
              Lifecycle: (*v1.Lifecycle)(<nil>),
              TerminationMessagePath: (string) (len=20) "/dev/termination-log",
              TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
              ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
              SecurityContext: (*v1.SecurityContext)({
                Capabilities: (*v1.Capabilities)(<nil>),
                Privileged: (*bool)(<nil>),
                SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
                WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
                RunAsUser: (*int64)(<nil>),
                RunAsGroup: (*int64)(<nil>),
                RunAsNonRoot: (*bool)(<nil>),
                ReadOnlyRootFilesystem: (*bool)(<nil>),
                AllowPrivilegeEscalation: (*bool)(<nil>),
                ProcMount: (*v1.ProcMountType)(<nil>),
                SeccompProfile: (*v1.SeccompProfile)(<nil>)
              }),
              Stdin: (bool) false,
              StdinOnce: (bool) false,
              TTY: (bool) false
            }
          },
          EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
          RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
          TerminationGracePeriodSeconds: (*int64)(0),
          ActiveDeadlineSeconds: (*int64)(<nil>),
          DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
          NodeSelector: (map[string]string) <nil>,
          ServiceAccountName: (string) "",
          DeprecatedServiceAccount: (string) "",
          AutomountServiceAccountToken: (*bool)(<nil>),
          NodeName: (string) "",
          HostNetwork: (bool) false,
          HostPID: (bool) false,
          HostIPC: (bool) false,
          ShareProcessNamespace: (*bool)(<nil>),
          SecurityContext: (*v1.PodSecurityContext)({
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            SupplementalGroups: ([]int64) <nil>,
            FSGroup: (*int64)(<nil>),
            Sysctls: ([]v1.Sysctl) <nil>,
            FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
          Hostname: (string) "",
          Subdomain: (string) "",
          Affinity: (*v1.Affinity)(<nil>),
          SchedulerName: (string) (len=17) "default-scheduler",
          Tolerations: ([]v1.Toleration) <nil>,
          HostAliases: ([]v1.HostAlias) <nil>,
          PriorityClassName: (string) "",
          Priority: (*int32)(<nil>),
          DNSConfig: (*v1.PodDNSConfig)(<nil>),
          ReadinessGates: ([]v1.PodReadinessGate) <nil>,
          RuntimeClassName: (*string)(<nil>),
          EnableServiceLinks: (*bool)(<nil>),
          PreemptionPolicy: (*v1.PreemptionPolicy)(<nil>),
          Overhead: (v1.ResourceList) <nil>,
          TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
          SetHostnameAsFQDN: (*bool)(<nil>),
          OS: (*v1.PodOS)(<nil>),
          HostUsers: (*bool)(<nil>),
          SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
          ResourceClaims: ([]v1.PodResourceClaim) <nil>
        }
      }
    },
    Status: (v1.ReplicaSetStatus) {
      Replicas: (int32) 1,
      FullyLabeledReplicas: (int32) 1,
      ReadyReplicas: (int32) 1,
      AvailableReplicas: (int32) 1,
      ObservedGeneration: (int64) 1,
      Conditions: ([]v1.ReplicaSetCondition) <nil>
    }
  }

  Aug 24 12:22:10.536: INFO: All old ReplicaSets of Deployment "test-rolling-update-deployment":
  Aug 24 12:22:10.536: INFO: (v1.ReplicaSet) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=30) "test-rolling-update-controller",
      GenerateName: (string) "",
      Namespace: (string) (len=15) "deployment-7421",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "7d034294-9763-445d-b30a-f2cad0fdca75",
      ResourceVersion: (string) (len=10) "3404997176",
      Generation: (int64) 2,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63828476523,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=10) "sample-pod",
        (string) (len=3) "pod": (string) (len=5) "httpd"
      },
      Annotations: (map[string]string) (len=3) {
        (string) (len=37) "deployment.kubernetes.io/max-replicas": (string) (len=1) "2",
        (string) (len=33) "deployment.kubernetes.io/revision": (string) (len=19) "3546343826724305832",
        (string) (len=41) "deployment.kubernetes.io/desired-replicas": (string) (len=1) "1"
      },
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "Deployment",
          Name: (string) (len=30) "test-rolling-update-deployment",
          UID: (types.UID) (len=36) "bb345d12-e0f8-4253-b9a4-f37a5abd2a93",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=3) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "e2e.test",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828476523,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=533) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 61 6e 6e 6f 74 61  74 69 6f 6e 73 22 3a 7b  |f:annotations":{|
              00000020  22 2e 22 3a 7b 7d 2c 22  66 3a 64 65 70 6c 6f 79  |".":{},"f:deploy|
              00000030  6d 65 6e 74 2e 6b 75 62  65 72 6e 65 74 65 73 2e  |ment.kubernetes.|
              00000040  69 6f 2f 72 65 76 69 73  69 6f 6e 22 3a 7b 7d 7d  |io/revision":{}}|
              00000050  2c 22 66 3a 6c 61 62 65  6c 73 22 3a 7b 22 2e 22  |,"f:labels":{"."|
              00000060  3a 7b 7d 2c 22 66 3a 6e  61 6d 65 22 3a 7b 7d 2c  |:{},"f:name":{},|
              00000070  22 66 3a 70 6f 64 22 3a  7b 7d 7d 7d 2c 22 66 3a  |"f:pod":{}}},"f:|
              00000080  73 70 65 63 22 3a 7b 22  66 3a 73 65 6c 65 63 74  |spec":{"f:select|
              00000090  6f 72 22 3a 7b 7d 2c 22  66 3a 74 65 6d 70 6c 61  |or":{},"f:templa|
              000000a0  74 65 22 3a 7b 22 66 3a  6d 65 74 61 64 61 74 61  |te":{"f:metadata|
              000000b0  22 3a 7b 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |":{"f:labels":{"|
              000000c0  2e 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |.":{},"f:name":{|
              000000d0  7d 2c 22 66 3a 70 6f 64  22 3a 7b 7d 7d 7d 2c 22  |},"f:pod":{}}},"|
              000000e0  66 3a 73 70 65 63 22 3a  7b 22 66 3a 63 6f 6e 74  |f:spec":{"f:cont|
              000000f0  61 69 6e 65 72 73 22 3a  7b 22 6b 3a 7b 5c 22 6e  |ainers":{"k:{\"n|
              00000100  61 6d 65 5c 22 3a 5c 22  68 74 74 70 64 5c 22 7d  |ame\":\"httpd\"}|
              00000110  22 3a 7b 22 2e 22 3a 7b  7d 2c 22 66 3a 69 6d 61  |":{".":{},"f:ima|
              00000120  67 65 22 3a 7b 7d 2c 22  66 3a 69 6d 61 67 65 50  |ge":{},"f:imageP|
              00000130  75 6c 6c 50 6f 6c 69 63  79 22 3a 7b 7d 2c 22 66  |ullPolicy":{},"f|
              00000140  3a 6e 61 6d 65 22 3a 7b  7d 2c 22 66 3a 72 65 73  |:name":{},"f:res|
              00000150  6f 75 72 63 65 73 22 3a  7b 7d 2c 22 66 3a 74 65  |ources":{},"f:te|
              00000160  72 6d 69 6e 61 74 69 6f  6e 4d 65 73 73 61 67 65  |rminationMessage|
              00000170  50 61 74 68 22 3a 7b 7d  2c 22 66 3a 74 65 72 6d  |Path":{},"f:term|
              00000180  69 6e 61 74 69 6f 6e 4d  65 73 73 61 67 65 50 6f  |inationMessagePo|
              00000190  6c 69 63 79 22 3a 7b 7d  7d 7d 2c 22 66 3a 64 6e  |licy":{}}},"f:dn|
              000001a0  73 50 6f 6c 69 63 79 22  3a 7b 7d 2c 22 66 3a 72  |sPolicy":{},"f:r|
              000001b0  65 73 74 61 72 74 50 6f  6c 69 63 79 22 3a 7b 7d  |estartPolicy":{}|
              000001c0  2c 22 66 3a 73 63 68 65  64 75 6c 65 72 4e 61 6d  |,"f:schedulerNam|
              000001d0  65 22 3a 7b 7d 2c 22 66  3a 73 65 63 75 72 69 74  |e":{},"f:securit|
              000001e0  79 43 6f 6e 74 65 78 74  22 3a 7b 7d 2c 22 66 3a  |yContext":{},"f:|
              000001f0  74 65 72 6d 69 6e 61 74  69 6f 6e 47 72 61 63 65  |terminationGrace|
              00000200  50 65 72 69 6f 64 53 65  63 6f 6e 64 73 22 3a 7b  |PeriodSeconds":{|
              00000210  7d 7d 7d 7d 7d                                    |}}}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828476529,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=242) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 61 6e 6e 6f 74 61  74 69 6f 6e 73 22 3a 7b  |f:annotations":{|
              00000020  22 66 3a 64 65 70 6c 6f  79 6d 65 6e 74 2e 6b 75  |"f:deployment.ku|
              00000030  62 65 72 6e 65 74 65 73  2e 69 6f 2f 64 65 73 69  |bernetes.io/desi|
              00000040  72 65 64 2d 72 65 70 6c  69 63 61 73 22 3a 7b 7d  |red-replicas":{}|
              00000050  2c 22 66 3a 64 65 70 6c  6f 79 6d 65 6e 74 2e 6b  |,"f:deployment.k|
              00000060  75 62 65 72 6e 65 74 65  73 2e 69 6f 2f 6d 61 78  |ubernetes.io/max|
              00000070  2d 72 65 70 6c 69 63 61  73 22 3a 7b 7d 7d 2c 22  |-replicas":{}},"|
              00000080  66 3a 6f 77 6e 65 72 52  65 66 65 72 65 6e 63 65  |f:ownerReference|
              00000090  73 22 3a 7b 22 2e 22 3a  7b 7d 2c 22 6b 3a 7b 5c  |s":{".":{},"k:{\|
              000000a0  22 75 69 64 5c 22 3a 5c  22 62 62 33 34 35 64 31  |"uid\":\"bb345d1|
              000000b0  32 2d 65 30 66 38 2d 34  32 35 33 2d 62 39 61 34  |2-e0f8-4253-b9a4|
              000000c0  2d 66 33 37 61 35 61 62  64 32 61 39 33 5c 22 7d  |-f37a5abd2a93\"}|
              000000d0  22 3a 7b 7d 7d 7d 2c 22  66 3a 73 70 65 63 22 3a  |":{}}},"f:spec":|
              000000e0  7b 22 66 3a 72 65 70 6c  69 63 61 73 22 3a 7b 7d  |{"f:replicas":{}|
              000000f0  7d 7d                                             |}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828476530,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=56) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  6f 62 73 65 72 76 65 64  47 65 6e 65 72 61 74 69  |observedGenerati|
              00000020  6f 6e 22 3a 7b 7d 2c 22  66 3a 72 65 70 6c 69 63  |on":{},"f:replic|
              00000030  61 73 22 3a 7b 7d 7d 7d                           |as":{}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.ReplicaSetSpec) {
      Replicas: (*int32)(0),
      MinReadySeconds: (int32) 0,
      Selector: (*v1.LabelSelector)({
        MatchLabels: (map[string]string) (len=2) {
          (string) (len=4) "name": (string) (len=10) "sample-pod",
          (string) (len=3) "pod": (string) (len=5) "httpd"
        },
        MatchExpressions: ([]v1.LabelSelectorRequirement) <nil>
      }),
      Template: (v1.PodTemplateSpec) {
        ObjectMeta: (v1.ObjectMeta) {
          Name: (string) "",
          GenerateName: (string) "",
          Namespace: (string) "",
          SelfLink: (string) "",
          UID: (types.UID) "",
          ResourceVersion: (string) "",
          Generation: (int64) 0,
          CreationTimestamp: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          DeletionTimestamp: (*v1.Time)(<nil>),
          DeletionGracePeriodSeconds: (*int64)(<nil>),
          Labels: (map[string]string) (len=2) {
            (string) (len=4) "name": (string) (len=10) "sample-pod",
            (string) (len=3) "pod": (string) (len=5) "httpd"
          },
          Annotations: (map[string]string) <nil>,
          OwnerReferences: ([]v1.OwnerReference) <nil>,
          Finalizers: ([]string) <nil>,
          ManagedFields: ([]v1.ManagedFieldsEntry) <nil>
        },
        Spec: (v1.PodSpec) {
          Volumes: ([]v1.Volume) <nil>,
          InitContainers: ([]v1.Container) <nil>,
          Containers: ([]v1.Container) (len=1) {
            (v1.Container) {
              Name: (string) (len=5) "httpd",
              Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
              Command: ([]string) <nil>,
              Args: ([]string) <nil>,
              WorkingDir: (string) "",
              Ports: ([]v1.ContainerPort) <nil>,
              EnvFrom: ([]v1.EnvFromSource) <nil>,
              Env: ([]v1.EnvVar) <nil>,
              Resources: (v1.ResourceRequirements) {
                Limits: (v1.ResourceList) <nil>,
                Requests: (v1.ResourceList) <nil>,
                Claims: ([]v1.ResourceClaim) <nil>
              },
              ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
              RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
              VolumeMounts: ([]v1.VolumeMount) <nil>,
              VolumeDevices: ([]v1.VolumeDevice) <nil>,
              LivenessProbe: (*v1.Probe)(<nil>),
              ReadinessProbe: (*v1.Probe)(<nil>),
              StartupProbe: (*v1.Probe)(<nil>),
              Lifecycle: (*v1.Lifecycle)(<nil>),
              TerminationMessagePath: (string) (len=20) "/dev/termination-log",
              TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
              ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
              SecurityContext: (*v1.SecurityContext)(<nil>),
              Stdin: (bool) false,
              StdinOnce: (bool) false,
              TTY: (bool) false
            }
          },
          EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
          RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
          TerminationGracePeriodSeconds: (*int64)(0),
          ActiveDeadlineSeconds: (*int64)(<nil>),
          DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
          NodeSelector: (map[string]string) <nil>,
          ServiceAccountName: (string) "",
          DeprecatedServiceAccount: (string) "",
          AutomountServiceAccountToken: (*bool)(<nil>),
          NodeName: (string) "",
          HostNetwork: (bool) false,
          HostPID: (bool) false,
          HostIPC: (bool) false,
          ShareProcessNamespace: (*bool)(<nil>),
          SecurityContext: (*v1.PodSecurityContext)({
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            SupplementalGroups: ([]int64) <nil>,
            FSGroup: (*int64)(<nil>),
            Sysctls: ([]v1.Sysctl) <nil>,
            FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
          Hostname: (string) "",
          Subdomain: (string) "",
          Affinity: (*v1.Affinity)(<nil>),
          SchedulerName: (string) (len=17) "default-scheduler",
          Tolerations: ([]v1.Toleration) <nil>,
          HostAliases: ([]v1.HostAlias) <nil>,
          PriorityClassName: (string) "",
          Priority: (*int32)(<nil>),
          DNSConfig: (*v1.PodDNSConfig)(<nil>),
          ReadinessGates: ([]v1.PodReadinessGate) <nil>,
          RuntimeClassName: (*string)(<nil>),
          EnableServiceLinks: (*bool)(<nil>),
          PreemptionPolicy: (*v1.PreemptionPolicy)(<nil>),
          Overhead: (v1.ResourceList) <nil>,
          TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
          SetHostnameAsFQDN: (*bool)(<nil>),
          OS: (*v1.PodOS)(<nil>),
          HostUsers: (*bool)(<nil>),
          SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
          ResourceClaims: ([]v1.PodResourceClaim) <nil>
        }
      }
    },
    Status: (v1.ReplicaSetStatus) {
      Replicas: (int32) 0,
      FullyLabeledReplicas: (int32) 0,
      ReadyReplicas: (int32) 0,
      AvailableReplicas: (int32) 0,
      ObservedGeneration: (int64) 2,
      Conditions: ([]v1.ReplicaSetCondition) <nil>
    }
  }

  Aug 24 12:22:10.548: INFO: Pod "test-rolling-update-deployment-7f5c55c64-n848m" is available:
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=46) "test-rolling-update-deployment-7f5c55c64-n848m",
      GenerateName: (string) (len=41) "test-rolling-update-deployment-7f5c55c64-",
      Namespace: (string) (len=15) "deployment-7421",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "d835ad73-1665-479d-9475-1c65af841711",
      ResourceVersion: (string) (len=10) "3404997159",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63828476528,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=10) "sample-pod",
        (string) (len=17) "pod-template-hash": (string) (len=9) "7f5c55c64"
      },
      Annotations: (map[string]string) <nil>,
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=40) "test-rolling-update-deployment-7f5c55c64",
          UID: (types.UID) (len=36) "481909e2-5179-457f-8b6c-d02a3b612881",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828476528,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=539) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |.":{},"f:name":{|
              00000040  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              00000050  65 2d 68 61 73 68 22 3a  7b 7d 7d 2c 22 66 3a 6f  |e-hash":{}},"f:o|
              00000060  77 6e 65 72 52 65 66 65  72 65 6e 63 65 73 22 3a  |wnerReferences":|
              00000070  7b 22 2e 22 3a 7b 7d 2c  22 6b 3a 7b 5c 22 75 69  |{".":{},"k:{\"ui|
              00000080  64 5c 22 3a 5c 22 34 38  31 39 30 39 65 32 2d 35  |d\":\"481909e2-5|
              00000090  31 37 39 2d 34 35 37 66  2d 38 62 36 63 2d 64 30  |179-457f-8b6c-d0|
              000000a0  32 61 33 62 36 31 32 38  38 31 5c 22 7d 22 3a 7b  |2a3b612881\"}":{|
              000000b0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000000c0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              000000d0  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 61 67 6e  |:{\"name\":\"agn|
              000000e0  68 6f 73 74 5c 22 7d 22  3a 7b 22 2e 22 3a 7b 7d  |host\"}":{".":{}|
              000000f0  2c 22 66 3a 69 6d 61 67  65 22 3a 7b 7d 2c 22 66  |,"f:image":{},"f|
              00000100  3a 69 6d 61 67 65 50 75  6c 6c 50 6f 6c 69 63 79  |:imagePullPolicy|
              00000110  22 3a 7b 7d 2c 22 66 3a  6e 61 6d 65 22 3a 7b 7d  |":{},"f:name":{}|
              00000120  2c 22 66 3a 72 65 73 6f  75 72 63 65 73 22 3a 7b  |,"f:resources":{|
              00000130  7d 2c 22 66 3a 73 65 63  75 72 69 74 79 43 6f 6e  |},"f:securityCon|
              00000140  74 65 78 74 22 3a 7b 7d  2c 22 66 3a 74 65 72 6d  |text":{},"f:term|
              00000150  69 6e 61 74 69 6f 6e 4d  65 73 73 61 67 65 50 61  |inationMessagePa|
              00000160  74 68 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |th":{},"f:termin|
              00000170  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 6f 6c 69  |ationMessagePoli|
              00000180  63 79 22 3a 7b 7d 7d 7d  2c 22 66 3a 64 6e 73 50  |cy":{}}},"f:dnsP|
              00000190  6f 6c 69 63 79 22 3a 7b  7d 2c 22 66 3a 65 6e 61  |olicy":{},"f:ena|
              000001a0  62 6c 65 53 65 72 76 69  63 65 4c 69 6e 6b 73 22  |bleServiceLinks"|
              000001b0  3a 7b 7d 2c 22 66 3a 72  65 73 74 61 72 74 50 6f  |:{},"f:restartPo|
              000001c0  6c 69 63 79 22 3a 7b 7d  2c 22 66 3a 73 63 68 65  |licy":{},"f:sche|
              000001d0  64 75 6c 65 72 4e 61 6d  65 22 3a 7b 7d 2c 22 66  |dulerName":{},"f|
              000001e0  3a 73 65 63 75 72 69 74  79 43 6f 6e 74 65 78 74  |:securityContext|
              000001f0  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000200  69 6f 6e 47 72 61 63 65  50 65 72 69 6f 64 53 65  |ionGracePeriodSe|
              00000210  63 6f 6e 64 73 22 3a 7b  7d 7d 7d                 |conds":{}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=7) "kubelet",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828476529,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=517) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  63 6f 6e 64 69 74 69 6f  6e 73 22 3a 7b 22 6b 3a  |conditions":{"k:|
              00000020  7b 5c 22 74 79 70 65 5c  22 3a 5c 22 43 6f 6e 74  |{\"type\":\"Cont|
              00000030  61 69 6e 65 72 73 52 65  61 64 79 5c 22 7d 22 3a  |ainersReady\"}":|
              00000040  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000050  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000060  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000070  6d 65 22 3a 7b 7d 2c 22  66 3a 73 74 61 74 75 73  |me":{},"f:status|
              00000080  22 3a 7b 7d 2c 22 66 3a  74 79 70 65 22 3a 7b 7d  |":{},"f:type":{}|
              00000090  7d 2c 22 6b 3a 7b 5c 22  74 79 70 65 5c 22 3a 5c  |},"k:{\"type\":\|
              000000a0  22 49 6e 69 74 69 61 6c  69 7a 65 64 5c 22 7d 22  |"Initialized\"}"|
              000000b0  3a 7b 22 2e 22 3a 7b 7d  2c 22 66 3a 6c 61 73 74  |:{".":{},"f:last|
              000000c0  50 72 6f 62 65 54 69 6d  65 22 3a 7b 7d 2c 22 66  |ProbeTime":{},"f|
              000000d0  3a 6c 61 73 74 54 72 61  6e 73 69 74 69 6f 6e 54  |:lastTransitionT|
              000000e0  69 6d 65 22 3a 7b 7d 2c  22 66 3a 73 74 61 74 75  |ime":{},"f:statu|
              000000f0  73 22 3a 7b 7d 2c 22 66  3a 74 79 70 65 22 3a 7b  |s":{},"f:type":{|
              00000100  7d 7d 2c 22 6b 3a 7b 5c  22 74 79 70 65 5c 22 3a  |}},"k:{\"type\":|
              00000110  5c 22 52 65 61 64 79 5c  22 7d 22 3a 7b 22 2e 22  |\"Ready\"}":{"."|
              00000120  3a 7b 7d 2c 22 66 3a 6c  61 73 74 50 72 6f 62 65  |:{},"f:lastProbe|
              00000130  54 69 6d 65 22 3a 7b 7d  2c 22 66 3a 6c 61 73 74  |Time":{},"f:last|
              00000140  54 72 61 6e 73 69 74 69  6f 6e 54 69 6d 65 22 3a  |TransitionTime":|
              00000150  7b 7d 2c 22 66 3a 73 74  61 74 75 73 22 3a 7b 7d  |{},"f:status":{}|
              00000160  2c 22 66 3a 74 79 70 65  22 3a 7b 7d 7d 7d 2c 22  |,"f:type":{}}},"|
              00000170  66 3a 63 6f 6e 74 61 69  6e 65 72 53 74 61 74 75  |f:containerStatu|
              00000180  73 65 73 22 3a 7b 7d 2c  22 66 3a 68 6f 73 74 49  |ses":{},"f:hostI|
              00000190  50 22 3a 7b 7d 2c 22 66  3a 70 68 61 73 65 22 3a  |P":{},"f:phase":|
              000001a0  7b 7d 2c 22 66 3a 70 6f  64 49 50 22 3a 7b 7d 2c  |{},"f:podIP":{},|
              000001b0  22 66 3a 70 6f 64 49 50  73 22 3a 7b 22 2e 22 3a  |"f:podIPs":{".":|
              000001c0  7b 7d 2c 22 6b 3a 7b 5c  22 69 70 5c 22 3a 5c 22  |{},"k:{\"ip\":\"|
              000001d0  31 30 2e 31 30 30 2e 30  2e 39 5c 22 7d 22 3a 7b  |10.100.0.9\"}":{|
              000001e0  22 2e 22 3a 7b 7d 2c 22  66 3a 69 70 22 3a 7b 7d  |".":{},"f:ip":{}|
              000001f0  7d 7d 2c 22 66 3a 73 74  61 72 74 54 69 6d 65 22  |}},"f:startTime"|
              00000200  3a 7b 7d 7d 7d                                    |:{}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-cg85q",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  })
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=7) "agnhost",
          Image: (string) (len=44) "registry.k8s.io/e2e-test-images/agnhost:2.45",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-cg85q",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(0),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=46) "scw-conformance-default-2af6d8b4c6264cc5b9e5e6",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Running",
      Conditions: ([]v1.PodCondition) (len=4) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=11) "Initialized",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828476528,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=5) "Ready",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828476529,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=15) "ContainersReady",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828476529,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828476528,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) (len=11) "172.16.36.3",
      HostIPs: ([]v1.HostIP) <nil>,
      PodIP: (string) (len=10) "10.100.0.9",
      PodIPs: ([]v1.PodIP) (len=1) {
        (v1.PodIP) {
          IP: (string) (len=10) "10.100.0.9"
        }
      },
      StartTime: (*v1.Time)({
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63828476528,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      }),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) (len=1) {
        (v1.ContainerStatus) {
          Name: (string) (len=7) "agnhost",
          State: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)({
              StartedAt: (v1.Time) {
                Time: (time.Time) {
                  wall: (uint64) 0,
                  ext: (int64) 63828476529,
                  loc: (*time.Location)(<already shown>)
                }
              }
            }),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          LastTerminationState: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          Ready: (bool) true,
          RestartCount: (int32) 0,
          Image: (string) (len=44) "registry.k8s.io/e2e-test-images/agnhost:2.45",
          ImageID: (string) (len=111) "registry.k8s.io/e2e-test-images/agnhost@sha256:2c5b5b056076334e4cf431d964d102e44cbca8f1e6b16ac1e477a0ffbe6caac4",
          ContainerID: (string) (len=77) "containerd://0504b575a452cc60e60e1cea2a8b6eedaf5dec8d7201080c4b96e9dd446ba178",
          Started: (*bool)(true),
          AllocatedResources: (v1.ResourceList) <nil>,
          Resources: (*v1.ResourceRequirements)(<nil>)
        }
      },
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }

  Aug 24 12:22:10.554: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "deployment-7421" for this suite. @ 08/24/23 12:22:10.565
• [7.242 seconds]
------------------------------
SSSS
------------------------------
[sig-storage] ConfigMap updates should be reflected in volume [NodeConformance] [Conformance]
test/e2e/common/storage/configmap_volume.go:124
  STEP: Creating a kubernetes client @ 08/24/23 12:22:10.58
  Aug 24 12:22:10.580: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename configmap @ 08/24/23 12:22:10.582
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 12:22:10.613
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 12:22:10.619
  STEP: Creating configMap with name configmap-test-upd-c3f0f1c1-c9a5-409c-b9ec-ea4977c455a5 @ 08/24/23 12:22:10.635
  STEP: Creating the pod @ 08/24/23 12:22:10.646
  STEP: Updating configmap configmap-test-upd-c3f0f1c1-c9a5-409c-b9ec-ea4977c455a5 @ 08/24/23 12:22:12.717
  STEP: waiting to observe update in volume @ 08/24/23 12:22:12.729
  Aug 24 12:23:21.498: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "configmap-6180" for this suite. @ 08/24/23 12:23:21.508
• [70.941 seconds]
------------------------------
SSSSS
------------------------------
[sig-api-machinery] ResourceQuota should create a ResourceQuota and capture the life of a replication controller. [Conformance]
test/e2e/apimachinery/resource_quota.go:395
  STEP: Creating a kubernetes client @ 08/24/23 12:23:21.522
  Aug 24 12:23:21.522: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename resourcequota @ 08/24/23 12:23:21.524
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 12:23:21.557
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 12:23:21.564
  STEP: Counting existing ResourceQuota @ 08/24/23 12:23:21.571
  STEP: Creating a ResourceQuota @ 08/24/23 12:23:26.578
  STEP: Ensuring resource quota status is calculated @ 08/24/23 12:23:26.59
  STEP: Creating a ReplicationController @ 08/24/23 12:23:28.602
  STEP: Ensuring resource quota status captures replication controller creation @ 08/24/23 12:23:28.629
  STEP: Deleting a ReplicationController @ 08/24/23 12:23:30.642
  STEP: Ensuring resource quota status released usage @ 08/24/23 12:23:30.658
  Aug 24 12:23:32.670: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "resourcequota-1381" for this suite. @ 08/24/23 12:23:32.684
• [11.178 seconds]
------------------------------
SSSSSS
------------------------------
[sig-api-machinery] Namespaces [Serial] should apply an update to a Namespace [Conformance]
test/e2e/apimachinery/namespace.go:370
  STEP: Creating a kubernetes client @ 08/24/23 12:23:32.701
  Aug 24 12:23:32.701: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename namespaces @ 08/24/23 12:23:32.702
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 12:23:32.731
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 12:23:32.738
  STEP: Updating Namespace "namespaces-8681" @ 08/24/23 12:23:32.744
  Aug 24 12:23:32.764: INFO: Namespace "namespaces-8681" now has labels, map[string]string{"e2e-framework":"namespaces", "e2e-run":"bbcca8eb-24e0-4d75-b303-9fbce3207588", "kubernetes.io/metadata.name":"namespaces-8681", "namespaces-8681":"updated", "pod-security.kubernetes.io/audit":"baseline", "pod-security.kubernetes.io/enforce":"baseline", "pod-security.kubernetes.io/warn":"baseline"}
  Aug 24 12:23:32.764: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "namespaces-8681" for this suite. @ 08/24/23 12:23:32.774
• [0.088 seconds]
------------------------------
S
------------------------------
[sig-api-machinery] server version should find the server version [Conformance]
test/e2e/apimachinery/server_version.go:40
  STEP: Creating a kubernetes client @ 08/24/23 12:23:32.789
  Aug 24 12:23:32.789: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename server-version @ 08/24/23 12:23:32.79
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 12:23:32.82
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 12:23:32.826
  STEP: Request ServerVersion @ 08/24/23 12:23:32.833
  STEP: Confirm major version @ 08/24/23 12:23:32.835
  Aug 24 12:23:32.835: INFO: Major version: 1
  STEP: Confirm minor version @ 08/24/23 12:23:32.835
  Aug 24 12:23:32.835: INFO: cleanMinorVersion: 28
  Aug 24 12:23:32.835: INFO: Minor version: 28
  Aug 24 12:23:32.835: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "server-version-8025" for this suite. @ 08/24/23 12:23:32.845
• [0.069 seconds]
------------------------------
SS
------------------------------
[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] patching/updating a mutating webhook should work [Conformance]
test/e2e/apimachinery/webhook.go:498
  STEP: Creating a kubernetes client @ 08/24/23 12:23:32.858
  Aug 24 12:23:32.858: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename webhook @ 08/24/23 12:23:32.859
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 12:23:32.884
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 12:23:32.89
  STEP: Setting up server cert @ 08/24/23 12:23:32.941
  STEP: Create role binding to let webhook read extension-apiserver-authentication @ 08/24/23 12:23:33.122
  STEP: Deploying the webhook pod @ 08/24/23 12:23:33.143
  STEP: Wait for the deployment to be ready @ 08/24/23 12:23:33.17
  Aug 24 12:23:33.186: INFO: deployment "sample-webhook-deployment" doesn't have the required revision set
  STEP: Deploying the webhook service @ 08/24/23 12:23:35.214
  STEP: Verifying the service has paired with the endpoint @ 08/24/23 12:23:35.237
  Aug 24 12:23:36.237: INFO: Waiting for amount of service:e2e-test-webhook endpoints to be 1
  STEP: Creating a mutating webhook configuration @ 08/24/23 12:23:36.257
  STEP: Updating a mutating webhook configuration's rules to not include the create operation @ 08/24/23 12:23:36.303
  STEP: Creating a configMap that should not be mutated @ 08/24/23 12:23:36.315
  STEP: Patching a mutating webhook configuration's rules to include the create operation @ 08/24/23 12:23:36.34
  STEP: Creating a configMap that should be mutated @ 08/24/23 12:23:36.353
  Aug 24 12:23:36.417: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "webhook-7611" for this suite. @ 08/24/23 12:23:36.51
  STEP: Destroying namespace "webhook-markers-3015" for this suite. @ 08/24/23 12:23:36.525
• [3.692 seconds]
------------------------------
SSSSSSSSSSSS
------------------------------
[sig-api-machinery] CustomResourceDefinition resources [Privileged:ClusterAdmin] Simple CustomResourceDefinition getting/updating/patching custom resource definition status sub-resource works  [Conformance]
test/e2e/apimachinery/custom_resource_definition.go:145
  STEP: Creating a kubernetes client @ 08/24/23 12:23:36.554
  Aug 24 12:23:36.554: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename custom-resource-definition @ 08/24/23 12:23:36.555
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 12:23:36.582
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 12:23:36.655
  Aug 24 12:23:36.663: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  Aug 24 12:23:37.240: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "custom-resource-definition-1278" for this suite. @ 08/24/23 12:23:37.248
• [0.707 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-network] EndpointSlice should support creating EndpointSlice API operations [Conformance]
test/e2e/network/endpointslice.go:355
  STEP: Creating a kubernetes client @ 08/24/23 12:23:37.262
  Aug 24 12:23:37.262: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename endpointslice @ 08/24/23 12:23:37.263
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 12:23:37.29
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 12:23:37.296
  STEP: getting /apis @ 08/24/23 12:23:37.303
  STEP: getting /apis/discovery.k8s.io @ 08/24/23 12:23:37.314
  STEP: getting /apis/discovery.k8s.iov1 @ 08/24/23 12:23:37.349
  STEP: creating @ 08/24/23 12:23:37.352
  STEP: getting @ 08/24/23 12:23:37.384
  STEP: listing @ 08/24/23 12:23:37.392
  STEP: watching @ 08/24/23 12:23:37.55
  Aug 24 12:23:37.550: INFO: starting watch
  STEP: cluster-wide listing @ 08/24/23 12:23:37.553
  STEP: cluster-wide watching @ 08/24/23 12:23:37.655
  Aug 24 12:23:37.655: INFO: starting watch
  STEP: patching @ 08/24/23 12:23:37.751
  STEP: updating @ 08/24/23 12:23:38.05
  Aug 24 12:23:38.250: INFO: waiting for watch events with expected annotations
  Aug 24 12:23:38.250: INFO: saw patched and updated annotations
  STEP: deleting @ 08/24/23 12:23:38.25
  STEP: deleting a collection @ 08/24/23 12:23:38.364
  Aug 24 12:23:38.457: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "endpointslice-4921" for this suite. @ 08/24/23 12:23:38.467
• [1.219 seconds]
------------------------------
S
------------------------------
[sig-api-machinery] ResourceQuota should manage the lifecycle of a ResourceQuota [Conformance]
test/e2e/apimachinery/resource_quota.go:946
  STEP: Creating a kubernetes client @ 08/24/23 12:23:38.481
  Aug 24 12:23:38.481: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename resourcequota @ 08/24/23 12:23:38.483
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 12:23:38.571
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 12:23:38.578
  STEP: Creating a ResourceQuota @ 08/24/23 12:23:38.651
  STEP: Getting a ResourceQuota @ 08/24/23 12:23:38.662
  STEP: Listing all ResourceQuotas with LabelSelector @ 08/24/23 12:23:38.672
  STEP: Patching the ResourceQuota @ 08/24/23 12:23:38.749
  STEP: Deleting a Collection of ResourceQuotas @ 08/24/23 12:23:38.767
  STEP: Verifying the deleted ResourceQuota @ 08/24/23 12:23:38.785
  Aug 24 12:23:38.855: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "resourcequota-9960" for this suite. @ 08/24/23 12:23:38.866
• [0.399 seconds]
------------------------------
SSSSSS
------------------------------
[sig-api-machinery] CustomResourceDefinition Watch [Privileged:ClusterAdmin] CustomResourceDefinition Watch watch on custom resource definition objects [Conformance]
test/e2e/apimachinery/crd_watch.go:51
  STEP: Creating a kubernetes client @ 08/24/23 12:23:38.881
  Aug 24 12:23:38.881: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename crd-watch @ 08/24/23 12:23:38.882
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 12:23:38.975
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 12:23:38.982
  Aug 24 12:23:39.053: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Creating first CR  @ 08/24/23 12:23:41.698
  Aug 24 12:23:41.751: INFO: Got : ADDED &{map[apiVersion:mygroup.example.com/v1beta1 content:map[key:value] kind:WishIHadChosenNoxu metadata:map[creationTimestamp:2023-08-24T12:23:41Z generation:1 managedFields:[map[apiVersion:mygroup.example.com/v1beta1 fieldsType:FieldsV1 fieldsV1:map[f:content:map[.:map[] f:key:map[]] f:num:map[.:map[] f:num1:map[] f:num2:map[]]] manager:e2e.test operation:Update time:2023-08-24T12:23:41Z]] name:name1 resourceVersion:3405001474 uid:6cf6e1a0-84a5-4993-94dd-395703ae19e7] num:map[num1:9223372036854775807 num2:1000000]]}
  STEP: Creating second CR @ 08/24/23 12:23:51.752
  Aug 24 12:23:51.767: INFO: Got : ADDED &{map[apiVersion:mygroup.example.com/v1beta1 content:map[key:value] kind:WishIHadChosenNoxu metadata:map[creationTimestamp:2023-08-24T12:23:51Z generation:1 managedFields:[map[apiVersion:mygroup.example.com/v1beta1 fieldsType:FieldsV1 fieldsV1:map[f:content:map[.:map[] f:key:map[]] f:num:map[.:map[] f:num1:map[] f:num2:map[]]] manager:e2e.test operation:Update time:2023-08-24T12:23:51Z]] name:name2 resourceVersion:3405001970 uid:9dbee675-0272-4232-b761-a1765a544e71] num:map[num1:9223372036854775807 num2:1000000]]}
  STEP: Modifying first CR @ 08/24/23 12:24:01.769
  Aug 24 12:24:01.784: INFO: Got : MODIFIED &{map[apiVersion:mygroup.example.com/v1beta1 content:map[key:value] dummy:test kind:WishIHadChosenNoxu metadata:map[creationTimestamp:2023-08-24T12:23:41Z generation:2 managedFields:[map[apiVersion:mygroup.example.com/v1beta1 fieldsType:FieldsV1 fieldsV1:map[f:content:map[.:map[] f:key:map[]] f:dummy:map[] f:num:map[.:map[] f:num1:map[] f:num2:map[]]] manager:e2e.test operation:Update time:2023-08-24T12:24:01Z]] name:name1 resourceVersion:3405002409 uid:6cf6e1a0-84a5-4993-94dd-395703ae19e7] num:map[num1:9223372036854775807 num2:1000000]]}
  STEP: Modifying second CR @ 08/24/23 12:24:11.784
  Aug 24 12:24:11.802: INFO: Got : MODIFIED &{map[apiVersion:mygroup.example.com/v1beta1 content:map[key:value] dummy:test kind:WishIHadChosenNoxu metadata:map[creationTimestamp:2023-08-24T12:23:51Z generation:2 managedFields:[map[apiVersion:mygroup.example.com/v1beta1 fieldsType:FieldsV1 fieldsV1:map[f:content:map[.:map[] f:key:map[]] f:dummy:map[] f:num:map[.:map[] f:num1:map[] f:num2:map[]]] manager:e2e.test operation:Update time:2023-08-24T12:24:11Z]] name:name2 resourceVersion:3405002840 uid:9dbee675-0272-4232-b761-a1765a544e71] num:map[num1:9223372036854775807 num2:1000000]]}
  STEP: Deleting first CR @ 08/24/23 12:24:21.802
  Aug 24 12:24:21.823: INFO: Got : DELETED &{map[apiVersion:mygroup.example.com/v1beta1 content:map[key:value] dummy:test kind:WishIHadChosenNoxu metadata:map[creationTimestamp:2023-08-24T12:23:41Z generation:2 managedFields:[map[apiVersion:mygroup.example.com/v1beta1 fieldsType:FieldsV1 fieldsV1:map[f:content:map[.:map[] f:key:map[]] f:dummy:map[] f:num:map[.:map[] f:num1:map[] f:num2:map[]]] manager:e2e.test operation:Update time:2023-08-24T12:24:01Z]] name:name1 resourceVersion:3405003278 uid:6cf6e1a0-84a5-4993-94dd-395703ae19e7] num:map[num1:9223372036854775807 num2:1000000]]}
  STEP: Deleting second CR @ 08/24/23 12:24:31.823
  Aug 24 12:24:31.845: INFO: Got : DELETED &{map[apiVersion:mygroup.example.com/v1beta1 content:map[key:value] dummy:test kind:WishIHadChosenNoxu metadata:map[creationTimestamp:2023-08-24T12:23:51Z generation:2 managedFields:[map[apiVersion:mygroup.example.com/v1beta1 fieldsType:FieldsV1 fieldsV1:map[f:content:map[.:map[] f:key:map[]] f:dummy:map[] f:num:map[.:map[] f:num1:map[] f:num2:map[]]] manager:e2e.test operation:Update time:2023-08-24T12:24:11Z]] name:name2 resourceVersion:3405003790 uid:9dbee675-0272-4232-b761-a1765a544e71] num:map[num1:9223372036854775807 num2:1000000]]}
  Aug 24 12:24:42.371: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "crd-watch-5385" for this suite. @ 08/24/23 12:24:42.382
• [63.518 seconds]
------------------------------
SSSSSSSSSSSSSSS
------------------------------
[sig-scheduling] LimitRange should list, patch and delete a LimitRange by collection [Conformance]
test/e2e/scheduling/limit_range.go:239
  STEP: Creating a kubernetes client @ 08/24/23 12:24:42.4
  Aug 24 12:24:42.400: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename limitrange @ 08/24/23 12:24:42.402
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 12:24:42.433
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 12:24:42.441
  STEP: Creating LimitRange "e2e-limitrange-hgwkc" in namespace "limitrange-3851" @ 08/24/23 12:24:42.448
  STEP: Creating another limitRange in another namespace @ 08/24/23 12:24:42.456
  Aug 24 12:24:42.483: INFO: Namespace "e2e-limitrange-hgwkc-6336" created
  Aug 24 12:24:42.483: INFO: Creating LimitRange "e2e-limitrange-hgwkc" in namespace "e2e-limitrange-hgwkc-6336"
  STEP: Listing all LimitRanges with label "e2e-test=e2e-limitrange-hgwkc" @ 08/24/23 12:24:42.494
  Aug 24 12:24:42.502: INFO: Found 2 limitRanges
  STEP: Patching LimitRange "e2e-limitrange-hgwkc" in "limitrange-3851" namespace @ 08/24/23 12:24:42.502
  Aug 24 12:24:42.519: INFO: LimitRange "e2e-limitrange-hgwkc" has been patched
  STEP: Delete LimitRange "e2e-limitrange-hgwkc" by Collection with labelSelector: "e2e-limitrange-hgwkc=patched" @ 08/24/23 12:24:42.519
  STEP: Confirm that the limitRange "e2e-limitrange-hgwkc" has been deleted @ 08/24/23 12:24:42.541
  Aug 24 12:24:42.541: INFO: Requesting list of LimitRange to confirm quantity
  Aug 24 12:24:42.549: INFO: Found 0 LimitRange with label "e2e-limitrange-hgwkc=patched"
  Aug 24 12:24:42.549: INFO: LimitRange "e2e-limitrange-hgwkc" has been deleted.
  STEP: Confirm that a single LimitRange still exists with label "e2e-test=e2e-limitrange-hgwkc" @ 08/24/23 12:24:42.549
  Aug 24 12:24:42.558: INFO: Found 1 limitRange
  Aug 24 12:24:42.558: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "limitrange-3851" for this suite. @ 08/24/23 12:24:42.567
  STEP: Destroying namespace "e2e-limitrange-hgwkc-6336" for this suite. @ 08/24/23 12:24:42.582
• [0.198 seconds]
------------------------------
SS
------------------------------
[sig-apps] Daemon set [Serial] should rollback without unnecessary restarts [Conformance]
test/e2e/apps/daemon_set.go:443
  STEP: Creating a kubernetes client @ 08/24/23 12:24:42.598
  Aug 24 12:24:42.598: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename daemonsets @ 08/24/23 12:24:42.599
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 12:24:42.628
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 12:24:42.634
  Aug 24 12:24:42.688: INFO: Create a RollingUpdate DaemonSet
  Aug 24 12:24:42.702: INFO: Check that daemon pods launch on every node of the cluster
  Aug 24 12:24:42.723: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 0
  Aug 24 12:24:42.723: INFO: Node scw-conformance-default-2af6d8b4c6264cc5b9e5e6 is running 0 daemon pod, expected 1
  Aug 24 12:24:43.742: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 0
  Aug 24 12:24:43.742: INFO: Node scw-conformance-default-2af6d8b4c6264cc5b9e5e6 is running 0 daemon pod, expected 1
  Aug 24 12:24:44.743: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 2
  Aug 24 12:24:44.743: INFO: Number of running nodes: 2, number of available pods: 2 in daemonset daemon-set
  Aug 24 12:24:44.743: INFO: Update the DaemonSet to trigger a rollout
  Aug 24 12:24:44.767: INFO: Updating DaemonSet daemon-set
  Aug 24 12:24:45.807: INFO: Roll back the DaemonSet before rollout is complete
  Aug 24 12:24:45.831: INFO: Updating DaemonSet daemon-set
  Aug 24 12:24:45.832: INFO: Make sure DaemonSet rollback is complete
  Aug 24 12:24:45.841: INFO: Wrong image for pod: daemon-set-mkk7j. Expected: registry.k8s.io/e2e-test-images/httpd:2.4.38-4, got: foo:non-existent.
  Aug 24 12:24:45.841: INFO: Pod daemon-set-mkk7j is not available
  Aug 24 12:24:48.861: INFO: Pod daemon-set-mzwww is not available
  STEP: Deleting DaemonSet "daemon-set" @ 08/24/23 12:24:48.893
  STEP: deleting DaemonSet.extensions daemon-set in namespace daemonsets-3085, will wait for the garbage collector to delete the pods @ 08/24/23 12:24:48.894
  Aug 24 12:24:48.970: INFO: Deleting DaemonSet.extensions daemon-set took: 15.843629ms
  Aug 24 12:24:49.071: INFO: Terminating DaemonSet.extensions daemon-set pods took: 100.973801ms
  Aug 24 12:25:20.481: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 0
  Aug 24 12:25:20.481: INFO: Number of running nodes: 0, number of available pods: 0 in daemonset daemon-set
  Aug 24 12:25:20.488: INFO: daemonset: {"kind":"DaemonSetList","apiVersion":"apps/v1","metadata":{"resourceVersion":"3405006004"},"items":null}

  Aug 24 12:25:20.497: INFO: pods: {"kind":"PodList","apiVersion":"v1","metadata":{"resourceVersion":"3405006005"},"items":null}

  Aug 24 12:25:20.526: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "daemonsets-3085" for this suite. @ 08/24/23 12:25:20.538
• [37.957 seconds]
------------------------------
SSSSSSSSS
------------------------------
[sig-node] Kubelet when scheduling a busybox command that always fails in a pod should be possible to delete [NodeConformance] [Conformance]
test/e2e/common/node/kubelet.go:135
  STEP: Creating a kubernetes client @ 08/24/23 12:25:20.555
  Aug 24 12:25:20.555: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename kubelet-test @ 08/24/23 12:25:20.556
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 12:25:20.589
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 12:25:20.596
  Aug 24 12:25:20.669: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "kubelet-test-1159" for this suite. @ 08/24/23 12:25:20.677
• [0.142 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-apps] Job should manage the lifecycle of a job [Conformance]
test/e2e/apps/job.go:713
  STEP: Creating a kubernetes client @ 08/24/23 12:25:20.698
  Aug 24 12:25:20.698: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename job @ 08/24/23 12:25:20.699
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 12:25:20.755
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 12:25:20.763
  STEP: Creating a suspended job @ 08/24/23 12:25:20.779
  STEP: Patching the Job @ 08/24/23 12:25:20.792
  STEP: Watching for Job to be patched @ 08/24/23 12:25:20.874
  Aug 24 12:25:20.878: INFO: Event ADDED observed for Job e2e-xqqd8 in namespace job-4009 with labels: map[e2e-job-label:e2e-xqqd8] and annotations: map[]
  Aug 24 12:25:20.878: INFO: Event MODIFIED observed for Job e2e-xqqd8 in namespace job-4009 with labels: map[e2e-job-label:e2e-xqqd8] and annotations: map[]
  Aug 24 12:25:20.878: INFO: Event MODIFIED found for Job e2e-xqqd8 in namespace job-4009 with labels: map[e2e-job-label:e2e-xqqd8 e2e-xqqd8:patched] and annotations: map[]
  STEP: Updating the job @ 08/24/23 12:25:20.878
  STEP: Watching for Job to be updated @ 08/24/23 12:25:20.902
  Aug 24 12:25:20.906: INFO: Event MODIFIED found for Job e2e-xqqd8 in namespace job-4009 with labels: map[e2e-job-label:e2e-xqqd8 e2e-xqqd8:patched] and annotations: map[updated:true]
  Aug 24 12:25:20.906: INFO: Found Job annotations: map[string]string{"updated":"true"}
  STEP: Listing all Jobs with LabelSelector @ 08/24/23 12:25:20.906
  Aug 24 12:25:20.914: INFO: Job: e2e-xqqd8 as labels: map[e2e-job-label:e2e-xqqd8 e2e-xqqd8:patched]
  STEP: Waiting for job to complete @ 08/24/23 12:25:20.914
  STEP: Delete a job collection with a labelselector @ 08/24/23 12:25:28.923
  STEP: Watching for Job to be deleted @ 08/24/23 12:25:28.947
  Aug 24 12:25:28.951: INFO: Event MODIFIED observed for Job e2e-xqqd8 in namespace job-4009 with labels: map[e2e-job-label:e2e-xqqd8 e2e-xqqd8:patched] and annotations: map[updated:true]
  Aug 24 12:25:28.951: INFO: Event MODIFIED observed for Job e2e-xqqd8 in namespace job-4009 with labels: map[e2e-job-label:e2e-xqqd8 e2e-xqqd8:patched] and annotations: map[updated:true]
  Aug 24 12:25:28.952: INFO: Event MODIFIED observed for Job e2e-xqqd8 in namespace job-4009 with labels: map[e2e-job-label:e2e-xqqd8 e2e-xqqd8:patched] and annotations: map[updated:true]
  Aug 24 12:25:28.952: INFO: Event MODIFIED observed for Job e2e-xqqd8 in namespace job-4009 with labels: map[e2e-job-label:e2e-xqqd8 e2e-xqqd8:patched] and annotations: map[updated:true]
  Aug 24 12:25:28.952: INFO: Event MODIFIED observed for Job e2e-xqqd8 in namespace job-4009 with labels: map[e2e-job-label:e2e-xqqd8 e2e-xqqd8:patched] and annotations: map[updated:true]
  Aug 24 12:25:28.952: INFO: Event DELETED found for Job e2e-xqqd8 in namespace job-4009 with labels: map[e2e-job-label:e2e-xqqd8 e2e-xqqd8:patched] and annotations: map[updated:true]
  STEP: Relist jobs to confirm deletion @ 08/24/23 12:25:28.952
  Aug 24 12:25:28.960: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "job-4009" for this suite. @ 08/24/23 12:25:28.972
• [8.296 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-api-machinery] CustomResourceDefinition resources [Privileged:ClusterAdmin] Simple CustomResourceDefinition creating/deleting custom resource definition objects works  [Conformance]
test/e2e/apimachinery/custom_resource_definition.go:58
  STEP: Creating a kubernetes client @ 08/24/23 12:25:28.997
  Aug 24 12:25:28.997: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename custom-resource-definition @ 08/24/23 12:25:28.997
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 12:25:29.069
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 12:25:29.077
  Aug 24 12:25:29.151: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  Aug 24 12:25:30.199: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "custom-resource-definition-1312" for this suite. @ 08/24/23 12:25:30.212
• [1.232 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-node] Probing container should be restarted with a GRPC liveness probe [NodeConformance] [Conformance]
test/e2e/common/node/container_probe.go:550
  STEP: Creating a kubernetes client @ 08/24/23 12:25:30.229
  Aug 24 12:25:30.230: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename container-probe @ 08/24/23 12:25:30.23
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 12:25:30.266
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 12:25:30.275
  STEP: Creating pod test-grpc-a049a473-2c7e-460f-b3cf-0ccc9b10158a in namespace container-probe-6089 @ 08/24/23 12:25:30.282
  STEP: checking the pod's current state and verifying that restartCount is present @ 08/24/23 12:25:32.326
  Aug 24 12:25:32.336: INFO: Initial restart count of pod test-grpc-a049a473-2c7e-460f-b3cf-0ccc9b10158a is 0
  Aug 24 12:25:32.343: INFO: Get pod test-grpc-a049a473-2c7e-460f-b3cf-0ccc9b10158a in namespace container-probe-6089
  Aug 24 12:25:34.353: INFO: Get pod test-grpc-a049a473-2c7e-460f-b3cf-0ccc9b10158a in namespace container-probe-6089
  Aug 24 12:25:36.365: INFO: Get pod test-grpc-a049a473-2c7e-460f-b3cf-0ccc9b10158a in namespace container-probe-6089
  Aug 24 12:25:38.374: INFO: Get pod test-grpc-a049a473-2c7e-460f-b3cf-0ccc9b10158a in namespace container-probe-6089
  Aug 24 12:25:40.384: INFO: Get pod test-grpc-a049a473-2c7e-460f-b3cf-0ccc9b10158a in namespace container-probe-6089
  Aug 24 12:25:42.394: INFO: Get pod test-grpc-a049a473-2c7e-460f-b3cf-0ccc9b10158a in namespace container-probe-6089
  Aug 24 12:25:44.405: INFO: Get pod test-grpc-a049a473-2c7e-460f-b3cf-0ccc9b10158a in namespace container-probe-6089
  Aug 24 12:25:46.416: INFO: Get pod test-grpc-a049a473-2c7e-460f-b3cf-0ccc9b10158a in namespace container-probe-6089
  Aug 24 12:25:48.426: INFO: Get pod test-grpc-a049a473-2c7e-460f-b3cf-0ccc9b10158a in namespace container-probe-6089
  Aug 24 12:25:50.437: INFO: Get pod test-grpc-a049a473-2c7e-460f-b3cf-0ccc9b10158a in namespace container-probe-6089
  Aug 24 12:25:52.451: INFO: Get pod test-grpc-a049a473-2c7e-460f-b3cf-0ccc9b10158a in namespace container-probe-6089
  Aug 24 12:25:54.460: INFO: Get pod test-grpc-a049a473-2c7e-460f-b3cf-0ccc9b10158a in namespace container-probe-6089
  Aug 24 12:25:56.473: INFO: Get pod test-grpc-a049a473-2c7e-460f-b3cf-0ccc9b10158a in namespace container-probe-6089
  Aug 24 12:25:58.484: INFO: Get pod test-grpc-a049a473-2c7e-460f-b3cf-0ccc9b10158a in namespace container-probe-6089
  Aug 24 12:26:00.498: INFO: Get pod test-grpc-a049a473-2c7e-460f-b3cf-0ccc9b10158a in namespace container-probe-6089
  Aug 24 12:26:02.511: INFO: Get pod test-grpc-a049a473-2c7e-460f-b3cf-0ccc9b10158a in namespace container-probe-6089
  Aug 24 12:26:04.521: INFO: Get pod test-grpc-a049a473-2c7e-460f-b3cf-0ccc9b10158a in namespace container-probe-6089
  Aug 24 12:26:06.531: INFO: Get pod test-grpc-a049a473-2c7e-460f-b3cf-0ccc9b10158a in namespace container-probe-6089
  Aug 24 12:26:08.542: INFO: Get pod test-grpc-a049a473-2c7e-460f-b3cf-0ccc9b10158a in namespace container-probe-6089
  Aug 24 12:26:10.552: INFO: Get pod test-grpc-a049a473-2c7e-460f-b3cf-0ccc9b10158a in namespace container-probe-6089
  Aug 24 12:26:12.564: INFO: Get pod test-grpc-a049a473-2c7e-460f-b3cf-0ccc9b10158a in namespace container-probe-6089
  Aug 24 12:26:14.574: INFO: Get pod test-grpc-a049a473-2c7e-460f-b3cf-0ccc9b10158a in namespace container-probe-6089
  Aug 24 12:26:16.586: INFO: Get pod test-grpc-a049a473-2c7e-460f-b3cf-0ccc9b10158a in namespace container-probe-6089
  Aug 24 12:26:18.596: INFO: Get pod test-grpc-a049a473-2c7e-460f-b3cf-0ccc9b10158a in namespace container-probe-6089
  Aug 24 12:26:20.607: INFO: Get pod test-grpc-a049a473-2c7e-460f-b3cf-0ccc9b10158a in namespace container-probe-6089
  Aug 24 12:26:22.617: INFO: Get pod test-grpc-a049a473-2c7e-460f-b3cf-0ccc9b10158a in namespace container-probe-6089
  Aug 24 12:26:24.627: INFO: Get pod test-grpc-a049a473-2c7e-460f-b3cf-0ccc9b10158a in namespace container-probe-6089
  Aug 24 12:26:26.638: INFO: Get pod test-grpc-a049a473-2c7e-460f-b3cf-0ccc9b10158a in namespace container-probe-6089
  Aug 24 12:26:28.647: INFO: Get pod test-grpc-a049a473-2c7e-460f-b3cf-0ccc9b10158a in namespace container-probe-6089
  Aug 24 12:26:30.657: INFO: Get pod test-grpc-a049a473-2c7e-460f-b3cf-0ccc9b10158a in namespace container-probe-6089
  Aug 24 12:26:32.667: INFO: Get pod test-grpc-a049a473-2c7e-460f-b3cf-0ccc9b10158a in namespace container-probe-6089
  Aug 24 12:26:34.680: INFO: Get pod test-grpc-a049a473-2c7e-460f-b3cf-0ccc9b10158a in namespace container-probe-6089
  Aug 24 12:26:36.694: INFO: Get pod test-grpc-a049a473-2c7e-460f-b3cf-0ccc9b10158a in namespace container-probe-6089
  Aug 24 12:26:38.703: INFO: Get pod test-grpc-a049a473-2c7e-460f-b3cf-0ccc9b10158a in namespace container-probe-6089
  Aug 24 12:26:40.713: INFO: Get pod test-grpc-a049a473-2c7e-460f-b3cf-0ccc9b10158a in namespace container-probe-6089
  Aug 24 12:26:42.723: INFO: Get pod test-grpc-a049a473-2c7e-460f-b3cf-0ccc9b10158a in namespace container-probe-6089
  Aug 24 12:26:44.732: INFO: Get pod test-grpc-a049a473-2c7e-460f-b3cf-0ccc9b10158a in namespace container-probe-6089
  Aug 24 12:26:46.741: INFO: Get pod test-grpc-a049a473-2c7e-460f-b3cf-0ccc9b10158a in namespace container-probe-6089
  Aug 24 12:26:46.741: INFO: Restart count of pod container-probe-6089/test-grpc-a049a473-2c7e-460f-b3cf-0ccc9b10158a is now 1 (1m14.404687357s elapsed)
  Aug 24 12:26:46.741: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: deleting the pod @ 08/24/23 12:26:46.751
  STEP: Destroying namespace "container-probe-6089" for this suite. @ 08/24/23 12:26:46.774
• [76.562 seconds]
------------------------------
SSSSSSSSSSS
------------------------------
[sig-instrumentation] Events should manage the lifecycle of an event [Conformance]
test/e2e/instrumentation/core_events.go:57
  STEP: Creating a kubernetes client @ 08/24/23 12:26:46.793
  Aug 24 12:26:46.793: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename events @ 08/24/23 12:26:46.794
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 12:26:46.854
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 12:26:46.861
  STEP: creating a test event @ 08/24/23 12:26:46.868
  STEP: listing all events in all namespaces @ 08/24/23 12:26:46.879
  STEP: patching the test event @ 08/24/23 12:26:46.889
  STEP: fetching the test event @ 08/24/23 12:26:46.903
  STEP: updating the test event @ 08/24/23 12:26:46.909
  STEP: getting the test event @ 08/24/23 12:26:46.98
  STEP: deleting the test event @ 08/24/23 12:26:46.987
  STEP: listing all events in all namespaces @ 08/24/23 12:26:47.006
  Aug 24 12:26:47.015: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "events-299" for this suite. @ 08/24/23 12:26:47.03
• [0.255 seconds]
------------------------------
SSSSSSSSS
------------------------------
[sig-auth] ServiceAccounts should update a ServiceAccount [Conformance]
test/e2e/auth/service_accounts.go:808
  STEP: Creating a kubernetes client @ 08/24/23 12:26:47.048
  Aug 24 12:26:47.048: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename svcaccounts @ 08/24/23 12:26:47.049
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 12:26:47.075
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 12:26:47.083
  STEP: Creating ServiceAccount "e2e-sa-bqj57"  @ 08/24/23 12:26:47.09
  Aug 24 12:26:47.101: INFO: AutomountServiceAccountToken: false
  STEP: Updating ServiceAccount "e2e-sa-bqj57"  @ 08/24/23 12:26:47.101
  Aug 24 12:26:47.122: INFO: AutomountServiceAccountToken: true
  Aug 24 12:26:47.122: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "svcaccounts-7501" for this suite. @ 08/24/23 12:26:47.133
• [0.102 seconds]
------------------------------
[sig-cli] Kubectl client Kubectl api-versions should check if v1 is in available api versions  [Conformance]
test/e2e/kubectl/kubectl.go:830
  STEP: Creating a kubernetes client @ 08/24/23 12:26:47.15
  Aug 24 12:26:47.150: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename kubectl @ 08/24/23 12:26:47.151
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 12:26:47.182
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 12:26:47.188
  STEP: validating api versions @ 08/24/23 12:26:47.194
  Aug 24 12:26:47.194: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1002171096 --namespace=kubectl-2740 api-versions'
  Aug 24 12:26:47.311: INFO: stderr: ""
  Aug 24 12:26:47.311: INFO: stdout: "admissionregistration.k8s.io/v1\nadmissionregistration.k8s.io/v1alpha1\nadmissionregistration.k8s.io/v1beta1\napiextensions.k8s.io/v1\napiregistration.k8s.io/v1\napps/v1\nauthentication.k8s.io/v1\nauthentication.k8s.io/v1alpha1\nauthentication.k8s.io/v1beta1\nauthorization.k8s.io/v1\nautoscaling/v1\nautoscaling/v2\nbatch/v1\ncertificates.k8s.io/v1\ncilium.io/v2\ncilium.io/v2alpha1\ncoordination.k8s.io/v1\ndiscovery.k8s.io/v1\nevents.k8s.io/v1\nflowcontrol.apiserver.k8s.io/v1beta2\nflowcontrol.apiserver.k8s.io/v1beta3\ninternal.apiserver.k8s.io/v1alpha1\nmetrics.k8s.io/v1beta1\nnetworking.k8s.io/v1\nnetworking.k8s.io/v1alpha1\nnode.k8s.io/v1\npolicy/v1\nrbac.authorization.k8s.io/v1\nresource.k8s.io/v1alpha2\nscheduling.k8s.io/v1\nsnapshot.storage.k8s.io/v1\nstorage.k8s.io/v1\nv1\n"
  Aug 24 12:26:47.312: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "kubectl-2740" for this suite. @ 08/24/23 12:26:47.322
• [0.213 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-storage] CSIInlineVolumes should run through the lifecycle of a CSIDriver [Conformance]
test/e2e/storage/csi_inline.go:157
  STEP: Creating a kubernetes client @ 08/24/23 12:26:47.364
  Aug 24 12:26:47.364: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename csiinlinevolumes @ 08/24/23 12:26:47.366
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 12:26:47.393
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 12:26:47.399
  STEP: Creating two CSIDrivers @ 08/24/23 12:26:47.405
  STEP: Getting "inline-driver-87a3f159-861f-4af2-8a16-65f5f7971047" & "inline-driver-229eecb4-c93b-4128-b5ae-eb9c543b2adf" @ 08/24/23 12:26:47.435
  STEP: Patching the CSIDriver "inline-driver-229eecb4-c93b-4128-b5ae-eb9c543b2adf" @ 08/24/23 12:26:47.453
  STEP: Updating the CSIDriver "inline-driver-229eecb4-c93b-4128-b5ae-eb9c543b2adf" @ 08/24/23 12:26:47.464
  STEP: Listing all CSIDrivers with the labelSelector: "e2e-test=csiinlinevolumes-5944" @ 08/24/23 12:26:47.483
  STEP: Deleting CSIDriver "inline-driver-87a3f159-861f-4af2-8a16-65f5f7971047" @ 08/24/23 12:26:47.491
  STEP: Confirm deletion of CSIDriver "inline-driver-87a3f159-861f-4af2-8a16-65f5f7971047" @ 08/24/23 12:26:47.506
  STEP: Deleting CSIDriver "inline-driver-229eecb4-c93b-4128-b5ae-eb9c543b2adf" via DeleteCollection @ 08/24/23 12:26:47.513
  STEP: Confirm deletion of CSIDriver "inline-driver-229eecb4-c93b-4128-b5ae-eb9c543b2adf" @ 08/24/23 12:26:47.529
  Aug 24 12:26:47.536: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "csiinlinevolumes-5944" for this suite. @ 08/24/23 12:26:47.546
• [0.198 seconds]
------------------------------
S
------------------------------
[sig-network] DNS should provide DNS for services  [Conformance]
test/e2e/network/dns.go:137
  STEP: Creating a kubernetes client @ 08/24/23 12:26:47.563
  Aug 24 12:26:47.563: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename dns @ 08/24/23 12:26:47.564
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 12:26:47.591
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 12:26:47.598
  STEP: Creating a test headless service @ 08/24/23 12:26:47.605
  STEP: Running these commands on wheezy: for i in `seq 1 600`; do check="$$(dig +notcp +noall +answer +search dns-test-service.dns-8840.svc.cluster.local A)" && test -n "$$check" && echo OK > /results/wheezy_udp@dns-test-service.dns-8840.svc.cluster.local;check="$$(dig +tcp +noall +answer +search dns-test-service.dns-8840.svc.cluster.local A)" && test -n "$$check" && echo OK > /results/wheezy_tcp@dns-test-service.dns-8840.svc.cluster.local;check="$$(dig +notcp +noall +answer +search _http._tcp.dns-test-service.dns-8840.svc.cluster.local SRV)" && test -n "$$check" && echo OK > /results/wheezy_udp@_http._tcp.dns-test-service.dns-8840.svc.cluster.local;check="$$(dig +tcp +noall +answer +search _http._tcp.dns-test-service.dns-8840.svc.cluster.local SRV)" && test -n "$$check" && echo OK > /results/wheezy_tcp@_http._tcp.dns-test-service.dns-8840.svc.cluster.local;check="$$(dig +notcp +noall +answer +search _http._tcp.test-service-2.dns-8840.svc.cluster.local SRV)" && test -n "$$check" && echo OK > /results/wheezy_udp@_http._tcp.test-service-2.dns-8840.svc.cluster.local;check="$$(dig +tcp +noall +answer +search _http._tcp.test-service-2.dns-8840.svc.cluster.local SRV)" && test -n "$$check" && echo OK > /results/wheezy_tcp@_http._tcp.test-service-2.dns-8840.svc.cluster.local;check="$$(dig +notcp +noall +answer +search 224.85.96.10.in-addr.arpa. PTR)" && test -n "$$check" && echo OK > /results/10.96.85.224_udp@PTR;check="$$(dig +tcp +noall +answer +search 224.85.96.10.in-addr.arpa. PTR)" && test -n "$$check" && echo OK > /results/10.96.85.224_tcp@PTR;sleep 1; done
   @ 08/24/23 12:26:47.666
  STEP: Running these commands on jessie: for i in `seq 1 600`; do check="$$(dig +notcp +noall +answer +search dns-test-service.dns-8840.svc.cluster.local A)" && test -n "$$check" && echo OK > /results/jessie_udp@dns-test-service.dns-8840.svc.cluster.local;check="$$(dig +tcp +noall +answer +search dns-test-service.dns-8840.svc.cluster.local A)" && test -n "$$check" && echo OK > /results/jessie_tcp@dns-test-service.dns-8840.svc.cluster.local;check="$$(dig +notcp +noall +answer +search _http._tcp.dns-test-service.dns-8840.svc.cluster.local SRV)" && test -n "$$check" && echo OK > /results/jessie_udp@_http._tcp.dns-test-service.dns-8840.svc.cluster.local;check="$$(dig +tcp +noall +answer +search _http._tcp.dns-test-service.dns-8840.svc.cluster.local SRV)" && test -n "$$check" && echo OK > /results/jessie_tcp@_http._tcp.dns-test-service.dns-8840.svc.cluster.local;check="$$(dig +notcp +noall +answer +search _http._tcp.test-service-2.dns-8840.svc.cluster.local SRV)" && test -n "$$check" && echo OK > /results/jessie_udp@_http._tcp.test-service-2.dns-8840.svc.cluster.local;check="$$(dig +tcp +noall +answer +search _http._tcp.test-service-2.dns-8840.svc.cluster.local SRV)" && test -n "$$check" && echo OK > /results/jessie_tcp@_http._tcp.test-service-2.dns-8840.svc.cluster.local;check="$$(dig +notcp +noall +answer +search 224.85.96.10.in-addr.arpa. PTR)" && test -n "$$check" && echo OK > /results/10.96.85.224_udp@PTR;check="$$(dig +tcp +noall +answer +search 224.85.96.10.in-addr.arpa. PTR)" && test -n "$$check" && echo OK > /results/10.96.85.224_tcp@PTR;sleep 1; done
   @ 08/24/23 12:26:47.666
  STEP: creating a pod to probe DNS @ 08/24/23 12:26:47.666
  STEP: submitting the pod to kubernetes @ 08/24/23 12:26:47.666
  STEP: retrieving the pod @ 08/24/23 12:26:49.713
  STEP: looking for the results for each expected name from probers @ 08/24/23 12:26:49.721
  Aug 24 12:26:49.738: INFO: Unable to read wheezy_udp@dns-test-service.dns-8840.svc.cluster.local from pod dns-8840/dns-test-eef12d30-fae4-48a0-b697-a57ccfd6a9da: the server could not find the requested resource (get pods dns-test-eef12d30-fae4-48a0-b697-a57ccfd6a9da)
  Aug 24 12:26:49.750: INFO: Unable to read wheezy_tcp@dns-test-service.dns-8840.svc.cluster.local from pod dns-8840/dns-test-eef12d30-fae4-48a0-b697-a57ccfd6a9da: the server could not find the requested resource (get pods dns-test-eef12d30-fae4-48a0-b697-a57ccfd6a9da)
  Aug 24 12:26:49.762: INFO: Unable to read wheezy_udp@_http._tcp.dns-test-service.dns-8840.svc.cluster.local from pod dns-8840/dns-test-eef12d30-fae4-48a0-b697-a57ccfd6a9da: the server could not find the requested resource (get pods dns-test-eef12d30-fae4-48a0-b697-a57ccfd6a9da)
  Aug 24 12:26:49.773: INFO: Unable to read wheezy_tcp@_http._tcp.dns-test-service.dns-8840.svc.cluster.local from pod dns-8840/dns-test-eef12d30-fae4-48a0-b697-a57ccfd6a9da: the server could not find the requested resource (get pods dns-test-eef12d30-fae4-48a0-b697-a57ccfd6a9da)
  Aug 24 12:26:49.834: INFO: Unable to read jessie_udp@dns-test-service.dns-8840.svc.cluster.local from pod dns-8840/dns-test-eef12d30-fae4-48a0-b697-a57ccfd6a9da: the server could not find the requested resource (get pods dns-test-eef12d30-fae4-48a0-b697-a57ccfd6a9da)
  Aug 24 12:26:49.843: INFO: Unable to read jessie_tcp@dns-test-service.dns-8840.svc.cluster.local from pod dns-8840/dns-test-eef12d30-fae4-48a0-b697-a57ccfd6a9da: the server could not find the requested resource (get pods dns-test-eef12d30-fae4-48a0-b697-a57ccfd6a9da)
  Aug 24 12:26:49.854: INFO: Unable to read jessie_udp@_http._tcp.dns-test-service.dns-8840.svc.cluster.local from pod dns-8840/dns-test-eef12d30-fae4-48a0-b697-a57ccfd6a9da: the server could not find the requested resource (get pods dns-test-eef12d30-fae4-48a0-b697-a57ccfd6a9da)
  Aug 24 12:26:49.867: INFO: Unable to read jessie_tcp@_http._tcp.dns-test-service.dns-8840.svc.cluster.local from pod dns-8840/dns-test-eef12d30-fae4-48a0-b697-a57ccfd6a9da: the server could not find the requested resource (get pods dns-test-eef12d30-fae4-48a0-b697-a57ccfd6a9da)
  Aug 24 12:26:50.460: INFO: Lookups using dns-8840/dns-test-eef12d30-fae4-48a0-b697-a57ccfd6a9da failed for: [wheezy_udp@dns-test-service.dns-8840.svc.cluster.local wheezy_tcp@dns-test-service.dns-8840.svc.cluster.local wheezy_udp@_http._tcp.dns-test-service.dns-8840.svc.cluster.local wheezy_tcp@_http._tcp.dns-test-service.dns-8840.svc.cluster.local jessie_udp@dns-test-service.dns-8840.svc.cluster.local jessie_tcp@dns-test-service.dns-8840.svc.cluster.local jessie_udp@_http._tcp.dns-test-service.dns-8840.svc.cluster.local jessie_tcp@_http._tcp.dns-test-service.dns-8840.svc.cluster.local]

  Aug 24 12:26:50.655: INFO: Pod client logs for webserver: 
  Aug 24 12:26:50.670: INFO: Pod client logs for querier: 
  Aug 24 12:26:50.686: INFO: Pod client logs for jessie-querier: 
  Aug 24 12:26:55.868: INFO: DNS probes using dns-8840/dns-test-eef12d30-fae4-48a0-b697-a57ccfd6a9da succeeded

  Aug 24 12:26:55.868: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: deleting the pod @ 08/24/23 12:26:55.878
  STEP: deleting the test service @ 08/24/23 12:26:55.921
  STEP: deleting the test headless service @ 08/24/23 12:26:56.065
  STEP: Destroying namespace "dns-8840" for this suite. @ 08/24/23 12:26:56.09
• [8.540 seconds]
------------------------------
SS
------------------------------
[sig-storage] EmptyDir volumes volume on default medium should have the correct mode [LinuxOnly] [NodeConformance] [Conformance]
test/e2e/common/storage/empty_dir.go:157
  STEP: Creating a kubernetes client @ 08/24/23 12:26:56.103
  Aug 24 12:26:56.103: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename emptydir @ 08/24/23 12:26:56.105
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 12:26:56.15
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 12:26:56.158
  STEP: Creating a pod to test emptydir volume type on node default medium @ 08/24/23 12:26:56.165
  STEP: Saw pod success @ 08/24/23 12:27:00.216
  Aug 24 12:27:00.224: INFO: Trying to get logs from node scw-conformance-default-2af6d8b4c6264cc5b9e5e6 pod pod-01705924-dadc-449d-bea7-f4b845fb297a container test-container: <nil>
  STEP: delete the pod @ 08/24/23 12:27:00.245
  Aug 24 12:27:00.292: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "emptydir-6381" for this suite. @ 08/24/23 12:27:00.305
• [4.217 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-node] RuntimeClass should reject a Pod requesting a non-existent RuntimeClass [NodeConformance] [Conformance]
test/e2e/common/node/runtimeclass.go:55
  STEP: Creating a kubernetes client @ 08/24/23 12:27:00.324
  Aug 24 12:27:00.325: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename runtimeclass @ 08/24/23 12:27:00.326
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 12:27:00.378
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 12:27:00.385
  Aug 24 12:27:00.411: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "runtimeclass-7458" for this suite. @ 08/24/23 12:27:00.42
• [0.111 seconds]
------------------------------
S
------------------------------
[sig-network] Networking Granular Checks: Pods should function for intra-pod communication: http [NodeConformance] [Conformance]
test/e2e/common/network/networking.go:84
  STEP: Creating a kubernetes client @ 08/24/23 12:27:00.436
  Aug 24 12:27:00.436: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename pod-network-test @ 08/24/23 12:27:00.437
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 12:27:00.478
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 12:27:00.484
  STEP: Performing setup for networking test in namespace pod-network-test-2435 @ 08/24/23 12:27:00.491
  STEP: creating a selector @ 08/24/23 12:27:00.491
  STEP: Creating the service pods in kubernetes @ 08/24/23 12:27:00.491
  Aug 24 12:27:00.491: INFO: Waiting up to 10m0s for all (but 0) nodes to be schedulable
  STEP: Creating test pods @ 08/24/23 12:27:22.724
  Aug 24 12:27:24.769: INFO: Setting MaxTries for pod polling to 34 for networking test based on endpoint count 2
  Aug 24 12:27:24.769: INFO: Breadth first check of 10.100.0.192 on host 172.16.36.3...
  Aug 24 12:27:24.779: INFO: ExecWithOptions {Command:[/bin/sh -c curl -g -q -s 'http://10.100.0.96:9080/dial?request=hostname&protocol=http&host=10.100.0.192&port=8083&tries=1'] Namespace:pod-network-test-2435 PodName:test-container-pod ContainerName:webserver Stdin:<nil> CaptureStdout:true CaptureStderr:true PreserveWhitespace:false Quiet:false}
  Aug 24 12:27:24.779: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  Aug 24 12:27:24.780: INFO: ExecWithOptions: Clientset creation
  Aug 24 12:27:24.780: INFO: ExecWithOptions: execute(POST https://10.96.0.1:443/api/v1/namespaces/pod-network-test-2435/pods/test-container-pod/exec?command=%2Fbin%2Fsh&command=-c&command=curl+-g+-q+-s+%27http%3A%2F%2F10.100.0.96%3A9080%2Fdial%3Frequest%3Dhostname%26protocol%3Dhttp%26host%3D10.100.0.192%26port%3D8083%26tries%3D1%27&container=webserver&container=webserver&stderr=true&stdout=true)
  Aug 24 12:27:24.923: INFO: Waiting for responses: map[]
  Aug 24 12:27:24.923: INFO: reached 10.100.0.192 after 0/1 tries
  Aug 24 12:27:24.923: INFO: Breadth first check of 10.100.1.206 on host 172.16.36.2...
  Aug 24 12:27:24.933: INFO: ExecWithOptions {Command:[/bin/sh -c curl -g -q -s 'http://10.100.0.96:9080/dial?request=hostname&protocol=http&host=10.100.1.206&port=8083&tries=1'] Namespace:pod-network-test-2435 PodName:test-container-pod ContainerName:webserver Stdin:<nil> CaptureStdout:true CaptureStderr:true PreserveWhitespace:false Quiet:false}
  Aug 24 12:27:24.933: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  Aug 24 12:27:24.933: INFO: ExecWithOptions: Clientset creation
  Aug 24 12:27:24.934: INFO: ExecWithOptions: execute(POST https://10.96.0.1:443/api/v1/namespaces/pod-network-test-2435/pods/test-container-pod/exec?command=%2Fbin%2Fsh&command=-c&command=curl+-g+-q+-s+%27http%3A%2F%2F10.100.0.96%3A9080%2Fdial%3Frequest%3Dhostname%26protocol%3Dhttp%26host%3D10.100.1.206%26port%3D8083%26tries%3D1%27&container=webserver&container=webserver&stderr=true&stdout=true)
  Aug 24 12:27:25.069: INFO: Waiting for responses: map[]
  Aug 24 12:27:25.069: INFO: reached 10.100.1.206 after 0/1 tries
  Aug 24 12:27:25.069: INFO: Going to retry 0 out of 2 pods....
  Aug 24 12:27:25.069: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "pod-network-test-2435" for this suite. @ 08/24/23 12:27:25.08
• [24.662 seconds]
------------------------------
SSSSSSSSSSSSSSSSSS
------------------------------
[sig-api-machinery] Garbage collector should keep the rc around until all its pods are deleted if the deleteOptions says so [Conformance]
test/e2e/apimachinery/garbage_collector.go:638
  STEP: Creating a kubernetes client @ 08/24/23 12:27:25.099
  Aug 24 12:27:25.099: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename gc @ 08/24/23 12:27:25.1
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 12:27:25.135
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 12:27:25.142
  STEP: create the rc @ 08/24/23 12:27:25.159
  W0824 12:27:25.172032      22 warnings.go:70] metadata.name: this is used in Pod names and hostnames, which can result in surprising behavior; a DNS label is recommended: [must not contain dots]
  STEP: delete the rc @ 08/24/23 12:27:31.362
  STEP: wait for the rc to be deleted @ 08/24/23 12:27:31.55
  Aug 24 12:27:32.753: INFO: 89 pods remaining
  Aug 24 12:27:32.753: INFO: 80 pods has nil DeletionTimestamp
  Aug 24 12:27:32.753: INFO: 
  Aug 24 12:27:33.861: INFO: 83 pods remaining
  Aug 24 12:27:33.861: INFO: 71 pods has nil DeletionTimestamp
  Aug 24 12:27:33.861: INFO: 
  Aug 24 12:27:34.752: INFO: 73 pods remaining
  Aug 24 12:27:34.752: INFO: 59 pods has nil DeletionTimestamp
  Aug 24 12:27:34.752: INFO: 
  Aug 24 12:27:35.787: INFO: 63 pods remaining
  Aug 24 12:27:35.791: INFO: 41 pods has nil DeletionTimestamp
  Aug 24 12:27:35.791: INFO: 
  Aug 24 12:27:36.661: INFO: 59 pods remaining
  Aug 24 12:27:36.661: INFO: 30 pods has nil DeletionTimestamp
  Aug 24 12:27:36.661: INFO: 
  Aug 24 12:27:37.666: INFO: 52 pods remaining
  Aug 24 12:27:37.666: INFO: 20 pods has nil DeletionTimestamp
  Aug 24 12:27:37.666: INFO: 
  Aug 24 12:27:38.663: INFO: 40 pods remaining
  Aug 24 12:27:38.663: INFO: 0 pods has nil DeletionTimestamp
  Aug 24 12:27:38.663: INFO: 
  Aug 24 12:27:39.653: INFO: 35 pods remaining
  Aug 24 12:27:39.653: INFO: 0 pods has nil DeletionTimestamp
  Aug 24 12:27:39.653: INFO: 
  Aug 24 12:27:41.758: INFO: 27 pods remaining
  Aug 24 12:27:41.758: INFO: 0 pods has nil DeletionTimestamp
  Aug 24 12:27:41.758: INFO: 
  Aug 24 12:27:42.662: INFO: 12 pods remaining
  Aug 24 12:27:42.662: INFO: 0 pods has nil DeletionTimestamp
  Aug 24 12:27:42.662: INFO: 
  Aug 24 12:27:43.652: INFO: 7 pods remaining
  Aug 24 12:27:43.652: INFO: 0 pods has nil DeletionTimestamp
  Aug 24 12:27:43.652: INFO: 
  Aug 24 12:27:44.570: INFO: 3 pods remaining
  Aug 24 12:27:44.570: INFO: 0 pods has nil DeletionTimestamp
  Aug 24 12:27:44.570: INFO: 
  STEP: Gathering metrics @ 08/24/23 12:27:45.567
  W0824 12:27:45.582645      22 metrics_grabber.go:152] Can't find kube-controller-manager pod. Grabbing metrics from kube-controller-manager is disabled.
  Aug 24 12:27:45.582: INFO: For apiserver_request_total:
  For apiserver_request_latency_seconds:
  For apiserver_init_events_total:
  For garbage_collector_attempt_to_delete_queue_latency:
  For garbage_collector_attempt_to_delete_work_duration:
  For garbage_collector_attempt_to_orphan_queue_latency:
  For garbage_collector_attempt_to_orphan_work_duration:
  For garbage_collector_dirty_processing_latency_microseconds:
  For garbage_collector_event_processing_latency_microseconds:
  For garbage_collector_graph_changes_queue_latency:
  For garbage_collector_graph_changes_work_duration:
  For garbage_collector_orphan_processing_latency_microseconds:
  For namespace_queue_latency:
  For namespace_queue_latency_sum:
  For namespace_queue_latency_count:
  For namespace_retries:
  For namespace_work_duration:
  For namespace_work_duration_sum:
  For namespace_work_duration_count:
  For function_duration_seconds:
  For errors_total:
  For evicted_pods_total:

  Aug 24 12:27:45.582: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "gc-2480" for this suite. @ 08/24/23 12:27:45.593
• [20.509 seconds]
------------------------------
SSSSSSSSSS
------------------------------
[sig-apps] ReplicationController should test the lifecycle of a ReplicationController [Conformance]
test/e2e/apps/rc.go:112
  STEP: Creating a kubernetes client @ 08/24/23 12:27:45.608
  Aug 24 12:27:45.608: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename replication-controller @ 08/24/23 12:27:45.609
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 12:27:45.639
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 12:27:45.649
  STEP: creating a ReplicationController @ 08/24/23 12:27:45.666
  STEP: waiting for RC to be added @ 08/24/23 12:27:45.677
  STEP: waiting for available Replicas @ 08/24/23 12:27:45.677
  STEP: patching ReplicationController @ 08/24/23 12:27:46.687
  STEP: waiting for RC to be modified @ 08/24/23 12:27:46.709
  STEP: patching ReplicationController status @ 08/24/23 12:27:46.709
  STEP: waiting for RC to be modified @ 08/24/23 12:27:46.724
  STEP: waiting for available Replicas @ 08/24/23 12:27:46.724
  STEP: fetching ReplicationController status @ 08/24/23 12:27:46.739
  STEP: patching ReplicationController scale @ 08/24/23 12:27:46.748
  STEP: waiting for RC to be modified @ 08/24/23 12:27:46.761
  STEP: waiting for ReplicationController's scale to be the max amount @ 08/24/23 12:27:46.762
  STEP: fetching ReplicationController; ensuring that it's patched @ 08/24/23 12:27:48.162
  STEP: updating ReplicationController status @ 08/24/23 12:27:48.172
  STEP: waiting for RC to be modified @ 08/24/23 12:27:48.186
  STEP: listing all ReplicationControllers @ 08/24/23 12:27:48.186
  STEP: checking that ReplicationController has expected values @ 08/24/23 12:27:48.194
  STEP: deleting ReplicationControllers by collection @ 08/24/23 12:27:48.194
  STEP: waiting for ReplicationController to have a DELETED watchEvent @ 08/24/23 12:27:48.213
  Aug 24 12:27:48.354: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  E0824 12:27:48.355455      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Destroying namespace "replication-controller-5773" for this suite. @ 08/24/23 12:27:48.365
• [2.771 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-scheduling] SchedulerPreemption [Serial] PreemptionExecutionPath runs ReplicaSets to verify preemption running path [Conformance]
test/e2e/scheduling/preemption.go:624
  STEP: Creating a kubernetes client @ 08/24/23 12:27:48.381
  Aug 24 12:27:48.381: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename sched-preemption @ 08/24/23 12:27:48.382
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 12:27:48.413
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 12:27:48.42
  Aug 24 12:27:48.456: INFO: Waiting up to 1m0s for all nodes to be ready
  E0824 12:27:49.355647      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:27:50.355948      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:27:51.356560      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:27:52.357313      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:27:53.357456      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:27:54.357667      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:27:55.358634      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:27:56.359031      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:27:57.360150      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:27:58.360655      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:27:59.360775      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:28:00.361156      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:28:01.361989      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:28:02.362676      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:28:03.362758      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:28:04.363129      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:28:05.363405      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:28:06.363472      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:28:07.363545      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:28:08.363782      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:28:09.363875      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:28:10.363992      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:28:11.364564      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:28:12.365031      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:28:13.365092      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:28:14.365347      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:28:15.365416      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:28:16.365998      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:28:17.366270      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:28:18.366549      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:28:19.366585      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:28:20.366909      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:28:21.366973      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:28:22.367873      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:28:23.367954      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:28:24.368120      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:28:25.368501      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:28:26.368466      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:28:27.368612      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:28:28.368831      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:28:29.369039      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:28:30.369184      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:28:31.370060      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:28:32.370773      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:28:33.370878      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:28:34.371068      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:28:35.371221      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:28:36.371671      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:28:37.372235      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:28:38.372593      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:28:39.372752      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:28:40.372904      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:28:41.372976      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:28:42.373787      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:28:43.374147      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:28:44.374423      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:28:45.374509      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:28:46.374695      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:28:47.374841      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:28:48.375044      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 12:28:48.505: INFO: Waiting for terminating namespaces to be deleted...
  STEP: Creating a kubernetes client @ 08/24/23 12:28:48.516
  Aug 24 12:28:48.516: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename sched-preemption-path @ 08/24/23 12:28:48.517
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 12:28:48.546
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 12:28:48.552
  STEP: Finding an available node @ 08/24/23 12:28:48.559
  STEP: Trying to launch a pod without a label to get a node which can launch it. @ 08/24/23 12:28:48.559
  E0824 12:28:49.375479      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:28:50.376038      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Explicitly delete pod here to free the resource it takes. @ 08/24/23 12:28:50.603
  Aug 24 12:28:50.624: INFO: found a healthy node: scw-conformance-default-2af6d8b4c6264cc5b9e5e6
  E0824 12:28:51.376198      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:28:52.377211      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:28:53.377354      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:28:54.377530      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:28:55.377620      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:28:56.377837      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 12:28:56.827: INFO: pods created so far: [1 1 1]
  Aug 24 12:28:56.827: INFO: length of pods created so far: 3
  E0824 12:28:57.378407      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:28:58.378533      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 12:28:58.849: INFO: pods created so far: [2 2 1]
  E0824 12:28:59.378730      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:29:00.379677      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:29:01.380260      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:29:02.380972      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:29:03.381186      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:29:04.381803      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:29:05.382134      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 12:29:05.850: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  Aug 24 12:29:05.937: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "sched-preemption-path-8188" for this suite. @ 08/24/23 12:29:06.038
  STEP: Destroying namespace "sched-preemption-8215" for this suite. @ 08/24/23 12:29:06.052
• [77.687 seconds]
------------------------------
SSSSSSSSSSSS
------------------------------
[sig-apps] DisruptionController should block an eviction until the PDB is updated to allow it [Conformance]
test/e2e/apps/disruption.go:349
  STEP: Creating a kubernetes client @ 08/24/23 12:29:06.068
  Aug 24 12:29:06.068: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename disruption @ 08/24/23 12:29:06.069
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 12:29:06.099
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 12:29:06.107
  STEP: Creating a pdb that targets all three pods in a test replica set @ 08/24/23 12:29:06.114
  STEP: Waiting for the pdb to be processed @ 08/24/23 12:29:06.124
  E0824 12:29:06.382874      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:29:07.383571      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: First trying to evict a pod which shouldn't be evictable @ 08/24/23 12:29:08.179
  STEP: Waiting for all pods to be running @ 08/24/23 12:29:08.179
  Aug 24 12:29:08.189: INFO: pods: 0 < 3
  E0824 12:29:08.384655      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:29:09.384987      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: locating a running pod @ 08/24/23 12:29:10.198
  STEP: Updating the pdb to allow a pod to be evicted @ 08/24/23 12:29:10.223
  STEP: Waiting for the pdb to be processed @ 08/24/23 12:29:10.246
  E0824 12:29:10.385717      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:29:11.385852      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Trying to evict the same pod we tried earlier which should now be evictable @ 08/24/23 12:29:12.262
  STEP: Waiting for all pods to be running @ 08/24/23 12:29:12.262
  STEP: Waiting for the pdb to observed all healthy pods @ 08/24/23 12:29:12.271
  STEP: Patching the pdb to disallow a pod to be evicted @ 08/24/23 12:29:12.325
  E0824 12:29:12.386613      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Waiting for the pdb to be processed @ 08/24/23 12:29:12.461
  E0824 12:29:13.387006      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:29:14.387063      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Waiting for all pods to be running @ 08/24/23 12:29:14.479
  STEP: locating a running pod @ 08/24/23 12:29:14.488
  STEP: Deleting the pdb to allow a pod to be evicted @ 08/24/23 12:29:14.526
  STEP: Waiting for the pdb to be deleted @ 08/24/23 12:29:14.541
  STEP: Trying to evict the same pod we tried earlier which should now be evictable @ 08/24/23 12:29:14.549
  STEP: Waiting for all pods to be running @ 08/24/23 12:29:14.549
  Aug 24 12:29:14.593: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "disruption-9961" for this suite. @ 08/24/23 12:29:14.603
• [8.583 seconds]
------------------------------
SSSSS
------------------------------
[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should mutate custom resource with different stored version [Conformance]
test/e2e/apimachinery/webhook.go:315
  STEP: Creating a kubernetes client @ 08/24/23 12:29:14.652
  Aug 24 12:29:14.652: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename webhook @ 08/24/23 12:29:14.653
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 12:29:14.681
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 12:29:14.752
  STEP: Setting up server cert @ 08/24/23 12:29:14.803
  STEP: Create role binding to let webhook read extension-apiserver-authentication @ 08/24/23 12:29:15.105
  STEP: Deploying the webhook pod @ 08/24/23 12:29:15.124
  STEP: Wait for the deployment to be ready @ 08/24/23 12:29:15.15
  Aug 24 12:29:15.169: INFO: deployment "sample-webhook-deployment" doesn't have the required revision set
  E0824 12:29:15.387744      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:29:16.388531      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Deploying the webhook service @ 08/24/23 12:29:17.197
  STEP: Verifying the service has paired with the endpoint @ 08/24/23 12:29:17.223
  E0824 12:29:17.389442      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 12:29:18.223: INFO: Waiting for amount of service:e2e-test-webhook endpoints to be 1
  Aug 24 12:29:18.241: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  E0824 12:29:18.390325      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Registering the mutating webhook for custom resource e2e-test-webhook-6149-crds.webhook.example.com via the AdmissionRegistration API @ 08/24/23 12:29:18.768
  STEP: Creating a custom resource while v1 is storage version @ 08/24/23 12:29:18.81
  E0824 12:29:19.391214      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:29:20.391388      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Patching Custom Resource Definition to set v2 as storage @ 08/24/23 12:29:20.998
  STEP: Patching the custom resource while v2 is storage version @ 08/24/23 12:29:21.012
  Aug 24 12:29:21.265: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  E0824 12:29:21.392273      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Destroying namespace "webhook-3151" for this suite. @ 08/24/23 12:29:21.985
  STEP: Destroying namespace "webhook-markers-1871" for this suite. @ 08/24/23 12:29:22.004
• [7.370 seconds]
------------------------------
SSS
------------------------------
[sig-api-machinery] Servers with support for Table transformation should return a 406 for a backend which does not implement metadata [Conformance]
test/e2e/apimachinery/table_conversion.go:154
  STEP: Creating a kubernetes client @ 08/24/23 12:29:22.022
  Aug 24 12:29:22.022: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename tables @ 08/24/23 12:29:22.023
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 12:29:22.057
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 12:29:22.063
  Aug 24 12:29:22.076: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "tables-6734" for this suite. @ 08/24/23 12:29:22.086
• [0.081 seconds]
------------------------------
SSSSSSS
------------------------------
[sig-node] Container Runtime blackbox test on terminated container should report termination message from log output if TerminationMessagePolicy FallbackToLogsOnError is set [NodeConformance] [Conformance]
test/e2e/common/node/runtime.go:216
  STEP: Creating a kubernetes client @ 08/24/23 12:29:22.103
  Aug 24 12:29:22.103: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename container-runtime @ 08/24/23 12:29:22.104
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 12:29:22.136
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 12:29:22.153
  STEP: create the container @ 08/24/23 12:29:22.159
  W0824 12:29:22.176263      22 warnings.go:70] metadata.name: this is used in the Pod's hostname, which can result in surprising behavior; a DNS label is recommended: [must be no more than 63 characters]
  STEP: wait for the container to reach Failed @ 08/24/23 12:29:22.176
  E0824 12:29:22.392764      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:29:23.393730      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:29:24.393839      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: get the container status @ 08/24/23 12:29:25.214
  STEP: the container should be terminated @ 08/24/23 12:29:25.221
  STEP: the termination message should be set @ 08/24/23 12:29:25.221
  Aug 24 12:29:25.221: INFO: Expected: &{DONE} to match Container's Termination Message: DONE --
  STEP: delete the container @ 08/24/23 12:29:25.221
  Aug 24 12:29:25.244: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "container-runtime-6353" for this suite. @ 08/24/23 12:29:25.265
• [3.178 seconds]
------------------------------
SSSSSSS
------------------------------
[sig-network] Proxy version v1 should proxy through a service and a pod  [Conformance]
test/e2e/network/proxy.go:101
  STEP: Creating a kubernetes client @ 08/24/23 12:29:25.282
  Aug 24 12:29:25.282: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename proxy @ 08/24/23 12:29:25.283
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 12:29:25.313
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 12:29:25.32
  STEP: starting an echo server on multiple ports @ 08/24/23 12:29:25.351
  STEP: creating replication controller proxy-service-jqv44 in namespace proxy-1940 @ 08/24/23 12:29:25.351
  I0824 12:29:25.366626      22 runners.go:197] Created replication controller with name: proxy-service-jqv44, namespace: proxy-1940, replica count: 1
  E0824 12:29:25.394768      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:29:26.395491      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  I0824 12:29:26.416874      22 runners.go:197] proxy-service-jqv44 Pods: 1 out of 1 created, 0 running, 1 pending, 0 waiting, 0 inactive, 0 terminating, 0 unknown, 0 runningButNotReady 
  E0824 12:29:27.395702      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  I0824 12:29:27.418021      22 runners.go:197] proxy-service-jqv44 Pods: 1 out of 1 created, 0 running, 1 pending, 0 waiting, 0 inactive, 0 terminating, 0 unknown, 0 runningButNotReady 
  E0824 12:29:28.395873      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  I0824 12:29:28.419332      22 runners.go:197] proxy-service-jqv44 Pods: 1 out of 1 created, 1 running, 0 pending, 0 waiting, 0 inactive, 0 terminating, 0 unknown, 0 runningButNotReady 
  Aug 24 12:29:28.458: INFO: setup took 3.130675945s, starting test cases
  STEP: running 16 cases, 20 attempts per case, 320 total attempts @ 08/24/23 12:29:28.458
  Aug 24 12:29:28.651: INFO: (0) /api/v1/namespaces/proxy-1940/pods/proxy-service-jqv44-m8nln:1080/proxy/: <a href="/api/v1/namespaces/proxy-1940/pods/proxy-service-jqv44-m8nln:1080/proxy/rewriteme">test<... (200; 192.480815ms)
  Aug 24 12:29:28.651: INFO: (0) /api/v1/namespaces/proxy-1940/pods/proxy-service-jqv44-m8nln:160/proxy/: foo (200; 192.196903ms)
  Aug 24 12:29:28.651: INFO: (0) /api/v1/namespaces/proxy-1940/services/http:proxy-service-jqv44:portname1/proxy/: foo (200; 192.445595ms)
  Aug 24 12:29:28.651: INFO: (0) /api/v1/namespaces/proxy-1940/services/proxy-service-jqv44:portname1/proxy/: foo (200; 192.320144ms)
  Aug 24 12:29:28.651: INFO: (0) /api/v1/namespaces/proxy-1940/services/proxy-service-jqv44:portname2/proxy/: bar (200; 192.259234ms)
  Aug 24 12:29:28.651: INFO: (0) /api/v1/namespaces/proxy-1940/pods/http:proxy-service-jqv44-m8nln:160/proxy/: foo (200; 192.718057ms)
  Aug 24 12:29:28.651: INFO: (0) /api/v1/namespaces/proxy-1940/services/http:proxy-service-jqv44:portname2/proxy/: bar (200; 192.252404ms)
  Aug 24 12:29:28.651: INFO: (0) /api/v1/namespaces/proxy-1940/pods/proxy-service-jqv44-m8nln:162/proxy/: bar (200; 192.290144ms)
  Aug 24 12:29:28.651: INFO: (0) /api/v1/namespaces/proxy-1940/pods/http:proxy-service-jqv44-m8nln:1080/proxy/: <a href="/api/v1/namespaces/proxy-1940/pods/http:proxy-service-jqv44-m8nln:1080/proxy/rewriteme">... (200; 192.591196ms)
  Aug 24 12:29:28.651: INFO: (0) /api/v1/namespaces/proxy-1940/pods/http:proxy-service-jqv44-m8nln:162/proxy/: bar (200; 192.854237ms)
  Aug 24 12:29:28.653: INFO: (0) /api/v1/namespaces/proxy-1940/pods/proxy-service-jqv44-m8nln/proxy/: <a href="/api/v1/namespaces/proxy-1940/pods/proxy-service-jqv44-m8nln/proxy/rewriteme">test</a> (200; 194.945021ms)
  Aug 24 12:29:28.657: INFO: (0) /api/v1/namespaces/proxy-1940/pods/https:proxy-service-jqv44-m8nln:460/proxy/: tls baz (200; 198.793575ms)
  Aug 24 12:29:28.658: INFO: (0) /api/v1/namespaces/proxy-1940/pods/https:proxy-service-jqv44-m8nln:443/proxy/: <a href="/api/v1/namespaces/proxy-1940/pods/https:proxy-service-jqv44-m8nln:443/proxy/tlsrewritem... (200; 199.50546ms)
  Aug 24 12:29:28.658: INFO: (0) /api/v1/namespaces/proxy-1940/services/https:proxy-service-jqv44:tlsportname1/proxy/: tls baz (200; 199.337818ms)
  Aug 24 12:29:28.658: INFO: (0) /api/v1/namespaces/proxy-1940/pods/https:proxy-service-jqv44-m8nln:462/proxy/: tls qux (200; 199.303219ms)
  Aug 24 12:29:28.658: INFO: (0) /api/v1/namespaces/proxy-1940/services/https:proxy-service-jqv44:tlsportname2/proxy/: tls qux (200; 199.46922ms)
  Aug 24 12:29:28.755: INFO: (1) /api/v1/namespaces/proxy-1940/pods/https:proxy-service-jqv44-m8nln:460/proxy/: tls baz (200; 97.445364ms)
  Aug 24 12:29:28.755: INFO: (1) /api/v1/namespaces/proxy-1940/pods/http:proxy-service-jqv44-m8nln:1080/proxy/: <a href="/api/v1/namespaces/proxy-1940/pods/http:proxy-service-jqv44-m8nln:1080/proxy/rewriteme">... (200; 97.312283ms)
  Aug 24 12:29:28.756: INFO: (1) /api/v1/namespaces/proxy-1940/pods/http:proxy-service-jqv44-m8nln:162/proxy/: bar (200; 97.758136ms)
  Aug 24 12:29:28.756: INFO: (1) /api/v1/namespaces/proxy-1940/pods/proxy-service-jqv44-m8nln:1080/proxy/: <a href="/api/v1/namespaces/proxy-1940/pods/proxy-service-jqv44-m8nln:1080/proxy/rewriteme">test<... (200; 97.755185ms)
  Aug 24 12:29:28.756: INFO: (1) /api/v1/namespaces/proxy-1940/pods/https:proxy-service-jqv44-m8nln:462/proxy/: tls qux (200; 98.396561ms)
  Aug 24 12:29:28.756: INFO: (1) /api/v1/namespaces/proxy-1940/pods/proxy-service-jqv44-m8nln:162/proxy/: bar (200; 98.568732ms)
  Aug 24 12:29:28.757: INFO: (1) /api/v1/namespaces/proxy-1940/pods/https:proxy-service-jqv44-m8nln:443/proxy/: <a href="/api/v1/namespaces/proxy-1940/pods/https:proxy-service-jqv44-m8nln:443/proxy/tlsrewritem... (200; 98.30151ms)
  Aug 24 12:29:28.757: INFO: (1) /api/v1/namespaces/proxy-1940/pods/proxy-service-jqv44-m8nln:160/proxy/: foo (200; 98.580412ms)
  Aug 24 12:29:28.757: INFO: (1) /api/v1/namespaces/proxy-1940/services/https:proxy-service-jqv44:tlsportname1/proxy/: tls baz (200; 99.233836ms)
  Aug 24 12:29:28.757: INFO: (1) /api/v1/namespaces/proxy-1940/pods/http:proxy-service-jqv44-m8nln:160/proxy/: foo (200; 99.257576ms)
  Aug 24 12:29:28.758: INFO: (1) /api/v1/namespaces/proxy-1940/pods/proxy-service-jqv44-m8nln/proxy/: <a href="/api/v1/namespaces/proxy-1940/pods/proxy-service-jqv44-m8nln/proxy/rewriteme">test</a> (200; 99.823039ms)
  Aug 24 12:29:28.759: INFO: (1) /api/v1/namespaces/proxy-1940/services/https:proxy-service-jqv44:tlsportname2/proxy/: tls qux (200; 100.672796ms)
  Aug 24 12:29:28.760: INFO: (1) /api/v1/namespaces/proxy-1940/services/proxy-service-jqv44:portname1/proxy/: foo (200; 101.988913ms)
  Aug 24 12:29:28.760: INFO: (1) /api/v1/namespaces/proxy-1940/services/proxy-service-jqv44:portname2/proxy/: bar (200; 102.076534ms)
  Aug 24 12:29:28.762: INFO: (1) /api/v1/namespaces/proxy-1940/services/http:proxy-service-jqv44:portname2/proxy/: bar (200; 103.592914ms)
  Aug 24 12:29:28.762: INFO: (1) /api/v1/namespaces/proxy-1940/services/http:proxy-service-jqv44:portname1/proxy/: foo (200; 104.071597ms)
  Aug 24 12:29:28.857: INFO: (2) /api/v1/namespaces/proxy-1940/pods/https:proxy-service-jqv44-m8nln:443/proxy/: <a href="/api/v1/namespaces/proxy-1940/pods/https:proxy-service-jqv44-m8nln:443/proxy/tlsrewritem... (200; 94.583886ms)
  Aug 24 12:29:28.859: INFO: (2) /api/v1/namespaces/proxy-1940/pods/https:proxy-service-jqv44-m8nln:462/proxy/: tls qux (200; 96.708969ms)
  Aug 24 12:29:28.860: INFO: (2) /api/v1/namespaces/proxy-1940/pods/http:proxy-service-jqv44-m8nln:160/proxy/: foo (200; 97.142813ms)
  Aug 24 12:29:28.860: INFO: (2) /api/v1/namespaces/proxy-1940/pods/https:proxy-service-jqv44-m8nln:460/proxy/: tls baz (200; 97.924977ms)
  Aug 24 12:29:28.860: INFO: (2) /api/v1/namespaces/proxy-1940/pods/http:proxy-service-jqv44-m8nln:1080/proxy/: <a href="/api/v1/namespaces/proxy-1940/pods/http:proxy-service-jqv44-m8nln:1080/proxy/rewriteme">... (200; 97.360294ms)
  Aug 24 12:29:28.862: INFO: (2) /api/v1/namespaces/proxy-1940/pods/proxy-service-jqv44-m8nln/proxy/: <a href="/api/v1/namespaces/proxy-1940/pods/proxy-service-jqv44-m8nln/proxy/rewriteme">test</a> (200; 98.791472ms)
  Aug 24 12:29:28.862: INFO: (2) /api/v1/namespaces/proxy-1940/pods/http:proxy-service-jqv44-m8nln:162/proxy/: bar (200; 99.086164ms)
  Aug 24 12:29:28.862: INFO: (2) /api/v1/namespaces/proxy-1940/pods/proxy-service-jqv44-m8nln:1080/proxy/: <a href="/api/v1/namespaces/proxy-1940/pods/proxy-service-jqv44-m8nln:1080/proxy/rewriteme">test<... (200; 99.966239ms)
  Aug 24 12:29:28.863: INFO: (2) /api/v1/namespaces/proxy-1940/pods/proxy-service-jqv44-m8nln:162/proxy/: bar (200; 100.485943ms)
  Aug 24 12:29:28.950: INFO: (2) /api/v1/namespaces/proxy-1940/pods/proxy-service-jqv44-m8nln:160/proxy/: foo (200; 187.213801ms)
  Aug 24 12:29:28.951: INFO: (2) /api/v1/namespaces/proxy-1940/services/http:proxy-service-jqv44:portname2/proxy/: bar (200; 188.63084ms)
  Aug 24 12:29:28.951: INFO: (2) /api/v1/namespaces/proxy-1940/services/http:proxy-service-jqv44:portname1/proxy/: foo (200; 188.524899ms)
  Aug 24 12:29:28.951: INFO: (2) /api/v1/namespaces/proxy-1940/services/https:proxy-service-jqv44:tlsportname2/proxy/: tls qux (200; 188.374968ms)
  Aug 24 12:29:28.951: INFO: (2) /api/v1/namespaces/proxy-1940/services/proxy-service-jqv44:portname1/proxy/: foo (200; 188.815161ms)
  Aug 24 12:29:28.951: INFO: (2) /api/v1/namespaces/proxy-1940/services/https:proxy-service-jqv44:tlsportname1/proxy/: tls baz (200; 188.587349ms)
  Aug 24 12:29:28.954: INFO: (2) /api/v1/namespaces/proxy-1940/services/proxy-service-jqv44:portname2/proxy/: bar (200; 191.028815ms)
  Aug 24 12:29:29.050: INFO: (3) /api/v1/namespaces/proxy-1940/pods/proxy-service-jqv44-m8nln:162/proxy/: bar (200; 96.285168ms)
  Aug 24 12:29:29.050: INFO: (3) /api/v1/namespaces/proxy-1940/pods/http:proxy-service-jqv44-m8nln:1080/proxy/: <a href="/api/v1/namespaces/proxy-1940/pods/http:proxy-service-jqv44-m8nln:1080/proxy/rewriteme">... (200; 96.559309ms)
  Aug 24 12:29:29.050: INFO: (3) /api/v1/namespaces/proxy-1940/pods/proxy-service-jqv44-m8nln:1080/proxy/: <a href="/api/v1/namespaces/proxy-1940/pods/proxy-service-jqv44-m8nln:1080/proxy/rewriteme">test<... (200; 96.278127ms)
  Aug 24 12:29:29.050: INFO: (3) /api/v1/namespaces/proxy-1940/pods/http:proxy-service-jqv44-m8nln:162/proxy/: bar (200; 96.602389ms)
  Aug 24 12:29:29.050: INFO: (3) /api/v1/namespaces/proxy-1940/pods/proxy-service-jqv44-m8nln:160/proxy/: foo (200; 96.71171ms)
  Aug 24 12:29:29.053: INFO: (3) /api/v1/namespaces/proxy-1940/services/http:proxy-service-jqv44:portname2/proxy/: bar (200; 99.235656ms)
  Aug 24 12:29:29.054: INFO: (3) /api/v1/namespaces/proxy-1940/pods/https:proxy-service-jqv44-m8nln:462/proxy/: tls qux (200; 100.386134ms)
  Aug 24 12:29:29.054: INFO: (3) /api/v1/namespaces/proxy-1940/pods/http:proxy-service-jqv44-m8nln:160/proxy/: foo (200; 100.302763ms)
  Aug 24 12:29:29.054: INFO: (3) /api/v1/namespaces/proxy-1940/pods/https:proxy-service-jqv44-m8nln:443/proxy/: <a href="/api/v1/namespaces/proxy-1940/pods/https:proxy-service-jqv44-m8nln:443/proxy/tlsrewritem... (200; 100.139442ms)
  Aug 24 12:29:29.054: INFO: (3) /api/v1/namespaces/proxy-1940/pods/proxy-service-jqv44-m8nln/proxy/: <a href="/api/v1/namespaces/proxy-1940/pods/proxy-service-jqv44-m8nln/proxy/rewriteme">test</a> (200; 100.064541ms)
  Aug 24 12:29:29.055: INFO: (3) /api/v1/namespaces/proxy-1940/pods/https:proxy-service-jqv44-m8nln:460/proxy/: tls baz (200; 100.510564ms)
  Aug 24 12:29:29.057: INFO: (3) /api/v1/namespaces/proxy-1940/services/http:proxy-service-jqv44:portname1/proxy/: foo (200; 103.081811ms)
  Aug 24 12:29:29.058: INFO: (3) /api/v1/namespaces/proxy-1940/services/proxy-service-jqv44:portname1/proxy/: foo (200; 103.406412ms)
  Aug 24 12:29:29.058: INFO: (3) /api/v1/namespaces/proxy-1940/services/proxy-service-jqv44:portname2/proxy/: bar (200; 104.31283ms)
  Aug 24 12:29:29.058: INFO: (3) /api/v1/namespaces/proxy-1940/services/https:proxy-service-jqv44:tlsportname1/proxy/: tls baz (200; 104.685162ms)
  Aug 24 12:29:29.060: INFO: (3) /api/v1/namespaces/proxy-1940/services/https:proxy-service-jqv44:tlsportname2/proxy/: tls qux (200; 105.963459ms)
  Aug 24 12:29:29.154: INFO: (4) /api/v1/namespaces/proxy-1940/pods/proxy-service-jqv44-m8nln:162/proxy/: bar (200; 93.53648ms)
  Aug 24 12:29:29.155: INFO: (4) /api/v1/namespaces/proxy-1940/pods/http:proxy-service-jqv44-m8nln:162/proxy/: bar (200; 94.835278ms)
  Aug 24 12:29:29.155: INFO: (4) /api/v1/namespaces/proxy-1940/pods/proxy-service-jqv44-m8nln/proxy/: <a href="/api/v1/namespaces/proxy-1940/pods/proxy-service-jqv44-m8nln/proxy/rewriteme">test</a> (200; 94.736528ms)
  Aug 24 12:29:29.155: INFO: (4) /api/v1/namespaces/proxy-1940/pods/proxy-service-jqv44-m8nln:160/proxy/: foo (200; 94.930049ms)
  Aug 24 12:29:29.155: INFO: (4) /api/v1/namespaces/proxy-1940/pods/https:proxy-service-jqv44-m8nln:462/proxy/: tls qux (200; 94.770557ms)
  Aug 24 12:29:29.155: INFO: (4) /api/v1/namespaces/proxy-1940/pods/https:proxy-service-jqv44-m8nln:443/proxy/: <a href="/api/v1/namespaces/proxy-1940/pods/https:proxy-service-jqv44-m8nln:443/proxy/tlsrewritem... (200; 94.841749ms)
  Aug 24 12:29:29.155: INFO: (4) /api/v1/namespaces/proxy-1940/pods/https:proxy-service-jqv44-m8nln:460/proxy/: tls baz (200; 94.948229ms)
  Aug 24 12:29:29.156: INFO: (4) /api/v1/namespaces/proxy-1940/pods/proxy-service-jqv44-m8nln:1080/proxy/: <a href="/api/v1/namespaces/proxy-1940/pods/proxy-service-jqv44-m8nln:1080/proxy/rewriteme">test<... (200; 94.934289ms)
  Aug 24 12:29:29.156: INFO: (4) /api/v1/namespaces/proxy-1940/pods/http:proxy-service-jqv44-m8nln:1080/proxy/: <a href="/api/v1/namespaces/proxy-1940/pods/http:proxy-service-jqv44-m8nln:1080/proxy/rewriteme">... (200; 95.288401ms)
  Aug 24 12:29:29.156: INFO: (4) /api/v1/namespaces/proxy-1940/pods/http:proxy-service-jqv44-m8nln:160/proxy/: foo (200; 95.476172ms)
  Aug 24 12:29:29.156: INFO: (4) /api/v1/namespaces/proxy-1940/services/proxy-service-jqv44:portname2/proxy/: bar (200; 95.841774ms)
  Aug 24 12:29:29.158: INFO: (4) /api/v1/namespaces/proxy-1940/services/proxy-service-jqv44:portname1/proxy/: foo (200; 97.726127ms)
  Aug 24 12:29:29.159: INFO: (4) /api/v1/namespaces/proxy-1940/services/http:proxy-service-jqv44:portname2/proxy/: bar (200; 98.044329ms)
  Aug 24 12:29:29.159: INFO: (4) /api/v1/namespaces/proxy-1940/services/https:proxy-service-jqv44:tlsportname2/proxy/: tls qux (200; 98.41166ms)
  Aug 24 12:29:29.161: INFO: (4) /api/v1/namespaces/proxy-1940/services/http:proxy-service-jqv44:portname1/proxy/: foo (200; 100.003492ms)
  Aug 24 12:29:29.161: INFO: (4) /api/v1/namespaces/proxy-1940/services/https:proxy-service-jqv44:tlsportname1/proxy/: tls baz (200; 100.023742ms)
  Aug 24 12:29:29.254: INFO: (5) /api/v1/namespaces/proxy-1940/pods/proxy-service-jqv44-m8nln:162/proxy/: bar (200; 91.767407ms)
  Aug 24 12:29:29.254: INFO: (5) /api/v1/namespaces/proxy-1940/pods/http:proxy-service-jqv44-m8nln:162/proxy/: bar (200; 92.646783ms)
  Aug 24 12:29:29.254: INFO: (5) /api/v1/namespaces/proxy-1940/pods/https:proxy-service-jqv44-m8nln:462/proxy/: tls qux (200; 92.434662ms)
  Aug 24 12:29:29.254: INFO: (5) /api/v1/namespaces/proxy-1940/pods/proxy-service-jqv44-m8nln:160/proxy/: foo (200; 92.824384ms)
  Aug 24 12:29:29.255: INFO: (5) /api/v1/namespaces/proxy-1940/pods/http:proxy-service-jqv44-m8nln:1080/proxy/: <a href="/api/v1/namespaces/proxy-1940/pods/http:proxy-service-jqv44-m8nln:1080/proxy/rewriteme">... (200; 91.307296ms)
  Aug 24 12:29:29.255: INFO: (5) /api/v1/namespaces/proxy-1940/pods/proxy-service-jqv44-m8nln:1080/proxy/: <a href="/api/v1/namespaces/proxy-1940/pods/proxy-service-jqv44-m8nln:1080/proxy/rewriteme">test<... (200; 91.99843ms)
  Aug 24 12:29:29.255: INFO: (5) /api/v1/namespaces/proxy-1940/pods/https:proxy-service-jqv44-m8nln:443/proxy/: <a href="/api/v1/namespaces/proxy-1940/pods/https:proxy-service-jqv44-m8nln:443/proxy/tlsrewritem... (200; 91.555516ms)
  Aug 24 12:29:29.255: INFO: (5) /api/v1/namespaces/proxy-1940/pods/https:proxy-service-jqv44-m8nln:460/proxy/: tls baz (200; 94.194764ms)
  Aug 24 12:29:29.255: INFO: (5) /api/v1/namespaces/proxy-1940/pods/http:proxy-service-jqv44-m8nln:160/proxy/: foo (200; 92.910685ms)
  Aug 24 12:29:29.257: INFO: (5) /api/v1/namespaces/proxy-1940/pods/proxy-service-jqv44-m8nln/proxy/: <a href="/api/v1/namespaces/proxy-1940/pods/proxy-service-jqv44-m8nln/proxy/rewriteme">test</a> (200; 93.866791ms)
  Aug 24 12:29:29.259: INFO: (5) /api/v1/namespaces/proxy-1940/services/http:proxy-service-jqv44:portname2/proxy/: bar (200; 96.956041ms)
  Aug 24 12:29:29.259: INFO: (5) /api/v1/namespaces/proxy-1940/services/https:proxy-service-jqv44:tlsportname1/proxy/: tls baz (200; 96.270767ms)
  Aug 24 12:29:29.259: INFO: (5) /api/v1/namespaces/proxy-1940/services/proxy-service-jqv44:portname1/proxy/: foo (200; 97.903878ms)
  Aug 24 12:29:29.259: INFO: (5) /api/v1/namespaces/proxy-1940/services/http:proxy-service-jqv44:portname1/proxy/: foo (200; 96.515508ms)
  Aug 24 12:29:29.260: INFO: (5) /api/v1/namespaces/proxy-1940/services/proxy-service-jqv44:portname2/proxy/: bar (200; 98.085658ms)
  Aug 24 12:29:29.260: INFO: (5) /api/v1/namespaces/proxy-1940/services/https:proxy-service-jqv44:tlsportname2/proxy/: tls qux (200; 97.429695ms)
  Aug 24 12:29:29.355: INFO: (6) /api/v1/namespaces/proxy-1940/pods/http:proxy-service-jqv44-m8nln:160/proxy/: foo (200; 94.056541ms)
  Aug 24 12:29:29.355: INFO: (6) /api/v1/namespaces/proxy-1940/pods/http:proxy-service-jqv44-m8nln:162/proxy/: bar (200; 93.852491ms)
  Aug 24 12:29:29.355: INFO: (6) /api/v1/namespaces/proxy-1940/pods/https:proxy-service-jqv44-m8nln:443/proxy/: <a href="/api/v1/namespaces/proxy-1940/pods/https:proxy-service-jqv44-m8nln:443/proxy/tlsrewritem... (200; 94.187684ms)
  Aug 24 12:29:29.355: INFO: (6) /api/v1/namespaces/proxy-1940/pods/proxy-service-jqv44-m8nln:160/proxy/: foo (200; 95.006528ms)
  Aug 24 12:29:29.355: INFO: (6) /api/v1/namespaces/proxy-1940/pods/proxy-service-jqv44-m8nln/proxy/: <a href="/api/v1/namespaces/proxy-1940/pods/proxy-service-jqv44-m8nln/proxy/rewriteme">test</a> (200; 94.070473ms)
  Aug 24 12:29:29.355: INFO: (6) /api/v1/namespaces/proxy-1940/pods/https:proxy-service-jqv44-m8nln:462/proxy/: tls qux (200; 93.881561ms)
  Aug 24 12:29:29.355: INFO: (6) /api/v1/namespaces/proxy-1940/pods/https:proxy-service-jqv44-m8nln:460/proxy/: tls baz (200; 94.167363ms)
  Aug 24 12:29:29.355: INFO: (6) /api/v1/namespaces/proxy-1940/pods/proxy-service-jqv44-m8nln:1080/proxy/: <a href="/api/v1/namespaces/proxy-1940/pods/proxy-service-jqv44-m8nln:1080/proxy/rewriteme">test<... (200; 94.618616ms)
  Aug 24 12:29:29.356: INFO: (6) /api/v1/namespaces/proxy-1940/pods/proxy-service-jqv44-m8nln:162/proxy/: bar (200; 94.963068ms)
  Aug 24 12:29:29.356: INFO: (6) /api/v1/namespaces/proxy-1940/services/https:proxy-service-jqv44:tlsportname2/proxy/: tls qux (200; 95.431941ms)
  Aug 24 12:29:29.360: INFO: (6) /api/v1/namespaces/proxy-1940/services/http:proxy-service-jqv44:portname2/proxy/: bar (200; 98.933473ms)
  Aug 24 12:29:29.361: INFO: (6) /api/v1/namespaces/proxy-1940/services/http:proxy-service-jqv44:portname1/proxy/: foo (200; 99.976201ms)
  Aug 24 12:29:29.361: INFO: (6) /api/v1/namespaces/proxy-1940/services/https:proxy-service-jqv44:tlsportname1/proxy/: tls baz (200; 100.022191ms)
  Aug 24 12:29:29.361: INFO: (6) /api/v1/namespaces/proxy-1940/pods/http:proxy-service-jqv44-m8nln:1080/proxy/: <a href="/api/v1/namespaces/proxy-1940/pods/http:proxy-service-jqv44-m8nln:1080/proxy/rewriteme">... (200; 99.784179ms)
  Aug 24 12:29:29.361: INFO: (6) /api/v1/namespaces/proxy-1940/services/proxy-service-jqv44:portname1/proxy/: foo (200; 99.578388ms)
  Aug 24 12:29:29.361: INFO: (6) /api/v1/namespaces/proxy-1940/services/proxy-service-jqv44:portname2/proxy/: bar (200; 100.527304ms)
  E0824 12:29:29.396449      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 12:29:29.460: INFO: (7) /api/v1/namespaces/proxy-1940/pods/https:proxy-service-jqv44-m8nln:460/proxy/: tls baz (200; 98.790023ms)
  Aug 24 12:29:29.461: INFO: (7) /api/v1/namespaces/proxy-1940/pods/https:proxy-service-jqv44-m8nln:462/proxy/: tls qux (200; 99.120136ms)
  Aug 24 12:29:29.551: INFO: (7) /api/v1/namespaces/proxy-1940/pods/proxy-service-jqv44-m8nln:162/proxy/: bar (200; 190.058598ms)
  Aug 24 12:29:29.552: INFO: (7) /api/v1/namespaces/proxy-1940/pods/proxy-service-jqv44-m8nln/proxy/: <a href="/api/v1/namespaces/proxy-1940/pods/proxy-service-jqv44-m8nln/proxy/rewriteme">test</a> (200; 190.373081ms)
  Aug 24 12:29:29.552: INFO: (7) /api/v1/namespaces/proxy-1940/pods/http:proxy-service-jqv44-m8nln:160/proxy/: foo (200; 190.308601ms)
  Aug 24 12:29:29.552: INFO: (7) /api/v1/namespaces/proxy-1940/pods/proxy-service-jqv44-m8nln:1080/proxy/: <a href="/api/v1/namespaces/proxy-1940/pods/proxy-service-jqv44-m8nln:1080/proxy/rewriteme">test<... (200; 190.608023ms)
  Aug 24 12:29:29.552: INFO: (7) /api/v1/namespaces/proxy-1940/services/https:proxy-service-jqv44:tlsportname1/proxy/: tls baz (200; 190.695893ms)
  Aug 24 12:29:29.552: INFO: (7) /api/v1/namespaces/proxy-1940/services/https:proxy-service-jqv44:tlsportname2/proxy/: tls qux (200; 190.685933ms)
  Aug 24 12:29:29.552: INFO: (7) /api/v1/namespaces/proxy-1940/pods/http:proxy-service-jqv44-m8nln:162/proxy/: bar (200; 190.616542ms)
  Aug 24 12:29:29.552: INFO: (7) /api/v1/namespaces/proxy-1940/services/http:proxy-service-jqv44:portname2/proxy/: bar (200; 190.568592ms)
  Aug 24 12:29:29.552: INFO: (7) /api/v1/namespaces/proxy-1940/pods/https:proxy-service-jqv44-m8nln:443/proxy/: <a href="/api/v1/namespaces/proxy-1940/pods/https:proxy-service-jqv44-m8nln:443/proxy/tlsrewritem... (200; 190.697353ms)
  Aug 24 12:29:29.552: INFO: (7) /api/v1/namespaces/proxy-1940/services/proxy-service-jqv44:portname2/proxy/: bar (200; 190.593782ms)
  Aug 24 12:29:29.552: INFO: (7) /api/v1/namespaces/proxy-1940/pods/http:proxy-service-jqv44-m8nln:1080/proxy/: <a href="/api/v1/namespaces/proxy-1940/pods/http:proxy-service-jqv44-m8nln:1080/proxy/rewriteme">... (200; 190.861825ms)
  Aug 24 12:29:29.552: INFO: (7) /api/v1/namespaces/proxy-1940/services/http:proxy-service-jqv44:portname1/proxy/: foo (200; 190.841824ms)
  Aug 24 12:29:29.552: INFO: (7) /api/v1/namespaces/proxy-1940/services/proxy-service-jqv44:portname1/proxy/: foo (200; 190.632942ms)
  Aug 24 12:29:29.552: INFO: (7) /api/v1/namespaces/proxy-1940/pods/proxy-service-jqv44-m8nln:160/proxy/: foo (200; 190.708964ms)
  Aug 24 12:29:29.563: INFO: (8) /api/v1/namespaces/proxy-1940/pods/http:proxy-service-jqv44-m8nln:160/proxy/: foo (200; 10.362017ms)
  Aug 24 12:29:29.563: INFO: (8) /api/v1/namespaces/proxy-1940/pods/proxy-service-jqv44-m8nln:1080/proxy/: <a href="/api/v1/namespaces/proxy-1940/pods/proxy-service-jqv44-m8nln:1080/proxy/rewriteme">test<... (200; 10.624519ms)
  Aug 24 12:29:29.563: INFO: (8) /api/v1/namespaces/proxy-1940/pods/proxy-service-jqv44-m8nln/proxy/: <a href="/api/v1/namespaces/proxy-1940/pods/proxy-service-jqv44-m8nln/proxy/rewriteme">test</a> (200; 10.297736ms)
  Aug 24 12:29:29.564: INFO: (8) /api/v1/namespaces/proxy-1940/pods/proxy-service-jqv44-m8nln:162/proxy/: bar (200; 11.605095ms)
  Aug 24 12:29:29.564: INFO: (8) /api/v1/namespaces/proxy-1940/pods/http:proxy-service-jqv44-m8nln:162/proxy/: bar (200; 11.281052ms)
  Aug 24 12:29:29.564: INFO: (8) /api/v1/namespaces/proxy-1940/pods/https:proxy-service-jqv44-m8nln:462/proxy/: tls qux (200; 11.709965ms)
  Aug 24 12:29:29.564: INFO: (8) /api/v1/namespaces/proxy-1940/pods/https:proxy-service-jqv44-m8nln:460/proxy/: tls baz (200; 11.494474ms)
  Aug 24 12:29:29.651: INFO: (8) /api/v1/namespaces/proxy-1940/pods/proxy-service-jqv44-m8nln:160/proxy/: foo (200; 98.415301ms)
  Aug 24 12:29:29.652: INFO: (8) /api/v1/namespaces/proxy-1940/services/proxy-service-jqv44:portname2/proxy/: bar (200; 98.966414ms)
  Aug 24 12:29:29.652: INFO: (8) /api/v1/namespaces/proxy-1940/pods/https:proxy-service-jqv44-m8nln:443/proxy/: <a href="/api/v1/namespaces/proxy-1940/pods/https:proxy-service-jqv44-m8nln:443/proxy/tlsrewritem... (200; 99.039385ms)
  Aug 24 12:29:29.654: INFO: (8) /api/v1/namespaces/proxy-1940/services/https:proxy-service-jqv44:tlsportname2/proxy/: tls qux (200; 101.107018ms)
  Aug 24 12:29:29.654: INFO: (8) /api/v1/namespaces/proxy-1940/services/http:proxy-service-jqv44:portname1/proxy/: foo (200; 101.165428ms)
  Aug 24 12:29:29.655: INFO: (8) /api/v1/namespaces/proxy-1940/services/http:proxy-service-jqv44:portname2/proxy/: bar (200; 102.129395ms)
  Aug 24 12:29:29.655: INFO: (8) /api/v1/namespaces/proxy-1940/services/https:proxy-service-jqv44:tlsportname1/proxy/: tls baz (200; 102.722419ms)
  Aug 24 12:29:29.655: INFO: (8) /api/v1/namespaces/proxy-1940/pods/http:proxy-service-jqv44-m8nln:1080/proxy/: <a href="/api/v1/namespaces/proxy-1940/pods/http:proxy-service-jqv44-m8nln:1080/proxy/rewriteme">... (200; 102.608718ms)
  Aug 24 12:29:29.655: INFO: (8) /api/v1/namespaces/proxy-1940/services/proxy-service-jqv44:portname1/proxy/: foo (200; 102.682568ms)
  Aug 24 12:29:29.750: INFO: (9) /api/v1/namespaces/proxy-1940/pods/http:proxy-service-jqv44-m8nln:160/proxy/: foo (200; 94.002954ms)
  Aug 24 12:29:29.750: INFO: (9) /api/v1/namespaces/proxy-1940/pods/proxy-service-jqv44-m8nln:162/proxy/: bar (200; 93.888613ms)
  Aug 24 12:29:29.750: INFO: (9) /api/v1/namespaces/proxy-1940/pods/http:proxy-service-jqv44-m8nln:1080/proxy/: <a href="/api/v1/namespaces/proxy-1940/pods/http:proxy-service-jqv44-m8nln:1080/proxy/rewriteme">... (200; 93.136778ms)
  Aug 24 12:29:29.755: INFO: (9) /api/v1/namespaces/proxy-1940/pods/https:proxy-service-jqv44-m8nln:462/proxy/: tls qux (200; 98.536481ms)
  Aug 24 12:29:29.755: INFO: (9) /api/v1/namespaces/proxy-1940/services/proxy-service-jqv44:portname2/proxy/: bar (200; 98.917024ms)
  Aug 24 12:29:29.755: INFO: (9) /api/v1/namespaces/proxy-1940/pods/https:proxy-service-jqv44-m8nln:443/proxy/: <a href="/api/v1/namespaces/proxy-1940/pods/https:proxy-service-jqv44-m8nln:443/proxy/tlsrewritem... (200; 97.826857ms)
  Aug 24 12:29:29.755: INFO: (9) /api/v1/namespaces/proxy-1940/services/http:proxy-service-jqv44:portname2/proxy/: bar (200; 98.945424ms)
  Aug 24 12:29:29.755: INFO: (9) /api/v1/namespaces/proxy-1940/pods/proxy-service-jqv44-m8nln/proxy/: <a href="/api/v1/namespaces/proxy-1940/pods/proxy-service-jqv44-m8nln/proxy/rewriteme">test</a> (200; 98.098049ms)
  Aug 24 12:29:29.755: INFO: (9) /api/v1/namespaces/proxy-1940/pods/https:proxy-service-jqv44-m8nln:460/proxy/: tls baz (200; 99.806469ms)
  Aug 24 12:29:29.755: INFO: (9) /api/v1/namespaces/proxy-1940/services/proxy-service-jqv44:portname1/proxy/: foo (200; 99.617718ms)
  Aug 24 12:29:29.755: INFO: (9) /api/v1/namespaces/proxy-1940/pods/proxy-service-jqv44-m8nln:160/proxy/: foo (200; 99.535347ms)
  Aug 24 12:29:29.755: INFO: (9) /api/v1/namespaces/proxy-1940/pods/proxy-service-jqv44-m8nln:1080/proxy/: <a href="/api/v1/namespaces/proxy-1940/pods/proxy-service-jqv44-m8nln:1080/proxy/rewriteme">test<... (200; 98.445782ms)
  Aug 24 12:29:29.756: INFO: (9) /api/v1/namespaces/proxy-1940/services/https:proxy-service-jqv44:tlsportname2/proxy/: tls qux (200; 99.418128ms)
  Aug 24 12:29:29.758: INFO: (9) /api/v1/namespaces/proxy-1940/pods/http:proxy-service-jqv44-m8nln:162/proxy/: bar (200; 101.588171ms)
  Aug 24 12:29:29.758: INFO: (9) /api/v1/namespaces/proxy-1940/services/http:proxy-service-jqv44:portname1/proxy/: foo (200; 100.995817ms)
  Aug 24 12:29:29.759: INFO: (9) /api/v1/namespaces/proxy-1940/services/https:proxy-service-jqv44:tlsportname1/proxy/: tls baz (200; 102.095294ms)
  Aug 24 12:29:29.855: INFO: (10) /api/v1/namespaces/proxy-1940/pods/proxy-service-jqv44-m8nln/proxy/: <a href="/api/v1/namespaces/proxy-1940/pods/proxy-service-jqv44-m8nln/proxy/rewriteme">test</a> (200; 94.708287ms)
  Aug 24 12:29:29.855: INFO: (10) /api/v1/namespaces/proxy-1940/pods/http:proxy-service-jqv44-m8nln:162/proxy/: bar (200; 93.049896ms)
  Aug 24 12:29:29.855: INFO: (10) /api/v1/namespaces/proxy-1940/pods/https:proxy-service-jqv44-m8nln:462/proxy/: tls qux (200; 96.150326ms)
  Aug 24 12:29:29.855: INFO: (10) /api/v1/namespaces/proxy-1940/pods/https:proxy-service-jqv44-m8nln:443/proxy/: <a href="/api/v1/namespaces/proxy-1940/pods/https:proxy-service-jqv44-m8nln:443/proxy/tlsrewritem... (200; 94.491216ms)
  Aug 24 12:29:29.855: INFO: (10) /api/v1/namespaces/proxy-1940/pods/http:proxy-service-jqv44-m8nln:160/proxy/: foo (200; 95.758644ms)
  Aug 24 12:29:29.855: INFO: (10) /api/v1/namespaces/proxy-1940/pods/proxy-service-jqv44-m8nln:160/proxy/: foo (200; 93.58996ms)
  Aug 24 12:29:29.855: INFO: (10) /api/v1/namespaces/proxy-1940/pods/http:proxy-service-jqv44-m8nln:1080/proxy/: <a href="/api/v1/namespaces/proxy-1940/pods/http:proxy-service-jqv44-m8nln:1080/proxy/rewriteme">... (200; 95.08693ms)
  Aug 24 12:29:29.855: INFO: (10) /api/v1/namespaces/proxy-1940/pods/proxy-service-jqv44-m8nln:1080/proxy/: <a href="/api/v1/namespaces/proxy-1940/pods/proxy-service-jqv44-m8nln:1080/proxy/rewriteme">test<... (200; 95.415322ms)
  Aug 24 12:29:29.855: INFO: (10) /api/v1/namespaces/proxy-1940/pods/https:proxy-service-jqv44-m8nln:460/proxy/: tls baz (200; 93.951912ms)
  Aug 24 12:29:29.856: INFO: (10) /api/v1/namespaces/proxy-1940/pods/proxy-service-jqv44-m8nln:162/proxy/: bar (200; 96.103506ms)
  Aug 24 12:29:29.858: INFO: (10) /api/v1/namespaces/proxy-1940/services/https:proxy-service-jqv44:tlsportname2/proxy/: tls qux (200; 98.392291ms)
  Aug 24 12:29:29.858: INFO: (10) /api/v1/namespaces/proxy-1940/services/https:proxy-service-jqv44:tlsportname1/proxy/: tls baz (200; 98.613861ms)
  Aug 24 12:29:29.858: INFO: (10) /api/v1/namespaces/proxy-1940/services/proxy-service-jqv44:portname2/proxy/: bar (200; 99.378366ms)
  Aug 24 12:29:29.860: INFO: (10) /api/v1/namespaces/proxy-1940/services/http:proxy-service-jqv44:portname2/proxy/: bar (200; 100.833766ms)
  Aug 24 12:29:29.860: INFO: (10) /api/v1/namespaces/proxy-1940/services/http:proxy-service-jqv44:portname1/proxy/: foo (200; 100.875026ms)
  Aug 24 12:29:29.861: INFO: (10) /api/v1/namespaces/proxy-1940/services/proxy-service-jqv44:portname1/proxy/: foo (200; 98.877493ms)
  Aug 24 12:29:29.954: INFO: (11) /api/v1/namespaces/proxy-1940/pods/proxy-service-jqv44-m8nln/proxy/: <a href="/api/v1/namespaces/proxy-1940/pods/proxy-service-jqv44-m8nln/proxy/rewriteme">test</a> (200; 93.56237ms)
  Aug 24 12:29:29.956: INFO: (11) /api/v1/namespaces/proxy-1940/pods/https:proxy-service-jqv44-m8nln:462/proxy/: tls qux (200; 95.20067ms)
  Aug 24 12:29:29.956: INFO: (11) /api/v1/namespaces/proxy-1940/pods/https:proxy-service-jqv44-m8nln:460/proxy/: tls baz (200; 95.350631ms)
  Aug 24 12:29:29.956: INFO: (11) /api/v1/namespaces/proxy-1940/pods/http:proxy-service-jqv44-m8nln:1080/proxy/: <a href="/api/v1/namespaces/proxy-1940/pods/http:proxy-service-jqv44-m8nln:1080/proxy/rewriteme">... (200; 95.314062ms)
  Aug 24 12:29:29.956: INFO: (11) /api/v1/namespaces/proxy-1940/pods/http:proxy-service-jqv44-m8nln:160/proxy/: foo (200; 95.343982ms)
  Aug 24 12:29:29.956: INFO: (11) /api/v1/namespaces/proxy-1940/pods/proxy-service-jqv44-m8nln:162/proxy/: bar (200; 95.256661ms)
  Aug 24 12:29:29.956: INFO: (11) /api/v1/namespaces/proxy-1940/pods/https:proxy-service-jqv44-m8nln:443/proxy/: <a href="/api/v1/namespaces/proxy-1940/pods/https:proxy-service-jqv44-m8nln:443/proxy/tlsrewritem... (200; 95.529813ms)
  Aug 24 12:29:29.956: INFO: (11) /api/v1/namespaces/proxy-1940/pods/proxy-service-jqv44-m8nln:160/proxy/: foo (200; 95.758914ms)
  Aug 24 12:29:29.957: INFO: (11) /api/v1/namespaces/proxy-1940/pods/proxy-service-jqv44-m8nln:1080/proxy/: <a href="/api/v1/namespaces/proxy-1940/pods/proxy-service-jqv44-m8nln:1080/proxy/rewriteme">test<... (200; 95.501363ms)
  Aug 24 12:29:29.957: INFO: (11) /api/v1/namespaces/proxy-1940/pods/http:proxy-service-jqv44-m8nln:162/proxy/: bar (200; 95.635214ms)
  Aug 24 12:29:29.957: INFO: (11) /api/v1/namespaces/proxy-1940/services/https:proxy-service-jqv44:tlsportname2/proxy/: tls qux (200; 96.181437ms)
  Aug 24 12:29:29.962: INFO: (11) /api/v1/namespaces/proxy-1940/services/http:proxy-service-jqv44:portname1/proxy/: foo (200; 100.792367ms)
  Aug 24 12:29:29.962: INFO: (11) /api/v1/namespaces/proxy-1940/services/https:proxy-service-jqv44:tlsportname1/proxy/: tls baz (200; 101.54291ms)
  Aug 24 12:29:29.962: INFO: (11) /api/v1/namespaces/proxy-1940/services/proxy-service-jqv44:portname2/proxy/: bar (200; 101.33238ms)
  Aug 24 12:29:29.962: INFO: (11) /api/v1/namespaces/proxy-1940/services/proxy-service-jqv44:portname1/proxy/: foo (200; 101.3848ms)
  Aug 24 12:29:30.050: INFO: (11) /api/v1/namespaces/proxy-1940/services/http:proxy-service-jqv44:portname2/proxy/: bar (200; 189.674587ms)
  Aug 24 12:29:30.063: INFO: (12) /api/v1/namespaces/proxy-1940/pods/proxy-service-jqv44-m8nln:160/proxy/: foo (200; 12.224417ms)
  Aug 24 12:29:30.064: INFO: (12) /api/v1/namespaces/proxy-1940/pods/https:proxy-service-jqv44-m8nln:462/proxy/: tls qux (200; 13.202823ms)
  Aug 24 12:29:30.064: INFO: (12) /api/v1/namespaces/proxy-1940/pods/http:proxy-service-jqv44-m8nln:160/proxy/: foo (200; 12.876311ms)
  Aug 24 12:29:30.064: INFO: (12) /api/v1/namespaces/proxy-1940/pods/https:proxy-service-jqv44-m8nln:443/proxy/: <a href="/api/v1/namespaces/proxy-1940/pods/https:proxy-service-jqv44-m8nln:443/proxy/tlsrewritem... (200; 12.845331ms)
  Aug 24 12:29:30.065: INFO: (12) /api/v1/namespaces/proxy-1940/pods/http:proxy-service-jqv44-m8nln:162/proxy/: bar (200; 13.439196ms)
  Aug 24 12:29:30.065: INFO: (12) /api/v1/namespaces/proxy-1940/pods/proxy-service-jqv44-m8nln:1080/proxy/: <a href="/api/v1/namespaces/proxy-1940/pods/proxy-service-jqv44-m8nln:1080/proxy/rewriteme">test<... (200; 14.528612ms)
  Aug 24 12:29:30.150: INFO: (12) /api/v1/namespaces/proxy-1940/services/proxy-service-jqv44:portname1/proxy/: foo (200; 99.390226ms)
  Aug 24 12:29:30.151: INFO: (12) /api/v1/namespaces/proxy-1940/services/http:proxy-service-jqv44:portname2/proxy/: bar (200; 99.949729ms)
  Aug 24 12:29:30.151: INFO: (12) /api/v1/namespaces/proxy-1940/services/https:proxy-service-jqv44:tlsportname1/proxy/: tls baz (200; 99.612557ms)
  Aug 24 12:29:30.151: INFO: (12) /api/v1/namespaces/proxy-1940/services/http:proxy-service-jqv44:portname1/proxy/: foo (200; 99.810549ms)
  Aug 24 12:29:30.151: INFO: (12) /api/v1/namespaces/proxy-1940/pods/proxy-service-jqv44-m8nln/proxy/: <a href="/api/v1/namespaces/proxy-1940/pods/proxy-service-jqv44-m8nln/proxy/rewriteme">test</a> (200; 99.736008ms)
  Aug 24 12:29:30.151: INFO: (12) /api/v1/namespaces/proxy-1940/services/https:proxy-service-jqv44:tlsportname2/proxy/: tls qux (200; 99.703717ms)
  Aug 24 12:29:30.151: INFO: (12) /api/v1/namespaces/proxy-1940/pods/proxy-service-jqv44-m8nln:162/proxy/: bar (200; 99.816788ms)
  Aug 24 12:29:30.154: INFO: (12) /api/v1/namespaces/proxy-1940/services/proxy-service-jqv44:portname2/proxy/: bar (200; 102.498915ms)
  Aug 24 12:29:30.154: INFO: (12) /api/v1/namespaces/proxy-1940/pods/http:proxy-service-jqv44-m8nln:1080/proxy/: <a href="/api/v1/namespaces/proxy-1940/pods/http:proxy-service-jqv44-m8nln:1080/proxy/rewriteme">... (200; 102.479955ms)
  Aug 24 12:29:30.154: INFO: (12) /api/v1/namespaces/proxy-1940/pods/https:proxy-service-jqv44-m8nln:460/proxy/: tls baz (200; 103.04251ms)
  Aug 24 12:29:30.250: INFO: (13) /api/v1/namespaces/proxy-1940/pods/https:proxy-service-jqv44-m8nln:462/proxy/: tls qux (200; 95.976494ms)
  Aug 24 12:29:30.250: INFO: (13) /api/v1/namespaces/proxy-1940/pods/http:proxy-service-jqv44-m8nln:162/proxy/: bar (200; 95.719043ms)
  Aug 24 12:29:30.255: INFO: (13) /api/v1/namespaces/proxy-1940/pods/http:proxy-service-jqv44-m8nln:160/proxy/: foo (200; 99.77953ms)
  Aug 24 12:29:30.255: INFO: (13) /api/v1/namespaces/proxy-1940/pods/proxy-service-jqv44-m8nln:162/proxy/: bar (200; 99.75464ms)
  Aug 24 12:29:30.255: INFO: (13) /api/v1/namespaces/proxy-1940/pods/proxy-service-jqv44-m8nln/proxy/: <a href="/api/v1/namespaces/proxy-1940/pods/proxy-service-jqv44-m8nln/proxy/rewriteme">test</a> (200; 99.910161ms)
  Aug 24 12:29:30.255: INFO: (13) /api/v1/namespaces/proxy-1940/services/http:proxy-service-jqv44:portname1/proxy/: foo (200; 100.069132ms)
  Aug 24 12:29:30.255: INFO: (13) /api/v1/namespaces/proxy-1940/pods/https:proxy-service-jqv44-m8nln:460/proxy/: tls baz (200; 100.786156ms)
  Aug 24 12:29:30.255: INFO: (13) /api/v1/namespaces/proxy-1940/pods/proxy-service-jqv44-m8nln:1080/proxy/: <a href="/api/v1/namespaces/proxy-1940/pods/proxy-service-jqv44-m8nln:1080/proxy/rewriteme">test<... (200; 100.142142ms)
  Aug 24 12:29:30.255: INFO: (13) /api/v1/namespaces/proxy-1940/services/proxy-service-jqv44:portname2/proxy/: bar (200; 100.425474ms)
  Aug 24 12:29:30.255: INFO: (13) /api/v1/namespaces/proxy-1940/pods/https:proxy-service-jqv44-m8nln:443/proxy/: <a href="/api/v1/namespaces/proxy-1940/pods/https:proxy-service-jqv44-m8nln:443/proxy/tlsrewritem... (200; 99.92492ms)
  Aug 24 12:29:30.255: INFO: (13) /api/v1/namespaces/proxy-1940/pods/http:proxy-service-jqv44-m8nln:1080/proxy/: <a href="/api/v1/namespaces/proxy-1940/pods/http:proxy-service-jqv44-m8nln:1080/proxy/rewriteme">... (200; 100.333993ms)
  Aug 24 12:29:30.256: INFO: (13) /api/v1/namespaces/proxy-1940/services/https:proxy-service-jqv44:tlsportname2/proxy/: tls qux (200; 101.415119ms)
  Aug 24 12:29:30.259: INFO: (13) /api/v1/namespaces/proxy-1940/services/https:proxy-service-jqv44:tlsportname1/proxy/: tls baz (200; 104.441778ms)
  Aug 24 12:29:30.259: INFO: (13) /api/v1/namespaces/proxy-1940/services/proxy-service-jqv44:portname1/proxy/: foo (200; 104.80189ms)
  Aug 24 12:29:30.259: INFO: (13) /api/v1/namespaces/proxy-1940/pods/proxy-service-jqv44-m8nln:160/proxy/: foo (200; 104.767941ms)
  Aug 24 12:29:30.260: INFO: (13) /api/v1/namespaces/proxy-1940/services/http:proxy-service-jqv44:portname2/proxy/: bar (200; 105.730057ms)
  Aug 24 12:29:30.355: INFO: (14) /api/v1/namespaces/proxy-1940/pods/http:proxy-service-jqv44-m8nln:162/proxy/: bar (200; 92.699923ms)
  Aug 24 12:29:30.355: INFO: (14) /api/v1/namespaces/proxy-1940/pods/proxy-service-jqv44-m8nln/proxy/: <a href="/api/v1/namespaces/proxy-1940/pods/proxy-service-jqv44-m8nln/proxy/rewriteme">test</a> (200; 93.82198ms)
  Aug 24 12:29:30.355: INFO: (14) /api/v1/namespaces/proxy-1940/pods/https:proxy-service-jqv44-m8nln:460/proxy/: tls baz (200; 93.455278ms)
  Aug 24 12:29:30.356: INFO: (14) /api/v1/namespaces/proxy-1940/pods/proxy-service-jqv44-m8nln:1080/proxy/: <a href="/api/v1/namespaces/proxy-1940/pods/proxy-service-jqv44-m8nln:1080/proxy/rewriteme">test<... (200; 94.772887ms)
  Aug 24 12:29:30.356: INFO: (14) /api/v1/namespaces/proxy-1940/pods/proxy-service-jqv44-m8nln:160/proxy/: foo (200; 94.093673ms)
  Aug 24 12:29:30.356: INFO: (14) /api/v1/namespaces/proxy-1940/pods/https:proxy-service-jqv44-m8nln:462/proxy/: tls qux (200; 96.009565ms)
  Aug 24 12:29:30.356: INFO: (14) /api/v1/namespaces/proxy-1940/pods/proxy-service-jqv44-m8nln:162/proxy/: bar (200; 95.426041ms)
  Aug 24 12:29:30.356: INFO: (14) /api/v1/namespaces/proxy-1940/pods/http:proxy-service-jqv44-m8nln:1080/proxy/: <a href="/api/v1/namespaces/proxy-1940/pods/http:proxy-service-jqv44-m8nln:1080/proxy/rewriteme">... (200; 94.676606ms)
  Aug 24 12:29:30.356: INFO: (14) /api/v1/namespaces/proxy-1940/pods/http:proxy-service-jqv44-m8nln:160/proxy/: foo (200; 95.625172ms)
  Aug 24 12:29:30.360: INFO: (14) /api/v1/namespaces/proxy-1940/services/http:proxy-service-jqv44:portname2/proxy/: bar (200; 99.159544ms)
  Aug 24 12:29:30.360: INFO: (14) /api/v1/namespaces/proxy-1940/pods/https:proxy-service-jqv44-m8nln:443/proxy/: <a href="/api/v1/namespaces/proxy-1940/pods/https:proxy-service-jqv44-m8nln:443/proxy/tlsrewritem... (200; 98.113038ms)
  Aug 24 12:29:30.360: INFO: (14) /api/v1/namespaces/proxy-1940/services/proxy-service-jqv44:portname1/proxy/: foo (200; 97.953267ms)
  Aug 24 12:29:30.360: INFO: (14) /api/v1/namespaces/proxy-1940/services/https:proxy-service-jqv44:tlsportname2/proxy/: tls qux (200; 98.832642ms)
  Aug 24 12:29:30.360: INFO: (14) /api/v1/namespaces/proxy-1940/services/https:proxy-service-jqv44:tlsportname1/proxy/: tls baz (200; 99.314826ms)
  Aug 24 12:29:30.361: INFO: (14) /api/v1/namespaces/proxy-1940/services/http:proxy-service-jqv44:portname1/proxy/: foo (200; 99.628887ms)
  Aug 24 12:29:30.361: INFO: (14) /api/v1/namespaces/proxy-1940/services/proxy-service-jqv44:portname2/proxy/: bar (200; 100.532514ms)
  E0824 12:29:30.396941      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 12:29:30.551: INFO: (15) /api/v1/namespaces/proxy-1940/pods/proxy-service-jqv44-m8nln/proxy/: <a href="/api/v1/namespaces/proxy-1940/pods/proxy-service-jqv44-m8nln/proxy/rewriteme">test</a> (200; 189.164002ms)
  Aug 24 12:29:30.551: INFO: (15) /api/v1/namespaces/proxy-1940/pods/https:proxy-service-jqv44-m8nln:443/proxy/: <a href="/api/v1/namespaces/proxy-1940/pods/https:proxy-service-jqv44-m8nln:443/proxy/tlsrewritem... (200; 189.552454ms)
  Aug 24 12:29:30.551: INFO: (15) /api/v1/namespaces/proxy-1940/pods/http:proxy-service-jqv44-m8nln:1080/proxy/: <a href="/api/v1/namespaces/proxy-1940/pods/http:proxy-service-jqv44-m8nln:1080/proxy/rewriteme">... (200; 189.00396ms)
  Aug 24 12:29:30.551: INFO: (15) /api/v1/namespaces/proxy-1940/pods/proxy-service-jqv44-m8nln:160/proxy/: foo (200; 189.055861ms)
  Aug 24 12:29:30.551: INFO: (15) /api/v1/namespaces/proxy-1940/pods/proxy-service-jqv44-m8nln:1080/proxy/: <a href="/api/v1/namespaces/proxy-1940/pods/proxy-service-jqv44-m8nln:1080/proxy/rewriteme">test<... (200; 189.408683ms)
  Aug 24 12:29:30.551: INFO: (15) /api/v1/namespaces/proxy-1940/pods/https:proxy-service-jqv44-m8nln:462/proxy/: tls qux (200; 189.166651ms)
  Aug 24 12:29:30.551: INFO: (15) /api/v1/namespaces/proxy-1940/pods/https:proxy-service-jqv44-m8nln:460/proxy/: tls baz (200; 189.255192ms)
  Aug 24 12:29:30.551: INFO: (15) /api/v1/namespaces/proxy-1940/pods/http:proxy-service-jqv44-m8nln:160/proxy/: foo (200; 189.818395ms)
  Aug 24 12:29:30.551: INFO: (15) /api/v1/namespaces/proxy-1940/pods/proxy-service-jqv44-m8nln:162/proxy/: bar (200; 188.9806ms)
  Aug 24 12:29:30.554: INFO: (15) /api/v1/namespaces/proxy-1940/services/https:proxy-service-jqv44:tlsportname2/proxy/: tls qux (200; 192.575672ms)
  Aug 24 12:29:30.555: INFO: (15) /api/v1/namespaces/proxy-1940/services/proxy-service-jqv44:portname2/proxy/: bar (200; 192.712974ms)
  Aug 24 12:29:30.555: INFO: (15) /api/v1/namespaces/proxy-1940/services/proxy-service-jqv44:portname1/proxy/: foo (200; 193.58411ms)
  Aug 24 12:29:30.556: INFO: (15) /api/v1/namespaces/proxy-1940/services/http:proxy-service-jqv44:portname1/proxy/: foo (200; 194.551355ms)
  Aug 24 12:29:30.556: INFO: (15) /api/v1/namespaces/proxy-1940/services/https:proxy-service-jqv44:tlsportname1/proxy/: tls baz (200; 194.531285ms)
  Aug 24 12:29:30.556: INFO: (15) /api/v1/namespaces/proxy-1940/services/http:proxy-service-jqv44:portname2/proxy/: bar (200; 194.134343ms)
  Aug 24 12:29:30.557: INFO: (15) /api/v1/namespaces/proxy-1940/pods/http:proxy-service-jqv44-m8nln:162/proxy/: bar (200; 195.524902ms)
  Aug 24 12:29:30.650: INFO: (16) /api/v1/namespaces/proxy-1940/pods/proxy-service-jqv44-m8nln:160/proxy/: foo (200; 92.254941ms)
  Aug 24 12:29:30.651: INFO: (16) /api/v1/namespaces/proxy-1940/pods/https:proxy-service-jqv44-m8nln:460/proxy/: tls baz (200; 92.672634ms)
  Aug 24 12:29:30.654: INFO: (16) /api/v1/namespaces/proxy-1940/services/proxy-service-jqv44:portname1/proxy/: foo (200; 95.509662ms)
  Aug 24 12:29:30.654: INFO: (16) /api/v1/namespaces/proxy-1940/pods/http:proxy-service-jqv44-m8nln:162/proxy/: bar (200; 95.747463ms)
  Aug 24 12:29:30.654: INFO: (16) /api/v1/namespaces/proxy-1940/pods/proxy-service-jqv44-m8nln/proxy/: <a href="/api/v1/namespaces/proxy-1940/pods/proxy-service-jqv44-m8nln/proxy/rewriteme">test</a> (200; 95.468942ms)
  Aug 24 12:29:30.655: INFO: (16) /api/v1/namespaces/proxy-1940/services/https:proxy-service-jqv44:tlsportname1/proxy/: tls baz (200; 95.940604ms)
  Aug 24 12:29:30.655: INFO: (16) /api/v1/namespaces/proxy-1940/pods/https:proxy-service-jqv44-m8nln:443/proxy/: <a href="/api/v1/namespaces/proxy-1940/pods/https:proxy-service-jqv44-m8nln:443/proxy/tlsrewritem... (200; 96.368318ms)
  Aug 24 12:29:30.655: INFO: (16) /api/v1/namespaces/proxy-1940/pods/http:proxy-service-jqv44-m8nln:160/proxy/: foo (200; 96.359898ms)
  Aug 24 12:29:30.656: INFO: (16) /api/v1/namespaces/proxy-1940/pods/proxy-service-jqv44-m8nln:162/proxy/: bar (200; 97.157042ms)
  Aug 24 12:29:30.656: INFO: (16) /api/v1/namespaces/proxy-1940/pods/proxy-service-jqv44-m8nln:1080/proxy/: <a href="/api/v1/namespaces/proxy-1940/pods/proxy-service-jqv44-m8nln:1080/proxy/rewriteme">test<... (200; 97.216603ms)
  Aug 24 12:29:30.656: INFO: (16) /api/v1/namespaces/proxy-1940/pods/https:proxy-service-jqv44-m8nln:462/proxy/: tls qux (200; 97.625495ms)
  Aug 24 12:29:30.656: INFO: (16) /api/v1/namespaces/proxy-1940/pods/http:proxy-service-jqv44-m8nln:1080/proxy/: <a href="/api/v1/namespaces/proxy-1940/pods/http:proxy-service-jqv44-m8nln:1080/proxy/rewriteme">... (200; 97.428765ms)
  Aug 24 12:29:30.658: INFO: (16) /api/v1/namespaces/proxy-1940/services/http:proxy-service-jqv44:portname1/proxy/: foo (200; 98.647792ms)
  Aug 24 12:29:30.658: INFO: (16) /api/v1/namespaces/proxy-1940/services/proxy-service-jqv44:portname2/proxy/: bar (200; 98.711242ms)
  Aug 24 12:29:30.659: INFO: (16) /api/v1/namespaces/proxy-1940/services/http:proxy-service-jqv44:portname2/proxy/: bar (200; 99.598059ms)
  Aug 24 12:29:30.660: INFO: (16) /api/v1/namespaces/proxy-1940/services/https:proxy-service-jqv44:tlsportname2/proxy/: tls qux (200; 100.695285ms)
  Aug 24 12:29:30.760: INFO: (17) /api/v1/namespaces/proxy-1940/pods/proxy-service-jqv44-m8nln:1080/proxy/: <a href="/api/v1/namespaces/proxy-1940/pods/proxy-service-jqv44-m8nln:1080/proxy/rewriteme">test<... (200; 100.276063ms)
  Aug 24 12:29:30.760: INFO: (17) /api/v1/namespaces/proxy-1940/pods/proxy-service-jqv44-m8nln:160/proxy/: foo (200; 99.588028ms)
  Aug 24 12:29:30.760: INFO: (17) /api/v1/namespaces/proxy-1940/pods/http:proxy-service-jqv44-m8nln:162/proxy/: bar (200; 99.501297ms)
  Aug 24 12:29:30.761: INFO: (17) /api/v1/namespaces/proxy-1940/pods/https:proxy-service-jqv44-m8nln:462/proxy/: tls qux (200; 100.053779ms)
  Aug 24 12:29:30.761: INFO: (17) /api/v1/namespaces/proxy-1940/pods/http:proxy-service-jqv44-m8nln:1080/proxy/: <a href="/api/v1/namespaces/proxy-1940/pods/http:proxy-service-jqv44-m8nln:1080/proxy/rewriteme">... (200; 100.936606ms)
  Aug 24 12:29:30.761: INFO: (17) /api/v1/namespaces/proxy-1940/pods/proxy-service-jqv44-m8nln/proxy/: <a href="/api/v1/namespaces/proxy-1940/pods/proxy-service-jqv44-m8nln/proxy/rewriteme">test</a> (200; 101.072667ms)
  Aug 24 12:29:30.761: INFO: (17) /api/v1/namespaces/proxy-1940/pods/https:proxy-service-jqv44-m8nln:460/proxy/: tls baz (200; 100.786886ms)
  Aug 24 12:29:30.761: INFO: (17) /api/v1/namespaces/proxy-1940/pods/proxy-service-jqv44-m8nln:162/proxy/: bar (200; 99.982579ms)
  Aug 24 12:29:30.765: INFO: (17) /api/v1/namespaces/proxy-1940/services/proxy-service-jqv44:portname2/proxy/: bar (200; 103.933055ms)
  Aug 24 12:29:30.765: INFO: (17) /api/v1/namespaces/proxy-1940/pods/http:proxy-service-jqv44-m8nln:160/proxy/: foo (200; 104.236457ms)
  Aug 24 12:29:30.766: INFO: (17) /api/v1/namespaces/proxy-1940/services/http:proxy-service-jqv44:portname1/proxy/: foo (200; 104.468818ms)
  Aug 24 12:29:30.766: INFO: (17) /api/v1/namespaces/proxy-1940/services/http:proxy-service-jqv44:portname2/proxy/: bar (200; 104.994771ms)
  Aug 24 12:29:30.850: INFO: (17) /api/v1/namespaces/proxy-1940/pods/https:proxy-service-jqv44-m8nln:443/proxy/: <a href="/api/v1/namespaces/proxy-1940/pods/https:proxy-service-jqv44-m8nln:443/proxy/tlsrewritem... (200; 189.754985ms)
  Aug 24 12:29:30.850: INFO: (17) /api/v1/namespaces/proxy-1940/services/https:proxy-service-jqv44:tlsportname1/proxy/: tls baz (200; 188.283686ms)
  Aug 24 12:29:30.850: INFO: (17) /api/v1/namespaces/proxy-1940/services/https:proxy-service-jqv44:tlsportname2/proxy/: tls qux (200; 188.164335ms)
  Aug 24 12:29:30.850: INFO: (17) /api/v1/namespaces/proxy-1940/services/proxy-service-jqv44:portname1/proxy/: foo (200; 189.915596ms)
  Aug 24 12:29:30.863: INFO: (18) /api/v1/namespaces/proxy-1940/pods/https:proxy-service-jqv44-m8nln:462/proxy/: tls qux (200; 12.799361ms)
  Aug 24 12:29:30.863: INFO: (18) /api/v1/namespaces/proxy-1940/pods/http:proxy-service-jqv44-m8nln:162/proxy/: bar (200; 12.581171ms)
  Aug 24 12:29:30.863: INFO: (18) /api/v1/namespaces/proxy-1940/pods/http:proxy-service-jqv44-m8nln:1080/proxy/: <a href="/api/v1/namespaces/proxy-1940/pods/http:proxy-service-jqv44-m8nln:1080/proxy/rewriteme">... (200; 12.741782ms)
  Aug 24 12:29:30.864: INFO: (18) /api/v1/namespaces/proxy-1940/pods/proxy-service-jqv44-m8nln:1080/proxy/: <a href="/api/v1/namespaces/proxy-1940/pods/proxy-service-jqv44-m8nln:1080/proxy/rewriteme">test<... (200; 13.198724ms)
  Aug 24 12:29:30.950: INFO: (18) /api/v1/namespaces/proxy-1940/pods/https:proxy-service-jqv44-m8nln:460/proxy/: tls baz (200; 99.482067ms)
  Aug 24 12:29:30.953: INFO: (18) /api/v1/namespaces/proxy-1940/services/http:proxy-service-jqv44:portname2/proxy/: bar (200; 102.244325ms)
  Aug 24 12:29:30.953: INFO: (18) /api/v1/namespaces/proxy-1940/pods/proxy-service-jqv44-m8nln/proxy/: <a href="/api/v1/namespaces/proxy-1940/pods/proxy-service-jqv44-m8nln/proxy/rewriteme">test</a> (200; 102.305075ms)
  Aug 24 12:29:30.955: INFO: (18) /api/v1/namespaces/proxy-1940/pods/proxy-service-jqv44-m8nln:162/proxy/: bar (200; 104.460849ms)
  Aug 24 12:29:30.956: INFO: (18) /api/v1/namespaces/proxy-1940/pods/proxy-service-jqv44-m8nln:160/proxy/: foo (200; 104.65325ms)
  Aug 24 12:29:30.956: INFO: (18) /api/v1/namespaces/proxy-1940/services/https:proxy-service-jqv44:tlsportname1/proxy/: tls baz (200; 104.823532ms)
  Aug 24 12:29:30.956: INFO: (18) /api/v1/namespaces/proxy-1940/pods/https:proxy-service-jqv44-m8nln:443/proxy/: <a href="/api/v1/namespaces/proxy-1940/pods/https:proxy-service-jqv44-m8nln:443/proxy/tlsrewritem... (200; 104.880051ms)
  Aug 24 12:29:30.956: INFO: (18) /api/v1/namespaces/proxy-1940/pods/http:proxy-service-jqv44-m8nln:160/proxy/: foo (200; 104.999232ms)
  Aug 24 12:29:30.960: INFO: (18) /api/v1/namespaces/proxy-1940/services/https:proxy-service-jqv44:tlsportname2/proxy/: tls qux (200; 109.150628ms)
  Aug 24 12:29:30.960: INFO: (18) /api/v1/namespaces/proxy-1940/services/proxy-service-jqv44:portname1/proxy/: foo (200; 109.299049ms)
  Aug 24 12:29:30.960: INFO: (18) /api/v1/namespaces/proxy-1940/services/proxy-service-jqv44:portname2/proxy/: bar (200; 109.680722ms)
  Aug 24 12:29:30.960: INFO: (18) /api/v1/namespaces/proxy-1940/services/http:proxy-service-jqv44:portname1/proxy/: foo (200; 109.530801ms)
  Aug 24 12:29:30.987: INFO: (19) /api/v1/namespaces/proxy-1940/pods/proxy-service-jqv44-m8nln:160/proxy/: foo (200; 26.39818ms)
  Aug 24 12:29:31.050: INFO: (19) /api/v1/namespaces/proxy-1940/pods/proxy-service-jqv44-m8nln:1080/proxy/: <a href="/api/v1/namespaces/proxy-1940/pods/proxy-service-jqv44-m8nln:1080/proxy/rewriteme">test<... (200; 88.029185ms)
  Aug 24 12:29:31.050: INFO: (19) /api/v1/namespaces/proxy-1940/pods/https:proxy-service-jqv44-m8nln:460/proxy/: tls baz (200; 90.068759ms)
  Aug 24 12:29:31.053: INFO: (19) /api/v1/namespaces/proxy-1940/pods/http:proxy-service-jqv44-m8nln:162/proxy/: bar (200; 92.723075ms)
  Aug 24 12:29:31.054: INFO: (19) /api/v1/namespaces/proxy-1940/services/https:proxy-service-jqv44:tlsportname2/proxy/: tls qux (200; 91.820309ms)
  Aug 24 12:29:31.054: INFO: (19) /api/v1/namespaces/proxy-1940/pods/http:proxy-service-jqv44-m8nln:160/proxy/: foo (200; 92.632274ms)
  Aug 24 12:29:31.054: INFO: (19) /api/v1/namespaces/proxy-1940/pods/https:proxy-service-jqv44-m8nln:443/proxy/: <a href="/api/v1/namespaces/proxy-1940/pods/https:proxy-service-jqv44-m8nln:443/proxy/tlsrewritem... (200; 91.544168ms)
  Aug 24 12:29:31.055: INFO: (19) /api/v1/namespaces/proxy-1940/pods/https:proxy-service-jqv44-m8nln:462/proxy/: tls qux (200; 93.929032ms)
  Aug 24 12:29:31.055: INFO: (19) /api/v1/namespaces/proxy-1940/pods/proxy-service-jqv44-m8nln:162/proxy/: bar (200; 93.5648ms)
  Aug 24 12:29:31.058: INFO: (19) /api/v1/namespaces/proxy-1940/services/http:proxy-service-jqv44:portname2/proxy/: bar (200; 96.477708ms)
  Aug 24 12:29:31.058: INFO: (19) /api/v1/namespaces/proxy-1940/services/https:proxy-service-jqv44:tlsportname1/proxy/: tls baz (200; 96.091836ms)
  Aug 24 12:29:31.059: INFO: (19) /api/v1/namespaces/proxy-1940/pods/proxy-service-jqv44-m8nln/proxy/: <a href="/api/v1/namespaces/proxy-1940/pods/proxy-service-jqv44-m8nln/proxy/rewriteme">test</a> (200; 96.266198ms)
  Aug 24 12:29:31.059: INFO: (19) /api/v1/namespaces/proxy-1940/services/proxy-service-jqv44:portname1/proxy/: foo (200; 98.180499ms)
  Aug 24 12:29:31.059: INFO: (19) /api/v1/namespaces/proxy-1940/services/proxy-service-jqv44:portname2/proxy/: bar (200; 97.748016ms)
  Aug 24 12:29:31.059: INFO: (19) /api/v1/namespaces/proxy-1940/pods/http:proxy-service-jqv44-m8nln:1080/proxy/: <a href="/api/v1/namespaces/proxy-1940/pods/http:proxy-service-jqv44-m8nln:1080/proxy/rewriteme">... (200; 96.64376ms)
  Aug 24 12:29:31.060: INFO: (19) /api/v1/namespaces/proxy-1940/services/http:proxy-service-jqv44:portname1/proxy/: foo (200; 98.503771ms)
  Aug 24 12:29:31.060: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: deleting ReplicationController proxy-service-jqv44 in namespace proxy-1940, will wait for the garbage collector to delete the pods @ 08/24/23 12:29:31.069
  Aug 24 12:29:31.264: INFO: Deleting ReplicationController proxy-service-jqv44 took: 57.854941ms
  Aug 24 12:29:31.365: INFO: Terminating ReplicationController proxy-service-jqv44 pods took: 100.135321ms
  E0824 12:29:31.397493      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Destroying namespace "proxy-1940" for this suite. @ 08/24/23 12:29:32.166
• [6.901 seconds]
------------------------------
SSSSSSSSS
------------------------------
[sig-network] Services should test the lifecycle of an Endpoint [Conformance]
test/e2e/network/service.go:3142
  STEP: Creating a kubernetes client @ 08/24/23 12:29:32.184
  Aug 24 12:29:32.184: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename services @ 08/24/23 12:29:32.185
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 12:29:32.217
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 12:29:32.224
  STEP: creating an Endpoint @ 08/24/23 12:29:32.24
  STEP: waiting for available Endpoint @ 08/24/23 12:29:32.253
  STEP: listing all Endpoints @ 08/24/23 12:29:32.256
  STEP: updating the Endpoint @ 08/24/23 12:29:32.264
  STEP: fetching the Endpoint @ 08/24/23 12:29:32.279
  STEP: patching the Endpoint @ 08/24/23 12:29:32.288
  STEP: fetching the Endpoint @ 08/24/23 12:29:32.309
  STEP: deleting the Endpoint by Collection @ 08/24/23 12:29:32.317
  STEP: waiting for Endpoint deletion @ 08/24/23 12:29:32.337
  STEP: fetching the Endpoint @ 08/24/23 12:29:32.34
  Aug 24 12:29:32.346: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "services-6949" for this suite. @ 08/24/23 12:29:32.356
• [0.189 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-network] Services should be able to create a functioning NodePort service [Conformance]
test/e2e/network/service.go:1280
  STEP: Creating a kubernetes client @ 08/24/23 12:29:32.376
  Aug 24 12:29:32.376: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename services @ 08/24/23 12:29:32.377
  E0824 12:29:32.398110      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 12:29:32.407
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 12:29:32.413
  STEP: creating service nodeport-test with type=NodePort in namespace services-992 @ 08/24/23 12:29:32.42
  STEP: creating replication controller nodeport-test in namespace services-992 @ 08/24/23 12:29:32.458
  I0824 12:29:32.469518      22 runners.go:197] Created replication controller with name: nodeport-test, namespace: services-992, replica count: 2
  E0824 12:29:33.399367      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:29:34.399922      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:29:35.400575      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  I0824 12:29:35.521030      22 runners.go:197] nodeport-test Pods: 2 out of 2 created, 2 running, 0 pending, 0 waiting, 0 inactive, 0 terminating, 0 unknown, 0 runningButNotReady 
  Aug 24 12:29:35.521: INFO: Creating new exec pod
  E0824 12:29:36.400782      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:29:37.401431      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:29:38.401767      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 12:29:38.566: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1002171096 --namespace=services-992 exec execpodn66sr -- /bin/sh -x -c echo hostName | nc -v -t -w 2 nodeport-test 80'
  Aug 24 12:29:38.816: INFO: stderr: "+ echo hostName\n+ nc -v -t -w 2 nodeport-test 80\nConnection to nodeport-test 80 port [tcp/http] succeeded!\n"
  Aug 24 12:29:38.816: INFO: stdout: ""
  E0824 12:29:39.402751      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 12:29:39.817: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1002171096 --namespace=services-992 exec execpodn66sr -- /bin/sh -x -c echo hostName | nc -v -t -w 2 nodeport-test 80'
  Aug 24 12:29:40.051: INFO: stderr: "+ echo hostName\n+ nc -v -t -w 2 nodeport-test 80\nConnection to nodeport-test 80 port [tcp/http] succeeded!\n"
  Aug 24 12:29:40.051: INFO: stdout: ""
  E0824 12:29:40.402925      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 12:29:40.817: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1002171096 --namespace=services-992 exec execpodn66sr -- /bin/sh -x -c echo hostName | nc -v -t -w 2 nodeport-test 80'
  Aug 24 12:29:41.076: INFO: stderr: "+ echo hostName\n+ nc -v -t -w 2 nodeport-test 80\nConnection to nodeport-test 80 port [tcp/http] succeeded!\n"
  Aug 24 12:29:41.076: INFO: stdout: "nodeport-test-sk4tn"
  Aug 24 12:29:41.076: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1002171096 --namespace=services-992 exec execpodn66sr -- /bin/sh -x -c echo hostName | nc -v -t -w 2 10.96.183.50 80'
  Aug 24 12:29:41.310: INFO: stderr: "+ echo hostName\n+ nc -v -t -w 2 10.96.183.50 80\nConnection to 10.96.183.50 80 port [tcp/http] succeeded!\n"
  Aug 24 12:29:41.310: INFO: stdout: "nodeport-test-wzj2h"
  Aug 24 12:29:41.310: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1002171096 --namespace=services-992 exec execpodn66sr -- /bin/sh -x -c echo hostName | nc -v -t -w 2 172.16.36.3 32053'
  E0824 12:29:41.403928      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 12:29:41.548: INFO: stderr: "+ echo hostName\n+ nc -v -t -w 2 172.16.36.3 32053\nConnection to 172.16.36.3 32053 port [tcp/*] succeeded!\n"
  Aug 24 12:29:41.548: INFO: stdout: ""
  E0824 12:29:42.404508      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 12:29:42.549: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1002171096 --namespace=services-992 exec execpodn66sr -- /bin/sh -x -c echo hostName | nc -v -t -w 2 172.16.36.3 32053'
  Aug 24 12:29:42.801: INFO: stderr: "+ echo hostName\n+ nc -v -t -w 2 172.16.36.3 32053\nConnection to 172.16.36.3 32053 port [tcp/*] succeeded!\n"
  Aug 24 12:29:42.801: INFO: stdout: "nodeport-test-sk4tn"
  Aug 24 12:29:42.801: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1002171096 --namespace=services-992 exec execpodn66sr -- /bin/sh -x -c echo hostName | nc -v -t -w 2 172.16.36.2 32053'
  Aug 24 12:29:43.072: INFO: stderr: "+ echo hostName\n+ nc -v -t -w 2 172.16.36.2 32053\nConnection to 172.16.36.2 32053 port [tcp/*] succeeded!\n"
  Aug 24 12:29:43.072: INFO: stdout: "nodeport-test-sk4tn"
  Aug 24 12:29:43.072: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "services-992" for this suite. @ 08/24/23 12:29:43.085
• [10.724 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSS
------------------------------
[sig-api-machinery] ResourceQuota should create a ResourceQuota and capture the life of a secret. [Conformance]
test/e2e/apimachinery/resource_quota.go:161
  STEP: Creating a kubernetes client @ 08/24/23 12:29:43.101
  Aug 24 12:29:43.101: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename resourcequota @ 08/24/23 12:29:43.102
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 12:29:43.13
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 12:29:43.136
  STEP: Discovering how many secrets are in namespace by default @ 08/24/23 12:29:43.143
  E0824 12:29:43.405032      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:29:44.405234      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:29:45.405495      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:29:46.405614      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:29:47.405839      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Counting existing ResourceQuota @ 08/24/23 12:29:48.163
  E0824 12:29:48.406122      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:29:49.407066      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:29:50.407249      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:29:51.407394      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:29:52.407716      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Creating a ResourceQuota @ 08/24/23 12:29:53.172
  STEP: Ensuring resource quota status is calculated @ 08/24/23 12:29:53.182
  E0824 12:29:53.408324      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:29:54.409164      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Creating a Secret @ 08/24/23 12:29:55.196
  STEP: Ensuring resource quota status captures secret creation @ 08/24/23 12:29:55.221
  E0824 12:29:55.409336      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:29:56.409538      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Deleting a secret @ 08/24/23 12:29:57.23
  STEP: Ensuring resource quota status released usage @ 08/24/23 12:29:57.242
  E0824 12:29:57.410165      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:29:58.410411      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 12:29:59.251: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "resourcequota-3410" for this suite. @ 08/24/23 12:29:59.262
• [16.178 seconds]
------------------------------
SSSSSS
------------------------------
[sig-api-machinery] Namespaces [Serial] should ensure that all pods are removed when a namespace is deleted [Conformance]
test/e2e/apimachinery/namespace.go:243
  STEP: Creating a kubernetes client @ 08/24/23 12:29:59.279
  Aug 24 12:29:59.279: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename namespaces @ 08/24/23 12:29:59.28
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 12:29:59.315
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 12:29:59.322
  STEP: Creating a test namespace @ 08/24/23 12:29:59.33
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 12:29:59.366
  STEP: Creating a pod in the namespace @ 08/24/23 12:29:59.374
  STEP: Waiting for the pod to have running status @ 08/24/23 12:29:59.398
  E0824 12:29:59.410935      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:30:00.411617      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:30:01.412435      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Deleting the namespace @ 08/24/23 12:30:01.416
  STEP: Waiting for the namespace to be removed. @ 08/24/23 12:30:01.43
  E0824 12:30:02.412458      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:30:03.413178      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:30:04.413342      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:30:05.413543      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:30:06.413893      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:30:07.414899      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:30:08.415047      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:30:09.415263      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:30:10.415443      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:30:11.415617      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:30:12.416344      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:30:13.416149      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:30:14.416575      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Recreating the namespace @ 08/24/23 12:30:14.44
  STEP: Verifying there are no pods in the namespace @ 08/24/23 12:30:14.472
  Aug 24 12:30:14.481: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "namespaces-2055" for this suite. @ 08/24/23 12:30:14.49
  STEP: Destroying namespace "nsdeletetest-5792" for this suite. @ 08/24/23 12:30:14.506
  Aug 24 12:30:14.514: INFO: Namespace nsdeletetest-5792 was already deleted
  STEP: Destroying namespace "nsdeletetest-7276" for this suite. @ 08/24/23 12:30:14.514
• [15.251 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-api-machinery] Watchers should be able to start watching from a specific resource version [Conformance]
test/e2e/apimachinery/watch.go:142
  STEP: Creating a kubernetes client @ 08/24/23 12:30:14.531
  Aug 24 12:30:14.531: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename watch @ 08/24/23 12:30:14.532
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 12:30:14.56
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 12:30:14.567
  STEP: creating a new configmap @ 08/24/23 12:30:14.573
  STEP: modifying the configmap once @ 08/24/23 12:30:14.584
  STEP: modifying the configmap a second time @ 08/24/23 12:30:14.602
  STEP: deleting the configmap @ 08/24/23 12:30:14.624
  STEP: creating a watch on configmaps from the resource version returned by the first update @ 08/24/23 12:30:14.639
  STEP: Expecting to observe notifications for all changes to the configmap after the first update @ 08/24/23 12:30:14.642
  Aug 24 12:30:14.643: INFO: Got : MODIFIED &ConfigMap{ObjectMeta:{e2e-watch-test-resource-version  watch-6226  37aeff2e-c93b-4ecb-b734-3dc6df8fbec2 3405020835 0 2023-08-24 12:30:14 +0000 UTC <nil> <nil> map[watch-this-configmap:from-resource-version] map[] [] [] [{e2e.test Update v1 2023-08-24 12:30:14 +0000 UTC FieldsV1 {"f:data":{".":{},"f:mutation":{}},"f:metadata":{"f:labels":{".":{},"f:watch-this-configmap":{}}}} }]},Data:map[string]string{mutation: 2,},BinaryData:map[string][]byte{},Immutable:nil,}
  Aug 24 12:30:14.643: INFO: Got : DELETED &ConfigMap{ObjectMeta:{e2e-watch-test-resource-version  watch-6226  37aeff2e-c93b-4ecb-b734-3dc6df8fbec2 3405020837 0 2023-08-24 12:30:14 +0000 UTC <nil> <nil> map[watch-this-configmap:from-resource-version] map[] [] [] [{e2e.test Update v1 2023-08-24 12:30:14 +0000 UTC FieldsV1 {"f:data":{".":{},"f:mutation":{}},"f:metadata":{"f:labels":{".":{},"f:watch-this-configmap":{}}}} }]},Data:map[string]string{mutation: 2,},BinaryData:map[string][]byte{},Immutable:nil,}
  Aug 24 12:30:14.643: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "watch-6226" for this suite. @ 08/24/23 12:30:14.653
• [0.138 seconds]
------------------------------
[sig-storage] EmptyDir volumes volume on tmpfs should have the correct mode [LinuxOnly] [NodeConformance] [Conformance]
test/e2e/common/storage/empty_dir.go:87
  STEP: Creating a kubernetes client @ 08/24/23 12:30:14.67
  Aug 24 12:30:14.670: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename emptydir @ 08/24/23 12:30:14.671
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 12:30:14.703
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 12:30:14.711
  STEP: Creating a pod to test emptydir volume type on tmpfs @ 08/24/23 12:30:14.718
  E0824 12:30:15.416862      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:30:16.417797      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:30:17.417975      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:30:18.418378      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Saw pod success @ 08/24/23 12:30:18.774
  Aug 24 12:30:18.783: INFO: Trying to get logs from node scw-conformance-default-2af6d8b4c6264cc5b9e5e6 pod pod-c30b43eb-fa48-4c6b-a7f5-b94e538fa034 container test-container: <nil>
  STEP: delete the pod @ 08/24/23 12:30:18.827
  Aug 24 12:30:18.870: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "emptydir-9604" for this suite. @ 08/24/23 12:30:18.879
• [4.226 seconds]
------------------------------
SSSSSSSS
------------------------------
[sig-storage] Downward API volume should provide container's cpu request [NodeConformance] [Conformance]
test/e2e/common/storage/downwardapi_volume.go:222
  STEP: Creating a kubernetes client @ 08/24/23 12:30:18.896
  Aug 24 12:30:18.896: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename downward-api @ 08/24/23 12:30:18.897
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 12:30:18.923
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 12:30:18.954
  STEP: Creating a pod to test downward API volume plugin @ 08/24/23 12:30:18.96
  E0824 12:30:19.419364      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:30:20.419840      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:30:21.420688      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:30:22.421265      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Saw pod success @ 08/24/23 12:30:23.008
  Aug 24 12:30:23.014: INFO: Trying to get logs from node scw-conformance-default-2af6d8b4c6264cc5b9e5e6 pod downwardapi-volume-eac1dfc2-a4ba-4d74-bcbe-fd9672d6e0ca container client-container: <nil>
  STEP: delete the pod @ 08/24/23 12:30:23.038
  Aug 24 12:30:23.069: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "downward-api-1828" for this suite. @ 08/24/23 12:30:23.079
• [4.198 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-storage] Downward API volume should provide node allocatable (memory) as default memory limit if the limit is not set [NodeConformance] [Conformance]
test/e2e/common/storage/downwardapi_volume.go:262
  STEP: Creating a kubernetes client @ 08/24/23 12:30:23.095
  Aug 24 12:30:23.095: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename downward-api @ 08/24/23 12:30:23.096
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 12:30:23.127
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 12:30:23.154
  STEP: Creating a pod to test downward API volume plugin @ 08/24/23 12:30:23.161
  E0824 12:30:23.421440      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:30:24.421712      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:30:25.422323      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:30:26.422718      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Saw pod success @ 08/24/23 12:30:27.214
  Aug 24 12:30:27.222: INFO: Trying to get logs from node scw-conformance-default-2af6d8b4c6264cc5b9e5e6 pod downwardapi-volume-ace36427-0b86-4547-ada8-b4a972a4c642 container client-container: <nil>
  STEP: delete the pod @ 08/24/23 12:30:27.241
  Aug 24 12:30:27.276: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "downward-api-878" for this suite. @ 08/24/23 12:30:27.287
• [4.207 seconds]
------------------------------
SSSS
------------------------------
[sig-storage] Projected downwardAPI should set DefaultMode on files [LinuxOnly] [NodeConformance] [Conformance]
test/e2e/common/storage/projected_downwardapi.go:69
  STEP: Creating a kubernetes client @ 08/24/23 12:30:27.302
  Aug 24 12:30:27.302: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename projected @ 08/24/23 12:30:27.303
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 12:30:27.335
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 12:30:27.354
  STEP: Creating a pod to test downward API volume plugin @ 08/24/23 12:30:27.361
  E0824 12:30:27.423039      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:30:28.423604      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:30:29.423632      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:30:30.423812      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Saw pod success @ 08/24/23 12:30:31.414
  Aug 24 12:30:31.420: INFO: Trying to get logs from node scw-conformance-default-2af6d8b4c6264cc5b9e5e6 pod downwardapi-volume-a263cb50-0dc0-43f8-852c-8f6a3fb38a49 container client-container: <nil>
  E0824 12:30:31.424762      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: delete the pod @ 08/24/23 12:30:31.439
  Aug 24 12:30:31.468: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "projected-2389" for this suite. @ 08/24/23 12:30:31.478
• [4.190 seconds]
------------------------------
SSSSSSSSSSSSSS
------------------------------
[sig-network] Services should be able to change the type from ExternalName to NodePort [Conformance]
test/e2e/network/service.go:1455
  STEP: Creating a kubernetes client @ 08/24/23 12:30:31.493
  Aug 24 12:30:31.493: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename services @ 08/24/23 12:30:31.494
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 12:30:31.528
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 12:30:31.551
  STEP: creating a service externalname-service with the type=ExternalName in namespace services-6770 @ 08/24/23 12:30:31.558
  STEP: changing the ExternalName service to type=NodePort @ 08/24/23 12:30:31.57
  STEP: creating replication controller externalname-service in namespace services-6770 @ 08/24/23 12:30:31.616
  I0824 12:30:31.630086      22 runners.go:197] Created replication controller with name: externalname-service, namespace: services-6770, replica count: 2
  E0824 12:30:32.425721      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:30:33.426608      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:30:34.426942      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  I0824 12:30:34.681667      22 runners.go:197] externalname-service Pods: 2 out of 2 created, 2 running, 0 pending, 0 waiting, 0 inactive, 0 terminating, 0 unknown, 0 runningButNotReady 
  Aug 24 12:30:34.681: INFO: Creating new exec pod
  E0824 12:30:35.427556      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:30:36.427850      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:30:37.428342      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 12:30:37.730: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1002171096 --namespace=services-6770 exec execpodchmcm -- /bin/sh -x -c echo hostName | nc -v -t -w 2 externalname-service 80'
  Aug 24 12:30:37.967: INFO: stderr: "+ echo hostName\n+ nc -v -t -w 2 externalname-service 80\nConnection to externalname-service 80 port [tcp/http] succeeded!\n"
  Aug 24 12:30:37.967: INFO: stdout: "externalname-service-mc64c"
  Aug 24 12:30:37.967: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1002171096 --namespace=services-6770 exec execpodchmcm -- /bin/sh -x -c echo hostName | nc -v -t -w 2 10.96.155.75 80'
  Aug 24 12:30:38.190: INFO: stderr: "+ echo hostName\n+ nc -v -t -w 2 10.96.155.75 80\nConnection to 10.96.155.75 80 port [tcp/http] succeeded!\n"
  Aug 24 12:30:38.190: INFO: stdout: "externalname-service-rh6kb"
  Aug 24 12:30:38.190: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1002171096 --namespace=services-6770 exec execpodchmcm -- /bin/sh -x -c echo hostName | nc -v -t -w 2 172.16.36.3 30401'
  Aug 24 12:30:38.413: INFO: stderr: "+ echo hostName\n+ nc -v -t -w 2 172.16.36.3 30401\nConnection to 172.16.36.3 30401 port [tcp/*] succeeded!\n"
  Aug 24 12:30:38.413: INFO: stdout: "externalname-service-mc64c"
  Aug 24 12:30:38.413: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1002171096 --namespace=services-6770 exec execpodchmcm -- /bin/sh -x -c echo hostName | nc -v -t -w 2 172.16.36.2 30401'
  E0824 12:30:38.428755      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 12:30:38.629: INFO: stderr: "+ echo hostName\n+ nc -v -t -w 2 172.16.36.2 30401\nConnection to 172.16.36.2 30401 port [tcp/*] succeeded!\n"
  Aug 24 12:30:38.629: INFO: stdout: "externalname-service-rh6kb"
  Aug 24 12:30:38.629: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  Aug 24 12:30:38.639: INFO: Cleaning up the ExternalName to NodePort test service
  STEP: Destroying namespace "services-6770" for this suite. @ 08/24/23 12:30:38.688
• [7.209 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-node] Kubelet when scheduling an agnhost Pod with hostAliases should write entries to /etc/hosts [NodeConformance] [Conformance]
test/e2e/common/node/kubelet.go:148
  STEP: Creating a kubernetes client @ 08/24/23 12:30:38.705
  Aug 24 12:30:38.705: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename kubelet-test @ 08/24/23 12:30:38.706
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 12:30:38.736
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 12:30:38.754
  STEP: Waiting for pod completion @ 08/24/23 12:30:38.784
  E0824 12:30:39.429061      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:30:40.429384      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:30:41.429697      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:30:42.430427      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 12:30:42.840: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "kubelet-test-9682" for this suite. @ 08/24/23 12:30:42.85
• [4.162 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-api-machinery] FieldValidation should create/apply a CR with unknown fields for CRD with no validation schema [Conformance]
test/e2e/apimachinery/field_validation.go:289
  STEP: Creating a kubernetes client @ 08/24/23 12:30:42.868
  Aug 24 12:30:42.868: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename field-validation @ 08/24/23 12:30:42.869
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 12:30:42.899
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 12:30:42.907
  Aug 24 12:30:42.913: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  E0824 12:30:43.431288      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:30:44.431358      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:30:45.431568      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 12:30:46.129: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "field-validation-7536" for this suite. @ 08/24/23 12:30:46.172
• [3.317 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-scheduling] SchedulerPredicates [Serial] validates that there exists conflict between pods with same hostPort and protocol but one using 0.0.0.0 hostIP [Conformance]
test/e2e/scheduling/predicates.go:705
  STEP: Creating a kubernetes client @ 08/24/23 12:30:46.187
  Aug 24 12:30:46.187: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename sched-pred @ 08/24/23 12:30:46.188
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 12:30:46.25
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 12:30:46.257
  Aug 24 12:30:46.264: INFO: Waiting up to 1m0s for all (but 0) nodes to be ready
  Aug 24 12:30:46.284: INFO: Waiting for terminating namespaces to be deleted...
  Aug 24 12:30:46.291: INFO: 
  Logging pods the apiserver thinks is on node scw-conformance-default-2af6d8b4c6264cc5b9e5e6 before test
  Aug 24 12:30:46.309: INFO: cilium-operator-9686c5f57-bbxb6 from kube-system started at 2023-08-24 11:03:43 +0000 UTC (1 container statuses recorded)
  Aug 24 12:30:46.309: INFO: 	Container cilium-operator ready: true, restart count 0
  Aug 24 12:30:46.309: INFO: cilium-qxsf5 from kube-system started at 2023-08-24 11:03:43 +0000 UTC (1 container statuses recorded)
  Aug 24 12:30:46.309: INFO: 	Container cilium-agent ready: true, restart count 0
  Aug 24 12:30:46.309: INFO: csi-node-tq6l2 from kube-system started at 2023-08-24 11:03:43 +0000 UTC (2 container statuses recorded)
  Aug 24 12:30:46.309: INFO: 	Container csi-node-driver-registrar ready: true, restart count 0
  Aug 24 12:30:46.309: INFO: 	Container csi-plugin ready: true, restart count 0
  Aug 24 12:30:46.309: INFO: konnectivity-agent-9q7n8 from kube-system started at 2023-08-24 11:03:43 +0000 UTC (1 container statuses recorded)
  Aug 24 12:30:46.309: INFO: 	Container konnectivity-agent ready: true, restart count 0
  Aug 24 12:30:46.309: INFO: kube-proxy-qdvkw from kube-system started at 2023-08-24 11:03:43 +0000 UTC (1 container statuses recorded)
  Aug 24 12:30:46.309: INFO: 	Container kube-proxy ready: true, restart count 0
  Aug 24 12:30:46.309: INFO: agnhost-host-aliasesb8069311-eb9f-4d8e-956a-0b5376ae3e8d from kubelet-test-9682 started at 2023-08-24 12:30:38 +0000 UTC (1 container statuses recorded)
  Aug 24 12:30:46.309: INFO: 	Container agnhost-container ready: false, restart count 0
  Aug 24 12:30:46.309: INFO: externalname-service-rh6kb from services-6770 started at 2023-08-24 12:30:31 +0000 UTC (1 container statuses recorded)
  Aug 24 12:30:46.309: INFO: 	Container externalname-service ready: true, restart count 0
  Aug 24 12:30:46.309: INFO: sonobuoy from sonobuoy started at 2023-08-24 11:26:49 +0000 UTC (1 container statuses recorded)
  Aug 24 12:30:46.309: INFO: 	Container kube-sonobuoy ready: true, restart count 0
  Aug 24 12:30:46.309: INFO: sonobuoy-systemd-logs-daemon-set-02ba39604ea741df-p7qf6 from sonobuoy started at 2023-08-24 11:26:53 +0000 UTC (2 container statuses recorded)
  Aug 24 12:30:46.309: INFO: 	Container sonobuoy-worker ready: true, restart count 0
  Aug 24 12:30:46.309: INFO: 	Container systemd-logs ready: true, restart count 0
  Aug 24 12:30:46.309: INFO: 
  Logging pods the apiserver thinks is on node scw-conformance-default-ecf11ec729064adba7e270 before test
  Aug 24 12:30:46.361: INFO: cilium-x494p from kube-system started at 2023-08-24 11:03:51 +0000 UTC (1 container statuses recorded)
  Aug 24 12:30:46.361: INFO: 	Container cilium-agent ready: true, restart count 0
  Aug 24 12:30:46.361: INFO: coredns-76f9d8b48f-l47wj from kube-system started at 2023-08-24 11:04:12 +0000 UTC (1 container statuses recorded)
  Aug 24 12:30:46.361: INFO: 	Container coredns ready: true, restart count 0
  Aug 24 12:30:46.361: INFO: csi-node-mj9jp from kube-system started at 2023-08-24 11:03:51 +0000 UTC (2 container statuses recorded)
  Aug 24 12:30:46.361: INFO: 	Container csi-node-driver-registrar ready: true, restart count 0
  Aug 24 12:30:46.361: INFO: 	Container csi-plugin ready: true, restart count 0
  Aug 24 12:30:46.361: INFO: konnectivity-agent-hbwxf from kube-system started at 2023-08-24 11:03:51 +0000 UTC (1 container statuses recorded)
  Aug 24 12:30:46.361: INFO: 	Container konnectivity-agent ready: true, restart count 0
  Aug 24 12:30:46.361: INFO: kube-proxy-k7xlb from kube-system started at 2023-08-24 11:03:51 +0000 UTC (1 container statuses recorded)
  Aug 24 12:30:46.361: INFO: 	Container kube-proxy ready: true, restart count 0
  Aug 24 12:30:46.361: INFO: metrics-server-66786fb-88mmf from kube-system started at 2023-08-24 11:04:12 +0000 UTC (1 container statuses recorded)
  Aug 24 12:30:46.361: INFO: 	Container metrics-server ready: true, restart count 0
  Aug 24 12:30:46.361: INFO: externalname-service-mc64c from services-6770 started at 2023-08-24 12:30:31 +0000 UTC (1 container statuses recorded)
  Aug 24 12:30:46.361: INFO: 	Container externalname-service ready: true, restart count 0
  Aug 24 12:30:46.361: INFO: sonobuoy-e2e-job-e6e5c8fdb4f14afe from sonobuoy started at 2023-08-24 11:26:53 +0000 UTC (2 container statuses recorded)
  Aug 24 12:30:46.361: INFO: 	Container e2e ready: true, restart count 0
  Aug 24 12:30:46.361: INFO: 	Container sonobuoy-worker ready: true, restart count 0
  Aug 24 12:30:46.361: INFO: sonobuoy-systemd-logs-daemon-set-02ba39604ea741df-kpkc8 from sonobuoy started at 2023-08-24 11:26:53 +0000 UTC (2 container statuses recorded)
  Aug 24 12:30:46.361: INFO: 	Container sonobuoy-worker ready: true, restart count 0
  Aug 24 12:30:46.361: INFO: 	Container systemd-logs ready: true, restart count 0
  STEP: Trying to launch a pod without a label to get a node which can launch it. @ 08/24/23 12:30:46.361
  E0824 12:30:46.431899      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:30:47.432672      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Explicitly delete pod here to free the resource it takes. @ 08/24/23 12:30:48.399
  E0824 12:30:48.432963      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Trying to apply a random label on the found node. @ 08/24/23 12:30:48.466
  STEP: verifying the node has the label kubernetes.io/e2e-9b3c3a47-3147-4b38-bbbe-3c0825fb4132 95 @ 08/24/23 12:30:48.559
  STEP: Trying to create a pod(pod4) with hostport 54322 and hostIP 0.0.0.0(empty string here) and expect scheduled @ 08/24/23 12:30:48.566
  E0824 12:30:49.433724      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:30:50.436591      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Trying to create another pod(pod5) with hostport 54322 but hostIP 172.16.36.3 on the node which pod4 resides and expect not scheduled @ 08/24/23 12:30:50.758
  E0824 12:30:51.437462      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:30:52.437899      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:30:53.438608      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:30:54.438966      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:30:55.440083      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:30:56.440381      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:30:57.441122      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:30:58.441554      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:30:59.442258      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:31:00.442473      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:31:01.443111      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:31:02.443603      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:31:03.444511      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:31:04.444863      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:31:05.445522      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:31:06.445842      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:31:07.446081      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:31:08.446425      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:31:09.446899      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:31:10.447270      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:31:11.448128      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:31:12.448358      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:31:13.449010      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:31:14.449384      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:31:15.449656      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:31:16.449823      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:31:17.449926      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:31:18.450459      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:31:19.450991      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:31:20.451276      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:31:21.452277      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:31:22.452872      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:31:23.453947      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:31:24.454252      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:31:25.455334      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:31:26.455666      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:31:27.456691      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:31:28.456916      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:31:29.456999      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:31:30.457159      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:31:31.457764      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:31:32.457889      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:31:33.458498      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:31:34.458830      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:31:35.458942      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:31:36.459298      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:31:37.459354      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:31:38.459496      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:31:39.460547      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:31:40.460743      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:31:41.461549      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:31:42.461777      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:31:43.461823      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:31:44.461985      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:31:45.462474      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:31:46.462728      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:31:47.463338      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:31:48.463562      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:31:49.464400      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:31:50.464650      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:31:51.465159      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:31:52.465309      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:31:53.466233      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:31:54.466429      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:31:55.467267      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:31:56.467932      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:31:57.468019      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:31:58.468585      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:31:59.468630      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:32:00.469063      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:32:01.469189      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:32:02.470097      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:32:03.470344      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:32:04.470528      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:32:05.471326      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:32:06.471537      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:32:07.472174      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:32:08.472445      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:32:09.472776      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:32:10.473364      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:32:11.473890      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:32:12.474485      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:32:13.475387      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:32:14.475591      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:32:15.476572      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:32:16.476772      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:32:17.477756      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:32:18.477892      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:32:19.478075      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:32:20.478294      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:32:21.478445      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:32:22.478661      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:32:23.479276      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:32:24.479347      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:32:25.479432      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:32:26.479570      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:32:27.480410      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:32:28.480598      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:32:29.480739      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:32:30.480903      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:32:31.481083      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:32:32.481256      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:32:33.481528      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:32:34.482256      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:32:35.482499      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:32:36.482635      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:32:37.482799      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:32:38.483005      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:32:39.483263      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:32:40.483427      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:32:41.483533      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:32:42.483672      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:32:43.483754      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:32:44.483930      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:32:45.484887      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:32:46.485263      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:32:47.486111      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:32:48.486260      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:32:49.486611      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:32:50.487631      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:32:51.487807      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:32:52.487998      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:32:53.488190      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:32:54.488316      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:32:55.488726      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:32:56.489729      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:32:57.490535      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:32:58.491279      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:32:59.491403      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:33:00.492475      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:33:01.492646      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:33:02.492809      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:33:03.493122      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:33:04.494276      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:33:05.494778      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:33:06.494968      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:33:07.495234      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:33:08.495650      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:33:09.495891      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:33:10.496926      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:33:11.497121      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:33:12.498022      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:33:13.498638      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:33:14.499195      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:33:15.499674      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:33:16.499814      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:33:17.500778      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:33:18.501414      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:33:19.501776      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:33:20.501950      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:33:21.502148      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:33:22.502311      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:33:23.502531      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:33:24.502667      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:33:25.502836      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:33:26.502940      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:33:27.503506      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:33:28.504439      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:33:29.504678      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:33:30.505183      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:33:31.506206      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:33:32.506458      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:33:33.506627      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:33:34.506665      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:33:35.506838      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:33:36.507002      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:33:37.507993      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:33:38.508971      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:33:39.509729      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:33:40.510789      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:33:41.511637      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:33:42.512644      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:33:43.512861      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:33:44.513715      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:33:45.514258      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:33:46.515080      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:33:47.515251      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:33:48.515655      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:33:49.516014      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:33:50.516277      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:33:51.516654      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:33:52.517704      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:33:53.517899      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:33:54.517942      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:33:55.518100      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:33:56.518553      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:33:57.518723      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:33:58.518872      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:33:59.518976      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:34:00.520086      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:34:01.520342      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:34:02.521353      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:34:03.521825      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:34:04.521971      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:34:05.522150      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:34:06.523263      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:34:07.524086      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:34:08.524810      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:34:09.525504      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:34:10.525689      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:34:11.526450      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:34:12.527290      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:34:13.526778      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:34:14.527643      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:34:15.528001      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:34:16.528095      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:34:17.529036      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:34:18.529688      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:34:19.530046      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:34:20.530951      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:34:21.531461      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:34:22.532240      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:34:23.532653      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:34:24.532723      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:34:25.532836      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:34:26.532937      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:34:27.533125      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:34:28.534058      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:34:29.534462      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:34:30.534624      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:34:31.534809      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:34:32.534933      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:34:33.535112      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:34:34.535902      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:34:35.536592      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:34:36.537154      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:34:37.538095      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:34:38.538155      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:34:39.538234      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:34:40.538422      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:34:41.538924      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:34:42.539559      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:34:43.539803      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:34:44.540815      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:34:45.540995      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:34:46.541952      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:34:47.542614      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:34:48.542723      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:34:49.542849      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:34:50.543506      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:34:51.543662      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:34:52.544360      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:34:53.544684      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:34:54.545219      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:34:55.545655      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:34:56.546439      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:34:57.547339      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:34:58.547556      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:34:59.548133      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:35:00.548376      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:35:01.548622      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:35:02.549505      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:35:03.549879      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:35:04.550797      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:35:05.551070      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:35:06.551494      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:35:07.552409      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:35:08.553316      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:35:09.553784      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:35:10.554236      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:35:11.554873      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:35:12.555786      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:35:13.556114      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:35:14.556362      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:35:15.557013      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:35:16.557414      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:35:17.557501      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:35:18.558545      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:35:19.559255      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:35:20.559508      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:35:21.560286      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:35:22.560555      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:35:23.560956      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:35:24.561375      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:35:25.561767      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:35:26.561923      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:35:27.562072      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:35:28.562939      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:35:29.563535      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:35:30.564131      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:35:31.564350      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:35:32.564788      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:35:33.565094      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:35:34.566133      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:35:35.566646      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:35:36.566964      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:35:37.567694      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:35:38.568372      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:35:39.568750      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:35:40.568767      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:35:41.568860      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:35:42.569406      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:35:43.569810      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:35:44.570099      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:35:45.570282      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:35:46.570419      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:35:47.570551      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:35:48.570711      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:35:49.570925      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:35:50.571374      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: removing the label kubernetes.io/e2e-9b3c3a47-3147-4b38-bbbe-3c0825fb4132 off the node scw-conformance-default-2af6d8b4c6264cc5b9e5e6 @ 08/24/23 12:35:50.954
  STEP: verifying the node doesn't have the label kubernetes.io/e2e-9b3c3a47-3147-4b38-bbbe-3c0825fb4132 @ 08/24/23 12:35:50.995
  Aug 24 12:35:51.003: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "sched-pred-5114" for this suite. @ 08/24/23 12:35:51.014
• [304.863 seconds]
------------------------------
SSSSSSSSSSSS
------------------------------
[sig-node] Containers should be able to override the image's default command (container entrypoint) [NodeConformance] [Conformance]
test/e2e/common/node/containers.go:75
  STEP: Creating a kubernetes client @ 08/24/23 12:35:51.051
  Aug 24 12:35:51.051: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename containers @ 08/24/23 12:35:51.052
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 12:35:51.08
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 12:35:51.086
  STEP: Creating a pod to test override command @ 08/24/23 12:35:51.091
  E0824 12:35:51.571888      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:35:52.572998      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:35:53.573142      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:35:54.573608      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Saw pod success @ 08/24/23 12:35:55.193
  Aug 24 12:35:55.201: INFO: Trying to get logs from node scw-conformance-default-2af6d8b4c6264cc5b9e5e6 pod client-containers-533591f6-9734-45dc-816e-c85edd4bd006 container agnhost-container: <nil>
  STEP: delete the pod @ 08/24/23 12:35:55.257
  Aug 24 12:35:55.292: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "containers-2604" for this suite. @ 08/24/23 12:35:55.301
• [4.264 seconds]
------------------------------
SSSSSSSSSSSSSS
------------------------------
[sig-network] Services should be able to change the type from ExternalName to ClusterIP [Conformance]
test/e2e/network/service.go:1416
  STEP: Creating a kubernetes client @ 08/24/23 12:35:55.316
  Aug 24 12:35:55.316: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename services @ 08/24/23 12:35:55.318
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 12:35:55.35
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 12:35:55.359
  STEP: creating a service externalname-service with the type=ExternalName in namespace services-602 @ 08/24/23 12:35:55.367
  STEP: changing the ExternalName service to type=ClusterIP @ 08/24/23 12:35:55.379
  STEP: creating replication controller externalname-service in namespace services-602 @ 08/24/23 12:35:55.413
  I0824 12:35:55.426151      22 runners.go:197] Created replication controller with name: externalname-service, namespace: services-602, replica count: 2
  E0824 12:35:55.574307      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:35:56.575031      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:35:57.575056      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  I0824 12:35:58.477260      22 runners.go:197] externalname-service Pods: 2 out of 2 created, 2 running, 0 pending, 0 waiting, 0 inactive, 0 terminating, 0 unknown, 0 runningButNotReady 
  Aug 24 12:35:58.477: INFO: Creating new exec pod
  E0824 12:35:58.575016      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:35:59.575472      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:36:00.576430      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 12:36:01.511: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1002171096 --namespace=services-602 exec execpod926qr -- /bin/sh -x -c echo hostName | nc -v -t -w 2 externalname-service 80'
  E0824 12:36:01.576899      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 12:36:01.775: INFO: stderr: "+ echo hostName\n+ nc -v -t -w 2 externalname-service 80\nConnection to externalname-service 80 port [tcp/http] succeeded!\n"
  Aug 24 12:36:01.775: INFO: stdout: "externalname-service-rpn6d"
  Aug 24 12:36:01.775: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1002171096 --namespace=services-602 exec execpod926qr -- /bin/sh -x -c echo hostName | nc -v -t -w 2 10.96.90.171 80'
  Aug 24 12:36:02.010: INFO: stderr: "+ echo hostName\n+ nc -v -t -w 2 10.96.90.171 80\nConnection to 10.96.90.171 80 port [tcp/http] succeeded!\n"
  Aug 24 12:36:02.010: INFO: stdout: ""
  E0824 12:36:02.577027      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 12:36:03.010: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1002171096 --namespace=services-602 exec execpod926qr -- /bin/sh -x -c echo hostName | nc -v -t -w 2 10.96.90.171 80'
  Aug 24 12:36:03.259: INFO: stderr: "+ echo hostName\n+ nc -v -t -w 2 10.96.90.171 80\nConnection to 10.96.90.171 80 port [tcp/http] succeeded!\n"
  Aug 24 12:36:03.259: INFO: stdout: "externalname-service-rpn6d"
  Aug 24 12:36:03.259: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  Aug 24 12:36:03.274: INFO: Cleaning up the ExternalName to ClusterIP test service
  STEP: Destroying namespace "services-602" for this suite. @ 08/24/23 12:36:03.306
• [8.003 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-node] NoExecuteTaintManager Single Pod [Serial] removing taint cancels eviction [Disruptive] [Conformance]
test/e2e/node/taints.go:290
  STEP: Creating a kubernetes client @ 08/24/23 12:36:03.322
  Aug 24 12:36:03.322: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename taint-single-pod @ 08/24/23 12:36:03.323
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 12:36:03.351
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 12:36:03.357
  Aug 24 12:36:03.363: INFO: Waiting up to 1m0s for all nodes to be ready
  E0824 12:36:03.577843      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:36:04.578250      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:36:05.579229      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:36:06.579917      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:36:07.580490      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:36:08.580947      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:36:09.580984      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:36:10.581222      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:36:11.581997      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:36:12.582570      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:36:13.583463      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:36:14.583738      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:36:15.583903      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:36:16.584435      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:36:17.585002      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:36:18.585648      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:36:19.586183      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:36:20.586345      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:36:21.587272      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:36:22.588215      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:36:23.588350      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:36:24.588502      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:36:25.589021      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:36:26.589396      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:36:27.590064      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:36:28.590303      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:36:29.590372      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:36:30.590728      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:36:31.590776      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:36:32.590910      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:36:33.591805      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:36:34.591945      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:36:35.592764      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:36:36.593297      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:36:37.594053      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:36:38.594259      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:36:39.594934      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:36:40.595325      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:36:41.596414      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:36:42.597101      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:36:43.598035      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:36:44.598231      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:36:45.598438      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:36:46.598544      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:36:47.598742      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:36:48.599290      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:36:49.599915      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:36:50.600157      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:36:51.600675      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:36:52.600837      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:36:53.601880      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:36:54.602138      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:36:55.602161      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:36:56.602290      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:36:57.602439      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:36:58.602710      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:36:59.603082      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:37:00.603535      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:37:01.604303      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:37:02.604492      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 12:37:03.395: INFO: Waiting for terminating namespaces to be deleted...
  Aug 24 12:37:03.405: INFO: Starting informer...
  STEP: Starting pod... @ 08/24/23 12:37:03.405
  E0824 12:37:03.605021      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 12:37:03.640: INFO: Pod is running on scw-conformance-default-2af6d8b4c6264cc5b9e5e6. Tainting Node
  STEP: Trying to apply a taint on the Node @ 08/24/23 12:37:03.64
  STEP: verifying the node has the taint kubernetes.io/e2e-evict-taint-key=evictTaintVal:NoExecute @ 08/24/23 12:37:03.678
  STEP: Waiting short time to make sure Pod is queued for deletion @ 08/24/23 12:37:03.69
  Aug 24 12:37:03.690: INFO: Pod wasn't evicted. Proceeding
  Aug 24 12:37:03.690: INFO: Removing taint from Node
  STEP: verifying the node doesn't have the taint kubernetes.io/e2e-evict-taint-key=evictTaintVal:NoExecute @ 08/24/23 12:37:03.77
  STEP: Waiting some time to make sure that toleration time passed. @ 08/24/23 12:37:03.782
  E0824 12:37:04.606193      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:37:05.606598      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:37:06.606687      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:37:07.606844      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:37:08.607169      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:37:09.607253      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:37:10.607396      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:37:11.607686      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:37:12.608587      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:37:13.608816      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:37:14.609363      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:37:15.609811      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:37:16.610157      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:37:17.610277      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:37:18.610365      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:37:19.610558      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:37:20.610918      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:37:21.611392      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:37:22.611539      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:37:23.612539      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:37:24.612933      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:37:25.613118      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:37:26.613596      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:37:27.614504      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:37:28.614823      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:37:29.615577      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:37:30.616132      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:37:31.616666      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:37:32.617369      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:37:33.618012      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:37:34.618934      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:37:35.619843      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:37:36.620213      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:37:37.621236      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:37:38.621722      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:37:39.622301      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:37:40.622745      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:37:41.623364      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:37:42.623989      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:37:43.624317      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:37:44.624569      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:37:45.624857      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:37:46.625129      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:37:47.625763      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:37:48.626070      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:37:49.626600      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:37:50.627103      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:37:51.627628      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:37:52.628401      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:37:53.628777      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:37:54.629188      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:37:55.629603      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:37:56.630082      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:37:57.630943      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:37:58.631524      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:37:59.632066      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:38:00.632644      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:38:01.633191      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:38:02.633773      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:38:03.634321      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:38:04.634709      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:38:05.635036      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:38:06.635353      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:38:07.636011      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:38:08.636378      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:38:09.636750      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:38:10.636903      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:38:11.637067      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:38:12.637254      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:38:13.637550      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:38:14.637676      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:38:15.637867      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:38:16.638149      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:38:17.639128      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:38:18.639440      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 12:38:18.783: INFO: Pod wasn't evicted. Test successful
  Aug 24 12:38:18.783: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "taint-single-pod-9653" for this suite. @ 08/24/23 12:38:18.793
• [135.485 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should include webhook resources in discovery documents [Conformance]
test/e2e/apimachinery/webhook.go:119
  STEP: Creating a kubernetes client @ 08/24/23 12:38:18.809
  Aug 24 12:38:18.809: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename webhook @ 08/24/23 12:38:18.81
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 12:38:18.861
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 12:38:18.867
  STEP: Setting up server cert @ 08/24/23 12:38:18.955
  STEP: Create role binding to let webhook read extension-apiserver-authentication @ 08/24/23 12:38:19.143
  STEP: Deploying the webhook pod @ 08/24/23 12:38:19.161
  STEP: Wait for the deployment to be ready @ 08/24/23 12:38:19.186
  Aug 24 12:38:19.199: INFO: new replicaset for deployment "sample-webhook-deployment" is yet to be created
  E0824 12:38:19.640285      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:38:20.641062      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Deploying the webhook service @ 08/24/23 12:38:21.228
  STEP: Verifying the service has paired with the endpoint @ 08/24/23 12:38:21.253
  E0824 12:38:21.641523      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 12:38:22.254: INFO: Waiting for amount of service:e2e-test-webhook endpoints to be 1
  STEP: fetching the /apis discovery document @ 08/24/23 12:38:22.271
  STEP: finding the admissionregistration.k8s.io API group in the /apis discovery document @ 08/24/23 12:38:22.277
  STEP: finding the admissionregistration.k8s.io/v1 API group/version in the /apis discovery document @ 08/24/23 12:38:22.277
  STEP: fetching the /apis/admissionregistration.k8s.io discovery document @ 08/24/23 12:38:22.277
  STEP: finding the admissionregistration.k8s.io/v1 API group/version in the /apis/admissionregistration.k8s.io discovery document @ 08/24/23 12:38:22.28
  STEP: fetching the /apis/admissionregistration.k8s.io/v1 discovery document @ 08/24/23 12:38:22.281
  STEP: finding mutatingwebhookconfigurations and validatingwebhookconfigurations resources in the /apis/admissionregistration.k8s.io/v1 discovery document @ 08/24/23 12:38:22.285
  Aug 24 12:38:22.285: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "webhook-261" for this suite. @ 08/24/23 12:38:22.378
  STEP: Destroying namespace "webhook-markers-9263" for this suite. @ 08/24/23 12:38:22.394
• [3.598 seconds]
------------------------------
SSSSSSSSSSS
------------------------------
[sig-apps] CronJob should not schedule jobs when suspended [Slow] [Conformance]
test/e2e/apps/cronjob.go:97
  STEP: Creating a kubernetes client @ 08/24/23 12:38:22.408
  Aug 24 12:38:22.408: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename cronjob @ 08/24/23 12:38:22.409
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 12:38:22.473
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 12:38:22.48
  STEP: Creating a suspended cronjob @ 08/24/23 12:38:22.487
  STEP: Ensuring no jobs are scheduled @ 08/24/23 12:38:22.5
  E0824 12:38:22.642113      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:38:23.642974      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:38:24.643380      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:38:25.643697      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:38:26.644398      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:38:27.645110      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:38:28.645526      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:38:29.646045      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:38:30.647107      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:38:31.647484      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:38:32.647609      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:38:33.647751      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:38:34.648362      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:38:35.648429      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:38:36.649314      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:38:37.649363      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:38:38.649482      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:38:39.649800      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:38:40.650327      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:38:41.650506      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:38:42.650644      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:38:43.650832      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:38:44.651578      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:38:45.651751      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:38:46.652633      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:38:47.652826      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:38:48.653761      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:38:49.654081      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:38:50.655015      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:38:51.655197      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:38:52.655605      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:38:53.655976      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:38:54.656157      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:38:55.656808      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:38:56.657534      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:38:57.657575      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:38:58.658481      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:38:59.658822      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:39:00.659278      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:39:01.659456      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:39:02.660436      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:39:03.660898      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:39:04.661939      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:39:05.662439      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:39:06.662602      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:39:07.663075      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:39:08.663378      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:39:09.663689      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:39:10.663697      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:39:11.663906      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:39:12.664253      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:39:13.664581      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:39:14.664762      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:39:15.665125      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:39:16.665186      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:39:17.665248      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:39:18.665340      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:39:19.665566      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:39:20.665652      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:39:21.665793      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:39:22.666446      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:39:23.667176      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:39:24.668105      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:39:25.668461      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:39:26.669193      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:39:27.670195      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:39:28.670252      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:39:29.670448      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:39:30.670631      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:39:31.670792      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:39:32.671415      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:39:33.671505      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:39:34.671687      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:39:35.672018      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:39:36.672768      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:39:37.673566      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:39:38.674129      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:39:39.674526      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:39:40.674693      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:39:41.675013      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:39:42.675425      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:39:43.675794      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:39:44.676502      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:39:45.676781      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:39:46.677496      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:39:47.678466      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:39:48.679404      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:39:49.679803      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:39:50.680418      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:39:51.680675      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:39:52.681750      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:39:53.682132      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:39:54.682943      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:39:55.683356      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:39:56.684056      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:39:57.685051      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:39:58.685133      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:39:59.685300      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:40:00.686195      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:40:01.686452      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:40:02.687366      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:40:03.687350      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:40:04.687663      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:40:05.687852      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:40:06.688665      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:40:07.688793      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:40:08.689263      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:40:09.689720      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:40:10.690618      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:40:11.690899      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:40:12.691409      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:40:13.692039      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:40:14.692843      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:40:15.693016      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:40:16.693927      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:40:17.694262      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:40:18.695223      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:40:19.695701      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:40:20.696662      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:40:21.696999      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:40:22.697897      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:40:23.698050      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:40:24.698139      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:40:25.698480      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:40:26.699499      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:40:27.700356      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:40:28.701272      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:40:29.701560      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:40:30.702600      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:40:31.702804      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:40:32.703503      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:40:33.703659      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:40:34.704534      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:40:35.704754      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:40:36.704980      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:40:37.705131      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:40:38.706215      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:40:39.706564      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:40:40.707518      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:40:41.707703      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:40:42.707826      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:40:43.708473      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:40:44.709623      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:40:45.709956      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:40:46.710069      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:40:47.710733      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:40:48.711100      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:40:49.711834      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:40:50.712010      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:40:51.712090      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:40:52.715344      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:40:53.715708      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:40:54.715832      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:40:55.715966      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:40:56.716675      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:40:57.716825      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:40:58.716994      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:40:59.717097      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:41:00.717683      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:41:01.717777      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:41:02.718420      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:41:03.718694      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:41:04.719672      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:41:05.720483      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:41:06.720894      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:41:07.721691      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:41:08.722487      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:41:09.722622      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:41:10.723705      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:41:11.724029      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:41:12.725274      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:41:13.726066      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:41:14.726767      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:41:15.727408      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:41:16.728323      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:41:17.728472      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:41:18.728923      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:41:19.729147      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:41:20.730131      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:41:21.730641      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:41:22.730759      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:41:23.730881      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:41:24.731777      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:41:25.732277      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:41:26.732982      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:41:27.733065      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:41:28.733489      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:41:29.734057      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:41:30.735100      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:41:31.735253      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:41:32.735318      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:41:33.735649      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:41:34.735959      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:41:35.736147      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:41:36.736378      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:41:37.736411      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:41:38.737259      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:41:39.737633      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:41:40.738682      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:41:41.738994      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:41:42.739766      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:41:43.740490      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:41:44.741428      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:41:45.741569      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:41:46.741736      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:41:47.742204      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:41:48.742437      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:41:49.742755      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:41:50.743773      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:41:51.743909      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:41:52.744199      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:41:53.744515      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:41:54.745024      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:41:55.745449      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:41:56.746031      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:41:57.746223      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:41:58.746933      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:41:59.747241      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:42:00.748112      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:42:01.748457      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:42:02.748915      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:42:03.749128      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:42:04.749197      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:42:05.749434      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:42:06.750177      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:42:07.750364      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:42:08.750762      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:42:09.751090      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:42:10.751129      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:42:11.751457      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:42:12.751593      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:42:13.752061      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:42:14.753047      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:42:15.753263      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:42:16.754237      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:42:17.755089      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:42:18.756062      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:42:19.756221      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:42:20.756908      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:42:21.757356      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:42:22.758057      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:42:23.758500      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:42:24.758883      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:42:25.759794      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:42:26.760899      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:42:27.760994      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:42:28.761703      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:42:29.762075      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:42:30.762993      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:42:31.763750      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:42:32.764274      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:42:33.764550      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:42:34.765592      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:42:35.765851      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:42:36.766862      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:42:37.767669      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:42:38.767981      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:42:39.768399      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:42:40.769300      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:42:41.769364      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:42:42.770034      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:42:43.770795      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:42:44.771342      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:42:45.771691      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:42:46.772444      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:42:47.772521      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:42:48.772739      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:42:49.772947      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:42:50.773633      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:42:51.774026      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:42:52.774653      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:42:53.774825      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:42:54.775557      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:42:55.775897      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:42:56.776841      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:42:57.777897      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:42:58.778035      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:42:59.778192      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:43:00.778855      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:43:01.779222      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:43:02.780150      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:43:03.780579      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:43:04.780824      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:43:05.781581      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:43:06.781924      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:43:07.782072      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:43:08.782855      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:43:09.783273      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:43:10.784335      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:43:11.784857      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:43:12.785020      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:43:13.785628      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:43:14.786556      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:43:15.787119      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:43:16.787504      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:43:17.787506      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:43:18.788095      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:43:19.788272      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:43:20.789082      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:43:21.789792      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Ensuring no job exists by listing jobs explicitly @ 08/24/23 12:43:22.521
  STEP: Removing cronjob @ 08/24/23 12:43:22.528
  Aug 24 12:43:22.543: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "cronjob-1446" for this suite. @ 08/24/23 12:43:22.553
• [300.162 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-cli] Kubectl client Proxy server should support proxy with --port 0  [Conformance]
test/e2e/kubectl/kubectl.go:1781
  STEP: Creating a kubernetes client @ 08/24/23 12:43:22.57
  Aug 24 12:43:22.570: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename kubectl @ 08/24/23 12:43:22.57
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 12:43:22.604
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 12:43:22.611
  STEP: starting the proxy server @ 08/24/23 12:43:22.617
  Aug 24 12:43:22.617: INFO: Asynchronously running '/usr/local/bin/kubectl kubectl --kubeconfig=/tmp/kubeconfig-1002171096 --namespace=kubectl-3712 proxy -p 0 --disable-filter'
  STEP: curling proxy /api/ output @ 08/24/23 12:43:22.667
  Aug 24 12:43:22.686: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "kubectl-3712" for this suite. @ 08/24/23 12:43:22.695
• [0.140 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-auth] Certificates API [Privileged:ClusterAdmin] should support CSR API operations [Conformance]
test/e2e/auth/certificates.go:200
  STEP: Creating a kubernetes client @ 08/24/23 12:43:22.711
  Aug 24 12:43:22.711: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename certificates @ 08/24/23 12:43:22.712
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 12:43:22.742
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 12:43:22.748
  E0824 12:43:22.790601      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: getting /apis @ 08/24/23 12:43:23.296
  STEP: getting /apis/certificates.k8s.io @ 08/24/23 12:43:23.305
  STEP: getting /apis/certificates.k8s.io/v1 @ 08/24/23 12:43:23.308
  STEP: creating @ 08/24/23 12:43:23.311
  STEP: getting @ 08/24/23 12:43:23.347
  STEP: listing @ 08/24/23 12:43:23.353
  STEP: watching @ 08/24/23 12:43:23.361
  Aug 24 12:43:23.361: INFO: starting watch
  STEP: patching @ 08/24/23 12:43:23.364
  STEP: updating @ 08/24/23 12:43:23.378
  Aug 24 12:43:23.390: INFO: waiting for watch events with expected annotations
  Aug 24 12:43:23.390: INFO: saw patched and updated annotations
  STEP: getting /approval @ 08/24/23 12:43:23.39
  STEP: patching /approval @ 08/24/23 12:43:23.397
  STEP: updating /approval @ 08/24/23 12:43:23.411
  STEP: getting /status @ 08/24/23 12:43:23.424
  STEP: patching /status @ 08/24/23 12:43:23.433
  STEP: updating /status @ 08/24/23 12:43:23.451
  STEP: deleting @ 08/24/23 12:43:23.467
  STEP: deleting a collection @ 08/24/23 12:43:23.498
  Aug 24 12:43:23.531: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "certificates-5070" for this suite. @ 08/24/23 12:43:23.541
• [0.844 seconds]
------------------------------
SSSSSSSSSSSSSSSSSS
------------------------------
[sig-apps] StatefulSet Basic StatefulSet functionality [StatefulSetBasic] Burst scaling should run to completion even with unhealthy pods [Slow] [Conformance]
test/e2e/apps/statefulset.go:703
  STEP: Creating a kubernetes client @ 08/24/23 12:43:23.557
  Aug 24 12:43:23.557: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename statefulset @ 08/24/23 12:43:23.558
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 12:43:23.626
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 12:43:23.632
  STEP: Creating service test in namespace statefulset-2979 @ 08/24/23 12:43:23.639
  STEP: Creating stateful set ss in namespace statefulset-2979 @ 08/24/23 12:43:23.651
  STEP: Waiting until all stateful set ss replicas will be running in namespace statefulset-2979 @ 08/24/23 12:43:23.664
  Aug 24 12:43:23.673: INFO: Found 0 stateful pods, waiting for 1
  E0824 12:43:23.790705      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:43:24.790727      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:43:25.790914      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:43:26.791078      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:43:27.791370      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:43:28.791549      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:43:29.791729      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:43:30.791917      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:43:31.792052      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:43:32.792250      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 12:43:33.683: INFO: Waiting for pod ss-0 to enter Running - Ready=true, currently Running - Ready=true
  STEP: Confirming that stateful set scale up will not halt with unhealthy stateful pod @ 08/24/23 12:43:33.683
  Aug 24 12:43:33.693: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1002171096 --namespace=statefulset-2979 exec ss-0 -- /bin/sh -x -c mv -v /usr/local/apache2/htdocs/index.html /tmp/ || true'
  E0824 12:43:33.793047      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 12:43:33.935: INFO: stderr: "+ mv -v /usr/local/apache2/htdocs/index.html /tmp/\n"
  Aug 24 12:43:33.935: INFO: stdout: "'/usr/local/apache2/htdocs/index.html' -> '/tmp/index.html'\n"
  Aug 24 12:43:33.935: INFO: stdout of mv -v /usr/local/apache2/htdocs/index.html /tmp/ || true on ss-0: '/usr/local/apache2/htdocs/index.html' -> '/tmp/index.html'

  Aug 24 12:43:33.946: INFO: Waiting for pod ss-0 to enter Running - Ready=false, currently Running - Ready=true
  E0824 12:43:34.793228      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:43:35.793527      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:43:36.794053      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:43:37.794884      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:43:38.794966      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:43:39.795231      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:43:40.795545      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:43:41.795664      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:43:42.796331      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:43:43.796583      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 12:43:43.958: INFO: Waiting for pod ss-0 to enter Running - Ready=false, currently Running - Ready=false
  Aug 24 12:43:43.958: INFO: Waiting for statefulset status.readyReplicas updated to 0
  Aug 24 12:43:44.011: INFO: POD   NODE                                            PHASE    GRACE  CONDITIONS
  Aug 24 12:43:44.011: INFO: ss-0  scw-conformance-default-2af6d8b4c6264cc5b9e5e6  Running         [{Initialized True 0001-01-01 00:00:00 +0000 UTC 2023-08-24 12:43:23 +0000 UTC  } {Ready False 0001-01-01 00:00:00 +0000 UTC 2023-08-24 12:43:34 +0000 UTC ContainersNotReady containers with unready status: [webserver]} {ContainersReady False 0001-01-01 00:00:00 +0000 UTC 2023-08-24 12:43:34 +0000 UTC ContainersNotReady containers with unready status: [webserver]} {PodScheduled True 0001-01-01 00:00:00 +0000 UTC 2023-08-24 12:43:23 +0000 UTC  }]
  Aug 24 12:43:44.011: INFO: 
  Aug 24 12:43:44.011: INFO: StatefulSet ss has not reached scale 3, at 1
  E0824 12:43:44.796772      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 12:43:45.021: INFO: Verifying statefulset ss doesn't scale past 3 for another 8.980799404s
  E0824 12:43:45.797012      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 12:43:46.031: INFO: Verifying statefulset ss doesn't scale past 3 for another 7.971561865s
  E0824 12:43:46.797066      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 12:43:47.042: INFO: Verifying statefulset ss doesn't scale past 3 for another 6.960696056s
  E0824 12:43:47.798150      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 12:43:48.054: INFO: Verifying statefulset ss doesn't scale past 3 for another 5.949266226s
  E0824 12:43:48.798968      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 12:43:49.064: INFO: Verifying statefulset ss doesn't scale past 3 for another 4.938561869s
  E0824 12:43:49.799477      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 12:43:50.076: INFO: Verifying statefulset ss doesn't scale past 3 for another 3.927883292s
  E0824 12:43:50.799601      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 12:43:51.085: INFO: Verifying statefulset ss doesn't scale past 3 for another 2.91617137s
  E0824 12:43:51.799857      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 12:43:52.096: INFO: Verifying statefulset ss doesn't scale past 3 for another 1.906302481s
  E0824 12:43:52.800206      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 12:43:53.108: INFO: Verifying statefulset ss doesn't scale past 3 for another 896.202477ms
  E0824 12:43:53.800590      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Scaling up stateful set ss to 3 replicas and waiting until all of them will be running in namespace statefulset-2979 @ 08/24/23 12:43:54.109
  Aug 24 12:43:54.121: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1002171096 --namespace=statefulset-2979 exec ss-0 -- /bin/sh -x -c mv -v /tmp/index.html /usr/local/apache2/htdocs/ || true'
  Aug 24 12:43:54.387: INFO: stderr: "+ mv -v /tmp/index.html /usr/local/apache2/htdocs/\n"
  Aug 24 12:43:54.387: INFO: stdout: "'/tmp/index.html' -> '/usr/local/apache2/htdocs/index.html'\n"
  Aug 24 12:43:54.387: INFO: stdout of mv -v /tmp/index.html /usr/local/apache2/htdocs/ || true on ss-0: '/tmp/index.html' -> '/usr/local/apache2/htdocs/index.html'

  Aug 24 12:43:54.387: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1002171096 --namespace=statefulset-2979 exec ss-1 -- /bin/sh -x -c mv -v /tmp/index.html /usr/local/apache2/htdocs/ || true'
  Aug 24 12:43:54.646: INFO: stderr: "+ mv -v /tmp/index.html /usr/local/apache2/htdocs/\nmv: can't rename '/tmp/index.html': No such file or directory\n+ true\n"
  Aug 24 12:43:54.646: INFO: stdout: "'/tmp/index.html' -> '/usr/local/apache2/htdocs/index.html'\n"
  Aug 24 12:43:54.646: INFO: stdout of mv -v /tmp/index.html /usr/local/apache2/htdocs/ || true on ss-1: '/tmp/index.html' -> '/usr/local/apache2/htdocs/index.html'

  Aug 24 12:43:54.646: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1002171096 --namespace=statefulset-2979 exec ss-2 -- /bin/sh -x -c mv -v /tmp/index.html /usr/local/apache2/htdocs/ || true'
  E0824 12:43:54.801717      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 12:43:54.885: INFO: stderr: "+ mv -v /tmp/index.html /usr/local/apache2/htdocs/\nmv: can't rename '/tmp/index.html': No such file or directory\n+ true\n"
  Aug 24 12:43:54.885: INFO: stdout: "'/tmp/index.html' -> '/usr/local/apache2/htdocs/index.html'\n"
  Aug 24 12:43:54.885: INFO: stdout of mv -v /tmp/index.html /usr/local/apache2/htdocs/ || true on ss-2: '/tmp/index.html' -> '/usr/local/apache2/htdocs/index.html'

  Aug 24 12:43:54.895: INFO: Waiting for pod ss-0 to enter Running - Ready=true, currently Running - Ready=false
  E0824 12:43:55.802000      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:43:56.802378      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:43:57.803272      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:43:58.803707      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:43:59.803829      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:44:00.804046      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:44:01.804212      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:44:02.804411      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:44:03.804570      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:44:04.804770      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 12:44:04.906: INFO: Waiting for pod ss-0 to enter Running - Ready=true, currently Running - Ready=true
  Aug 24 12:44:04.906: INFO: Waiting for pod ss-1 to enter Running - Ready=true, currently Running - Ready=true
  Aug 24 12:44:04.906: INFO: Waiting for pod ss-2 to enter Running - Ready=true, currently Running - Ready=true
  STEP: Scale down will not halt with unhealthy stateful pod @ 08/24/23 12:44:04.906
  Aug 24 12:44:04.917: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1002171096 --namespace=statefulset-2979 exec ss-0 -- /bin/sh -x -c mv -v /usr/local/apache2/htdocs/index.html /tmp/ || true'
  Aug 24 12:44:05.174: INFO: stderr: "+ mv -v /usr/local/apache2/htdocs/index.html /tmp/\n"
  Aug 24 12:44:05.174: INFO: stdout: "'/usr/local/apache2/htdocs/index.html' -> '/tmp/index.html'\n"
  Aug 24 12:44:05.174: INFO: stdout of mv -v /usr/local/apache2/htdocs/index.html /tmp/ || true on ss-0: '/usr/local/apache2/htdocs/index.html' -> '/tmp/index.html'

  Aug 24 12:44:05.175: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1002171096 --namespace=statefulset-2979 exec ss-1 -- /bin/sh -x -c mv -v /usr/local/apache2/htdocs/index.html /tmp/ || true'
  Aug 24 12:44:05.424: INFO: stderr: "+ mv -v /usr/local/apache2/htdocs/index.html /tmp/\n"
  Aug 24 12:44:05.424: INFO: stdout: "'/usr/local/apache2/htdocs/index.html' -> '/tmp/index.html'\n"
  Aug 24 12:44:05.424: INFO: stdout of mv -v /usr/local/apache2/htdocs/index.html /tmp/ || true on ss-1: '/usr/local/apache2/htdocs/index.html' -> '/tmp/index.html'

  Aug 24 12:44:05.424: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1002171096 --namespace=statefulset-2979 exec ss-2 -- /bin/sh -x -c mv -v /usr/local/apache2/htdocs/index.html /tmp/ || true'
  Aug 24 12:44:05.672: INFO: stderr: "+ mv -v /usr/local/apache2/htdocs/index.html /tmp/\n"
  Aug 24 12:44:05.672: INFO: stdout: "'/usr/local/apache2/htdocs/index.html' -> '/tmp/index.html'\n"
  Aug 24 12:44:05.672: INFO: stdout of mv -v /usr/local/apache2/htdocs/index.html /tmp/ || true on ss-2: '/usr/local/apache2/htdocs/index.html' -> '/tmp/index.html'

  Aug 24 12:44:05.672: INFO: Waiting for statefulset status.readyReplicas updated to 0
  Aug 24 12:44:05.680: INFO: Waiting for statefulset status.readyReplicas to become 0, currently 3
  E0824 12:44:05.805732      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:44:06.806107      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:44:07.806840      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:44:08.807049      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:44:09.807278      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:44:10.807864      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:44:11.808148      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:44:12.809095      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:44:13.808920      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:44:14.809287      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 12:44:15.699: INFO: Waiting for pod ss-0 to enter Running - Ready=false, currently Running - Ready=false
  Aug 24 12:44:15.699: INFO: Waiting for pod ss-1 to enter Running - Ready=false, currently Running - Ready=false
  Aug 24 12:44:15.699: INFO: Waiting for pod ss-2 to enter Running - Ready=false, currently Running - Ready=false
  Aug 24 12:44:15.730: INFO: POD   NODE                                            PHASE    GRACE  CONDITIONS
  Aug 24 12:44:15.730: INFO: ss-0  scw-conformance-default-2af6d8b4c6264cc5b9e5e6  Running         [{Initialized True 0001-01-01 00:00:00 +0000 UTC 2023-08-24 12:43:23 +0000 UTC  } {Ready False 0001-01-01 00:00:00 +0000 UTC 2023-08-24 12:44:06 +0000 UTC ContainersNotReady containers with unready status: [webserver]} {ContainersReady False 0001-01-01 00:00:00 +0000 UTC 2023-08-24 12:44:06 +0000 UTC ContainersNotReady containers with unready status: [webserver]} {PodScheduled True 0001-01-01 00:00:00 +0000 UTC 2023-08-24 12:43:23 +0000 UTC  }]
  Aug 24 12:44:15.730: INFO: ss-1  scw-conformance-default-ecf11ec729064adba7e270  Running         [{Initialized True 0001-01-01 00:00:00 +0000 UTC 2023-08-24 12:43:44 +0000 UTC  } {Ready False 0001-01-01 00:00:00 +0000 UTC 2023-08-24 12:44:06 +0000 UTC ContainersNotReady containers with unready status: [webserver]} {ContainersReady False 0001-01-01 00:00:00 +0000 UTC 2023-08-24 12:44:06 +0000 UTC ContainersNotReady containers with unready status: [webserver]} {PodScheduled True 0001-01-01 00:00:00 +0000 UTC 2023-08-24 12:43:44 +0000 UTC  }]
  Aug 24 12:44:15.730: INFO: ss-2  scw-conformance-default-2af6d8b4c6264cc5b9e5e6  Running         [{Initialized True 0001-01-01 00:00:00 +0000 UTC 2023-08-24 12:43:44 +0000 UTC  } {Ready False 0001-01-01 00:00:00 +0000 UTC 2023-08-24 12:44:06 +0000 UTC ContainersNotReady containers with unready status: [webserver]} {ContainersReady False 0001-01-01 00:00:00 +0000 UTC 2023-08-24 12:44:06 +0000 UTC ContainersNotReady containers with unready status: [webserver]} {PodScheduled True 0001-01-01 00:00:00 +0000 UTC 2023-08-24 12:43:44 +0000 UTC  }]
  Aug 24 12:44:15.730: INFO: 
  Aug 24 12:44:15.730: INFO: StatefulSet ss has not reached scale 0, at 3
  E0824 12:44:15.810215      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 12:44:16.740: INFO: Verifying statefulset ss doesn't scale past 0 for another 8.989443222s
  E0824 12:44:16.810963      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 12:44:17.751: INFO: Verifying statefulset ss doesn't scale past 0 for another 7.979957539s
  E0824 12:44:17.811598      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 12:44:18.761: INFO: Verifying statefulset ss doesn't scale past 0 for another 6.969056551s
  E0824 12:44:18.812377      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 12:44:19.772: INFO: Verifying statefulset ss doesn't scale past 0 for another 5.95931313s
  E0824 12:44:19.812476      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 12:44:20.783: INFO: Verifying statefulset ss doesn't scale past 0 for another 4.948159191s
  E0824 12:44:20.813480      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 12:44:21.800: INFO: Verifying statefulset ss doesn't scale past 0 for another 3.937118911s
  E0824 12:44:21.814421      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 12:44:22.811: INFO: Verifying statefulset ss doesn't scale past 0 for another 2.919896016s
  E0824 12:44:22.814648      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:44:23.815326      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 12:44:23.823: INFO: Verifying statefulset ss doesn't scale past 0 for another 1.908801836s
  E0824 12:44:24.815864      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 12:44:24.832: INFO: Verifying statefulset ss doesn't scale past 0 for another 896.47205ms
  E0824 12:44:25.816116      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Scaling down stateful set ss to 0 replicas and waiting until none of pods will run in namespacestatefulset-2979 @ 08/24/23 12:44:25.832
  Aug 24 12:44:25.844: INFO: Scaling statefulset ss to 0
  Aug 24 12:44:25.875: INFO: Waiting for statefulset status.replicas updated to 0
  Aug 24 12:44:25.884: INFO: Deleting all statefulset in ns statefulset-2979
  Aug 24 12:44:25.892: INFO: Scaling statefulset ss to 0
  Aug 24 12:44:25.924: INFO: Waiting for statefulset status.replicas updated to 0
  Aug 24 12:44:25.932: INFO: Deleting statefulset ss
  Aug 24 12:44:25.964: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "statefulset-2979" for this suite. @ 08/24/23 12:44:25.973
• [62.434 seconds]
------------------------------
S
------------------------------
[sig-network] EndpointSlice should create Endpoints and EndpointSlices for Pods matching a Service [Conformance]
test/e2e/network/endpointslice.go:207
  STEP: Creating a kubernetes client @ 08/24/23 12:44:25.991
  Aug 24 12:44:25.991: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename endpointslice @ 08/24/23 12:44:25.992
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 12:44:26.022
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 12:44:26.06
  E0824 12:44:26.816216      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:44:27.816383      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:44:28.816531      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:44:29.816650      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:44:30.816823      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: referencing a single matching pod @ 08/24/23 12:44:31.27
  E0824 12:44:31.817872      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:44:32.818410      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:44:33.818692      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:44:34.819008      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:44:35.819572      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: referencing matching pods with named port @ 08/24/23 12:44:36.288
  E0824 12:44:36.820451      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:44:37.820638      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:44:38.820759      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:44:39.820926      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:44:40.821276      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: creating empty Endpoints and EndpointSlices for no matching Pods @ 08/24/23 12:44:41.308
  E0824 12:44:41.821501      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:44:42.822265      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:44:43.822390      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:44:44.822685      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:44:45.822779      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: recreating EndpointSlices after they've been deleted @ 08/24/23 12:44:46.329
  Aug 24 12:44:46.377: INFO: EndpointSlice for Service endpointslice-9236/example-named-port not found
  E0824 12:44:46.822853      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:44:47.823011      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:44:48.823123      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:44:49.823533      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:44:50.823665      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:44:51.824639      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:44:52.825192      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:44:53.825573      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:44:54.825973      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:44:55.826355      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 12:44:56.404: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "endpointslice-9236" for this suite. @ 08/24/23 12:44:56.414
• [30.439 seconds]
------------------------------
SSSSSSSSSSSSSSSSS
------------------------------
[sig-node] Container Runtime blackbox test on terminated container should report termination message from file when pod succeeds and TerminationMessagePolicy FallbackToLogsOnError is set [NodeConformance] [Conformance]
test/e2e/common/node/runtime.go:248
  STEP: Creating a kubernetes client @ 08/24/23 12:44:56.43
  Aug 24 12:44:56.430: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename container-runtime @ 08/24/23 12:44:56.432
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 12:44:56.47
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 12:44:56.477
  STEP: create the container @ 08/24/23 12:44:56.484
  W0824 12:44:56.505079      22 warnings.go:70] metadata.name: this is used in the Pod's hostname, which can result in surprising behavior; a DNS label is recommended: [must be no more than 63 characters]
  STEP: wait for the container to reach Succeeded @ 08/24/23 12:44:56.505
  E0824 12:44:56.827406      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:44:57.827441      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:44:58.828322      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: get the container status @ 08/24/23 12:44:59.582
  STEP: the container should be terminated @ 08/24/23 12:44:59.592
  STEP: the termination message should be set @ 08/24/23 12:44:59.592
  Aug 24 12:44:59.592: INFO: Expected: &{OK} to match Container's Termination Message: OK --
  STEP: delete the container @ 08/24/23 12:44:59.592
  Aug 24 12:44:59.616: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "container-runtime-9415" for this suite. @ 08/24/23 12:44:59.633
• [3.214 seconds]
------------------------------
SSSSSSSSSSSSSS
------------------------------
[sig-scheduling] SchedulerPreemption [Serial] PriorityClass endpoints verify PriorityClass endpoints can be operated with different HTTP methods [Conformance]
test/e2e/scheduling/preemption.go:812
  STEP: Creating a kubernetes client @ 08/24/23 12:44:59.646
  Aug 24 12:44:59.646: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename sched-preemption @ 08/24/23 12:44:59.647
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 12:44:59.676
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 12:44:59.683
  Aug 24 12:44:59.718: INFO: Waiting up to 1m0s for all nodes to be ready
  E0824 12:44:59.828858      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:45:00.829274      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:45:01.829363      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:45:02.829496      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:45:03.830171      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:45:04.830676      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:45:05.831081      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:45:06.831494      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:45:07.831493      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:45:08.831831      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:45:09.832376      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:45:10.832722      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:45:11.832760      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:45:12.833618      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:45:13.833770      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:45:14.833942      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:45:15.834390      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:45:16.834808      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:45:17.835334      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:45:18.835606      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:45:19.836610      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:45:20.836981      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:45:21.838010      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:45:22.838683      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:45:23.839106      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:45:24.839314      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:45:25.839594      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:45:26.839802      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:45:27.840054      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:45:28.840516      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:45:29.840591      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:45:30.840808      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:45:31.840888      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:45:32.841069      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:45:33.842107      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:45:34.842435      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:45:35.843406      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:45:36.843541      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:45:37.844539      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:45:38.845148      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:45:39.845944      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:45:40.846008      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:45:41.846696      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:45:42.847304      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:45:43.847883      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:45:44.847857      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:45:45.848841      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:45:46.849469      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:45:47.850492      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:45:48.850801      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:45:49.851259      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:45:50.851728      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:45:51.852789      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:45:52.852934      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:45:53.853661      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:45:54.853844      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:45:55.854223      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:45:56.854551      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:45:57.854917      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:45:58.855361      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 12:45:59.766: INFO: Waiting for terminating namespaces to be deleted...
  STEP: Creating a kubernetes client @ 08/24/23 12:45:59.778
  Aug 24 12:45:59.778: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename sched-preemption-path @ 08/24/23 12:45:59.779
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 12:45:59.813
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 12:45:59.819
  E0824 12:45:59.856155      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 12:45:59.862: INFO: PriorityClass.scheduling.k8s.io "p1" is invalid: value: Forbidden: may not be changed in an update.
  Aug 24 12:45:59.877: INFO: PriorityClass.scheduling.k8s.io "p2" is invalid: value: Forbidden: may not be changed in an update.
  Aug 24 12:45:59.924: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  Aug 24 12:46:00.016: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  E0824 12:46:00.856321      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Destroying namespace "sched-preemption-path-8877" for this suite. @ 08/24/23 12:46:01.067
  STEP: Destroying namespace "sched-preemption-4741" for this suite. @ 08/24/23 12:46:01.084
• [61.456 seconds]
------------------------------
SSSSSSSSSSSSSSS
------------------------------
[sig-node] KubeletManagedEtcHosts should test kubelet managed /etc/hosts file [LinuxOnly] [NodeConformance] [Conformance]
test/e2e/common/node/kubelet_etc_hosts.go:64
  STEP: Creating a kubernetes client @ 08/24/23 12:46:01.103
  Aug 24 12:46:01.103: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename e2e-kubelet-etc-hosts @ 08/24/23 12:46:01.103
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 12:46:01.18
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 12:46:01.186
  STEP: Setting up the test @ 08/24/23 12:46:01.193
  STEP: Creating hostNetwork=false pod @ 08/24/23 12:46:01.193
  E0824 12:46:01.856365      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:46:02.857125      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Creating hostNetwork=true pod @ 08/24/23 12:46:03.239
  E0824 12:46:03.857553      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:46:04.857626      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Running the test @ 08/24/23 12:46:05.278
  STEP: Verifying /etc/hosts of container is kubelet-managed for pod with hostNetwork=false @ 08/24/23 12:46:05.278
  Aug 24 12:46:05.278: INFO: ExecWithOptions {Command:[cat /etc/hosts] Namespace:e2e-kubelet-etc-hosts-9423 PodName:test-pod ContainerName:busybox-1 Stdin:<nil> CaptureStdout:true CaptureStderr:true PreserveWhitespace:false Quiet:false}
  Aug 24 12:46:05.278: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  Aug 24 12:46:05.279: INFO: ExecWithOptions: Clientset creation
  Aug 24 12:46:05.279: INFO: ExecWithOptions: execute(POST https://10.96.0.1:443/api/v1/namespaces/e2e-kubelet-etc-hosts-9423/pods/test-pod/exec?command=cat&command=%2Fetc%2Fhosts&container=busybox-1&container=busybox-1&stderr=true&stdout=true)
  Aug 24 12:46:05.402: INFO: Exec stderr: ""
  Aug 24 12:46:05.403: INFO: ExecWithOptions {Command:[cat /etc/hosts-original] Namespace:e2e-kubelet-etc-hosts-9423 PodName:test-pod ContainerName:busybox-1 Stdin:<nil> CaptureStdout:true CaptureStderr:true PreserveWhitespace:false Quiet:false}
  Aug 24 12:46:05.403: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  Aug 24 12:46:05.403: INFO: ExecWithOptions: Clientset creation
  Aug 24 12:46:05.404: INFO: ExecWithOptions: execute(POST https://10.96.0.1:443/api/v1/namespaces/e2e-kubelet-etc-hosts-9423/pods/test-pod/exec?command=cat&command=%2Fetc%2Fhosts-original&container=busybox-1&container=busybox-1&stderr=true&stdout=true)
  Aug 24 12:46:05.524: INFO: Exec stderr: ""
  Aug 24 12:46:05.524: INFO: ExecWithOptions {Command:[cat /etc/hosts] Namespace:e2e-kubelet-etc-hosts-9423 PodName:test-pod ContainerName:busybox-2 Stdin:<nil> CaptureStdout:true CaptureStderr:true PreserveWhitespace:false Quiet:false}
  Aug 24 12:46:05.524: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  Aug 24 12:46:05.525: INFO: ExecWithOptions: Clientset creation
  Aug 24 12:46:05.525: INFO: ExecWithOptions: execute(POST https://10.96.0.1:443/api/v1/namespaces/e2e-kubelet-etc-hosts-9423/pods/test-pod/exec?command=cat&command=%2Fetc%2Fhosts&container=busybox-2&container=busybox-2&stderr=true&stdout=true)
  Aug 24 12:46:05.635: INFO: Exec stderr: ""
  Aug 24 12:46:05.635: INFO: ExecWithOptions {Command:[cat /etc/hosts-original] Namespace:e2e-kubelet-etc-hosts-9423 PodName:test-pod ContainerName:busybox-2 Stdin:<nil> CaptureStdout:true CaptureStderr:true PreserveWhitespace:false Quiet:false}
  Aug 24 12:46:05.635: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  Aug 24 12:46:05.636: INFO: ExecWithOptions: Clientset creation
  Aug 24 12:46:05.636: INFO: ExecWithOptions: execute(POST https://10.96.0.1:443/api/v1/namespaces/e2e-kubelet-etc-hosts-9423/pods/test-pod/exec?command=cat&command=%2Fetc%2Fhosts-original&container=busybox-2&container=busybox-2&stderr=true&stdout=true)
  Aug 24 12:46:05.763: INFO: Exec stderr: ""
  STEP: Verifying /etc/hosts of container is not kubelet-managed since container specifies /etc/hosts mount @ 08/24/23 12:46:05.763
  Aug 24 12:46:05.764: INFO: ExecWithOptions {Command:[cat /etc/hosts] Namespace:e2e-kubelet-etc-hosts-9423 PodName:test-pod ContainerName:busybox-3 Stdin:<nil> CaptureStdout:true CaptureStderr:true PreserveWhitespace:false Quiet:false}
  Aug 24 12:46:05.764: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  Aug 24 12:46:05.765: INFO: ExecWithOptions: Clientset creation
  Aug 24 12:46:05.765: INFO: ExecWithOptions: execute(POST https://10.96.0.1:443/api/v1/namespaces/e2e-kubelet-etc-hosts-9423/pods/test-pod/exec?command=cat&command=%2Fetc%2Fhosts&container=busybox-3&container=busybox-3&stderr=true&stdout=true)
  E0824 12:46:05.857719      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 12:46:05.896: INFO: Exec stderr: ""
  Aug 24 12:46:05.896: INFO: ExecWithOptions {Command:[cat /etc/hosts-original] Namespace:e2e-kubelet-etc-hosts-9423 PodName:test-pod ContainerName:busybox-3 Stdin:<nil> CaptureStdout:true CaptureStderr:true PreserveWhitespace:false Quiet:false}
  Aug 24 12:46:05.896: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  Aug 24 12:46:05.897: INFO: ExecWithOptions: Clientset creation
  Aug 24 12:46:05.897: INFO: ExecWithOptions: execute(POST https://10.96.0.1:443/api/v1/namespaces/e2e-kubelet-etc-hosts-9423/pods/test-pod/exec?command=cat&command=%2Fetc%2Fhosts-original&container=busybox-3&container=busybox-3&stderr=true&stdout=true)
  Aug 24 12:46:06.015: INFO: Exec stderr: ""
  STEP: Verifying /etc/hosts content of container is not kubelet-managed for pod with hostNetwork=true @ 08/24/23 12:46:06.015
  Aug 24 12:46:06.015: INFO: ExecWithOptions {Command:[cat /etc/hosts] Namespace:e2e-kubelet-etc-hosts-9423 PodName:test-host-network-pod ContainerName:busybox-1 Stdin:<nil> CaptureStdout:true CaptureStderr:true PreserveWhitespace:false Quiet:false}
  Aug 24 12:46:06.015: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  Aug 24 12:46:06.015: INFO: ExecWithOptions: Clientset creation
  Aug 24 12:46:06.015: INFO: ExecWithOptions: execute(POST https://10.96.0.1:443/api/v1/namespaces/e2e-kubelet-etc-hosts-9423/pods/test-host-network-pod/exec?command=cat&command=%2Fetc%2Fhosts&container=busybox-1&container=busybox-1&stderr=true&stdout=true)
  Aug 24 12:46:06.133: INFO: Exec stderr: ""
  Aug 24 12:46:06.133: INFO: ExecWithOptions {Command:[cat /etc/hosts-original] Namespace:e2e-kubelet-etc-hosts-9423 PodName:test-host-network-pod ContainerName:busybox-1 Stdin:<nil> CaptureStdout:true CaptureStderr:true PreserveWhitespace:false Quiet:false}
  Aug 24 12:46:06.133: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  Aug 24 12:46:06.135: INFO: ExecWithOptions: Clientset creation
  Aug 24 12:46:06.135: INFO: ExecWithOptions: execute(POST https://10.96.0.1:443/api/v1/namespaces/e2e-kubelet-etc-hosts-9423/pods/test-host-network-pod/exec?command=cat&command=%2Fetc%2Fhosts-original&container=busybox-1&container=busybox-1&stderr=true&stdout=true)
  Aug 24 12:46:06.250: INFO: Exec stderr: ""
  Aug 24 12:46:06.250: INFO: ExecWithOptions {Command:[cat /etc/hosts] Namespace:e2e-kubelet-etc-hosts-9423 PodName:test-host-network-pod ContainerName:busybox-2 Stdin:<nil> CaptureStdout:true CaptureStderr:true PreserveWhitespace:false Quiet:false}
  Aug 24 12:46:06.250: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  Aug 24 12:46:06.251: INFO: ExecWithOptions: Clientset creation
  Aug 24 12:46:06.251: INFO: ExecWithOptions: execute(POST https://10.96.0.1:443/api/v1/namespaces/e2e-kubelet-etc-hosts-9423/pods/test-host-network-pod/exec?command=cat&command=%2Fetc%2Fhosts&container=busybox-2&container=busybox-2&stderr=true&stdout=true)
  Aug 24 12:46:06.412: INFO: Exec stderr: ""
  Aug 24 12:46:06.413: INFO: ExecWithOptions {Command:[cat /etc/hosts-original] Namespace:e2e-kubelet-etc-hosts-9423 PodName:test-host-network-pod ContainerName:busybox-2 Stdin:<nil> CaptureStdout:true CaptureStderr:true PreserveWhitespace:false Quiet:false}
  Aug 24 12:46:06.413: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  Aug 24 12:46:06.414: INFO: ExecWithOptions: Clientset creation
  Aug 24 12:46:06.414: INFO: ExecWithOptions: execute(POST https://10.96.0.1:443/api/v1/namespaces/e2e-kubelet-etc-hosts-9423/pods/test-host-network-pod/exec?command=cat&command=%2Fetc%2Fhosts-original&container=busybox-2&container=busybox-2&stderr=true&stdout=true)
  Aug 24 12:46:06.604: INFO: Exec stderr: ""
  Aug 24 12:46:06.604: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "e2e-kubelet-etc-hosts-9423" for this suite. @ 08/24/23 12:46:06.628
• [5.541 seconds]
------------------------------
S
------------------------------
[sig-api-machinery] ResourceQuota should create a ResourceQuota and capture the life of a pod. [Conformance]
test/e2e/apimachinery/resource_quota.go:232
  STEP: Creating a kubernetes client @ 08/24/23 12:46:06.644
  Aug 24 12:46:06.644: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename resourcequota @ 08/24/23 12:46:06.645
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 12:46:06.67
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 12:46:06.676
  STEP: Counting existing ResourceQuota @ 08/24/23 12:46:06.683
  E0824 12:46:06.858641      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:46:07.859092      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:46:08.859590      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:46:09.860546      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:46:10.861465      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Creating a ResourceQuota @ 08/24/23 12:46:11.69
  STEP: Ensuring resource quota status is calculated @ 08/24/23 12:46:11.702
  E0824 12:46:11.862062      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:46:12.862372      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Creating a Pod that fits quota @ 08/24/23 12:46:13.715
  STEP: Ensuring ResourceQuota status captures the pod usage @ 08/24/23 12:46:13.75
  E0824 12:46:13.862756      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:46:14.862817      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Not allowing a pod to be created that exceeds remaining quota @ 08/24/23 12:46:15.76
  STEP: Not allowing a pod to be created that exceeds remaining quota(validation on extended resources) @ 08/24/23 12:46:15.768
  STEP: Ensuring a pod cannot update its resource requirements @ 08/24/23 12:46:15.774
  STEP: Ensuring attempts to update pod resource requirements did not change quota usage @ 08/24/23 12:46:15.786
  E0824 12:46:15.863802      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:46:16.864855      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Deleting the pod @ 08/24/23 12:46:17.795
  STEP: Ensuring resource quota status released the pod usage @ 08/24/23 12:46:17.821
  E0824 12:46:17.865253      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:46:18.865499      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 12:46:19.831: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "resourcequota-9551" for this suite. @ 08/24/23 12:46:19.842
• [13.213 seconds]
------------------------------
SSSSSSSSSSSSS
------------------------------
[sig-apps] CronJob should not schedule new jobs when ForbidConcurrent [Slow] [Conformance]
test/e2e/apps/cronjob.go:125
  STEP: Creating a kubernetes client @ 08/24/23 12:46:19.858
  Aug 24 12:46:19.858: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename cronjob @ 08/24/23 12:46:19.859
  E0824 12:46:19.866485      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 12:46:19.891
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 12:46:19.898
  STEP: Creating a ForbidConcurrent cronjob @ 08/24/23 12:46:19.905
  STEP: Ensuring a job is scheduled @ 08/24/23 12:46:19.919
  E0824 12:46:20.867572      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:46:21.867939      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:46:22.868855      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:46:23.869116      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:46:24.869625      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:46:25.869794      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:46:26.870288      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:46:27.870805      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:46:28.871029      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:46:29.871319      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:46:30.871569      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:46:31.871554      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:46:32.871656      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:46:33.871847      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:46:34.871977      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:46:35.872128      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:46:36.872796      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:46:37.873291      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:46:38.873739      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:46:39.873957      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:46:40.874795      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:46:41.875077      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:46:42.875393      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:46:43.875828      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:46:44.876696      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:46:45.877082      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:46:46.877327      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:46:47.877609      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:46:48.878069      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:46:49.878487      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:46:50.878846      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:46:51.879296      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:46:52.879652      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:46:53.879779      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:46:54.879966      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:46:55.880296      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:46:56.881069      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:46:57.881555      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:46:58.881959      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:46:59.882119      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:47:00.882279      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:47:01.882773      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Ensuring exactly one is scheduled @ 08/24/23 12:47:01.93
  STEP: Ensuring exactly one running job exists by listing jobs explicitly @ 08/24/23 12:47:01.937
  STEP: Ensuring no more jobs are scheduled @ 08/24/23 12:47:01.945
  E0824 12:47:02.883378      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:47:03.883496      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:47:04.884403      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:47:05.884580      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:47:06.885107      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:47:07.885310      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:47:08.885427      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:47:09.885623      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:47:10.885753      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:47:11.885868      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:47:12.886108      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:47:13.886101      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:47:14.886270      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:47:15.886411      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:47:16.886858      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:47:17.887014      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:47:18.887282      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:47:19.888194      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:47:20.888371      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:47:21.888774      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:47:22.888923      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:47:23.889674      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:47:24.889874      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:47:25.890288      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:47:26.890941      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:47:27.891002      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:47:28.891691      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:47:29.892321      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:47:30.892505      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:47:31.893496      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:47:32.894304      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:47:33.894597      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:47:34.894759      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:47:35.894843      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:47:36.895067      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:47:37.895330      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:47:38.895494      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:47:39.895954      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:47:40.896205      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:47:41.896877      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:47:42.897812      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:47:43.898229      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:47:44.898328      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:47:45.898537      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:47:46.899477      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:47:47.899808      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:47:48.900831      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:47:49.901200      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:47:50.902125      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:47:51.902883      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:47:52.902953      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:47:53.903178      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:47:54.903383      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:47:55.903918      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:47:56.904754      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:47:57.905030      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:47:58.905155      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:47:59.905455      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:48:00.905817      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:48:01.906765      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:48:02.906945      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:48:03.907544      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:48:04.907690      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:48:05.908065      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:48:06.909056      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:48:07.909212      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:48:08.909427      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:48:09.909763      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:48:10.910640      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:48:11.911244      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:48:12.911364      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:48:13.911484      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:48:14.911648      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:48:15.911819      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:48:16.912819      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:48:17.913497      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:48:18.913665      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:48:19.914204      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:48:20.915120      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:48:21.915680      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:48:22.915839      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:48:23.916267      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:48:24.916469      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:48:25.916524      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:48:26.917553      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:48:27.917820      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:48:28.917936      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:48:29.918401      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:48:30.918630      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:48:31.919541      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:48:32.919650      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:48:33.919987      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:48:34.920135      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:48:35.920586      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:48:36.921010      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:48:37.921161      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:48:38.921576      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:48:39.921950      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:48:40.922186      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:48:41.922662      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:48:42.922805      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:48:43.922925      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:48:44.923204      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:48:45.923748      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:48:46.924028      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:48:47.924233      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:48:48.924706      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:48:49.925039      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:48:50.925190      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:48:51.925467      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:48:52.925644      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:48:53.925861      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:48:54.925966      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:48:55.926135      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:48:56.926999      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:48:57.927829      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:48:58.928023      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:48:59.928180      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:49:00.929145      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:49:01.929744      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:49:02.929906      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:49:03.930356      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:49:04.930525      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:49:05.930721      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:49:06.931333      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:49:07.931463      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:49:08.932178      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:49:09.932532      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:49:10.933096      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:49:11.933479      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:49:12.933762      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:49:13.934383      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:49:14.934543      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:49:15.934737      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:49:16.934921      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:49:17.935055      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:49:18.935854      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:49:19.935943      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:49:20.936099      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:49:21.936583      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:49:22.936872      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:49:23.937063      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:49:24.937292      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:49:25.937596      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:49:26.938010      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:49:27.938595      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:49:28.938739      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:49:29.938950      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:49:30.939118      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:49:31.939774      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:49:32.939896      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:49:33.940080      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:49:34.940275      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:49:35.940446      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:49:36.940933      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:49:37.941063      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:49:38.941275      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:49:39.941502      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:49:40.941696      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:49:41.942619      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:49:42.942779      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:49:43.942974      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:49:44.944067      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:49:45.944435      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:49:46.945344      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:49:47.945581      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:49:48.945776      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:49:49.946346      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:49:50.946556      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:49:51.946665      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:49:52.947597      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:49:53.948080      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:49:54.948304      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:49:55.949133      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:49:56.949472      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:49:57.950120      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:49:58.950308      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:49:59.951065      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:50:00.951318      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:50:01.952220      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:50:02.952545      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:50:03.952980      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:50:04.953198      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:50:05.954225      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:50:06.954984      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:50:07.955516      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:50:08.956214      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:50:09.956977      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:50:10.957171      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:50:11.957172      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:50:12.957350      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:50:13.957569      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:50:14.957920      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:50:15.958050      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:50:16.958931      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:50:17.959235      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:50:18.959367      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:50:19.960302      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:50:20.960609      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:50:21.961450      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:50:22.962010      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:50:23.962797      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:50:24.963065      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:50:25.963742      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:50:26.964089      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:50:27.964728      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:50:28.964925      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:50:29.965014      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:50:30.965235      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:50:31.965965      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:50:32.966247      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:50:33.967304      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:50:34.967783      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:50:35.968723      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:50:36.969895      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:50:37.970083      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:50:38.970228      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:50:39.970587      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:50:40.970726      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:50:41.971337      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:50:42.971605      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:50:43.971755      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:50:44.972310      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:50:45.972818      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:50:46.973702      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:50:47.974198      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:50:48.974300      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:50:49.975051      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:50:50.975263      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:50:51.976038      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:50:52.976375      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:50:53.977452      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:50:54.977881      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:50:55.978251      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:50:56.978914      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:50:57.979423      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:50:58.979532      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:50:59.979579      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:51:00.979943      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:51:01.980110      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:51:02.980291      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:51:03.980535      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:51:04.980773      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:51:05.981735      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:51:06.982749      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:51:07.983843      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:51:08.984165      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:51:09.984428      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:51:10.984724      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:51:11.985338      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:51:12.985751      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:51:13.986386      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:51:14.986941      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:51:15.987934      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:51:16.988821      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:51:17.989702      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:51:18.989818      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:51:19.990011      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:51:20.990174      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:51:21.990827      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:51:22.991445      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:51:23.991617      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:51:24.991962      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:51:25.992850      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:51:26.993730      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:51:27.994606      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:51:28.995479      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:51:29.995620      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:51:30.996089      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:51:31.996574      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:51:32.996916      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:51:33.997367      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:51:34.997488      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:51:35.998370      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:51:36.999352      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:51:37.999612      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:51:39.000067      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:51:40.000788      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:51:41.001291      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:51:42.001698      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:51:43.002338      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:51:44.003089      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:51:45.003525      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:51:46.003975      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:51:47.005069      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:51:48.005866      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:51:49.006280      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:51:50.007333      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:51:51.007775      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:51:52.007971      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:51:53.008340      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:51:54.009346      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:51:55.009550      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:51:56.010474      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:51:57.011119      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:51:58.011761      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:51:59.012157      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:52:00.012988      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:52:01.013656      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Removing cronjob @ 08/24/23 12:52:01.965
  Aug 24 12:52:01.979: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "cronjob-7081" for this suite. @ 08/24/23 12:52:01.99
• [342.151 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-network] Services should be able to change the type from NodePort to ExternalName [Conformance]
test/e2e/network/service.go:1533
  STEP: Creating a kubernetes client @ 08/24/23 12:52:02.009
  Aug 24 12:52:02.009: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename services @ 08/24/23 12:52:02.01
  E0824 12:52:02.014188      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 12:52:02.061
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 12:52:02.069
  STEP: creating a service nodeport-service with the type=NodePort in namespace services-1656 @ 08/24/23 12:52:02.077
  STEP: Creating active service to test reachability when its FQDN is referred as externalName for another service @ 08/24/23 12:52:02.115
  STEP: creating service externalsvc in namespace services-1656 @ 08/24/23 12:52:02.115
  STEP: creating replication controller externalsvc in namespace services-1656 @ 08/24/23 12:52:02.174
  I0824 12:52:02.352849      22 runners.go:197] Created replication controller with name: externalsvc, namespace: services-1656, replica count: 2
  E0824 12:52:03.014462      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:52:04.014558      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:52:05.014969      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  I0824 12:52:05.403789      22 runners.go:197] externalsvc Pods: 2 out of 2 created, 1 running, 1 pending, 0 waiting, 0 inactive, 0 terminating, 0 unknown, 0 runningButNotReady 
  E0824 12:52:06.015604      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:52:07.016071      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:52:08.015927      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  I0824 12:52:08.404754      22 runners.go:197] externalsvc Pods: 2 out of 2 created, 2 running, 0 pending, 0 waiting, 0 inactive, 0 terminating, 0 unknown, 0 runningButNotReady 
  STEP: changing the NodePort service to type=ExternalName @ 08/24/23 12:52:08.414
  Aug 24 12:52:08.458: INFO: Creating new exec pod
  E0824 12:52:09.016129      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:52:10.016204      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 12:52:10.491: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1002171096 --namespace=services-1656 exec execpodhvrkq -- /bin/sh -x -c nslookup nodeport-service.services-1656.svc.cluster.local'
  Aug 24 12:52:10.769: INFO: stderr: "+ nslookup nodeport-service.services-1656.svc.cluster.local\n"
  Aug 24 12:52:10.769: INFO: stdout: "Server:\t\t10.96.0.10\nAddress:\t10.96.0.10#53\n\nnodeport-service.services-1656.svc.cluster.local\tcanonical name = externalsvc.services-1656.svc.cluster.local.\nName:\texternalsvc.services-1656.svc.cluster.local\nAddress: 10.96.21.143\n\n"
  Aug 24 12:52:10.769: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: deleting ReplicationController externalsvc in namespace services-1656, will wait for the garbage collector to delete the pods @ 08/24/23 12:52:10.781
  Aug 24 12:52:10.855: INFO: Deleting ReplicationController externalsvc took: 15.358788ms
  Aug 24 12:52:10.955: INFO: Terminating ReplicationController externalsvc pods took: 100.455437ms
  E0824 12:52:11.016346      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:52:12.016908      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:52:13.017101      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 12:52:13.991: INFO: Cleaning up the NodePort to ExternalName test service
  STEP: Destroying namespace "services-1656" for this suite. @ 08/24/23 12:52:14.012
  E0824 12:52:14.018075      22 retrywatcher.go:129] "Watch failed" err="context canceled"
• [12.017 seconds]
------------------------------
SS
------------------------------
[sig-api-machinery] CustomResourceDefinition resources [Privileged:ClusterAdmin] custom resource defaulting for requests and from storage works  [Conformance]
test/e2e/apimachinery/custom_resource_definition.go:269
  STEP: Creating a kubernetes client @ 08/24/23 12:52:14.027
  Aug 24 12:52:14.027: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename custom-resource-definition @ 08/24/23 12:52:14.028
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 12:52:14.083
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 12:52:14.09
  Aug 24 12:52:14.097: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  E0824 12:52:15.018236      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:52:16.018531      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:52:17.019522      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 12:52:17.390: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "custom-resource-definition-9616" for this suite. @ 08/24/23 12:52:17.402
• [3.392 seconds]
------------------------------
SSSSSSSSSSSS
------------------------------
[sig-scheduling] SchedulerPreemption [Serial] validates lower priority pod preemption by critical pod [Conformance]
test/e2e/scheduling/preemption.go:224
  STEP: Creating a kubernetes client @ 08/24/23 12:52:17.419
  Aug 24 12:52:17.419: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename sched-preemption @ 08/24/23 12:52:17.42
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 12:52:17.452
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 12:52:17.459
  Aug 24 12:52:17.501: INFO: Waiting up to 1m0s for all nodes to be ready
  E0824 12:52:18.019787      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:52:19.019964      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:52:20.020558      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:52:21.021378      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:52:22.021863      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:52:23.022102      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:52:24.022310      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:52:25.022451      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:52:26.022858      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:52:27.022991      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:52:28.023212      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:52:29.023397      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:52:30.023641      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:52:31.023994      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:52:32.024527      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:52:33.024726      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:52:34.024907      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:52:35.025088      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:52:36.025152      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:52:37.026102      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:52:38.026309      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:52:39.026926      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:52:40.027587      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:52:41.027813      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:52:42.028260      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:52:43.028337      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:52:44.029145      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:52:45.029638      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:52:46.030575      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:52:47.031350      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:52:48.031479      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:52:49.031634      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:52:50.031726      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:52:51.032378      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:52:52.032526      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:52:53.032689      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:52:54.032883      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:52:55.033367      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:52:56.034312      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:52:57.035276      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:52:58.035367      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:52:59.035835      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:53:00.036021      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:53:01.036550      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:53:02.037549      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:53:03.037632      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:53:04.038505      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:53:05.038635      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:53:06.038753      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:53:07.038896      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:53:08.039806      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:53:09.040154      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:53:10.040530      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:53:11.040844      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:53:12.041625      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:53:13.041902      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:53:14.042830      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:53:15.042878      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:53:16.043272      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:53:17.044163      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 12:53:17.555: INFO: Waiting for terminating namespaces to be deleted...
  STEP: Create pods that use 4/5 of node resources. @ 08/24/23 12:53:17.562
  Aug 24 12:53:17.653: INFO: Created pod: pod0-0-sched-preemption-low-priority
  Aug 24 12:53:17.666: INFO: Created pod: pod0-1-sched-preemption-medium-priority
  Aug 24 12:53:17.764: INFO: Created pod: pod1-0-sched-preemption-medium-priority
  Aug 24 12:53:17.853: INFO: Created pod: pod1-1-sched-preemption-medium-priority
  STEP: Wait for pods to be scheduled. @ 08/24/23 12:53:17.853
  E0824 12:53:18.044587      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:53:19.044858      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Run a critical pod that use same resources as that of a lower priority pod @ 08/24/23 12:53:19.897
  E0824 12:53:20.045796      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:53:21.045999      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:53:22.046342      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:53:23.046856      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 12:53:24.030: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  E0824 12:53:24.047476      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Destroying namespace "sched-preemption-2241" for this suite. @ 08/24/23 12:53:24.131
• [66.726 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-node] Pods should delete a collection of pods [Conformance]
test/e2e/common/node/pods.go:846
  STEP: Creating a kubernetes client @ 08/24/23 12:53:24.148
  Aug 24 12:53:24.148: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename pods @ 08/24/23 12:53:24.149
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 12:53:24.183
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 12:53:24.19
  STEP: Create set of pods @ 08/24/23 12:53:24.198
  Aug 24 12:53:24.218: INFO: created test-pod-1
  Aug 24 12:53:24.231: INFO: created test-pod-2
  Aug 24 12:53:24.264: INFO: created test-pod-3
  STEP: waiting for all 3 pods to be running @ 08/24/23 12:53:24.264
  E0824 12:53:25.047689      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:53:26.047832      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: waiting for all pods to be deleted @ 08/24/23 12:53:26.435
  Aug 24 12:53:26.442: INFO: Pod quantity 3 is different from expected quantity 0
  E0824 12:53:27.048723      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 12:53:27.452: INFO: Pod quantity 3 is different from expected quantity 0
  E0824 12:53:28.048889      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 12:53:28.451: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "pods-6512" for this suite. @ 08/24/23 12:53:28.461
• [4.327 seconds]
------------------------------
S
------------------------------
[sig-node] PodTemplates should delete a collection of pod templates [Conformance]
test/e2e/common/node/podtemplates.go:122
  STEP: Creating a kubernetes client @ 08/24/23 12:53:28.475
  Aug 24 12:53:28.475: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename podtemplate @ 08/24/23 12:53:28.476
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 12:53:28.505
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 12:53:28.512
  STEP: Create set of pod templates @ 08/24/23 12:53:28.518
  Aug 24 12:53:28.530: INFO: created test-podtemplate-1
  Aug 24 12:53:28.540: INFO: created test-podtemplate-2
  Aug 24 12:53:28.553: INFO: created test-podtemplate-3
  STEP: get a list of pod templates with a label in the current namespace @ 08/24/23 12:53:28.554
  STEP: delete collection of pod templates @ 08/24/23 12:53:28.563
  Aug 24 12:53:28.563: INFO: requesting DeleteCollection of pod templates
  STEP: check that the list of pod templates matches the requested quantity @ 08/24/23 12:53:28.605
  Aug 24 12:53:28.605: INFO: requesting list of pod templates to confirm quantity
  Aug 24 12:53:28.613: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "podtemplate-1296" for this suite. @ 08/24/23 12:53:28.623
• [0.162 seconds]
------------------------------
SSSSSSSSSSSSSSSS
------------------------------
[sig-apps] ReplicationController should release no longer matching pods [Conformance]
test/e2e/apps/rc.go:103
  STEP: Creating a kubernetes client @ 08/24/23 12:53:28.639
  Aug 24 12:53:28.639: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename replication-controller @ 08/24/23 12:53:28.64
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 12:53:28.669
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 12:53:28.676
  STEP: Given a ReplicationController is created @ 08/24/23 12:53:28.683
  STEP: When the matched label of one of its pods change @ 08/24/23 12:53:28.693
  Aug 24 12:53:28.702: INFO: Pod name pod-release: Found 0 pods out of 1
  E0824 12:53:29.049103      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:53:30.049847      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:53:31.049899      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:53:32.050770      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:53:33.051218      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 12:53:33.713: INFO: Pod name pod-release: Found 1 pods out of 1
  STEP: Then the pod is released @ 08/24/23 12:53:33.735
  E0824 12:53:34.051381      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 12:53:34.762: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "replication-controller-9711" for this suite. @ 08/24/23 12:53:34.772
• [6.148 seconds]
------------------------------
SSSSSSSSSSSS
------------------------------
[sig-storage] Subpath Atomic writer volumes should support subpaths with downward pod [Conformance]
test/e2e/storage/subpath.go:91
  STEP: Creating a kubernetes client @ 08/24/23 12:53:34.788
  Aug 24 12:53:34.788: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename subpath @ 08/24/23 12:53:34.789
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 12:53:34.862
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 12:53:34.869
  STEP: Setting up data @ 08/24/23 12:53:34.877
  STEP: Creating pod pod-subpath-test-downwardapi-zhns @ 08/24/23 12:53:34.899
  STEP: Creating a pod to test atomic-volume-subpath @ 08/24/23 12:53:34.9
  E0824 12:53:35.051730      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:53:36.052402      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:53:37.053508      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:53:38.053982      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:53:39.055115      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:53:40.055507      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:53:41.056509      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:53:42.057152      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:53:43.057881      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:53:44.058333      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:53:45.058658      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:53:46.058823      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:53:47.058906      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:53:48.059106      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:53:49.059918      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:53:50.060202      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:53:51.060901      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:53:52.061652      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:53:53.062204      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:53:54.062865      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:53:55.063025      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:53:56.063126      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:53:57.064207      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:53:58.064648      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:53:59.064697      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Saw pod success @ 08/24/23 12:53:59.098
  Aug 24 12:53:59.106: INFO: Trying to get logs from node scw-conformance-default-ecf11ec729064adba7e270 pod pod-subpath-test-downwardapi-zhns container test-container-subpath-downwardapi-zhns: <nil>
  STEP: delete the pod @ 08/24/23 12:53:59.159
  STEP: Deleting pod pod-subpath-test-downwardapi-zhns @ 08/24/23 12:53:59.196
  Aug 24 12:53:59.196: INFO: Deleting pod "pod-subpath-test-downwardapi-zhns" in namespace "subpath-5310"
  Aug 24 12:53:59.204: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "subpath-5310" for this suite. @ 08/24/23 12:53:59.217
• [24.445 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-apps] CronJob should schedule multiple jobs concurrently [Conformance]
test/e2e/apps/cronjob.go:70
  STEP: Creating a kubernetes client @ 08/24/23 12:53:59.235
  Aug 24 12:53:59.235: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename cronjob @ 08/24/23 12:53:59.235
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 12:53:59.267
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 12:53:59.274
  STEP: Creating a cronjob @ 08/24/23 12:53:59.281
  STEP: Ensuring more than one job is running at a time @ 08/24/23 12:53:59.294
  E0824 12:54:00.065406      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:54:01.065614      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:54:02.066068      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:54:03.066822      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:54:04.067605      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:54:05.068259      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:54:06.069292      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:54:07.070632      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:54:08.070986      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:54:09.071500      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:54:10.072536      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:54:11.072684      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:54:12.073488      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:54:13.073721      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:54:14.074073      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:54:15.074485      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:54:16.075495      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:54:17.076526      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:54:18.076596      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:54:19.076799      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:54:20.076962      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:54:21.077538      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:54:22.078425      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:54:23.079102      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:54:24.079931      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:54:25.080534      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:54:26.080670      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:54:27.081125      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:54:28.081263      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:54:29.081436      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:54:30.081579      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:54:31.081783      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:54:32.082219      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:54:33.082508      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:54:34.083298      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:54:35.083285      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:54:36.083695      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:54:37.084467      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:54:38.085485      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:54:39.086007      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:54:40.086186      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:54:41.086402      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:54:42.086541      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:54:43.086858      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:54:44.087552      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:54:45.087895      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:54:46.088070      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:54:47.088105      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:54:48.088264      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:54:49.088347      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:54:50.088526      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:54:51.089105      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:54:52.089892      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:54:53.090086      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:54:54.090179      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:54:55.090462      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:54:56.090628      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:54:57.091225      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:54:58.091487      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:54:59.091836      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:55:00.092666      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:55:01.092966      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Ensuring at least two running jobs exists by listing jobs explicitly @ 08/24/23 12:55:01.305
  STEP: Removing cronjob @ 08/24/23 12:55:01.319
  Aug 24 12:55:01.333: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "cronjob-7007" for this suite. @ 08/24/23 12:55:01.343
• [62.123 seconds]
------------------------------
SSSSSSSSSSSSSSSSSS
------------------------------
[sig-node] Security Context when creating containers with AllowPrivilegeEscalation should not allow privilege escalation when false [LinuxOnly] [NodeConformance] [Conformance]
test/e2e/common/node/security_context.go:609
  STEP: Creating a kubernetes client @ 08/24/23 12:55:01.359
  Aug 24 12:55:01.359: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename security-context-test @ 08/24/23 12:55:01.36
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 12:55:01.391
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 12:55:01.453
  E0824 12:55:02.093509      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:55:03.093931      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:55:04.094751      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:55:05.095050      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 12:55:05.571: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "security-context-test-4815" for this suite. @ 08/24/23 12:55:05.581
• [4.239 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-node] Pods should support retrieving logs from the container over websockets [NodeConformance] [Conformance]
test/e2e/common/node/pods.go:619
  STEP: Creating a kubernetes client @ 08/24/23 12:55:05.599
  Aug 24 12:55:05.599: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename pods @ 08/24/23 12:55:05.6
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 12:55:05.63
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 12:55:05.637
  Aug 24 12:55:05.656: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: creating the pod @ 08/24/23 12:55:05.656
  STEP: submitting the pod to kubernetes @ 08/24/23 12:55:05.656
  E0824 12:55:06.095756      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:55:07.096481      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 12:55:07.737: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "pods-7522" for this suite. @ 08/24/23 12:55:07.748
• [2.164 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-storage] Projected downwardAPI should provide node allocatable (cpu) as default cpu limit if the limit is not set [NodeConformance] [Conformance]
test/e2e/common/storage/projected_downwardapi.go:250
  STEP: Creating a kubernetes client @ 08/24/23 12:55:07.764
  Aug 24 12:55:07.764: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename projected @ 08/24/23 12:55:07.765
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 12:55:07.794
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 12:55:07.801
  STEP: Creating a pod to test downward API volume plugin @ 08/24/23 12:55:07.808
  E0824 12:55:08.097586      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:55:09.098427      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:55:10.098932      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:55:11.099286      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Saw pod success @ 08/24/23 12:55:11.858
  Aug 24 12:55:11.869: INFO: Trying to get logs from node scw-conformance-default-2af6d8b4c6264cc5b9e5e6 pod downwardapi-volume-227698e7-1146-4d48-8d80-e7b1d1876d91 container client-container: <nil>
  STEP: delete the pod @ 08/24/23 12:55:11.888
  Aug 24 12:55:11.929: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "projected-5180" for this suite. @ 08/24/23 12:55:11.939
• [4.192 seconds]
------------------------------
SSSSSS
------------------------------
[sig-apps] Deployment deployment should support proportional scaling [Conformance]
test/e2e/apps/deployment.go:160
  STEP: Creating a kubernetes client @ 08/24/23 12:55:11.957
  Aug 24 12:55:11.957: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename deployment @ 08/24/23 12:55:11.958
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 12:55:11.99
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 12:55:11.998
  Aug 24 12:55:12.006: INFO: Creating deployment "webserver-deployment"
  Aug 24 12:55:12.019: INFO: Waiting for observed generation 1
  E0824 12:55:12.099795      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:55:13.100680      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 12:55:14.057: INFO: Waiting for all required pods to come up
  Aug 24 12:55:14.069: INFO: Pod name httpd: Found 10 pods out of 10
  STEP: ensuring each pod is running @ 08/24/23 12:55:14.069
  E0824 12:55:14.101510      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:55:15.102206      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:55:16.102603      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 12:55:16.865: INFO: Waiting for deployment "webserver-deployment" to complete
  Aug 24 12:55:16.885: INFO: Updating deployment "webserver-deployment" with a non-existent image
  Aug 24 12:55:16.907: INFO: Updating deployment webserver-deployment
  Aug 24 12:55:16.907: INFO: Waiting for observed generation 2
  E0824 12:55:17.102800      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:55:18.102932      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 12:55:18.926: INFO: Waiting for the first rollout's replicaset to have .status.availableReplicas = 8
  Aug 24 12:55:18.933: INFO: Waiting for the first rollout's replicaset to have .spec.replicas = 8
  Aug 24 12:55:18.942: INFO: Waiting for the first rollout's replicaset of deployment "webserver-deployment" to have desired number of replicas
  Aug 24 12:55:18.965: INFO: Verifying that the second rollout's replicaset has .status.availableReplicas = 0
  Aug 24 12:55:18.966: INFO: Waiting for the second rollout's replicaset to have .spec.replicas = 5
  Aug 24 12:55:18.981: INFO: Waiting for the second rollout's replicaset of deployment "webserver-deployment" to have desired number of replicas
  Aug 24 12:55:18.997: INFO: Verifying that deployment "webserver-deployment" has minimum required number of available replicas
  Aug 24 12:55:18.997: INFO: Scaling up the deployment "webserver-deployment" from 10 to 30
  Aug 24 12:55:19.019: INFO: Updating deployment webserver-deployment
  Aug 24 12:55:19.019: INFO: Waiting for the replicasets of deployment "webserver-deployment" to have desired number of replicas
  Aug 24 12:55:19.035: INFO: Verifying that first rollout's replicaset has .spec.replicas = 20
  Aug 24 12:55:19.041: INFO: Verifying that second rollout's replicaset has .spec.replicas = 13
  E0824 12:55:19.103289      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:55:20.104137      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 12:55:21.072: INFO: Deployment "webserver-deployment":
  (v1.Deployment) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=20) "webserver-deployment",
      GenerateName: (string) "",
      Namespace: (string) (len=15) "deployment-5781",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "530b7270-297a-423a-9e60-018873c50273",
      ResourceVersion: (string) (len=10) "3405091351",
      Generation: (int64) 3,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63828478512,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=1) {
        (string) (len=4) "name": (string) (len=5) "httpd"
      },
      Annotations: (map[string]string) (len=1) {
        (string) (len=33) "deployment.kubernetes.io/revision": (string) (len=1) "2"
      },
      OwnerReferences: ([]v1.OwnerReference) <nil>,
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "e2e.test",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828478519,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=635) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 6c 61 62 65 6c 73  22 3a 7b 22 2e 22 3a 7b  |f:labels":{".":{|
              00000020  7d 2c 22 66 3a 6e 61 6d  65 22 3a 7b 7d 7d 7d 2c  |},"f:name":{}}},|
              00000030  22 66 3a 73 70 65 63 22  3a 7b 22 66 3a 70 72 6f  |"f:spec":{"f:pro|
              00000040  67 72 65 73 73 44 65 61  64 6c 69 6e 65 53 65 63  |gressDeadlineSec|
              00000050  6f 6e 64 73 22 3a 7b 7d  2c 22 66 3a 72 65 70 6c  |onds":{},"f:repl|
              00000060  69 63 61 73 22 3a 7b 7d  2c 22 66 3a 72 65 76 69  |icas":{},"f:revi|
              00000070  73 69 6f 6e 48 69 73 74  6f 72 79 4c 69 6d 69 74  |sionHistoryLimit|
              00000080  22 3a 7b 7d 2c 22 66 3a  73 65 6c 65 63 74 6f 72  |":{},"f:selector|
              00000090  22 3a 7b 7d 2c 22 66 3a  73 74 72 61 74 65 67 79  |":{},"f:strategy|
              000000a0  22 3a 7b 22 66 3a 72 6f  6c 6c 69 6e 67 55 70 64  |":{"f:rollingUpd|
              000000b0  61 74 65 22 3a 7b 22 2e  22 3a 7b 7d 2c 22 66 3a  |ate":{".":{},"f:|
              000000c0  6d 61 78 53 75 72 67 65  22 3a 7b 7d 2c 22 66 3a  |maxSurge":{},"f:|
              000000d0  6d 61 78 55 6e 61 76 61  69 6c 61 62 6c 65 22 3a  |maxUnavailable":|
              000000e0  7b 7d 7d 2c 22 66 3a 74  79 70 65 22 3a 7b 7d 7d  |{}},"f:type":{}}|
              000000f0  2c 22 66 3a 74 65 6d 70  6c 61 74 65 22 3a 7b 22  |,"f:template":{"|
              00000100  66 3a 6d 65 74 61 64 61  74 61 22 3a 7b 22 66 3a  |f:metadata":{"f:|
              00000110  6c 61 62 65 6c 73 22 3a  7b 22 2e 22 3a 7b 7d 2c  |labels":{".":{},|
              00000120  22 66 3a 6e 61 6d 65 22  3a 7b 7d 7d 7d 2c 22 66  |"f:name":{}}},"f|
              00000130  3a 73 70 65 63 22 3a 7b  22 66 3a 63 6f 6e 74 61  |:spec":{"f:conta|
              00000140  69 6e 65 72 73 22 3a 7b  22 6b 3a 7b 5c 22 6e 61  |iners":{"k:{\"na|
              00000150  6d 65 5c 22 3a 5c 22 68  74 74 70 64 5c 22 7d 22  |me\":\"httpd\"}"|
              00000160  3a 7b 22 2e 22 3a 7b 7d  2c 22 66 3a 69 6d 61 67  |:{".":{},"f:imag|
              00000170  65 22 3a 7b 7d 2c 22 66  3a 69 6d 61 67 65 50 75  |e":{},"f:imagePu|
              00000180  6c 6c 50 6f 6c 69 63 79  22 3a 7b 7d 2c 22 66 3a  |llPolicy":{},"f:|
              00000190  6e 61 6d 65 22 3a 7b 7d  2c 22 66 3a 72 65 73 6f  |name":{},"f:reso|
              000001a0  75 72 63 65 73 22 3a 7b  7d 2c 22 66 3a 73 65 63  |urces":{},"f:sec|
              000001b0  75 72 69 74 79 43 6f 6e  74 65 78 74 22 3a 7b 7d  |urityContext":{}|
              000001c0  2c 22 66 3a 74 65 72 6d  69 6e 61 74 69 6f 6e 4d  |,"f:terminationM|
              000001d0  65 73 73 61 67 65 50 61  74 68 22 3a 7b 7d 2c 22  |essagePath":{},"|
              000001e0  66 3a 74 65 72 6d 69 6e  61 74 69 6f 6e 4d 65 73  |f:terminationMes|
              000001f0  73 61 67 65 50 6f 6c 69  63 79 22 3a 7b 7d 7d 7d  |sagePolicy":{}}}|
              00000200  2c 22 66 3a 64 6e 73 50  6f 6c 69 63 79 22 3a 7b  |,"f:dnsPolicy":{|
              00000210  7d 2c 22 66 3a 72 65 73  74 61 72 74 50 6f 6c 69  |},"f:restartPoli|
              00000220  63 79 22 3a 7b 7d 2c 22  66 3a 73 63 68 65 64 75  |cy":{},"f:schedu|
              00000230  6c 65 72 4e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 73  |lerName":{},"f:s|
              00000240  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              00000250  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000260  6e 47 72 61 63 65 50 65  72 69 6f 64 53 65 63 6f  |nGracePeriodSeco|
              00000270  6e 64 73 22 3a 7b 7d 7d  7d 7d 7d                 |nds":{}}}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828478520,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=541) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 61 6e 6e 6f 74 61  74 69 6f 6e 73 22 3a 7b  |f:annotations":{|
              00000020  22 2e 22 3a 7b 7d 2c 22  66 3a 64 65 70 6c 6f 79  |".":{},"f:deploy|
              00000030  6d 65 6e 74 2e 6b 75 62  65 72 6e 65 74 65 73 2e  |ment.kubernetes.|
              00000040  69 6f 2f 72 65 76 69 73  69 6f 6e 22 3a 7b 7d 7d  |io/revision":{}}|
              00000050  7d 2c 22 66 3a 73 74 61  74 75 73 22 3a 7b 22 66  |},"f:status":{"f|
              00000060  3a 61 76 61 69 6c 61 62  6c 65 52 65 70 6c 69 63  |:availableReplic|
              00000070  61 73 22 3a 7b 7d 2c 22  66 3a 63 6f 6e 64 69 74  |as":{},"f:condit|
              00000080  69 6f 6e 73 22 3a 7b 22  2e 22 3a 7b 7d 2c 22 6b  |ions":{".":{},"k|
              00000090  3a 7b 5c 22 74 79 70 65  5c 22 3a 5c 22 41 76 61  |:{\"type\":\"Ava|
              000000a0  69 6c 61 62 6c 65 5c 22  7d 22 3a 7b 22 2e 22 3a  |ilable\"}":{".":|
              000000b0  7b 7d 2c 22 66 3a 6c 61  73 74 54 72 61 6e 73 69  |{},"f:lastTransi|
              000000c0  74 69 6f 6e 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |tionTime":{},"f:|
              000000d0  6c 61 73 74 55 70 64 61  74 65 54 69 6d 65 22 3a  |lastUpdateTime":|
              000000e0  7b 7d 2c 22 66 3a 6d 65  73 73 61 67 65 22 3a 7b  |{},"f:message":{|
              000000f0  7d 2c 22 66 3a 72 65 61  73 6f 6e 22 3a 7b 7d 2c  |},"f:reason":{},|
              00000100  22 66 3a 73 74 61 74 75  73 22 3a 7b 7d 2c 22 66  |"f:status":{},"f|
              00000110  3a 74 79 70 65 22 3a 7b  7d 7d 2c 22 6b 3a 7b 5c  |:type":{}},"k:{\|
              00000120  22 74 79 70 65 5c 22 3a  5c 22 50 72 6f 67 72 65  |"type\":\"Progre|
              00000130  73 73 69 6e 67 5c 22 7d  22 3a 7b 22 2e 22 3a 7b  |ssing\"}":{".":{|
              00000140  7d 2c 22 66 3a 6c 61 73  74 54 72 61 6e 73 69 74  |},"f:lastTransit|
              00000150  69 6f 6e 54 69 6d 65 22  3a 7b 7d 2c 22 66 3a 6c  |ionTime":{},"f:l|
              00000160  61 73 74 55 70 64 61 74  65 54 69 6d 65 22 3a 7b  |astUpdateTime":{|
              00000170  7d 2c 22 66 3a 6d 65 73  73 61 67 65 22 3a 7b 7d  |},"f:message":{}|
              00000180  2c 22 66 3a 72 65 61 73  6f 6e 22 3a 7b 7d 2c 22  |,"f:reason":{},"|
              00000190  66 3a 73 74 61 74 75 73  22 3a 7b 7d 2c 22 66 3a  |f:status":{},"f:|
              000001a0  74 79 70 65 22 3a 7b 7d  7d 7d 2c 22 66 3a 6f 62  |type":{}}},"f:ob|
              000001b0  73 65 72 76 65 64 47 65  6e 65 72 61 74 69 6f 6e  |servedGeneration|
              000001c0  22 3a 7b 7d 2c 22 66 3a  72 65 61 64 79 52 65 70  |":{},"f:readyRep|
              000001d0  6c 69 63 61 73 22 3a 7b  7d 2c 22 66 3a 72 65 70  |licas":{},"f:rep|
              000001e0  6c 69 63 61 73 22 3a 7b  7d 2c 22 66 3a 75 6e 61  |licas":{},"f:una|
              000001f0  76 61 69 6c 61 62 6c 65  52 65 70 6c 69 63 61 73  |vailableReplicas|
              00000200  22 3a 7b 7d 2c 22 66 3a  75 70 64 61 74 65 64 52  |":{},"f:updatedR|
              00000210  65 70 6c 69 63 61 73 22  3a 7b 7d 7d 7d           |eplicas":{}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.DeploymentSpec) {
      Replicas: (*int32)(30),
      Selector: (*v1.LabelSelector)({
        MatchLabels: (map[string]string) (len=1) {
          (string) (len=4) "name": (string) (len=5) "httpd"
        },
        MatchExpressions: ([]v1.LabelSelectorRequirement) <nil>
      }),
      Template: (v1.PodTemplateSpec) {
        ObjectMeta: (v1.ObjectMeta) {
          Name: (string) "",
          GenerateName: (string) "",
          Namespace: (string) "",
          SelfLink: (string) "",
          UID: (types.UID) "",
          ResourceVersion: (string) "",
          Generation: (int64) 0,
          CreationTimestamp: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          DeletionTimestamp: (*v1.Time)(<nil>),
          DeletionGracePeriodSeconds: (*int64)(<nil>),
          Labels: (map[string]string) (len=1) {
            (string) (len=4) "name": (string) (len=5) "httpd"
          },
          Annotations: (map[string]string) <nil>,
          OwnerReferences: ([]v1.OwnerReference) <nil>,
          Finalizers: ([]string) <nil>,
          ManagedFields: ([]v1.ManagedFieldsEntry) <nil>
        },
        Spec: (v1.PodSpec) {
          Volumes: ([]v1.Volume) <nil>,
          InitContainers: ([]v1.Container) <nil>,
          Containers: ([]v1.Container) (len=1) {
            (v1.Container) {
              Name: (string) (len=5) "httpd",
              Image: (string) (len=13) "webserver:404",
              Command: ([]string) <nil>,
              Args: ([]string) <nil>,
              WorkingDir: (string) "",
              Ports: ([]v1.ContainerPort) <nil>,
              EnvFrom: ([]v1.EnvFromSource) <nil>,
              Env: ([]v1.EnvVar) <nil>,
              Resources: (v1.ResourceRequirements) {
                Limits: (v1.ResourceList) <nil>,
                Requests: (v1.ResourceList) <nil>,
                Claims: ([]v1.ResourceClaim) <nil>
              },
              ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
              RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
              VolumeMounts: ([]v1.VolumeMount) <nil>,
              VolumeDevices: ([]v1.VolumeDevice) <nil>,
              LivenessProbe: (*v1.Probe)(<nil>),
              ReadinessProbe: (*v1.Probe)(<nil>),
              StartupProbe: (*v1.Probe)(<nil>),
              Lifecycle: (*v1.Lifecycle)(<nil>),
              TerminationMessagePath: (string) (len=20) "/dev/termination-log",
              TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
              ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
              SecurityContext: (*v1.SecurityContext)({
                Capabilities: (*v1.Capabilities)(<nil>),
                Privileged: (*bool)(<nil>),
                SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
                WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
                RunAsUser: (*int64)(<nil>),
                RunAsGroup: (*int64)(<nil>),
                RunAsNonRoot: (*bool)(<nil>),
                ReadOnlyRootFilesystem: (*bool)(<nil>),
                AllowPrivilegeEscalation: (*bool)(<nil>),
                ProcMount: (*v1.ProcMountType)(<nil>),
                SeccompProfile: (*v1.SeccompProfile)(<nil>)
              }),
              Stdin: (bool) false,
              StdinOnce: (bool) false,
              TTY: (bool) false
            }
          },
          EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
          RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
          TerminationGracePeriodSeconds: (*int64)(0),
          ActiveDeadlineSeconds: (*int64)(<nil>),
          DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
          NodeSelector: (map[string]string) <nil>,
          ServiceAccountName: (string) "",
          DeprecatedServiceAccount: (string) "",
          AutomountServiceAccountToken: (*bool)(<nil>),
          NodeName: (string) "",
          HostNetwork: (bool) false,
          HostPID: (bool) false,
          HostIPC: (bool) false,
          ShareProcessNamespace: (*bool)(<nil>),
          SecurityContext: (*v1.PodSecurityContext)({
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            SupplementalGroups: ([]int64) <nil>,
            FSGroup: (*int64)(<nil>),
            Sysctls: ([]v1.Sysctl) <nil>,
            FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
          Hostname: (string) "",
          Subdomain: (string) "",
          Affinity: (*v1.Affinity)(<nil>),
          SchedulerName: (string) (len=17) "default-scheduler",
          Tolerations: ([]v1.Toleration) <nil>,
          HostAliases: ([]v1.HostAlias) <nil>,
          PriorityClassName: (string) "",
          Priority: (*int32)(<nil>),
          DNSConfig: (*v1.PodDNSConfig)(<nil>),
          ReadinessGates: ([]v1.PodReadinessGate) <nil>,
          RuntimeClassName: (*string)(<nil>),
          EnableServiceLinks: (*bool)(<nil>),
          PreemptionPolicy: (*v1.PreemptionPolicy)(<nil>),
          Overhead: (v1.ResourceList) <nil>,
          TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
          SetHostnameAsFQDN: (*bool)(<nil>),
          OS: (*v1.PodOS)(<nil>),
          HostUsers: (*bool)(<nil>),
          SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
          ResourceClaims: ([]v1.PodResourceClaim) <nil>
        }
      },
      Strategy: (v1.DeploymentStrategy) {
        Type: (v1.DeploymentStrategyType) (len=13) "RollingUpdate",
        RollingUpdate: (*v1.RollingUpdateDeployment)({
          MaxUnavailable: (*intstr.IntOrString)({
            Type: (intstr.Type) 0,
            IntVal: (int32) 2,
            StrVal: (string) ""
          }),
          MaxSurge: (*intstr.IntOrString)({
            Type: (intstr.Type) 0,
            IntVal: (int32) 3,
            StrVal: (string) ""
          })
        })
      },
      MinReadySeconds: (int32) 0,
      RevisionHistoryLimit: (*int32)(10),
      Paused: (bool) false,
      ProgressDeadlineSeconds: (*int32)(600)
    },
    Status: (v1.DeploymentStatus) {
      ObservedGeneration: (int64) 3,
      Replicas: (int32) 33,
      UpdatedReplicas: (int32) 13,
      ReadyReplicas: (int32) 8,
      AvailableReplicas: (int32) 8,
      UnavailableReplicas: (int32) 25,
      Conditions: ([]v1.DeploymentCondition) (len=2) {
        (v1.DeploymentCondition) {
          Type: (v1.DeploymentConditionType) (len=9) "Available",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastUpdateTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828478519,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828478519,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=26) "MinimumReplicasUnavailable",
          Message: (string) (len=46) "Deployment does not have minimum availability."
        },
        (v1.DeploymentCondition) {
          Type: (v1.DeploymentConditionType) (len=11) "Progressing",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastUpdateTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828478520,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828478512,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=17) "ReplicaSetUpdated",
          Message: (string) (len=59) "ReplicaSet \"webserver-deployment-9b4f5bf69\" is progressing."
        }
      },
      CollisionCount: (*int32)(<nil>)
    }
  }


  E0824 12:55:21.104433      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 12:55:21.158: INFO: New ReplicaSet "webserver-deployment-9b4f5bf69" of Deployment "webserver-deployment":
  (v1.ReplicaSet) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=30) "webserver-deployment-9b4f5bf69",
      GenerateName: (string) "",
      Namespace: (string) (len=15) "deployment-5781",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "8f9cf3fc-39b0-4eeb-9d09-cdbacc73e4e2",
      ResourceVersion: (string) (len=10) "3405091342",
      Generation: (int64) 3,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63828478516,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=5) "httpd",
        (string) (len=17) "pod-template-hash": (string) (len=9) "9b4f5bf69"
      },
      Annotations: (map[string]string) (len=3) {
        (string) (len=37) "deployment.kubernetes.io/max-replicas": (string) (len=2) "33",
        (string) (len=33) "deployment.kubernetes.io/revision": (string) (len=1) "2",
        (string) (len=41) "deployment.kubernetes.io/desired-replicas": (string) (len=2) "30"
      },
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "Deployment",
          Name: (string) (len=20) "webserver-deployment",
          UID: (types.UID) (len=36) "530b7270-297a-423a-9e60-018873c50273",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828478519,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=781) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 61 6e 6e 6f 74 61  74 69 6f 6e 73 22 3a 7b  |f:annotations":{|
              00000020  22 2e 22 3a 7b 7d 2c 22  66 3a 64 65 70 6c 6f 79  |".":{},"f:deploy|
              00000030  6d 65 6e 74 2e 6b 75 62  65 72 6e 65 74 65 73 2e  |ment.kubernetes.|
              00000040  69 6f 2f 64 65 73 69 72  65 64 2d 72 65 70 6c 69  |io/desired-repli|
              00000050  63 61 73 22 3a 7b 7d 2c  22 66 3a 64 65 70 6c 6f  |cas":{},"f:deplo|
              00000060  79 6d 65 6e 74 2e 6b 75  62 65 72 6e 65 74 65 73  |yment.kubernetes|
              00000070  2e 69 6f 2f 6d 61 78 2d  72 65 70 6c 69 63 61 73  |.io/max-replicas|
              00000080  22 3a 7b 7d 2c 22 66 3a  64 65 70 6c 6f 79 6d 65  |":{},"f:deployme|
              00000090  6e 74 2e 6b 75 62 65 72  6e 65 74 65 73 2e 69 6f  |nt.kubernetes.io|
              000000a0  2f 72 65 76 69 73 69 6f  6e 22 3a 7b 7d 7d 2c 22  |/revision":{}},"|
              000000b0  66 3a 6c 61 62 65 6c 73  22 3a 7b 22 2e 22 3a 7b  |f:labels":{".":{|
              000000c0  7d 2c 22 66 3a 6e 61 6d  65 22 3a 7b 7d 2c 22 66  |},"f:name":{},"f|
              000000d0  3a 70 6f 64 2d 74 65 6d  70 6c 61 74 65 2d 68 61  |:pod-template-ha|
              000000e0  73 68 22 3a 7b 7d 7d 2c  22 66 3a 6f 77 6e 65 72  |sh":{}},"f:owner|
              000000f0  52 65 66 65 72 65 6e 63  65 73 22 3a 7b 22 2e 22  |References":{"."|
              00000100  3a 7b 7d 2c 22 6b 3a 7b  5c 22 75 69 64 5c 22 3a  |:{},"k:{\"uid\":|
              00000110  5c 22 35 33 30 62 37 32  37 30 2d 32 39 37 61 2d  |\"530b7270-297a-|
              00000120  34 32 33 61 2d 39 65 36  30 2d 30 31 38 38 37 33  |423a-9e60-018873|
              00000130  63 35 30 32 37 33 5c 22  7d 22 3a 7b 7d 7d 7d 2c  |c50273\"}":{}}},|
              00000140  22 66 3a 73 70 65 63 22  3a 7b 22 66 3a 72 65 70  |"f:spec":{"f:rep|
              00000150  6c 69 63 61 73 22 3a 7b  7d 2c 22 66 3a 73 65 6c  |licas":{},"f:sel|
              00000160  65 63 74 6f 72 22 3a 7b  7d 2c 22 66 3a 74 65 6d  |ector":{},"f:tem|
              00000170  70 6c 61 74 65 22 3a 7b  22 66 3a 6d 65 74 61 64  |plate":{"f:metad|
              00000180  61 74 61 22 3a 7b 22 66  3a 6c 61 62 65 6c 73 22  |ata":{"f:labels"|
              00000190  3a 7b 22 2e 22 3a 7b 7d  2c 22 66 3a 6e 61 6d 65  |:{".":{},"f:name|
              000001a0  22 3a 7b 7d 2c 22 66 3a  70 6f 64 2d 74 65 6d 70  |":{},"f:pod-temp|
              000001b0  6c 61 74 65 2d 68 61 73  68 22 3a 7b 7d 7d 7d 2c  |late-hash":{}}},|
              000001c0  22 66 3a 73 70 65 63 22  3a 7b 22 66 3a 63 6f 6e  |"f:spec":{"f:con|
              000001d0  74 61 69 6e 65 72 73 22  3a 7b 22 6b 3a 7b 5c 22  |tainers":{"k:{\"|
              000001e0  6e 61 6d 65 5c 22 3a 5c  22 68 74 74 70 64 5c 22  |name\":\"httpd\"|
              000001f0  7d 22 3a 7b 22 2e 22 3a  7b 7d 2c 22 66 3a 69 6d  |}":{".":{},"f:im|
              00000200  61 67 65 22 3a 7b 7d 2c  22 66 3a 69 6d 61 67 65  |age":{},"f:image|
              00000210  50 75 6c 6c 50 6f 6c 69  63 79 22 3a 7b 7d 2c 22  |PullPolicy":{},"|
              00000220  66 3a 6e 61 6d 65 22 3a  7b 7d 2c 22 66 3a 72 65  |f:name":{},"f:re|
              00000230  73 6f 75 72 63 65 73 22  3a 7b 7d 2c 22 66 3a 73  |sources":{},"f:s|
              00000240  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              00000250  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000260  6e 4d 65 73 73 61 67 65  50 61 74 68 22 3a 7b 7d  |nMessagePath":{}|
              00000270  2c 22 66 3a 74 65 72 6d  69 6e 61 74 69 6f 6e 4d  |,"f:terminationM|
              00000280  65 73 73 61 67 65 50 6f  6c 69 63 79 22 3a 7b 7d  |essagePolicy":{}|
              00000290  7d 7d 2c 22 66 3a 64 6e  73 50 6f 6c 69 63 79 22  |}},"f:dnsPolicy"|
              000002a0  3a 7b 7d 2c 22 66 3a 72  65 73 74 61 72 74 50 6f  |:{},"f:restartPo|
              000002b0  6c 69 63 79 22 3a 7b 7d  2c 22 66 3a 73 63 68 65  |licy":{},"f:sche|
              000002c0  64 75 6c 65 72 4e 61 6d  65 22 3a 7b 7d 2c 22 66  |dulerName":{},"f|
              000002d0  3a 73 65 63 75 72 69 74  79 43 6f 6e 74 65 78 74  |:securityContext|
              000002e0  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              000002f0  69 6f 6e 47 72 61 63 65  50 65 72 69 6f 64 53 65  |ionGracePeriodSe|
              00000300  63 6f 6e 64 73 22 3a 7b  7d 7d 7d 7d 7d           |conds":{}}}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828478519,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=84) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  66 75 6c 6c 79 4c 61 62  65 6c 65 64 52 65 70 6c  |fullyLabeledRepl|
              00000020  69 63 61 73 22 3a 7b 7d  2c 22 66 3a 6f 62 73 65  |icas":{},"f:obse|
              00000030  72 76 65 64 47 65 6e 65  72 61 74 69 6f 6e 22 3a  |rvedGeneration":|
              00000040  7b 7d 2c 22 66 3a 72 65  70 6c 69 63 61 73 22 3a  |{},"f:replicas":|
              00000050  7b 7d 7d 7d                                       |{}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.ReplicaSetSpec) {
      Replicas: (*int32)(13),
      MinReadySeconds: (int32) 0,
      Selector: (*v1.LabelSelector)({
        MatchLabels: (map[string]string) (len=2) {
          (string) (len=4) "name": (string) (len=5) "httpd",
          (string) (len=17) "pod-template-hash": (string) (len=9) "9b4f5bf69"
        },
        MatchExpressions: ([]v1.LabelSelectorRequirement) <nil>
      }),
      Template: (v1.PodTemplateSpec) {
        ObjectMeta: (v1.ObjectMeta) {
          Name: (string) "",
          GenerateName: (string) "",
          Namespace: (string) "",
          SelfLink: (string) "",
          UID: (types.UID) "",
          ResourceVersion: (string) "",
          Generation: (int64) 0,
          CreationTimestamp: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          DeletionTimestamp: (*v1.Time)(<nil>),
          DeletionGracePeriodSeconds: (*int64)(<nil>),
          Labels: (map[string]string) (len=2) {
            (string) (len=4) "name": (string) (len=5) "httpd",
            (string) (len=17) "pod-template-hash": (string) (len=9) "9b4f5bf69"
          },
          Annotations: (map[string]string) <nil>,
          OwnerReferences: ([]v1.OwnerReference) <nil>,
          Finalizers: ([]string) <nil>,
          ManagedFields: ([]v1.ManagedFieldsEntry) <nil>
        },
        Spec: (v1.PodSpec) {
          Volumes: ([]v1.Volume) <nil>,
          InitContainers: ([]v1.Container) <nil>,
          Containers: ([]v1.Container) (len=1) {
            (v1.Container) {
              Name: (string) (len=5) "httpd",
              Image: (string) (len=13) "webserver:404",
              Command: ([]string) <nil>,
              Args: ([]string) <nil>,
              WorkingDir: (string) "",
              Ports: ([]v1.ContainerPort) <nil>,
              EnvFrom: ([]v1.EnvFromSource) <nil>,
              Env: ([]v1.EnvVar) <nil>,
              Resources: (v1.ResourceRequirements) {
                Limits: (v1.ResourceList) <nil>,
                Requests: (v1.ResourceList) <nil>,
                Claims: ([]v1.ResourceClaim) <nil>
              },
              ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
              RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
              VolumeMounts: ([]v1.VolumeMount) <nil>,
              VolumeDevices: ([]v1.VolumeDevice) <nil>,
              LivenessProbe: (*v1.Probe)(<nil>),
              ReadinessProbe: (*v1.Probe)(<nil>),
              StartupProbe: (*v1.Probe)(<nil>),
              Lifecycle: (*v1.Lifecycle)(<nil>),
              TerminationMessagePath: (string) (len=20) "/dev/termination-log",
              TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
              ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
              SecurityContext: (*v1.SecurityContext)({
                Capabilities: (*v1.Capabilities)(<nil>),
                Privileged: (*bool)(<nil>),
                SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
                WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
                RunAsUser: (*int64)(<nil>),
                RunAsGroup: (*int64)(<nil>),
                RunAsNonRoot: (*bool)(<nil>),
                ReadOnlyRootFilesystem: (*bool)(<nil>),
                AllowPrivilegeEscalation: (*bool)(<nil>),
                ProcMount: (*v1.ProcMountType)(<nil>),
                SeccompProfile: (*v1.SeccompProfile)(<nil>)
              }),
              Stdin: (bool) false,
              StdinOnce: (bool) false,
              TTY: (bool) false
            }
          },
          EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
          RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
          TerminationGracePeriodSeconds: (*int64)(0),
          ActiveDeadlineSeconds: (*int64)(<nil>),
          DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
          NodeSelector: (map[string]string) <nil>,
          ServiceAccountName: (string) "",
          DeprecatedServiceAccount: (string) "",
          AutomountServiceAccountToken: (*bool)(<nil>),
          NodeName: (string) "",
          HostNetwork: (bool) false,
          HostPID: (bool) false,
          HostIPC: (bool) false,
          ShareProcessNamespace: (*bool)(<nil>),
          SecurityContext: (*v1.PodSecurityContext)({
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            SupplementalGroups: ([]int64) <nil>,
            FSGroup: (*int64)(<nil>),
            Sysctls: ([]v1.Sysctl) <nil>,
            FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
          Hostname: (string) "",
          Subdomain: (string) "",
          Affinity: (*v1.Affinity)(<nil>),
          SchedulerName: (string) (len=17) "default-scheduler",
          Tolerations: ([]v1.Toleration) <nil>,
          HostAliases: ([]v1.HostAlias) <nil>,
          PriorityClassName: (string) "",
          Priority: (*int32)(<nil>),
          DNSConfig: (*v1.PodDNSConfig)(<nil>),
          ReadinessGates: ([]v1.PodReadinessGate) <nil>,
          RuntimeClassName: (*string)(<nil>),
          EnableServiceLinks: (*bool)(<nil>),
          PreemptionPolicy: (*v1.PreemptionPolicy)(<nil>),
          Overhead: (v1.ResourceList) <nil>,
          TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
          SetHostnameAsFQDN: (*bool)(<nil>),
          OS: (*v1.PodOS)(<nil>),
          HostUsers: (*bool)(<nil>),
          SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
          ResourceClaims: ([]v1.PodResourceClaim) <nil>
        }
      }
    },
    Status: (v1.ReplicaSetStatus) {
      Replicas: (int32) 13,
      FullyLabeledReplicas: (int32) 13,
      ReadyReplicas: (int32) 0,
      AvailableReplicas: (int32) 0,
      ObservedGeneration: (int64) 3,
      Conditions: ([]v1.ReplicaSetCondition) <nil>
    }
  }

  Aug 24 12:55:21.158: INFO: All old ReplicaSets of Deployment "webserver-deployment":
  Aug 24 12:55:21.159: INFO: (v1.ReplicaSet) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=31) "webserver-deployment-557759b7c7",
      GenerateName: (string) "",
      Namespace: (string) (len=15) "deployment-5781",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "ceac2027-4ce2-4f1d-9406-345bec3d538b",
      ResourceVersion: (string) (len=10) "3405091285",
      Generation: (int64) 3,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63828478512,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=17) "pod-template-hash": (string) (len=10) "557759b7c7",
        (string) (len=4) "name": (string) (len=5) "httpd"
      },
      Annotations: (map[string]string) (len=3) {
        (string) (len=41) "deployment.kubernetes.io/desired-replicas": (string) (len=2) "30",
        (string) (len=37) "deployment.kubernetes.io/max-replicas": (string) (len=2) "33",
        (string) (len=33) "deployment.kubernetes.io/revision": (string) (len=1) "1"
      },
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "Deployment",
          Name: (string) (len=20) "webserver-deployment",
          UID: (types.UID) (len=36) "530b7270-297a-423a-9e60-018873c50273",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828478519,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=781) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 61 6e 6e 6f 74 61  74 69 6f 6e 73 22 3a 7b  |f:annotations":{|
              00000020  22 2e 22 3a 7b 7d 2c 22  66 3a 64 65 70 6c 6f 79  |".":{},"f:deploy|
              00000030  6d 65 6e 74 2e 6b 75 62  65 72 6e 65 74 65 73 2e  |ment.kubernetes.|
              00000040  69 6f 2f 64 65 73 69 72  65 64 2d 72 65 70 6c 69  |io/desired-repli|
              00000050  63 61 73 22 3a 7b 7d 2c  22 66 3a 64 65 70 6c 6f  |cas":{},"f:deplo|
              00000060  79 6d 65 6e 74 2e 6b 75  62 65 72 6e 65 74 65 73  |yment.kubernetes|
              00000070  2e 69 6f 2f 6d 61 78 2d  72 65 70 6c 69 63 61 73  |.io/max-replicas|
              00000080  22 3a 7b 7d 2c 22 66 3a  64 65 70 6c 6f 79 6d 65  |":{},"f:deployme|
              00000090  6e 74 2e 6b 75 62 65 72  6e 65 74 65 73 2e 69 6f  |nt.kubernetes.io|
              000000a0  2f 72 65 76 69 73 69 6f  6e 22 3a 7b 7d 7d 2c 22  |/revision":{}},"|
              000000b0  66 3a 6c 61 62 65 6c 73  22 3a 7b 22 2e 22 3a 7b  |f:labels":{".":{|
              000000c0  7d 2c 22 66 3a 6e 61 6d  65 22 3a 7b 7d 2c 22 66  |},"f:name":{},"f|
              000000d0  3a 70 6f 64 2d 74 65 6d  70 6c 61 74 65 2d 68 61  |:pod-template-ha|
              000000e0  73 68 22 3a 7b 7d 7d 2c  22 66 3a 6f 77 6e 65 72  |sh":{}},"f:owner|
              000000f0  52 65 66 65 72 65 6e 63  65 73 22 3a 7b 22 2e 22  |References":{"."|
              00000100  3a 7b 7d 2c 22 6b 3a 7b  5c 22 75 69 64 5c 22 3a  |:{},"k:{\"uid\":|
              00000110  5c 22 35 33 30 62 37 32  37 30 2d 32 39 37 61 2d  |\"530b7270-297a-|
              00000120  34 32 33 61 2d 39 65 36  30 2d 30 31 38 38 37 33  |423a-9e60-018873|
              00000130  63 35 30 32 37 33 5c 22  7d 22 3a 7b 7d 7d 7d 2c  |c50273\"}":{}}},|
              00000140  22 66 3a 73 70 65 63 22  3a 7b 22 66 3a 72 65 70  |"f:spec":{"f:rep|
              00000150  6c 69 63 61 73 22 3a 7b  7d 2c 22 66 3a 73 65 6c  |licas":{},"f:sel|
              00000160  65 63 74 6f 72 22 3a 7b  7d 2c 22 66 3a 74 65 6d  |ector":{},"f:tem|
              00000170  70 6c 61 74 65 22 3a 7b  22 66 3a 6d 65 74 61 64  |plate":{"f:metad|
              00000180  61 74 61 22 3a 7b 22 66  3a 6c 61 62 65 6c 73 22  |ata":{"f:labels"|
              00000190  3a 7b 22 2e 22 3a 7b 7d  2c 22 66 3a 6e 61 6d 65  |:{".":{},"f:name|
              000001a0  22 3a 7b 7d 2c 22 66 3a  70 6f 64 2d 74 65 6d 70  |":{},"f:pod-temp|
              000001b0  6c 61 74 65 2d 68 61 73  68 22 3a 7b 7d 7d 7d 2c  |late-hash":{}}},|
              000001c0  22 66 3a 73 70 65 63 22  3a 7b 22 66 3a 63 6f 6e  |"f:spec":{"f:con|
              000001d0  74 61 69 6e 65 72 73 22  3a 7b 22 6b 3a 7b 5c 22  |tainers":{"k:{\"|
              000001e0  6e 61 6d 65 5c 22 3a 5c  22 68 74 74 70 64 5c 22  |name\":\"httpd\"|
              000001f0  7d 22 3a 7b 22 2e 22 3a  7b 7d 2c 22 66 3a 69 6d  |}":{".":{},"f:im|
              00000200  61 67 65 22 3a 7b 7d 2c  22 66 3a 69 6d 61 67 65  |age":{},"f:image|
              00000210  50 75 6c 6c 50 6f 6c 69  63 79 22 3a 7b 7d 2c 22  |PullPolicy":{},"|
              00000220  66 3a 6e 61 6d 65 22 3a  7b 7d 2c 22 66 3a 72 65  |f:name":{},"f:re|
              00000230  73 6f 75 72 63 65 73 22  3a 7b 7d 2c 22 66 3a 73  |sources":{},"f:s|
              00000240  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              00000250  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000260  6e 4d 65 73 73 61 67 65  50 61 74 68 22 3a 7b 7d  |nMessagePath":{}|
              00000270  2c 22 66 3a 74 65 72 6d  69 6e 61 74 69 6f 6e 4d  |,"f:terminationM|
              00000280  65 73 73 61 67 65 50 6f  6c 69 63 79 22 3a 7b 7d  |essagePolicy":{}|
              00000290  7d 7d 2c 22 66 3a 64 6e  73 50 6f 6c 69 63 79 22  |}},"f:dnsPolicy"|
              000002a0  3a 7b 7d 2c 22 66 3a 72  65 73 74 61 72 74 50 6f  |:{},"f:restartPo|
              000002b0  6c 69 63 79 22 3a 7b 7d  2c 22 66 3a 73 63 68 65  |licy":{},"f:sche|
              000002c0  64 75 6c 65 72 4e 61 6d  65 22 3a 7b 7d 2c 22 66  |dulerName":{},"f|
              000002d0  3a 73 65 63 75 72 69 74  79 43 6f 6e 74 65 78 74  |:securityContext|
              000002e0  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              000002f0  69 6f 6e 47 72 61 63 65  50 65 72 69 6f 64 53 65  |ionGracePeriodSe|
              00000300  63 6f 6e 64 73 22 3a 7b  7d 7d 7d 7d 7d           |conds":{}}}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828478519,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=130) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  61 76 61 69 6c 61 62 6c  65 52 65 70 6c 69 63 61  |availableReplica|
              00000020  73 22 3a 7b 7d 2c 22 66  3a 66 75 6c 6c 79 4c 61  |s":{},"f:fullyLa|
              00000030  62 65 6c 65 64 52 65 70  6c 69 63 61 73 22 3a 7b  |beledReplicas":{|
              00000040  7d 2c 22 66 3a 6f 62 73  65 72 76 65 64 47 65 6e  |},"f:observedGen|
              00000050  65 72 61 74 69 6f 6e 22  3a 7b 7d 2c 22 66 3a 72  |eration":{},"f:r|
              00000060  65 61 64 79 52 65 70 6c  69 63 61 73 22 3a 7b 7d  |eadyReplicas":{}|
              00000070  2c 22 66 3a 72 65 70 6c  69 63 61 73 22 3a 7b 7d  |,"f:replicas":{}|
              00000080  7d 7d                                             |}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.ReplicaSetSpec) {
      Replicas: (*int32)(20),
      MinReadySeconds: (int32) 0,
      Selector: (*v1.LabelSelector)({
        MatchLabels: (map[string]string) (len=2) {
          (string) (len=4) "name": (string) (len=5) "httpd",
          (string) (len=17) "pod-template-hash": (string) (len=10) "557759b7c7"
        },
        MatchExpressions: ([]v1.LabelSelectorRequirement) <nil>
      }),
      Template: (v1.PodTemplateSpec) {
        ObjectMeta: (v1.ObjectMeta) {
          Name: (string) "",
          GenerateName: (string) "",
          Namespace: (string) "",
          SelfLink: (string) "",
          UID: (types.UID) "",
          ResourceVersion: (string) "",
          Generation: (int64) 0,
          CreationTimestamp: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          DeletionTimestamp: (*v1.Time)(<nil>),
          DeletionGracePeriodSeconds: (*int64)(<nil>),
          Labels: (map[string]string) (len=2) {
            (string) (len=4) "name": (string) (len=5) "httpd",
            (string) (len=17) "pod-template-hash": (string) (len=10) "557759b7c7"
          },
          Annotations: (map[string]string) <nil>,
          OwnerReferences: ([]v1.OwnerReference) <nil>,
          Finalizers: ([]string) <nil>,
          ManagedFields: ([]v1.ManagedFieldsEntry) <nil>
        },
        Spec: (v1.PodSpec) {
          Volumes: ([]v1.Volume) <nil>,
          InitContainers: ([]v1.Container) <nil>,
          Containers: ([]v1.Container) (len=1) {
            (v1.Container) {
              Name: (string) (len=5) "httpd",
              Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
              Command: ([]string) <nil>,
              Args: ([]string) <nil>,
              WorkingDir: (string) "",
              Ports: ([]v1.ContainerPort) <nil>,
              EnvFrom: ([]v1.EnvFromSource) <nil>,
              Env: ([]v1.EnvVar) <nil>,
              Resources: (v1.ResourceRequirements) {
                Limits: (v1.ResourceList) <nil>,
                Requests: (v1.ResourceList) <nil>,
                Claims: ([]v1.ResourceClaim) <nil>
              },
              ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
              RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
              VolumeMounts: ([]v1.VolumeMount) <nil>,
              VolumeDevices: ([]v1.VolumeDevice) <nil>,
              LivenessProbe: (*v1.Probe)(<nil>),
              ReadinessProbe: (*v1.Probe)(<nil>),
              StartupProbe: (*v1.Probe)(<nil>),
              Lifecycle: (*v1.Lifecycle)(<nil>),
              TerminationMessagePath: (string) (len=20) "/dev/termination-log",
              TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
              ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
              SecurityContext: (*v1.SecurityContext)({
                Capabilities: (*v1.Capabilities)(<nil>),
                Privileged: (*bool)(<nil>),
                SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
                WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
                RunAsUser: (*int64)(<nil>),
                RunAsGroup: (*int64)(<nil>),
                RunAsNonRoot: (*bool)(<nil>),
                ReadOnlyRootFilesystem: (*bool)(<nil>),
                AllowPrivilegeEscalation: (*bool)(<nil>),
                ProcMount: (*v1.ProcMountType)(<nil>),
                SeccompProfile: (*v1.SeccompProfile)(<nil>)
              }),
              Stdin: (bool) false,
              StdinOnce: (bool) false,
              TTY: (bool) false
            }
          },
          EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
          RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
          TerminationGracePeriodSeconds: (*int64)(0),
          ActiveDeadlineSeconds: (*int64)(<nil>),
          DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
          NodeSelector: (map[string]string) <nil>,
          ServiceAccountName: (string) "",
          DeprecatedServiceAccount: (string) "",
          AutomountServiceAccountToken: (*bool)(<nil>),
          NodeName: (string) "",
          HostNetwork: (bool) false,
          HostPID: (bool) false,
          HostIPC: (bool) false,
          ShareProcessNamespace: (*bool)(<nil>),
          SecurityContext: (*v1.PodSecurityContext)({
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            SupplementalGroups: ([]int64) <nil>,
            FSGroup: (*int64)(<nil>),
            Sysctls: ([]v1.Sysctl) <nil>,
            FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
          Hostname: (string) "",
          Subdomain: (string) "",
          Affinity: (*v1.Affinity)(<nil>),
          SchedulerName: (string) (len=17) "default-scheduler",
          Tolerations: ([]v1.Toleration) <nil>,
          HostAliases: ([]v1.HostAlias) <nil>,
          PriorityClassName: (string) "",
          Priority: (*int32)(<nil>),
          DNSConfig: (*v1.PodDNSConfig)(<nil>),
          ReadinessGates: ([]v1.PodReadinessGate) <nil>,
          RuntimeClassName: (*string)(<nil>),
          EnableServiceLinks: (*bool)(<nil>),
          PreemptionPolicy: (*v1.PreemptionPolicy)(<nil>),
          Overhead: (v1.ResourceList) <nil>,
          TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
          SetHostnameAsFQDN: (*bool)(<nil>),
          OS: (*v1.PodOS)(<nil>),
          HostUsers: (*bool)(<nil>),
          SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
          ResourceClaims: ([]v1.PodResourceClaim) <nil>
        }
      }
    },
    Status: (v1.ReplicaSetStatus) {
      Replicas: (int32) 20,
      FullyLabeledReplicas: (int32) 20,
      ReadyReplicas: (int32) 8,
      AvailableReplicas: (int32) 8,
      ObservedGeneration: (int64) 3,
      Conditions: ([]v1.ReplicaSetCondition) <nil>
    }
  }

  Aug 24 12:55:21.172: INFO: Pod "webserver-deployment-557759b7c7-2zw85" is not available:
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=37) "webserver-deployment-557759b7c7-2zw85",
      GenerateName: (string) (len=32) "webserver-deployment-557759b7c7-",
      Namespace: (string) (len=15) "deployment-5781",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "40431bba-1b08-4a4b-9963-095866b5bfc4",
      ResourceVersion: (string) (len=10) "3405091341",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63828478519,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=5) "httpd",
        (string) (len=17) "pod-template-hash": (string) (len=10) "557759b7c7"
      },
      Annotations: (map[string]string) <nil>,
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=31) "webserver-deployment-557759b7c7",
          UID: (types.UID) (len=36) "ceac2027-4ce2-4f1d-9406-345bec3d538b",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828478519,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=537) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |.":{},"f:name":{|
              00000040  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              00000050  65 2d 68 61 73 68 22 3a  7b 7d 7d 2c 22 66 3a 6f  |e-hash":{}},"f:o|
              00000060  77 6e 65 72 52 65 66 65  72 65 6e 63 65 73 22 3a  |wnerReferences":|
              00000070  7b 22 2e 22 3a 7b 7d 2c  22 6b 3a 7b 5c 22 75 69  |{".":{},"k:{\"ui|
              00000080  64 5c 22 3a 5c 22 63 65  61 63 32 30 32 37 2d 34  |d\":\"ceac2027-4|
              00000090  63 65 32 2d 34 66 31 64  2d 39 34 30 36 2d 33 34  |ce2-4f1d-9406-34|
              000000a0  35 62 65 63 33 64 35 33  38 62 5c 22 7d 22 3a 7b  |5bec3d538b\"}":{|
              000000b0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000000c0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              000000d0  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 68 74 74  |:{\"name\":\"htt|
              000000e0  70 64 5c 22 7d 22 3a 7b  22 2e 22 3a 7b 7d 2c 22  |pd\"}":{".":{},"|
              000000f0  66 3a 69 6d 61 67 65 22  3a 7b 7d 2c 22 66 3a 69  |f:image":{},"f:i|
              00000100  6d 61 67 65 50 75 6c 6c  50 6f 6c 69 63 79 22 3a  |magePullPolicy":|
              00000110  7b 7d 2c 22 66 3a 6e 61  6d 65 22 3a 7b 7d 2c 22  |{},"f:name":{},"|
              00000120  66 3a 72 65 73 6f 75 72  63 65 73 22 3a 7b 7d 2c  |f:resources":{},|
              00000130  22 66 3a 73 65 63 75 72  69 74 79 43 6f 6e 74 65  |"f:securityConte|
              00000140  78 74 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |xt":{},"f:termin|
              00000150  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 61 74 68  |ationMessagePath|
              00000160  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000170  69 6f 6e 4d 65 73 73 61  67 65 50 6f 6c 69 63 79  |ionMessagePolicy|
              00000180  22 3a 7b 7d 7d 7d 2c 22  66 3a 64 6e 73 50 6f 6c  |":{}}},"f:dnsPol|
              00000190  69 63 79 22 3a 7b 7d 2c  22 66 3a 65 6e 61 62 6c  |icy":{},"f:enabl|
              000001a0  65 53 65 72 76 69 63 65  4c 69 6e 6b 73 22 3a 7b  |eServiceLinks":{|
              000001b0  7d 2c 22 66 3a 72 65 73  74 61 72 74 50 6f 6c 69  |},"f:restartPoli|
              000001c0  63 79 22 3a 7b 7d 2c 22  66 3a 73 63 68 65 64 75  |cy":{},"f:schedu|
              000001d0  6c 65 72 4e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 73  |lerName":{},"f:s|
              000001e0  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              000001f0  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000200  6e 47 72 61 63 65 50 65  72 69 6f 64 53 65 63 6f  |nGracePeriodSeco|
              00000210  6e 64 73 22 3a 7b 7d 7d  7d                       |nds":{}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=7) "kubelet",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828478520,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=482) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  63 6f 6e 64 69 74 69 6f  6e 73 22 3a 7b 22 6b 3a  |conditions":{"k:|
              00000020  7b 5c 22 74 79 70 65 5c  22 3a 5c 22 43 6f 6e 74  |{\"type\":\"Cont|
              00000030  61 69 6e 65 72 73 52 65  61 64 79 5c 22 7d 22 3a  |ainersReady\"}":|
              00000040  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000050  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000060  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000070  6d 65 22 3a 7b 7d 2c 22  66 3a 6d 65 73 73 61 67  |me":{},"f:messag|
              00000080  65 22 3a 7b 7d 2c 22 66  3a 72 65 61 73 6f 6e 22  |e":{},"f:reason"|
              00000090  3a 7b 7d 2c 22 66 3a 73  74 61 74 75 73 22 3a 7b  |:{},"f:status":{|
              000000a0  7d 2c 22 66 3a 74 79 70  65 22 3a 7b 7d 7d 2c 22  |},"f:type":{}},"|
              000000b0  6b 3a 7b 5c 22 74 79 70  65 5c 22 3a 5c 22 49 6e  |k:{\"type\":\"In|
              000000c0  69 74 69 61 6c 69 7a 65  64 5c 22 7d 22 3a 7b 22  |itialized\"}":{"|
              000000d0  2e 22 3a 7b 7d 2c 22 66  3a 6c 61 73 74 50 72 6f  |.":{},"f:lastPro|
              000000e0  62 65 54 69 6d 65 22 3a  7b 7d 2c 22 66 3a 6c 61  |beTime":{},"f:la|
              000000f0  73 74 54 72 61 6e 73 69  74 69 6f 6e 54 69 6d 65  |stTransitionTime|
              00000100  22 3a 7b 7d 2c 22 66 3a  73 74 61 74 75 73 22 3a  |":{},"f:status":|
              00000110  7b 7d 2c 22 66 3a 74 79  70 65 22 3a 7b 7d 7d 2c  |{},"f:type":{}},|
              00000120  22 6b 3a 7b 5c 22 74 79  70 65 5c 22 3a 5c 22 52  |"k:{\"type\":\"R|
              00000130  65 61 64 79 5c 22 7d 22  3a 7b 22 2e 22 3a 7b 7d  |eady\"}":{".":{}|
              00000140  2c 22 66 3a 6c 61 73 74  50 72 6f 62 65 54 69 6d  |,"f:lastProbeTim|
              00000150  65 22 3a 7b 7d 2c 22 66  3a 6c 61 73 74 54 72 61  |e":{},"f:lastTra|
              00000160  6e 73 69 74 69 6f 6e 54  69 6d 65 22 3a 7b 7d 2c  |nsitionTime":{},|
              00000170  22 66 3a 6d 65 73 73 61  67 65 22 3a 7b 7d 2c 22  |"f:message":{},"|
              00000180  66 3a 72 65 61 73 6f 6e  22 3a 7b 7d 2c 22 66 3a  |f:reason":{},"f:|
              00000190  73 74 61 74 75 73 22 3a  7b 7d 2c 22 66 3a 74 79  |status":{},"f:ty|
              000001a0  70 65 22 3a 7b 7d 7d 7d  2c 22 66 3a 63 6f 6e 74  |pe":{}}},"f:cont|
              000001b0  61 69 6e 65 72 53 74 61  74 75 73 65 73 22 3a 7b  |ainerStatuses":{|
              000001c0  7d 2c 22 66 3a 68 6f 73  74 49 50 22 3a 7b 7d 2c  |},"f:hostIP":{},|
              000001d0  22 66 3a 73 74 61 72 74  54 69 6d 65 22 3a 7b 7d  |"f:startTime":{}|
              000001e0  7d 7d                                             |}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-j9ncg",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  })
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=5) "httpd",
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-j9ncg",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(0),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=46) "scw-conformance-default-2af6d8b4c6264cc5b9e5e6",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Pending",
      Conditions: ([]v1.PodCondition) (len=4) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=11) "Initialized",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828478519,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=5) "Ready",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828478519,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=18) "ContainersNotReady",
          Message: (string) (len=39) "containers with unready status: [httpd]"
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=15) "ContainersReady",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828478519,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=18) "ContainersNotReady",
          Message: (string) (len=39) "containers with unready status: [httpd]"
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828478519,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) (len=11) "172.16.36.3",
      HostIPs: ([]v1.HostIP) <nil>,
      PodIP: (string) "",
      PodIPs: ([]v1.PodIP) <nil>,
      StartTime: (*v1.Time)({
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63828478519,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      }),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) (len=1) {
        (v1.ContainerStatus) {
          Name: (string) (len=5) "httpd",
          State: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)({
              Reason: (string) (len=17) "ContainerCreating",
              Message: (string) ""
            }),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          LastTerminationState: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          Ready: (bool) false,
          RestartCount: (int32) 0,
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          ImageID: (string) "",
          ContainerID: (string) "",
          Started: (*bool)(false),
          AllocatedResources: (v1.ResourceList) <nil>,
          Resources: (*v1.ResourceRequirements)(<nil>)
        }
      },
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }

  Aug 24 12:55:21.177: INFO: Pod "webserver-deployment-557759b7c7-4brx8" is not available:
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=37) "webserver-deployment-557759b7c7-4brx8",
      GenerateName: (string) (len=32) "webserver-deployment-557759b7c7-",
      Namespace: (string) (len=15) "deployment-5781",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "bc6d6cde-06ab-45c2-89ab-1346a27b7b89",
      ResourceVersion: (string) (len=10) "3405091241",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63828478519,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=5) "httpd",
        (string) (len=17) "pod-template-hash": (string) (len=10) "557759b7c7"
      },
      Annotations: (map[string]string) <nil>,
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=31) "webserver-deployment-557759b7c7",
          UID: (types.UID) (len=36) "ceac2027-4ce2-4f1d-9406-345bec3d538b",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828478519,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=537) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |.":{},"f:name":{|
              00000040  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              00000050  65 2d 68 61 73 68 22 3a  7b 7d 7d 2c 22 66 3a 6f  |e-hash":{}},"f:o|
              00000060  77 6e 65 72 52 65 66 65  72 65 6e 63 65 73 22 3a  |wnerReferences":|
              00000070  7b 22 2e 22 3a 7b 7d 2c  22 6b 3a 7b 5c 22 75 69  |{".":{},"k:{\"ui|
              00000080  64 5c 22 3a 5c 22 63 65  61 63 32 30 32 37 2d 34  |d\":\"ceac2027-4|
              00000090  63 65 32 2d 34 66 31 64  2d 39 34 30 36 2d 33 34  |ce2-4f1d-9406-34|
              000000a0  35 62 65 63 33 64 35 33  38 62 5c 22 7d 22 3a 7b  |5bec3d538b\"}":{|
              000000b0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000000c0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              000000d0  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 68 74 74  |:{\"name\":\"htt|
              000000e0  70 64 5c 22 7d 22 3a 7b  22 2e 22 3a 7b 7d 2c 22  |pd\"}":{".":{},"|
              000000f0  66 3a 69 6d 61 67 65 22  3a 7b 7d 2c 22 66 3a 69  |f:image":{},"f:i|
              00000100  6d 61 67 65 50 75 6c 6c  50 6f 6c 69 63 79 22 3a  |magePullPolicy":|
              00000110  7b 7d 2c 22 66 3a 6e 61  6d 65 22 3a 7b 7d 2c 22  |{},"f:name":{},"|
              00000120  66 3a 72 65 73 6f 75 72  63 65 73 22 3a 7b 7d 2c  |f:resources":{},|
              00000130  22 66 3a 73 65 63 75 72  69 74 79 43 6f 6e 74 65  |"f:securityConte|
              00000140  78 74 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |xt":{},"f:termin|
              00000150  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 61 74 68  |ationMessagePath|
              00000160  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000170  69 6f 6e 4d 65 73 73 61  67 65 50 6f 6c 69 63 79  |ionMessagePolicy|
              00000180  22 3a 7b 7d 7d 7d 2c 22  66 3a 64 6e 73 50 6f 6c  |":{}}},"f:dnsPol|
              00000190  69 63 79 22 3a 7b 7d 2c  22 66 3a 65 6e 61 62 6c  |icy":{},"f:enabl|
              000001a0  65 53 65 72 76 69 63 65  4c 69 6e 6b 73 22 3a 7b  |eServiceLinks":{|
              000001b0  7d 2c 22 66 3a 72 65 73  74 61 72 74 50 6f 6c 69  |},"f:restartPoli|
              000001c0  63 79 22 3a 7b 7d 2c 22  66 3a 73 63 68 65 64 75  |cy":{},"f:schedu|
              000001d0  6c 65 72 4e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 73  |lerName":{},"f:s|
              000001e0  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              000001f0  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000200  6e 47 72 61 63 65 50 65  72 69 6f 64 53 65 63 6f  |nGracePeriodSeco|
              00000210  6e 64 73 22 3a 7b 7d 7d  7d                       |nds":{}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=7) "kubelet",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828478519,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=482) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  63 6f 6e 64 69 74 69 6f  6e 73 22 3a 7b 22 6b 3a  |conditions":{"k:|
              00000020  7b 5c 22 74 79 70 65 5c  22 3a 5c 22 43 6f 6e 74  |{\"type\":\"Cont|
              00000030  61 69 6e 65 72 73 52 65  61 64 79 5c 22 7d 22 3a  |ainersReady\"}":|
              00000040  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000050  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000060  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000070  6d 65 22 3a 7b 7d 2c 22  66 3a 6d 65 73 73 61 67  |me":{},"f:messag|
              00000080  65 22 3a 7b 7d 2c 22 66  3a 72 65 61 73 6f 6e 22  |e":{},"f:reason"|
              00000090  3a 7b 7d 2c 22 66 3a 73  74 61 74 75 73 22 3a 7b  |:{},"f:status":{|
              000000a0  7d 2c 22 66 3a 74 79 70  65 22 3a 7b 7d 7d 2c 22  |},"f:type":{}},"|
              000000b0  6b 3a 7b 5c 22 74 79 70  65 5c 22 3a 5c 22 49 6e  |k:{\"type\":\"In|
              000000c0  69 74 69 61 6c 69 7a 65  64 5c 22 7d 22 3a 7b 22  |itialized\"}":{"|
              000000d0  2e 22 3a 7b 7d 2c 22 66  3a 6c 61 73 74 50 72 6f  |.":{},"f:lastPro|
              000000e0  62 65 54 69 6d 65 22 3a  7b 7d 2c 22 66 3a 6c 61  |beTime":{},"f:la|
              000000f0  73 74 54 72 61 6e 73 69  74 69 6f 6e 54 69 6d 65  |stTransitionTime|
              00000100  22 3a 7b 7d 2c 22 66 3a  73 74 61 74 75 73 22 3a  |":{},"f:status":|
              00000110  7b 7d 2c 22 66 3a 74 79  70 65 22 3a 7b 7d 7d 2c  |{},"f:type":{}},|
              00000120  22 6b 3a 7b 5c 22 74 79  70 65 5c 22 3a 5c 22 52  |"k:{\"type\":\"R|
              00000130  65 61 64 79 5c 22 7d 22  3a 7b 22 2e 22 3a 7b 7d  |eady\"}":{".":{}|
              00000140  2c 22 66 3a 6c 61 73 74  50 72 6f 62 65 54 69 6d  |,"f:lastProbeTim|
              00000150  65 22 3a 7b 7d 2c 22 66  3a 6c 61 73 74 54 72 61  |e":{},"f:lastTra|
              00000160  6e 73 69 74 69 6f 6e 54  69 6d 65 22 3a 7b 7d 2c  |nsitionTime":{},|
              00000170  22 66 3a 6d 65 73 73 61  67 65 22 3a 7b 7d 2c 22  |"f:message":{},"|
              00000180  66 3a 72 65 61 73 6f 6e  22 3a 7b 7d 2c 22 66 3a  |f:reason":{},"f:|
              00000190  73 74 61 74 75 73 22 3a  7b 7d 2c 22 66 3a 74 79  |status":{},"f:ty|
              000001a0  70 65 22 3a 7b 7d 7d 7d  2c 22 66 3a 63 6f 6e 74  |pe":{}}},"f:cont|
              000001b0  61 69 6e 65 72 53 74 61  74 75 73 65 73 22 3a 7b  |ainerStatuses":{|
              000001c0  7d 2c 22 66 3a 68 6f 73  74 49 50 22 3a 7b 7d 2c  |},"f:hostIP":{},|
              000001d0  22 66 3a 73 74 61 72 74  54 69 6d 65 22 3a 7b 7d  |"f:startTime":{}|
              000001e0  7d 7d                                             |}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-bmvzm",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  })
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=5) "httpd",
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-bmvzm",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(0),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=46) "scw-conformance-default-2af6d8b4c6264cc5b9e5e6",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Pending",
      Conditions: ([]v1.PodCondition) (len=4) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=11) "Initialized",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828478519,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=5) "Ready",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828478519,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=18) "ContainersNotReady",
          Message: (string) (len=39) "containers with unready status: [httpd]"
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=15) "ContainersReady",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828478519,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=18) "ContainersNotReady",
          Message: (string) (len=39) "containers with unready status: [httpd]"
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828478519,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) (len=11) "172.16.36.3",
      HostIPs: ([]v1.HostIP) <nil>,
      PodIP: (string) "",
      PodIPs: ([]v1.PodIP) <nil>,
      StartTime: (*v1.Time)({
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63828478519,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      }),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) (len=1) {
        (v1.ContainerStatus) {
          Name: (string) (len=5) "httpd",
          State: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)({
              Reason: (string) (len=17) "ContainerCreating",
              Message: (string) ""
            }),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          LastTerminationState: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          Ready: (bool) false,
          RestartCount: (int32) 0,
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          ImageID: (string) "",
          ContainerID: (string) "",
          Started: (*bool)(false),
          AllocatedResources: (v1.ResourceList) <nil>,
          Resources: (*v1.ResourceRequirements)(<nil>)
        }
      },
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }

  Aug 24 12:55:21.178: INFO: Pod "webserver-deployment-557759b7c7-5pbmx" is available:
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=37) "webserver-deployment-557759b7c7-5pbmx",
      GenerateName: (string) (len=32) "webserver-deployment-557759b7c7-",
      Namespace: (string) (len=15) "deployment-5781",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "9a88107d-bb1d-4b98-bb1e-3bf785ba72a2",
      ResourceVersion: (string) (len=10) "3405090995",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63828478512,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=5) "httpd",
        (string) (len=17) "pod-template-hash": (string) (len=10) "557759b7c7"
      },
      Annotations: (map[string]string) <nil>,
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=31) "webserver-deployment-557759b7c7",
          UID: (types.UID) (len=36) "ceac2027-4ce2-4f1d-9406-345bec3d538b",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828478512,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=537) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |.":{},"f:name":{|
              00000040  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              00000050  65 2d 68 61 73 68 22 3a  7b 7d 7d 2c 22 66 3a 6f  |e-hash":{}},"f:o|
              00000060  77 6e 65 72 52 65 66 65  72 65 6e 63 65 73 22 3a  |wnerReferences":|
              00000070  7b 22 2e 22 3a 7b 7d 2c  22 6b 3a 7b 5c 22 75 69  |{".":{},"k:{\"ui|
              00000080  64 5c 22 3a 5c 22 63 65  61 63 32 30 32 37 2d 34  |d\":\"ceac2027-4|
              00000090  63 65 32 2d 34 66 31 64  2d 39 34 30 36 2d 33 34  |ce2-4f1d-9406-34|
              000000a0  35 62 65 63 33 64 35 33  38 62 5c 22 7d 22 3a 7b  |5bec3d538b\"}":{|
              000000b0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000000c0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              000000d0  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 68 74 74  |:{\"name\":\"htt|
              000000e0  70 64 5c 22 7d 22 3a 7b  22 2e 22 3a 7b 7d 2c 22  |pd\"}":{".":{},"|
              000000f0  66 3a 69 6d 61 67 65 22  3a 7b 7d 2c 22 66 3a 69  |f:image":{},"f:i|
              00000100  6d 61 67 65 50 75 6c 6c  50 6f 6c 69 63 79 22 3a  |magePullPolicy":|
              00000110  7b 7d 2c 22 66 3a 6e 61  6d 65 22 3a 7b 7d 2c 22  |{},"f:name":{},"|
              00000120  66 3a 72 65 73 6f 75 72  63 65 73 22 3a 7b 7d 2c  |f:resources":{},|
              00000130  22 66 3a 73 65 63 75 72  69 74 79 43 6f 6e 74 65  |"f:securityConte|
              00000140  78 74 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |xt":{},"f:termin|
              00000150  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 61 74 68  |ationMessagePath|
              00000160  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000170  69 6f 6e 4d 65 73 73 61  67 65 50 6f 6c 69 63 79  |ionMessagePolicy|
              00000180  22 3a 7b 7d 7d 7d 2c 22  66 3a 64 6e 73 50 6f 6c  |":{}}},"f:dnsPol|
              00000190  69 63 79 22 3a 7b 7d 2c  22 66 3a 65 6e 61 62 6c  |icy":{},"f:enabl|
              000001a0  65 53 65 72 76 69 63 65  4c 69 6e 6b 73 22 3a 7b  |eServiceLinks":{|
              000001b0  7d 2c 22 66 3a 72 65 73  74 61 72 74 50 6f 6c 69  |},"f:restartPoli|
              000001c0  63 79 22 3a 7b 7d 2c 22  66 3a 73 63 68 65 64 75  |cy":{},"f:schedu|
              000001d0  6c 65 72 4e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 73  |lerName":{},"f:s|
              000001e0  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              000001f0  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000200  6e 47 72 61 63 65 50 65  72 69 6f 64 53 65 63 6f  |nGracePeriodSeco|
              00000210  6e 64 73 22 3a 7b 7d 7d  7d                       |nds":{}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=7) "kubelet",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828478515,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=519) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  63 6f 6e 64 69 74 69 6f  6e 73 22 3a 7b 22 6b 3a  |conditions":{"k:|
              00000020  7b 5c 22 74 79 70 65 5c  22 3a 5c 22 43 6f 6e 74  |{\"type\":\"Cont|
              00000030  61 69 6e 65 72 73 52 65  61 64 79 5c 22 7d 22 3a  |ainersReady\"}":|
              00000040  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000050  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000060  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000070  6d 65 22 3a 7b 7d 2c 22  66 3a 73 74 61 74 75 73  |me":{},"f:status|
              00000080  22 3a 7b 7d 2c 22 66 3a  74 79 70 65 22 3a 7b 7d  |":{},"f:type":{}|
              00000090  7d 2c 22 6b 3a 7b 5c 22  74 79 70 65 5c 22 3a 5c  |},"k:{\"type\":\|
              000000a0  22 49 6e 69 74 69 61 6c  69 7a 65 64 5c 22 7d 22  |"Initialized\"}"|
              000000b0  3a 7b 22 2e 22 3a 7b 7d  2c 22 66 3a 6c 61 73 74  |:{".":{},"f:last|
              000000c0  50 72 6f 62 65 54 69 6d  65 22 3a 7b 7d 2c 22 66  |ProbeTime":{},"f|
              000000d0  3a 6c 61 73 74 54 72 61  6e 73 69 74 69 6f 6e 54  |:lastTransitionT|
              000000e0  69 6d 65 22 3a 7b 7d 2c  22 66 3a 73 74 61 74 75  |ime":{},"f:statu|
              000000f0  73 22 3a 7b 7d 2c 22 66  3a 74 79 70 65 22 3a 7b  |s":{},"f:type":{|
              00000100  7d 7d 2c 22 6b 3a 7b 5c  22 74 79 70 65 5c 22 3a  |}},"k:{\"type\":|
              00000110  5c 22 52 65 61 64 79 5c  22 7d 22 3a 7b 22 2e 22  |\"Ready\"}":{"."|
              00000120  3a 7b 7d 2c 22 66 3a 6c  61 73 74 50 72 6f 62 65  |:{},"f:lastProbe|
              00000130  54 69 6d 65 22 3a 7b 7d  2c 22 66 3a 6c 61 73 74  |Time":{},"f:last|
              00000140  54 72 61 6e 73 69 74 69  6f 6e 54 69 6d 65 22 3a  |TransitionTime":|
              00000150  7b 7d 2c 22 66 3a 73 74  61 74 75 73 22 3a 7b 7d  |{},"f:status":{}|
              00000160  2c 22 66 3a 74 79 70 65  22 3a 7b 7d 7d 7d 2c 22  |,"f:type":{}}},"|
              00000170  66 3a 63 6f 6e 74 61 69  6e 65 72 53 74 61 74 75  |f:containerStatu|
              00000180  73 65 73 22 3a 7b 7d 2c  22 66 3a 68 6f 73 74 49  |ses":{},"f:hostI|
              00000190  50 22 3a 7b 7d 2c 22 66  3a 70 68 61 73 65 22 3a  |P":{},"f:phase":|
              000001a0  7b 7d 2c 22 66 3a 70 6f  64 49 50 22 3a 7b 7d 2c  |{},"f:podIP":{},|
              000001b0  22 66 3a 70 6f 64 49 50  73 22 3a 7b 22 2e 22 3a  |"f:podIPs":{".":|
              000001c0  7b 7d 2c 22 6b 3a 7b 5c  22 69 70 5c 22 3a 5c 22  |{},"k:{\"ip\":\"|
              000001d0  31 30 2e 31 30 30 2e 31  2e 32 35 32 5c 22 7d 22  |10.100.1.252\"}"|
              000001e0  3a 7b 22 2e 22 3a 7b 7d  2c 22 66 3a 69 70 22 3a  |:{".":{},"f:ip":|
              000001f0  7b 7d 7d 7d 2c 22 66 3a  73 74 61 72 74 54 69 6d  |{}}},"f:startTim|
              00000200  65 22 3a 7b 7d 7d 7d                              |e":{}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-f48bb",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  })
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=5) "httpd",
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-f48bb",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(0),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=46) "scw-conformance-default-ecf11ec729064adba7e270",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Running",
      Conditions: ([]v1.PodCondition) (len=4) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=11) "Initialized",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828478512,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=5) "Ready",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828478514,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=15) "ContainersReady",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828478514,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828478512,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) (len=11) "172.16.36.2",
      HostIPs: ([]v1.HostIP) <nil>,
      PodIP: (string) (len=12) "10.100.1.252",
      PodIPs: ([]v1.PodIP) (len=1) {
        (v1.PodIP) {
          IP: (string) (len=12) "10.100.1.252"
        }
      },
      StartTime: (*v1.Time)({
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63828478512,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      }),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) (len=1) {
        (v1.ContainerStatus) {
          Name: (string) (len=5) "httpd",
          State: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)({
              StartedAt: (v1.Time) {
                Time: (time.Time) {
                  wall: (uint64) 0,
                  ext: (int64) 63828478513,
                  loc: (*time.Location)(<already shown>)
                }
              }
            }),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          LastTerminationState: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          Ready: (bool) true,
          RestartCount: (int32) 0,
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          ImageID: (string) (len=109) "registry.k8s.io/e2e-test-images/httpd@sha256:148b022f5c5da426fc2f3c14b5c0867e58ef05961510c84749ac1fddcb0fef22",
          ContainerID: (string) (len=77) "containerd://49b9568132c70fa3a421b743698cda8690645c08e75bfd9aaa415d987b2aa163",
          Started: (*bool)(true),
          AllocatedResources: (v1.ResourceList) <nil>,
          Resources: (*v1.ResourceRequirements)(<nil>)
        }
      },
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }

  Aug 24 12:55:21.179: INFO: Pod "webserver-deployment-557759b7c7-8pch6" is not available:
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=37) "webserver-deployment-557759b7c7-8pch6",
      GenerateName: (string) (len=32) "webserver-deployment-557759b7c7-",
      Namespace: (string) (len=15) "deployment-5781",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "27fe04bc-4a1e-4dfc-b686-06ab9c3c82aa",
      ResourceVersion: (string) (len=10) "3405091414",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63828478519,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=5) "httpd",
        (string) (len=17) "pod-template-hash": (string) (len=10) "557759b7c7"
      },
      Annotations: (map[string]string) <nil>,
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=31) "webserver-deployment-557759b7c7",
          UID: (types.UID) (len=36) "ceac2027-4ce2-4f1d-9406-345bec3d538b",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828478519,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=537) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |.":{},"f:name":{|
              00000040  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              00000050  65 2d 68 61 73 68 22 3a  7b 7d 7d 2c 22 66 3a 6f  |e-hash":{}},"f:o|
              00000060  77 6e 65 72 52 65 66 65  72 65 6e 63 65 73 22 3a  |wnerReferences":|
              00000070  7b 22 2e 22 3a 7b 7d 2c  22 6b 3a 7b 5c 22 75 69  |{".":{},"k:{\"ui|
              00000080  64 5c 22 3a 5c 22 63 65  61 63 32 30 32 37 2d 34  |d\":\"ceac2027-4|
              00000090  63 65 32 2d 34 66 31 64  2d 39 34 30 36 2d 33 34  |ce2-4f1d-9406-34|
              000000a0  35 62 65 63 33 64 35 33  38 62 5c 22 7d 22 3a 7b  |5bec3d538b\"}":{|
              000000b0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000000c0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              000000d0  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 68 74 74  |:{\"name\":\"htt|
              000000e0  70 64 5c 22 7d 22 3a 7b  22 2e 22 3a 7b 7d 2c 22  |pd\"}":{".":{},"|
              000000f0  66 3a 69 6d 61 67 65 22  3a 7b 7d 2c 22 66 3a 69  |f:image":{},"f:i|
              00000100  6d 61 67 65 50 75 6c 6c  50 6f 6c 69 63 79 22 3a  |magePullPolicy":|
              00000110  7b 7d 2c 22 66 3a 6e 61  6d 65 22 3a 7b 7d 2c 22  |{},"f:name":{},"|
              00000120  66 3a 72 65 73 6f 75 72  63 65 73 22 3a 7b 7d 2c  |f:resources":{},|
              00000130  22 66 3a 73 65 63 75 72  69 74 79 43 6f 6e 74 65  |"f:securityConte|
              00000140  78 74 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |xt":{},"f:termin|
              00000150  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 61 74 68  |ationMessagePath|
              00000160  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000170  69 6f 6e 4d 65 73 73 61  67 65 50 6f 6c 69 63 79  |ionMessagePolicy|
              00000180  22 3a 7b 7d 7d 7d 2c 22  66 3a 64 6e 73 50 6f 6c  |":{}}},"f:dnsPol|
              00000190  69 63 79 22 3a 7b 7d 2c  22 66 3a 65 6e 61 62 6c  |icy":{},"f:enabl|
              000001a0  65 53 65 72 76 69 63 65  4c 69 6e 6b 73 22 3a 7b  |eServiceLinks":{|
              000001b0  7d 2c 22 66 3a 72 65 73  74 61 72 74 50 6f 6c 69  |},"f:restartPoli|
              000001c0  63 79 22 3a 7b 7d 2c 22  66 3a 73 63 68 65 64 75  |cy":{},"f:schedu|
              000001d0  6c 65 72 4e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 73  |lerName":{},"f:s|
              000001e0  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              000001f0  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000200  6e 47 72 61 63 65 50 65  72 69 6f 64 53 65 63 6f  |nGracePeriodSeco|
              00000210  6e 64 73 22 3a 7b 7d 7d  7d                       |nds":{}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=7) "kubelet",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828478521,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=482) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  63 6f 6e 64 69 74 69 6f  6e 73 22 3a 7b 22 6b 3a  |conditions":{"k:|
              00000020  7b 5c 22 74 79 70 65 5c  22 3a 5c 22 43 6f 6e 74  |{\"type\":\"Cont|
              00000030  61 69 6e 65 72 73 52 65  61 64 79 5c 22 7d 22 3a  |ainersReady\"}":|
              00000040  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000050  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000060  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000070  6d 65 22 3a 7b 7d 2c 22  66 3a 6d 65 73 73 61 67  |me":{},"f:messag|
              00000080  65 22 3a 7b 7d 2c 22 66  3a 72 65 61 73 6f 6e 22  |e":{},"f:reason"|
              00000090  3a 7b 7d 2c 22 66 3a 73  74 61 74 75 73 22 3a 7b  |:{},"f:status":{|
              000000a0  7d 2c 22 66 3a 74 79 70  65 22 3a 7b 7d 7d 2c 22  |},"f:type":{}},"|
              000000b0  6b 3a 7b 5c 22 74 79 70  65 5c 22 3a 5c 22 49 6e  |k:{\"type\":\"In|
              000000c0  69 74 69 61 6c 69 7a 65  64 5c 22 7d 22 3a 7b 22  |itialized\"}":{"|
              000000d0  2e 22 3a 7b 7d 2c 22 66  3a 6c 61 73 74 50 72 6f  |.":{},"f:lastPro|
              000000e0  62 65 54 69 6d 65 22 3a  7b 7d 2c 22 66 3a 6c 61  |beTime":{},"f:la|
              000000f0  73 74 54 72 61 6e 73 69  74 69 6f 6e 54 69 6d 65  |stTransitionTime|
              00000100  22 3a 7b 7d 2c 22 66 3a  73 74 61 74 75 73 22 3a  |":{},"f:status":|
              00000110  7b 7d 2c 22 66 3a 74 79  70 65 22 3a 7b 7d 7d 2c  |{},"f:type":{}},|
              00000120  22 6b 3a 7b 5c 22 74 79  70 65 5c 22 3a 5c 22 52  |"k:{\"type\":\"R|
              00000130  65 61 64 79 5c 22 7d 22  3a 7b 22 2e 22 3a 7b 7d  |eady\"}":{".":{}|
              00000140  2c 22 66 3a 6c 61 73 74  50 72 6f 62 65 54 69 6d  |,"f:lastProbeTim|
              00000150  65 22 3a 7b 7d 2c 22 66  3a 6c 61 73 74 54 72 61  |e":{},"f:lastTra|
              00000160  6e 73 69 74 69 6f 6e 54  69 6d 65 22 3a 7b 7d 2c  |nsitionTime":{},|
              00000170  22 66 3a 6d 65 73 73 61  67 65 22 3a 7b 7d 2c 22  |"f:message":{},"|
              00000180  66 3a 72 65 61 73 6f 6e  22 3a 7b 7d 2c 22 66 3a  |f:reason":{},"f:|
              00000190  73 74 61 74 75 73 22 3a  7b 7d 2c 22 66 3a 74 79  |status":{},"f:ty|
              000001a0  70 65 22 3a 7b 7d 7d 7d  2c 22 66 3a 63 6f 6e 74  |pe":{}}},"f:cont|
              000001b0  61 69 6e 65 72 53 74 61  74 75 73 65 73 22 3a 7b  |ainerStatuses":{|
              000001c0  7d 2c 22 66 3a 68 6f 73  74 49 50 22 3a 7b 7d 2c  |},"f:hostIP":{},|
              000001d0  22 66 3a 73 74 61 72 74  54 69 6d 65 22 3a 7b 7d  |"f:startTime":{}|
              000001e0  7d 7d                                             |}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-6kbhq",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  })
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=5) "httpd",
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-6kbhq",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(0),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=46) "scw-conformance-default-2af6d8b4c6264cc5b9e5e6",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Pending",
      Conditions: ([]v1.PodCondition) (len=4) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=11) "Initialized",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828478519,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=5) "Ready",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828478519,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=18) "ContainersNotReady",
          Message: (string) (len=39) "containers with unready status: [httpd]"
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=15) "ContainersReady",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828478519,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=18) "ContainersNotReady",
          Message: (string) (len=39) "containers with unready status: [httpd]"
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828478519,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) (len=11) "172.16.36.3",
      HostIPs: ([]v1.HostIP) <nil>,
      PodIP: (string) "",
      PodIPs: ([]v1.PodIP) <nil>,
      StartTime: (*v1.Time)({
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63828478519,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      }),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) (len=1) {
        (v1.ContainerStatus) {
          Name: (string) (len=5) "httpd",
          State: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)({
              Reason: (string) (len=17) "ContainerCreating",
              Message: (string) ""
            }),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          LastTerminationState: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          Ready: (bool) false,
          RestartCount: (int32) 0,
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          ImageID: (string) "",
          ContainerID: (string) "",
          Started: (*bool)(false),
          AllocatedResources: (v1.ResourceList) <nil>,
          Resources: (*v1.ResourceRequirements)(<nil>)
        }
      },
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }

  Aug 24 12:55:21.180: INFO: Pod "webserver-deployment-557759b7c7-9xtgp" is available:
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=37) "webserver-deployment-557759b7c7-9xtgp",
      GenerateName: (string) (len=32) "webserver-deployment-557759b7c7-",
      Namespace: (string) (len=15) "deployment-5781",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "f605889f-39b6-4aa9-a724-ace7f8a614c6",
      ResourceVersion: (string) (len=10) "3405090954",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63828478512,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=5) "httpd",
        (string) (len=17) "pod-template-hash": (string) (len=10) "557759b7c7"
      },
      Annotations: (map[string]string) <nil>,
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=31) "webserver-deployment-557759b7c7",
          UID: (types.UID) (len=36) "ceac2027-4ce2-4f1d-9406-345bec3d538b",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828478512,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=537) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |.":{},"f:name":{|
              00000040  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              00000050  65 2d 68 61 73 68 22 3a  7b 7d 7d 2c 22 66 3a 6f  |e-hash":{}},"f:o|
              00000060  77 6e 65 72 52 65 66 65  72 65 6e 63 65 73 22 3a  |wnerReferences":|
              00000070  7b 22 2e 22 3a 7b 7d 2c  22 6b 3a 7b 5c 22 75 69  |{".":{},"k:{\"ui|
              00000080  64 5c 22 3a 5c 22 63 65  61 63 32 30 32 37 2d 34  |d\":\"ceac2027-4|
              00000090  63 65 32 2d 34 66 31 64  2d 39 34 30 36 2d 33 34  |ce2-4f1d-9406-34|
              000000a0  35 62 65 63 33 64 35 33  38 62 5c 22 7d 22 3a 7b  |5bec3d538b\"}":{|
              000000b0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000000c0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              000000d0  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 68 74 74  |:{\"name\":\"htt|
              000000e0  70 64 5c 22 7d 22 3a 7b  22 2e 22 3a 7b 7d 2c 22  |pd\"}":{".":{},"|
              000000f0  66 3a 69 6d 61 67 65 22  3a 7b 7d 2c 22 66 3a 69  |f:image":{},"f:i|
              00000100  6d 61 67 65 50 75 6c 6c  50 6f 6c 69 63 79 22 3a  |magePullPolicy":|
              00000110  7b 7d 2c 22 66 3a 6e 61  6d 65 22 3a 7b 7d 2c 22  |{},"f:name":{},"|
              00000120  66 3a 72 65 73 6f 75 72  63 65 73 22 3a 7b 7d 2c  |f:resources":{},|
              00000130  22 66 3a 73 65 63 75 72  69 74 79 43 6f 6e 74 65  |"f:securityConte|
              00000140  78 74 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |xt":{},"f:termin|
              00000150  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 61 74 68  |ationMessagePath|
              00000160  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000170  69 6f 6e 4d 65 73 73 61  67 65 50 6f 6c 69 63 79  |ionMessagePolicy|
              00000180  22 3a 7b 7d 7d 7d 2c 22  66 3a 64 6e 73 50 6f 6c  |":{}}},"f:dnsPol|
              00000190  69 63 79 22 3a 7b 7d 2c  22 66 3a 65 6e 61 62 6c  |icy":{},"f:enabl|
              000001a0  65 53 65 72 76 69 63 65  4c 69 6e 6b 73 22 3a 7b  |eServiceLinks":{|
              000001b0  7d 2c 22 66 3a 72 65 73  74 61 72 74 50 6f 6c 69  |},"f:restartPoli|
              000001c0  63 79 22 3a 7b 7d 2c 22  66 3a 73 63 68 65 64 75  |cy":{},"f:schedu|
              000001d0  6c 65 72 4e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 73  |lerName":{},"f:s|
              000001e0  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              000001f0  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000200  6e 47 72 61 63 65 50 65  72 69 6f 64 53 65 63 6f  |nGracePeriodSeco|
              00000210  6e 64 73 22 3a 7b 7d 7d  7d                       |nds":{}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=7) "kubelet",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828478514,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=519) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  63 6f 6e 64 69 74 69 6f  6e 73 22 3a 7b 22 6b 3a  |conditions":{"k:|
              00000020  7b 5c 22 74 79 70 65 5c  22 3a 5c 22 43 6f 6e 74  |{\"type\":\"Cont|
              00000030  61 69 6e 65 72 73 52 65  61 64 79 5c 22 7d 22 3a  |ainersReady\"}":|
              00000040  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000050  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000060  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000070  6d 65 22 3a 7b 7d 2c 22  66 3a 73 74 61 74 75 73  |me":{},"f:status|
              00000080  22 3a 7b 7d 2c 22 66 3a  74 79 70 65 22 3a 7b 7d  |":{},"f:type":{}|
              00000090  7d 2c 22 6b 3a 7b 5c 22  74 79 70 65 5c 22 3a 5c  |},"k:{\"type\":\|
              000000a0  22 49 6e 69 74 69 61 6c  69 7a 65 64 5c 22 7d 22  |"Initialized\"}"|
              000000b0  3a 7b 22 2e 22 3a 7b 7d  2c 22 66 3a 6c 61 73 74  |:{".":{},"f:last|
              000000c0  50 72 6f 62 65 54 69 6d  65 22 3a 7b 7d 2c 22 66  |ProbeTime":{},"f|
              000000d0  3a 6c 61 73 74 54 72 61  6e 73 69 74 69 6f 6e 54  |:lastTransitionT|
              000000e0  69 6d 65 22 3a 7b 7d 2c  22 66 3a 73 74 61 74 75  |ime":{},"f:statu|
              000000f0  73 22 3a 7b 7d 2c 22 66  3a 74 79 70 65 22 3a 7b  |s":{},"f:type":{|
              00000100  7d 7d 2c 22 6b 3a 7b 5c  22 74 79 70 65 5c 22 3a  |}},"k:{\"type\":|
              00000110  5c 22 52 65 61 64 79 5c  22 7d 22 3a 7b 22 2e 22  |\"Ready\"}":{"."|
              00000120  3a 7b 7d 2c 22 66 3a 6c  61 73 74 50 72 6f 62 65  |:{},"f:lastProbe|
              00000130  54 69 6d 65 22 3a 7b 7d  2c 22 66 3a 6c 61 73 74  |Time":{},"f:last|
              00000140  54 72 61 6e 73 69 74 69  6f 6e 54 69 6d 65 22 3a  |TransitionTime":|
              00000150  7b 7d 2c 22 66 3a 73 74  61 74 75 73 22 3a 7b 7d  |{},"f:status":{}|
              00000160  2c 22 66 3a 74 79 70 65  22 3a 7b 7d 7d 7d 2c 22  |,"f:type":{}}},"|
              00000170  66 3a 63 6f 6e 74 61 69  6e 65 72 53 74 61 74 75  |f:containerStatu|
              00000180  73 65 73 22 3a 7b 7d 2c  22 66 3a 68 6f 73 74 49  |ses":{},"f:hostI|
              00000190  50 22 3a 7b 7d 2c 22 66  3a 70 68 61 73 65 22 3a  |P":{},"f:phase":|
              000001a0  7b 7d 2c 22 66 3a 70 6f  64 49 50 22 3a 7b 7d 2c  |{},"f:podIP":{},|
              000001b0  22 66 3a 70 6f 64 49 50  73 22 3a 7b 22 2e 22 3a  |"f:podIPs":{".":|
              000001c0  7b 7d 2c 22 6b 3a 7b 5c  22 69 70 5c 22 3a 5c 22  |{},"k:{\"ip\":\"|
              000001d0  31 30 2e 31 30 30 2e 31  2e 31 37 38 5c 22 7d 22  |10.100.1.178\"}"|
              000001e0  3a 7b 22 2e 22 3a 7b 7d  2c 22 66 3a 69 70 22 3a  |:{".":{},"f:ip":|
              000001f0  7b 7d 7d 7d 2c 22 66 3a  73 74 61 72 74 54 69 6d  |{}}},"f:startTim|
              00000200  65 22 3a 7b 7d 7d 7d                              |e":{}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-vsdcc",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  })
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=5) "httpd",
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-vsdcc",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(0),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=46) "scw-conformance-default-ecf11ec729064adba7e270",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Running",
      Conditions: ([]v1.PodCondition) (len=4) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=11) "Initialized",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828478512,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=5) "Ready",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828478514,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=15) "ContainersReady",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828478514,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828478512,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) (len=11) "172.16.36.2",
      HostIPs: ([]v1.HostIP) <nil>,
      PodIP: (string) (len=12) "10.100.1.178",
      PodIPs: ([]v1.PodIP) (len=1) {
        (v1.PodIP) {
          IP: (string) (len=12) "10.100.1.178"
        }
      },
      StartTime: (*v1.Time)({
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63828478512,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      }),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) (len=1) {
        (v1.ContainerStatus) {
          Name: (string) (len=5) "httpd",
          State: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)({
              StartedAt: (v1.Time) {
                Time: (time.Time) {
                  wall: (uint64) 0,
                  ext: (int64) 63828478513,
                  loc: (*time.Location)(<already shown>)
                }
              }
            }),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          LastTerminationState: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          Ready: (bool) true,
          RestartCount: (int32) 0,
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          ImageID: (string) (len=109) "registry.k8s.io/e2e-test-images/httpd@sha256:148b022f5c5da426fc2f3c14b5c0867e58ef05961510c84749ac1fddcb0fef22",
          ContainerID: (string) (len=77) "containerd://896771750f92fd7a3ca39c8cd8a1eb683f162b33f67fd230febb1b9c2450f42f",
          Started: (*bool)(true),
          AllocatedResources: (v1.ResourceList) <nil>,
          Resources: (*v1.ResourceRequirements)(<nil>)
        }
      },
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }

  Aug 24 12:55:21.181: INFO: Pod "webserver-deployment-557759b7c7-cnfjs" is available:
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=37) "webserver-deployment-557759b7c7-cnfjs",
      GenerateName: (string) (len=32) "webserver-deployment-557759b7c7-",
      Namespace: (string) (len=15) "deployment-5781",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "dd1c9243-2244-4d7a-888a-324137785ed7",
      ResourceVersion: (string) (len=10) "3405090998",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63828478512,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=17) "pod-template-hash": (string) (len=10) "557759b7c7",
        (string) (len=4) "name": (string) (len=5) "httpd"
      },
      Annotations: (map[string]string) <nil>,
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=31) "webserver-deployment-557759b7c7",
          UID: (types.UID) (len=36) "ceac2027-4ce2-4f1d-9406-345bec3d538b",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828478512,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=537) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |.":{},"f:name":{|
              00000040  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              00000050  65 2d 68 61 73 68 22 3a  7b 7d 7d 2c 22 66 3a 6f  |e-hash":{}},"f:o|
              00000060  77 6e 65 72 52 65 66 65  72 65 6e 63 65 73 22 3a  |wnerReferences":|
              00000070  7b 22 2e 22 3a 7b 7d 2c  22 6b 3a 7b 5c 22 75 69  |{".":{},"k:{\"ui|
              00000080  64 5c 22 3a 5c 22 63 65  61 63 32 30 32 37 2d 34  |d\":\"ceac2027-4|
              00000090  63 65 32 2d 34 66 31 64  2d 39 34 30 36 2d 33 34  |ce2-4f1d-9406-34|
              000000a0  35 62 65 63 33 64 35 33  38 62 5c 22 7d 22 3a 7b  |5bec3d538b\"}":{|
              000000b0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000000c0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              000000d0  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 68 74 74  |:{\"name\":\"htt|
              000000e0  70 64 5c 22 7d 22 3a 7b  22 2e 22 3a 7b 7d 2c 22  |pd\"}":{".":{},"|
              000000f0  66 3a 69 6d 61 67 65 22  3a 7b 7d 2c 22 66 3a 69  |f:image":{},"f:i|
              00000100  6d 61 67 65 50 75 6c 6c  50 6f 6c 69 63 79 22 3a  |magePullPolicy":|
              00000110  7b 7d 2c 22 66 3a 6e 61  6d 65 22 3a 7b 7d 2c 22  |{},"f:name":{},"|
              00000120  66 3a 72 65 73 6f 75 72  63 65 73 22 3a 7b 7d 2c  |f:resources":{},|
              00000130  22 66 3a 73 65 63 75 72  69 74 79 43 6f 6e 74 65  |"f:securityConte|
              00000140  78 74 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |xt":{},"f:termin|
              00000150  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 61 74 68  |ationMessagePath|
              00000160  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000170  69 6f 6e 4d 65 73 73 61  67 65 50 6f 6c 69 63 79  |ionMessagePolicy|
              00000180  22 3a 7b 7d 7d 7d 2c 22  66 3a 64 6e 73 50 6f 6c  |":{}}},"f:dnsPol|
              00000190  69 63 79 22 3a 7b 7d 2c  22 66 3a 65 6e 61 62 6c  |icy":{},"f:enabl|
              000001a0  65 53 65 72 76 69 63 65  4c 69 6e 6b 73 22 3a 7b  |eServiceLinks":{|
              000001b0  7d 2c 22 66 3a 72 65 73  74 61 72 74 50 6f 6c 69  |},"f:restartPoli|
              000001c0  63 79 22 3a 7b 7d 2c 22  66 3a 73 63 68 65 64 75  |cy":{},"f:schedu|
              000001d0  6c 65 72 4e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 73  |lerName":{},"f:s|
              000001e0  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              000001f0  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000200  6e 47 72 61 63 65 50 65  72 69 6f 64 53 65 63 6f  |nGracePeriodSeco|
              00000210  6e 64 73 22 3a 7b 7d 7d  7d                       |nds":{}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=7) "kubelet",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828478515,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=519) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  63 6f 6e 64 69 74 69 6f  6e 73 22 3a 7b 22 6b 3a  |conditions":{"k:|
              00000020  7b 5c 22 74 79 70 65 5c  22 3a 5c 22 43 6f 6e 74  |{\"type\":\"Cont|
              00000030  61 69 6e 65 72 73 52 65  61 64 79 5c 22 7d 22 3a  |ainersReady\"}":|
              00000040  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000050  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000060  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000070  6d 65 22 3a 7b 7d 2c 22  66 3a 73 74 61 74 75 73  |me":{},"f:status|
              00000080  22 3a 7b 7d 2c 22 66 3a  74 79 70 65 22 3a 7b 7d  |":{},"f:type":{}|
              00000090  7d 2c 22 6b 3a 7b 5c 22  74 79 70 65 5c 22 3a 5c  |},"k:{\"type\":\|
              000000a0  22 49 6e 69 74 69 61 6c  69 7a 65 64 5c 22 7d 22  |"Initialized\"}"|
              000000b0  3a 7b 22 2e 22 3a 7b 7d  2c 22 66 3a 6c 61 73 74  |:{".":{},"f:last|
              000000c0  50 72 6f 62 65 54 69 6d  65 22 3a 7b 7d 2c 22 66  |ProbeTime":{},"f|
              000000d0  3a 6c 61 73 74 54 72 61  6e 73 69 74 69 6f 6e 54  |:lastTransitionT|
              000000e0  69 6d 65 22 3a 7b 7d 2c  22 66 3a 73 74 61 74 75  |ime":{},"f:statu|
              000000f0  73 22 3a 7b 7d 2c 22 66  3a 74 79 70 65 22 3a 7b  |s":{},"f:type":{|
              00000100  7d 7d 2c 22 6b 3a 7b 5c  22 74 79 70 65 5c 22 3a  |}},"k:{\"type\":|
              00000110  5c 22 52 65 61 64 79 5c  22 7d 22 3a 7b 22 2e 22  |\"Ready\"}":{"."|
              00000120  3a 7b 7d 2c 22 66 3a 6c  61 73 74 50 72 6f 62 65  |:{},"f:lastProbe|
              00000130  54 69 6d 65 22 3a 7b 7d  2c 22 66 3a 6c 61 73 74  |Time":{},"f:last|
              00000140  54 72 61 6e 73 69 74 69  6f 6e 54 69 6d 65 22 3a  |TransitionTime":|
              00000150  7b 7d 2c 22 66 3a 73 74  61 74 75 73 22 3a 7b 7d  |{},"f:status":{}|
              00000160  2c 22 66 3a 74 79 70 65  22 3a 7b 7d 7d 7d 2c 22  |,"f:type":{}}},"|
              00000170  66 3a 63 6f 6e 74 61 69  6e 65 72 53 74 61 74 75  |f:containerStatu|
              00000180  73 65 73 22 3a 7b 7d 2c  22 66 3a 68 6f 73 74 49  |ses":{},"f:hostI|
              00000190  50 22 3a 7b 7d 2c 22 66  3a 70 68 61 73 65 22 3a  |P":{},"f:phase":|
              000001a0  7b 7d 2c 22 66 3a 70 6f  64 49 50 22 3a 7b 7d 2c  |{},"f:podIP":{},|
              000001b0  22 66 3a 70 6f 64 49 50  73 22 3a 7b 22 2e 22 3a  |"f:podIPs":{".":|
              000001c0  7b 7d 2c 22 6b 3a 7b 5c  22 69 70 5c 22 3a 5c 22  |{},"k:{\"ip\":\"|
              000001d0  31 30 2e 31 30 30 2e 31  2e 31 31 38 5c 22 7d 22  |10.100.1.118\"}"|
              000001e0  3a 7b 22 2e 22 3a 7b 7d  2c 22 66 3a 69 70 22 3a  |:{".":{},"f:ip":|
              000001f0  7b 7d 7d 7d 2c 22 66 3a  73 74 61 72 74 54 69 6d  |{}}},"f:startTim|
              00000200  65 22 3a 7b 7d 7d 7d                              |e":{}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-57pql",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  })
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=5) "httpd",
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-57pql",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(0),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=46) "scw-conformance-default-ecf11ec729064adba7e270",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Running",
      Conditions: ([]v1.PodCondition) (len=4) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=11) "Initialized",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828478512,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=5) "Ready",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828478514,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=15) "ContainersReady",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828478514,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828478512,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) (len=11) "172.16.36.2",
      HostIPs: ([]v1.HostIP) <nil>,
      PodIP: (string) (len=12) "10.100.1.118",
      PodIPs: ([]v1.PodIP) (len=1) {
        (v1.PodIP) {
          IP: (string) (len=12) "10.100.1.118"
        }
      },
      StartTime: (*v1.Time)({
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63828478512,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      }),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) (len=1) {
        (v1.ContainerStatus) {
          Name: (string) (len=5) "httpd",
          State: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)({
              StartedAt: (v1.Time) {
                Time: (time.Time) {
                  wall: (uint64) 0,
                  ext: (int64) 63828478513,
                  loc: (*time.Location)(<already shown>)
                }
              }
            }),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          LastTerminationState: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          Ready: (bool) true,
          RestartCount: (int32) 0,
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          ImageID: (string) (len=109) "registry.k8s.io/e2e-test-images/httpd@sha256:148b022f5c5da426fc2f3c14b5c0867e58ef05961510c84749ac1fddcb0fef22",
          ContainerID: (string) (len=77) "containerd://0c2b178be26123089556030bc9a4ea77fe46873f47fbe74954dab6509c71ba6b",
          Started: (*bool)(true),
          AllocatedResources: (v1.ResourceList) <nil>,
          Resources: (*v1.ResourceRequirements)(<nil>)
        }
      },
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }

  Aug 24 12:55:21.182: INFO: Pod "webserver-deployment-557759b7c7-crlsw" is available:
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=37) "webserver-deployment-557759b7c7-crlsw",
      GenerateName: (string) (len=32) "webserver-deployment-557759b7c7-",
      Namespace: (string) (len=15) "deployment-5781",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "fc41b8d0-a057-4f2b-9ad0-ecaf89f2cb88",
      ResourceVersion: (string) (len=10) "3405090987",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63828478512,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=5) "httpd",
        (string) (len=17) "pod-template-hash": (string) (len=10) "557759b7c7"
      },
      Annotations: (map[string]string) <nil>,
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=31) "webserver-deployment-557759b7c7",
          UID: (types.UID) (len=36) "ceac2027-4ce2-4f1d-9406-345bec3d538b",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828478512,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=537) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |.":{},"f:name":{|
              00000040  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              00000050  65 2d 68 61 73 68 22 3a  7b 7d 7d 2c 22 66 3a 6f  |e-hash":{}},"f:o|
              00000060  77 6e 65 72 52 65 66 65  72 65 6e 63 65 73 22 3a  |wnerReferences":|
              00000070  7b 22 2e 22 3a 7b 7d 2c  22 6b 3a 7b 5c 22 75 69  |{".":{},"k:{\"ui|
              00000080  64 5c 22 3a 5c 22 63 65  61 63 32 30 32 37 2d 34  |d\":\"ceac2027-4|
              00000090  63 65 32 2d 34 66 31 64  2d 39 34 30 36 2d 33 34  |ce2-4f1d-9406-34|
              000000a0  35 62 65 63 33 64 35 33  38 62 5c 22 7d 22 3a 7b  |5bec3d538b\"}":{|
              000000b0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000000c0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              000000d0  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 68 74 74  |:{\"name\":\"htt|
              000000e0  70 64 5c 22 7d 22 3a 7b  22 2e 22 3a 7b 7d 2c 22  |pd\"}":{".":{},"|
              000000f0  66 3a 69 6d 61 67 65 22  3a 7b 7d 2c 22 66 3a 69  |f:image":{},"f:i|
              00000100  6d 61 67 65 50 75 6c 6c  50 6f 6c 69 63 79 22 3a  |magePullPolicy":|
              00000110  7b 7d 2c 22 66 3a 6e 61  6d 65 22 3a 7b 7d 2c 22  |{},"f:name":{},"|
              00000120  66 3a 72 65 73 6f 75 72  63 65 73 22 3a 7b 7d 2c  |f:resources":{},|
              00000130  22 66 3a 73 65 63 75 72  69 74 79 43 6f 6e 74 65  |"f:securityConte|
              00000140  78 74 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |xt":{},"f:termin|
              00000150  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 61 74 68  |ationMessagePath|
              00000160  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000170  69 6f 6e 4d 65 73 73 61  67 65 50 6f 6c 69 63 79  |ionMessagePolicy|
              00000180  22 3a 7b 7d 7d 7d 2c 22  66 3a 64 6e 73 50 6f 6c  |":{}}},"f:dnsPol|
              00000190  69 63 79 22 3a 7b 7d 2c  22 66 3a 65 6e 61 62 6c  |icy":{},"f:enabl|
              000001a0  65 53 65 72 76 69 63 65  4c 69 6e 6b 73 22 3a 7b  |eServiceLinks":{|
              000001b0  7d 2c 22 66 3a 72 65 73  74 61 72 74 50 6f 6c 69  |},"f:restartPoli|
              000001c0  63 79 22 3a 7b 7d 2c 22  66 3a 73 63 68 65 64 75  |cy":{},"f:schedu|
              000001d0  6c 65 72 4e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 73  |lerName":{},"f:s|
              000001e0  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              000001f0  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000200  6e 47 72 61 63 65 50 65  72 69 6f 64 53 65 63 6f  |nGracePeriodSeco|
              00000210  6e 64 73 22 3a 7b 7d 7d  7d                       |nds":{}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=7) "kubelet",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828478515,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=518) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  63 6f 6e 64 69 74 69 6f  6e 73 22 3a 7b 22 6b 3a  |conditions":{"k:|
              00000020  7b 5c 22 74 79 70 65 5c  22 3a 5c 22 43 6f 6e 74  |{\"type\":\"Cont|
              00000030  61 69 6e 65 72 73 52 65  61 64 79 5c 22 7d 22 3a  |ainersReady\"}":|
              00000040  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000050  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000060  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000070  6d 65 22 3a 7b 7d 2c 22  66 3a 73 74 61 74 75 73  |me":{},"f:status|
              00000080  22 3a 7b 7d 2c 22 66 3a  74 79 70 65 22 3a 7b 7d  |":{},"f:type":{}|
              00000090  7d 2c 22 6b 3a 7b 5c 22  74 79 70 65 5c 22 3a 5c  |},"k:{\"type\":\|
              000000a0  22 49 6e 69 74 69 61 6c  69 7a 65 64 5c 22 7d 22  |"Initialized\"}"|
              000000b0  3a 7b 22 2e 22 3a 7b 7d  2c 22 66 3a 6c 61 73 74  |:{".":{},"f:last|
              000000c0  50 72 6f 62 65 54 69 6d  65 22 3a 7b 7d 2c 22 66  |ProbeTime":{},"f|
              000000d0  3a 6c 61 73 74 54 72 61  6e 73 69 74 69 6f 6e 54  |:lastTransitionT|
              000000e0  69 6d 65 22 3a 7b 7d 2c  22 66 3a 73 74 61 74 75  |ime":{},"f:statu|
              000000f0  73 22 3a 7b 7d 2c 22 66  3a 74 79 70 65 22 3a 7b  |s":{},"f:type":{|
              00000100  7d 7d 2c 22 6b 3a 7b 5c  22 74 79 70 65 5c 22 3a  |}},"k:{\"type\":|
              00000110  5c 22 52 65 61 64 79 5c  22 7d 22 3a 7b 22 2e 22  |\"Ready\"}":{"."|
              00000120  3a 7b 7d 2c 22 66 3a 6c  61 73 74 50 72 6f 62 65  |:{},"f:lastProbe|
              00000130  54 69 6d 65 22 3a 7b 7d  2c 22 66 3a 6c 61 73 74  |Time":{},"f:last|
              00000140  54 72 61 6e 73 69 74 69  6f 6e 54 69 6d 65 22 3a  |TransitionTime":|
              00000150  7b 7d 2c 22 66 3a 73 74  61 74 75 73 22 3a 7b 7d  |{},"f:status":{}|
              00000160  2c 22 66 3a 74 79 70 65  22 3a 7b 7d 7d 7d 2c 22  |,"f:type":{}}},"|
              00000170  66 3a 63 6f 6e 74 61 69  6e 65 72 53 74 61 74 75  |f:containerStatu|
              00000180  73 65 73 22 3a 7b 7d 2c  22 66 3a 68 6f 73 74 49  |ses":{},"f:hostI|
              00000190  50 22 3a 7b 7d 2c 22 66  3a 70 68 61 73 65 22 3a  |P":{},"f:phase":|
              000001a0  7b 7d 2c 22 66 3a 70 6f  64 49 50 22 3a 7b 7d 2c  |{},"f:podIP":{},|
              000001b0  22 66 3a 70 6f 64 49 50  73 22 3a 7b 22 2e 22 3a  |"f:podIPs":{".":|
              000001c0  7b 7d 2c 22 6b 3a 7b 5c  22 69 70 5c 22 3a 5c 22  |{},"k:{\"ip\":\"|
              000001d0  31 30 2e 31 30 30 2e 31  2e 36 30 5c 22 7d 22 3a  |10.100.1.60\"}":|
              000001e0  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 69 70 22 3a 7b  |{".":{},"f:ip":{|
              000001f0  7d 7d 7d 2c 22 66 3a 73  74 61 72 74 54 69 6d 65  |}}},"f:startTime|
              00000200  22 3a 7b 7d 7d 7d                                 |":{}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-t6spt",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  })
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=5) "httpd",
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-t6spt",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(0),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=46) "scw-conformance-default-ecf11ec729064adba7e270",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Running",
      Conditions: ([]v1.PodCondition) (len=4) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=11) "Initialized",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828478512,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=5) "Ready",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828478514,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=15) "ContainersReady",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828478514,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828478512,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) (len=11) "172.16.36.2",
      HostIPs: ([]v1.HostIP) <nil>,
      PodIP: (string) (len=11) "10.100.1.60",
      PodIPs: ([]v1.PodIP) (len=1) {
        (v1.PodIP) {
          IP: (string) (len=11) "10.100.1.60"
        }
      },
      StartTime: (*v1.Time)({
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63828478512,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      }),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) (len=1) {
        (v1.ContainerStatus) {
          Name: (string) (len=5) "httpd",
          State: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)({
              StartedAt: (v1.Time) {
                Time: (time.Time) {
                  wall: (uint64) 0,
                  ext: (int64) 63828478513,
                  loc: (*time.Location)(<already shown>)
                }
              }
            }),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          LastTerminationState: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          Ready: (bool) true,
          RestartCount: (int32) 0,
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          ImageID: (string) (len=109) "registry.k8s.io/e2e-test-images/httpd@sha256:148b022f5c5da426fc2f3c14b5c0867e58ef05961510c84749ac1fddcb0fef22",
          ContainerID: (string) (len=77) "containerd://58dcca9bcf9d04b79bdba872b298255581b9ba337c9c4d5211d6b9e4a2a7ec2a",
          Started: (*bool)(true),
          AllocatedResources: (v1.ResourceList) <nil>,
          Resources: (*v1.ResourceRequirements)(<nil>)
        }
      },
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }

  Aug 24 12:55:21.185: INFO: Pod "webserver-deployment-557759b7c7-dpj55" is not available:
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=37) "webserver-deployment-557759b7c7-dpj55",
      GenerateName: (string) (len=32) "webserver-deployment-557759b7c7-",
      Namespace: (string) (len=15) "deployment-5781",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "83155d43-5363-4bc8-bda7-bf4448863526",
      ResourceVersion: (string) (len=10) "3405091365",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63828478519,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=5) "httpd",
        (string) (len=17) "pod-template-hash": (string) (len=10) "557759b7c7"
      },
      Annotations: (map[string]string) <nil>,
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=31) "webserver-deployment-557759b7c7",
          UID: (types.UID) (len=36) "ceac2027-4ce2-4f1d-9406-345bec3d538b",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828478519,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=537) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |.":{},"f:name":{|
              00000040  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              00000050  65 2d 68 61 73 68 22 3a  7b 7d 7d 2c 22 66 3a 6f  |e-hash":{}},"f:o|
              00000060  77 6e 65 72 52 65 66 65  72 65 6e 63 65 73 22 3a  |wnerReferences":|
              00000070  7b 22 2e 22 3a 7b 7d 2c  22 6b 3a 7b 5c 22 75 69  |{".":{},"k:{\"ui|
              00000080  64 5c 22 3a 5c 22 63 65  61 63 32 30 32 37 2d 34  |d\":\"ceac2027-4|
              00000090  63 65 32 2d 34 66 31 64  2d 39 34 30 36 2d 33 34  |ce2-4f1d-9406-34|
              000000a0  35 62 65 63 33 64 35 33  38 62 5c 22 7d 22 3a 7b  |5bec3d538b\"}":{|
              000000b0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000000c0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              000000d0  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 68 74 74  |:{\"name\":\"htt|
              000000e0  70 64 5c 22 7d 22 3a 7b  22 2e 22 3a 7b 7d 2c 22  |pd\"}":{".":{},"|
              000000f0  66 3a 69 6d 61 67 65 22  3a 7b 7d 2c 22 66 3a 69  |f:image":{},"f:i|
              00000100  6d 61 67 65 50 75 6c 6c  50 6f 6c 69 63 79 22 3a  |magePullPolicy":|
              00000110  7b 7d 2c 22 66 3a 6e 61  6d 65 22 3a 7b 7d 2c 22  |{},"f:name":{},"|
              00000120  66 3a 72 65 73 6f 75 72  63 65 73 22 3a 7b 7d 2c  |f:resources":{},|
              00000130  22 66 3a 73 65 63 75 72  69 74 79 43 6f 6e 74 65  |"f:securityConte|
              00000140  78 74 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |xt":{},"f:termin|
              00000150  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 61 74 68  |ationMessagePath|
              00000160  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000170  69 6f 6e 4d 65 73 73 61  67 65 50 6f 6c 69 63 79  |ionMessagePolicy|
              00000180  22 3a 7b 7d 7d 7d 2c 22  66 3a 64 6e 73 50 6f 6c  |":{}}},"f:dnsPol|
              00000190  69 63 79 22 3a 7b 7d 2c  22 66 3a 65 6e 61 62 6c  |icy":{},"f:enabl|
              000001a0  65 53 65 72 76 69 63 65  4c 69 6e 6b 73 22 3a 7b  |eServiceLinks":{|
              000001b0  7d 2c 22 66 3a 72 65 73  74 61 72 74 50 6f 6c 69  |},"f:restartPoli|
              000001c0  63 79 22 3a 7b 7d 2c 22  66 3a 73 63 68 65 64 75  |cy":{},"f:schedu|
              000001d0  6c 65 72 4e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 73  |lerName":{},"f:s|
              000001e0  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              000001f0  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000200  6e 47 72 61 63 65 50 65  72 69 6f 64 53 65 63 6f  |nGracePeriodSeco|
              00000210  6e 64 73 22 3a 7b 7d 7d  7d                       |nds":{}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=7) "kubelet",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828478520,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=482) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  63 6f 6e 64 69 74 69 6f  6e 73 22 3a 7b 22 6b 3a  |conditions":{"k:|
              00000020  7b 5c 22 74 79 70 65 5c  22 3a 5c 22 43 6f 6e 74  |{\"type\":\"Cont|
              00000030  61 69 6e 65 72 73 52 65  61 64 79 5c 22 7d 22 3a  |ainersReady\"}":|
              00000040  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000050  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000060  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000070  6d 65 22 3a 7b 7d 2c 22  66 3a 6d 65 73 73 61 67  |me":{},"f:messag|
              00000080  65 22 3a 7b 7d 2c 22 66  3a 72 65 61 73 6f 6e 22  |e":{},"f:reason"|
              00000090  3a 7b 7d 2c 22 66 3a 73  74 61 74 75 73 22 3a 7b  |:{},"f:status":{|
              000000a0  7d 2c 22 66 3a 74 79 70  65 22 3a 7b 7d 7d 2c 22  |},"f:type":{}},"|
              000000b0  6b 3a 7b 5c 22 74 79 70  65 5c 22 3a 5c 22 49 6e  |k:{\"type\":\"In|
              000000c0  69 74 69 61 6c 69 7a 65  64 5c 22 7d 22 3a 7b 22  |itialized\"}":{"|
              000000d0  2e 22 3a 7b 7d 2c 22 66  3a 6c 61 73 74 50 72 6f  |.":{},"f:lastPro|
              000000e0  62 65 54 69 6d 65 22 3a  7b 7d 2c 22 66 3a 6c 61  |beTime":{},"f:la|
              000000f0  73 74 54 72 61 6e 73 69  74 69 6f 6e 54 69 6d 65  |stTransitionTime|
              00000100  22 3a 7b 7d 2c 22 66 3a  73 74 61 74 75 73 22 3a  |":{},"f:status":|
              00000110  7b 7d 2c 22 66 3a 74 79  70 65 22 3a 7b 7d 7d 2c  |{},"f:type":{}},|
              00000120  22 6b 3a 7b 5c 22 74 79  70 65 5c 22 3a 5c 22 52  |"k:{\"type\":\"R|
              00000130  65 61 64 79 5c 22 7d 22  3a 7b 22 2e 22 3a 7b 7d  |eady\"}":{".":{}|
              00000140  2c 22 66 3a 6c 61 73 74  50 72 6f 62 65 54 69 6d  |,"f:lastProbeTim|
              00000150  65 22 3a 7b 7d 2c 22 66  3a 6c 61 73 74 54 72 61  |e":{},"f:lastTra|
              00000160  6e 73 69 74 69 6f 6e 54  69 6d 65 22 3a 7b 7d 2c  |nsitionTime":{},|
              00000170  22 66 3a 6d 65 73 73 61  67 65 22 3a 7b 7d 2c 22  |"f:message":{},"|
              00000180  66 3a 72 65 61 73 6f 6e  22 3a 7b 7d 2c 22 66 3a  |f:reason":{},"f:|
              00000190  73 74 61 74 75 73 22 3a  7b 7d 2c 22 66 3a 74 79  |status":{},"f:ty|
              000001a0  70 65 22 3a 7b 7d 7d 7d  2c 22 66 3a 63 6f 6e 74  |pe":{}}},"f:cont|
              000001b0  61 69 6e 65 72 53 74 61  74 75 73 65 73 22 3a 7b  |ainerStatuses":{|
              000001c0  7d 2c 22 66 3a 68 6f 73  74 49 50 22 3a 7b 7d 2c  |},"f:hostIP":{},|
              000001d0  22 66 3a 73 74 61 72 74  54 69 6d 65 22 3a 7b 7d  |"f:startTime":{}|
              000001e0  7d 7d                                             |}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-vb2nk",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  })
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=5) "httpd",
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-vb2nk",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(0),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=46) "scw-conformance-default-2af6d8b4c6264cc5b9e5e6",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Pending",
      Conditions: ([]v1.PodCondition) (len=4) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=11) "Initialized",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828478519,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=5) "Ready",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828478519,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=18) "ContainersNotReady",
          Message: (string) (len=39) "containers with unready status: [httpd]"
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=15) "ContainersReady",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828478519,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=18) "ContainersNotReady",
          Message: (string) (len=39) "containers with unready status: [httpd]"
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828478519,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) (len=11) "172.16.36.3",
      HostIPs: ([]v1.HostIP) <nil>,
      PodIP: (string) "",
      PodIPs: ([]v1.PodIP) <nil>,
      StartTime: (*v1.Time)({
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63828478519,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      }),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) (len=1) {
        (v1.ContainerStatus) {
          Name: (string) (len=5) "httpd",
          State: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)({
              Reason: (string) (len=17) "ContainerCreating",
              Message: (string) ""
            }),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          LastTerminationState: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          Ready: (bool) false,
          RestartCount: (int32) 0,
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          ImageID: (string) "",
          ContainerID: (string) "",
          Started: (*bool)(false),
          AllocatedResources: (v1.ResourceList) <nil>,
          Resources: (*v1.ResourceRequirements)(<nil>)
        }
      },
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }

  Aug 24 12:55:21.186: INFO: Pod "webserver-deployment-557759b7c7-dw2nn" is not available:
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=37) "webserver-deployment-557759b7c7-dw2nn",
      GenerateName: (string) (len=32) "webserver-deployment-557759b7c7-",
      Namespace: (string) (len=15) "deployment-5781",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "5348f0f9-4b7a-495f-8d75-0706b7b1af9e",
      ResourceVersion: (string) (len=10) "3405091262",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63828478519,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=5) "httpd",
        (string) (len=17) "pod-template-hash": (string) (len=10) "557759b7c7"
      },
      Annotations: (map[string]string) <nil>,
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=31) "webserver-deployment-557759b7c7",
          UID: (types.UID) (len=36) "ceac2027-4ce2-4f1d-9406-345bec3d538b",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828478519,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=537) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |.":{},"f:name":{|
              00000040  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              00000050  65 2d 68 61 73 68 22 3a  7b 7d 7d 2c 22 66 3a 6f  |e-hash":{}},"f:o|
              00000060  77 6e 65 72 52 65 66 65  72 65 6e 63 65 73 22 3a  |wnerReferences":|
              00000070  7b 22 2e 22 3a 7b 7d 2c  22 6b 3a 7b 5c 22 75 69  |{".":{},"k:{\"ui|
              00000080  64 5c 22 3a 5c 22 63 65  61 63 32 30 32 37 2d 34  |d\":\"ceac2027-4|
              00000090  63 65 32 2d 34 66 31 64  2d 39 34 30 36 2d 33 34  |ce2-4f1d-9406-34|
              000000a0  35 62 65 63 33 64 35 33  38 62 5c 22 7d 22 3a 7b  |5bec3d538b\"}":{|
              000000b0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000000c0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              000000d0  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 68 74 74  |:{\"name\":\"htt|
              000000e0  70 64 5c 22 7d 22 3a 7b  22 2e 22 3a 7b 7d 2c 22  |pd\"}":{".":{},"|
              000000f0  66 3a 69 6d 61 67 65 22  3a 7b 7d 2c 22 66 3a 69  |f:image":{},"f:i|
              00000100  6d 61 67 65 50 75 6c 6c  50 6f 6c 69 63 79 22 3a  |magePullPolicy":|
              00000110  7b 7d 2c 22 66 3a 6e 61  6d 65 22 3a 7b 7d 2c 22  |{},"f:name":{},"|
              00000120  66 3a 72 65 73 6f 75 72  63 65 73 22 3a 7b 7d 2c  |f:resources":{},|
              00000130  22 66 3a 73 65 63 75 72  69 74 79 43 6f 6e 74 65  |"f:securityConte|
              00000140  78 74 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |xt":{},"f:termin|
              00000150  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 61 74 68  |ationMessagePath|
              00000160  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000170  69 6f 6e 4d 65 73 73 61  67 65 50 6f 6c 69 63 79  |ionMessagePolicy|
              00000180  22 3a 7b 7d 7d 7d 2c 22  66 3a 64 6e 73 50 6f 6c  |":{}}},"f:dnsPol|
              00000190  69 63 79 22 3a 7b 7d 2c  22 66 3a 65 6e 61 62 6c  |icy":{},"f:enabl|
              000001a0  65 53 65 72 76 69 63 65  4c 69 6e 6b 73 22 3a 7b  |eServiceLinks":{|
              000001b0  7d 2c 22 66 3a 72 65 73  74 61 72 74 50 6f 6c 69  |},"f:restartPoli|
              000001c0  63 79 22 3a 7b 7d 2c 22  66 3a 73 63 68 65 64 75  |cy":{},"f:schedu|
              000001d0  6c 65 72 4e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 73  |lerName":{},"f:s|
              000001e0  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              000001f0  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000200  6e 47 72 61 63 65 50 65  72 69 6f 64 53 65 63 6f  |nGracePeriodSeco|
              00000210  6e 64 73 22 3a 7b 7d 7d  7d                       |nds":{}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=7) "kubelet",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828478519,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=482) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  63 6f 6e 64 69 74 69 6f  6e 73 22 3a 7b 22 6b 3a  |conditions":{"k:|
              00000020  7b 5c 22 74 79 70 65 5c  22 3a 5c 22 43 6f 6e 74  |{\"type\":\"Cont|
              00000030  61 69 6e 65 72 73 52 65  61 64 79 5c 22 7d 22 3a  |ainersReady\"}":|
              00000040  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000050  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000060  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000070  6d 65 22 3a 7b 7d 2c 22  66 3a 6d 65 73 73 61 67  |me":{},"f:messag|
              00000080  65 22 3a 7b 7d 2c 22 66  3a 72 65 61 73 6f 6e 22  |e":{},"f:reason"|
              00000090  3a 7b 7d 2c 22 66 3a 73  74 61 74 75 73 22 3a 7b  |:{},"f:status":{|
              000000a0  7d 2c 22 66 3a 74 79 70  65 22 3a 7b 7d 7d 2c 22  |},"f:type":{}},"|
              000000b0  6b 3a 7b 5c 22 74 79 70  65 5c 22 3a 5c 22 49 6e  |k:{\"type\":\"In|
              000000c0  69 74 69 61 6c 69 7a 65  64 5c 22 7d 22 3a 7b 22  |itialized\"}":{"|
              000000d0  2e 22 3a 7b 7d 2c 22 66  3a 6c 61 73 74 50 72 6f  |.":{},"f:lastPro|
              000000e0  62 65 54 69 6d 65 22 3a  7b 7d 2c 22 66 3a 6c 61  |beTime":{},"f:la|
              000000f0  73 74 54 72 61 6e 73 69  74 69 6f 6e 54 69 6d 65  |stTransitionTime|
              00000100  22 3a 7b 7d 2c 22 66 3a  73 74 61 74 75 73 22 3a  |":{},"f:status":|
              00000110  7b 7d 2c 22 66 3a 74 79  70 65 22 3a 7b 7d 7d 2c  |{},"f:type":{}},|
              00000120  22 6b 3a 7b 5c 22 74 79  70 65 5c 22 3a 5c 22 52  |"k:{\"type\":\"R|
              00000130  65 61 64 79 5c 22 7d 22  3a 7b 22 2e 22 3a 7b 7d  |eady\"}":{".":{}|
              00000140  2c 22 66 3a 6c 61 73 74  50 72 6f 62 65 54 69 6d  |,"f:lastProbeTim|
              00000150  65 22 3a 7b 7d 2c 22 66  3a 6c 61 73 74 54 72 61  |e":{},"f:lastTra|
              00000160  6e 73 69 74 69 6f 6e 54  69 6d 65 22 3a 7b 7d 2c  |nsitionTime":{},|
              00000170  22 66 3a 6d 65 73 73 61  67 65 22 3a 7b 7d 2c 22  |"f:message":{},"|
              00000180  66 3a 72 65 61 73 6f 6e  22 3a 7b 7d 2c 22 66 3a  |f:reason":{},"f:|
              00000190  73 74 61 74 75 73 22 3a  7b 7d 2c 22 66 3a 74 79  |status":{},"f:ty|
              000001a0  70 65 22 3a 7b 7d 7d 7d  2c 22 66 3a 63 6f 6e 74  |pe":{}}},"f:cont|
              000001b0  61 69 6e 65 72 53 74 61  74 75 73 65 73 22 3a 7b  |ainerStatuses":{|
              000001c0  7d 2c 22 66 3a 68 6f 73  74 49 50 22 3a 7b 7d 2c  |},"f:hostIP":{},|
              000001d0  22 66 3a 73 74 61 72 74  54 69 6d 65 22 3a 7b 7d  |"f:startTime":{}|
              000001e0  7d 7d                                             |}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-nvhtq",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  })
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=5) "httpd",
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-nvhtq",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(0),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=46) "scw-conformance-default-ecf11ec729064adba7e270",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Pending",
      Conditions: ([]v1.PodCondition) (len=4) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=11) "Initialized",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828478519,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=5) "Ready",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828478519,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=18) "ContainersNotReady",
          Message: (string) (len=39) "containers with unready status: [httpd]"
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=15) "ContainersReady",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828478519,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=18) "ContainersNotReady",
          Message: (string) (len=39) "containers with unready status: [httpd]"
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828478519,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) (len=11) "172.16.36.2",
      HostIPs: ([]v1.HostIP) <nil>,
      PodIP: (string) "",
      PodIPs: ([]v1.PodIP) <nil>,
      StartTime: (*v1.Time)({
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63828478519,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      }),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) (len=1) {
        (v1.ContainerStatus) {
          Name: (string) (len=5) "httpd",
          State: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)({
              Reason: (string) (len=17) "ContainerCreating",
              Message: (string) ""
            }),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          LastTerminationState: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          Ready: (bool) false,
          RestartCount: (int32) 0,
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          ImageID: (string) "",
          ContainerID: (string) "",
          Started: (*bool)(false),
          AllocatedResources: (v1.ResourceList) <nil>,
          Resources: (*v1.ResourceRequirements)(<nil>)
        }
      },
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }

  Aug 24 12:55:21.187: INFO: Pod "webserver-deployment-557759b7c7-jqzv9" is not available:
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=37) "webserver-deployment-557759b7c7-jqzv9",
      GenerateName: (string) (len=32) "webserver-deployment-557759b7c7-",
      Namespace: (string) (len=15) "deployment-5781",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "6ad40380-bbd4-4ef5-b25b-026f05585e8c",
      ResourceVersion: (string) (len=10) "3405091300",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63828478519,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=17) "pod-template-hash": (string) (len=10) "557759b7c7",
        (string) (len=4) "name": (string) (len=5) "httpd"
      },
      Annotations: (map[string]string) <nil>,
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=31) "webserver-deployment-557759b7c7",
          UID: (types.UID) (len=36) "ceac2027-4ce2-4f1d-9406-345bec3d538b",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828478519,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=537) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |.":{},"f:name":{|
              00000040  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              00000050  65 2d 68 61 73 68 22 3a  7b 7d 7d 2c 22 66 3a 6f  |e-hash":{}},"f:o|
              00000060  77 6e 65 72 52 65 66 65  72 65 6e 63 65 73 22 3a  |wnerReferences":|
              00000070  7b 22 2e 22 3a 7b 7d 2c  22 6b 3a 7b 5c 22 75 69  |{".":{},"k:{\"ui|
              00000080  64 5c 22 3a 5c 22 63 65  61 63 32 30 32 37 2d 34  |d\":\"ceac2027-4|
              00000090  63 65 32 2d 34 66 31 64  2d 39 34 30 36 2d 33 34  |ce2-4f1d-9406-34|
              000000a0  35 62 65 63 33 64 35 33  38 62 5c 22 7d 22 3a 7b  |5bec3d538b\"}":{|
              000000b0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000000c0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              000000d0  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 68 74 74  |:{\"name\":\"htt|
              000000e0  70 64 5c 22 7d 22 3a 7b  22 2e 22 3a 7b 7d 2c 22  |pd\"}":{".":{},"|
              000000f0  66 3a 69 6d 61 67 65 22  3a 7b 7d 2c 22 66 3a 69  |f:image":{},"f:i|
              00000100  6d 61 67 65 50 75 6c 6c  50 6f 6c 69 63 79 22 3a  |magePullPolicy":|
              00000110  7b 7d 2c 22 66 3a 6e 61  6d 65 22 3a 7b 7d 2c 22  |{},"f:name":{},"|
              00000120  66 3a 72 65 73 6f 75 72  63 65 73 22 3a 7b 7d 2c  |f:resources":{},|
              00000130  22 66 3a 73 65 63 75 72  69 74 79 43 6f 6e 74 65  |"f:securityConte|
              00000140  78 74 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |xt":{},"f:termin|
              00000150  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 61 74 68  |ationMessagePath|
              00000160  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000170  69 6f 6e 4d 65 73 73 61  67 65 50 6f 6c 69 63 79  |ionMessagePolicy|
              00000180  22 3a 7b 7d 7d 7d 2c 22  66 3a 64 6e 73 50 6f 6c  |":{}}},"f:dnsPol|
              00000190  69 63 79 22 3a 7b 7d 2c  22 66 3a 65 6e 61 62 6c  |icy":{},"f:enabl|
              000001a0  65 53 65 72 76 69 63 65  4c 69 6e 6b 73 22 3a 7b  |eServiceLinks":{|
              000001b0  7d 2c 22 66 3a 72 65 73  74 61 72 74 50 6f 6c 69  |},"f:restartPoli|
              000001c0  63 79 22 3a 7b 7d 2c 22  66 3a 73 63 68 65 64 75  |cy":{},"f:schedu|
              000001d0  6c 65 72 4e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 73  |lerName":{},"f:s|
              000001e0  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              000001f0  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000200  6e 47 72 61 63 65 50 65  72 69 6f 64 53 65 63 6f  |nGracePeriodSeco|
              00000210  6e 64 73 22 3a 7b 7d 7d  7d                       |nds":{}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=7) "kubelet",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828478519,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=482) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  63 6f 6e 64 69 74 69 6f  6e 73 22 3a 7b 22 6b 3a  |conditions":{"k:|
              00000020  7b 5c 22 74 79 70 65 5c  22 3a 5c 22 43 6f 6e 74  |{\"type\":\"Cont|
              00000030  61 69 6e 65 72 73 52 65  61 64 79 5c 22 7d 22 3a  |ainersReady\"}":|
              00000040  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000050  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000060  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000070  6d 65 22 3a 7b 7d 2c 22  66 3a 6d 65 73 73 61 67  |me":{},"f:messag|
              00000080  65 22 3a 7b 7d 2c 22 66  3a 72 65 61 73 6f 6e 22  |e":{},"f:reason"|
              00000090  3a 7b 7d 2c 22 66 3a 73  74 61 74 75 73 22 3a 7b  |:{},"f:status":{|
              000000a0  7d 2c 22 66 3a 74 79 70  65 22 3a 7b 7d 7d 2c 22  |},"f:type":{}},"|
              000000b0  6b 3a 7b 5c 22 74 79 70  65 5c 22 3a 5c 22 49 6e  |k:{\"type\":\"In|
              000000c0  69 74 69 61 6c 69 7a 65  64 5c 22 7d 22 3a 7b 22  |itialized\"}":{"|
              000000d0  2e 22 3a 7b 7d 2c 22 66  3a 6c 61 73 74 50 72 6f  |.":{},"f:lastPro|
              000000e0  62 65 54 69 6d 65 22 3a  7b 7d 2c 22 66 3a 6c 61  |beTime":{},"f:la|
              000000f0  73 74 54 72 61 6e 73 69  74 69 6f 6e 54 69 6d 65  |stTransitionTime|
              00000100  22 3a 7b 7d 2c 22 66 3a  73 74 61 74 75 73 22 3a  |":{},"f:status":|
              00000110  7b 7d 2c 22 66 3a 74 79  70 65 22 3a 7b 7d 7d 2c  |{},"f:type":{}},|
              00000120  22 6b 3a 7b 5c 22 74 79  70 65 5c 22 3a 5c 22 52  |"k:{\"type\":\"R|
              00000130  65 61 64 79 5c 22 7d 22  3a 7b 22 2e 22 3a 7b 7d  |eady\"}":{".":{}|
              00000140  2c 22 66 3a 6c 61 73 74  50 72 6f 62 65 54 69 6d  |,"f:lastProbeTim|
              00000150  65 22 3a 7b 7d 2c 22 66  3a 6c 61 73 74 54 72 61  |e":{},"f:lastTra|
              00000160  6e 73 69 74 69 6f 6e 54  69 6d 65 22 3a 7b 7d 2c  |nsitionTime":{},|
              00000170  22 66 3a 6d 65 73 73 61  67 65 22 3a 7b 7d 2c 22  |"f:message":{},"|
              00000180  66 3a 72 65 61 73 6f 6e  22 3a 7b 7d 2c 22 66 3a  |f:reason":{},"f:|
              00000190  73 74 61 74 75 73 22 3a  7b 7d 2c 22 66 3a 74 79  |status":{},"f:ty|
              000001a0  70 65 22 3a 7b 7d 7d 7d  2c 22 66 3a 63 6f 6e 74  |pe":{}}},"f:cont|
              000001b0  61 69 6e 65 72 53 74 61  74 75 73 65 73 22 3a 7b  |ainerStatuses":{|
              000001c0  7d 2c 22 66 3a 68 6f 73  74 49 50 22 3a 7b 7d 2c  |},"f:hostIP":{},|
              000001d0  22 66 3a 73 74 61 72 74  54 69 6d 65 22 3a 7b 7d  |"f:startTime":{}|
              000001e0  7d 7d                                             |}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-7tgjs",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  })
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=5) "httpd",
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-7tgjs",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(0),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=46) "scw-conformance-default-2af6d8b4c6264cc5b9e5e6",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Pending",
      Conditions: ([]v1.PodCondition) (len=4) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=11) "Initialized",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828478519,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=5) "Ready",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828478519,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=18) "ContainersNotReady",
          Message: (string) (len=39) "containers with unready status: [httpd]"
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=15) "ContainersReady",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828478519,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=18) "ContainersNotReady",
          Message: (string) (len=39) "containers with unready status: [httpd]"
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828478519,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) (len=11) "172.16.36.3",
      HostIPs: ([]v1.HostIP) <nil>,
      PodIP: (string) "",
      PodIPs: ([]v1.PodIP) <nil>,
      StartTime: (*v1.Time)({
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63828478519,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      }),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) (len=1) {
        (v1.ContainerStatus) {
          Name: (string) (len=5) "httpd",
          State: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)({
              Reason: (string) (len=17) "ContainerCreating",
              Message: (string) ""
            }),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          LastTerminationState: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          Ready: (bool) false,
          RestartCount: (int32) 0,
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          ImageID: (string) "",
          ContainerID: (string) "",
          Started: (*bool)(false),
          AllocatedResources: (v1.ResourceList) <nil>,
          Resources: (*v1.ResourceRequirements)(<nil>)
        }
      },
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }

  Aug 24 12:55:21.195: INFO: Pod "webserver-deployment-557759b7c7-kd4kd" is available:
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=37) "webserver-deployment-557759b7c7-kd4kd",
      GenerateName: (string) (len=32) "webserver-deployment-557759b7c7-",
      Namespace: (string) (len=15) "deployment-5781",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "ea3cf7d4-96c5-453c-acfe-70a2e5414d8a",
      ResourceVersion: (string) (len=10) "3405090981",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63828478512,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=5) "httpd",
        (string) (len=17) "pod-template-hash": (string) (len=10) "557759b7c7"
      },
      Annotations: (map[string]string) <nil>,
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=31) "webserver-deployment-557759b7c7",
          UID: (types.UID) (len=36) "ceac2027-4ce2-4f1d-9406-345bec3d538b",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828478512,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=537) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |.":{},"f:name":{|
              00000040  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              00000050  65 2d 68 61 73 68 22 3a  7b 7d 7d 2c 22 66 3a 6f  |e-hash":{}},"f:o|
              00000060  77 6e 65 72 52 65 66 65  72 65 6e 63 65 73 22 3a  |wnerReferences":|
              00000070  7b 22 2e 22 3a 7b 7d 2c  22 6b 3a 7b 5c 22 75 69  |{".":{},"k:{\"ui|
              00000080  64 5c 22 3a 5c 22 63 65  61 63 32 30 32 37 2d 34  |d\":\"ceac2027-4|
              00000090  63 65 32 2d 34 66 31 64  2d 39 34 30 36 2d 33 34  |ce2-4f1d-9406-34|
              000000a0  35 62 65 63 33 64 35 33  38 62 5c 22 7d 22 3a 7b  |5bec3d538b\"}":{|
              000000b0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000000c0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              000000d0  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 68 74 74  |:{\"name\":\"htt|
              000000e0  70 64 5c 22 7d 22 3a 7b  22 2e 22 3a 7b 7d 2c 22  |pd\"}":{".":{},"|
              000000f0  66 3a 69 6d 61 67 65 22  3a 7b 7d 2c 22 66 3a 69  |f:image":{},"f:i|
              00000100  6d 61 67 65 50 75 6c 6c  50 6f 6c 69 63 79 22 3a  |magePullPolicy":|
              00000110  7b 7d 2c 22 66 3a 6e 61  6d 65 22 3a 7b 7d 2c 22  |{},"f:name":{},"|
              00000120  66 3a 72 65 73 6f 75 72  63 65 73 22 3a 7b 7d 2c  |f:resources":{},|
              00000130  22 66 3a 73 65 63 75 72  69 74 79 43 6f 6e 74 65  |"f:securityConte|
              00000140  78 74 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |xt":{},"f:termin|
              00000150  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 61 74 68  |ationMessagePath|
              00000160  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000170  69 6f 6e 4d 65 73 73 61  67 65 50 6f 6c 69 63 79  |ionMessagePolicy|
              00000180  22 3a 7b 7d 7d 7d 2c 22  66 3a 64 6e 73 50 6f 6c  |":{}}},"f:dnsPol|
              00000190  69 63 79 22 3a 7b 7d 2c  22 66 3a 65 6e 61 62 6c  |icy":{},"f:enabl|
              000001a0  65 53 65 72 76 69 63 65  4c 69 6e 6b 73 22 3a 7b  |eServiceLinks":{|
              000001b0  7d 2c 22 66 3a 72 65 73  74 61 72 74 50 6f 6c 69  |},"f:restartPoli|
              000001c0  63 79 22 3a 7b 7d 2c 22  66 3a 73 63 68 65 64 75  |cy":{},"f:schedu|
              000001d0  6c 65 72 4e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 73  |lerName":{},"f:s|
              000001e0  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              000001f0  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000200  6e 47 72 61 63 65 50 65  72 69 6f 64 53 65 63 6f  |nGracePeriodSeco|
              00000210  6e 64 73 22 3a 7b 7d 7d  7d                       |nds":{}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=7) "kubelet",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828478515,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=518) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  63 6f 6e 64 69 74 69 6f  6e 73 22 3a 7b 22 6b 3a  |conditions":{"k:|
              00000020  7b 5c 22 74 79 70 65 5c  22 3a 5c 22 43 6f 6e 74  |{\"type\":\"Cont|
              00000030  61 69 6e 65 72 73 52 65  61 64 79 5c 22 7d 22 3a  |ainersReady\"}":|
              00000040  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000050  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000060  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000070  6d 65 22 3a 7b 7d 2c 22  66 3a 73 74 61 74 75 73  |me":{},"f:status|
              00000080  22 3a 7b 7d 2c 22 66 3a  74 79 70 65 22 3a 7b 7d  |":{},"f:type":{}|
              00000090  7d 2c 22 6b 3a 7b 5c 22  74 79 70 65 5c 22 3a 5c  |},"k:{\"type\":\|
              000000a0  22 49 6e 69 74 69 61 6c  69 7a 65 64 5c 22 7d 22  |"Initialized\"}"|
              000000b0  3a 7b 22 2e 22 3a 7b 7d  2c 22 66 3a 6c 61 73 74  |:{".":{},"f:last|
              000000c0  50 72 6f 62 65 54 69 6d  65 22 3a 7b 7d 2c 22 66  |ProbeTime":{},"f|
              000000d0  3a 6c 61 73 74 54 72 61  6e 73 69 74 69 6f 6e 54  |:lastTransitionT|
              000000e0  69 6d 65 22 3a 7b 7d 2c  22 66 3a 73 74 61 74 75  |ime":{},"f:statu|
              000000f0  73 22 3a 7b 7d 2c 22 66  3a 74 79 70 65 22 3a 7b  |s":{},"f:type":{|
              00000100  7d 7d 2c 22 6b 3a 7b 5c  22 74 79 70 65 5c 22 3a  |}},"k:{\"type\":|
              00000110  5c 22 52 65 61 64 79 5c  22 7d 22 3a 7b 22 2e 22  |\"Ready\"}":{"."|
              00000120  3a 7b 7d 2c 22 66 3a 6c  61 73 74 50 72 6f 62 65  |:{},"f:lastProbe|
              00000130  54 69 6d 65 22 3a 7b 7d  2c 22 66 3a 6c 61 73 74  |Time":{},"f:last|
              00000140  54 72 61 6e 73 69 74 69  6f 6e 54 69 6d 65 22 3a  |TransitionTime":|
              00000150  7b 7d 2c 22 66 3a 73 74  61 74 75 73 22 3a 7b 7d  |{},"f:status":{}|
              00000160  2c 22 66 3a 74 79 70 65  22 3a 7b 7d 7d 7d 2c 22  |,"f:type":{}}},"|
              00000170  66 3a 63 6f 6e 74 61 69  6e 65 72 53 74 61 74 75  |f:containerStatu|
              00000180  73 65 73 22 3a 7b 7d 2c  22 66 3a 68 6f 73 74 49  |ses":{},"f:hostI|
              00000190  50 22 3a 7b 7d 2c 22 66  3a 70 68 61 73 65 22 3a  |P":{},"f:phase":|
              000001a0  7b 7d 2c 22 66 3a 70 6f  64 49 50 22 3a 7b 7d 2c  |{},"f:podIP":{},|
              000001b0  22 66 3a 70 6f 64 49 50  73 22 3a 7b 22 2e 22 3a  |"f:podIPs":{".":|
              000001c0  7b 7d 2c 22 6b 3a 7b 5c  22 69 70 5c 22 3a 5c 22  |{},"k:{\"ip\":\"|
              000001d0  31 30 2e 31 30 30 2e 30  2e 33 34 5c 22 7d 22 3a  |10.100.0.34\"}":|
              000001e0  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 69 70 22 3a 7b  |{".":{},"f:ip":{|
              000001f0  7d 7d 7d 2c 22 66 3a 73  74 61 72 74 54 69 6d 65  |}}},"f:startTime|
              00000200  22 3a 7b 7d 7d 7d                                 |":{}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-8v9tq",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  })
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=5) "httpd",
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-8v9tq",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(0),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=46) "scw-conformance-default-2af6d8b4c6264cc5b9e5e6",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Running",
      Conditions: ([]v1.PodCondition) (len=4) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=11) "Initialized",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828478512,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=5) "Ready",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828478513,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=15) "ContainersReady",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828478513,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828478512,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) (len=11) "172.16.36.3",
      HostIPs: ([]v1.HostIP) <nil>,
      PodIP: (string) (len=11) "10.100.0.34",
      PodIPs: ([]v1.PodIP) (len=1) {
        (v1.PodIP) {
          IP: (string) (len=11) "10.100.0.34"
        }
      },
      StartTime: (*v1.Time)({
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63828478512,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      }),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) (len=1) {
        (v1.ContainerStatus) {
          Name: (string) (len=5) "httpd",
          State: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)({
              StartedAt: (v1.Time) {
                Time: (time.Time) {
                  wall: (uint64) 0,
                  ext: (int64) 63828478513,
                  loc: (*time.Location)(<already shown>)
                }
              }
            }),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          LastTerminationState: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          Ready: (bool) true,
          RestartCount: (int32) 0,
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          ImageID: (string) (len=109) "registry.k8s.io/e2e-test-images/httpd@sha256:148b022f5c5da426fc2f3c14b5c0867e58ef05961510c84749ac1fddcb0fef22",
          ContainerID: (string) (len=77) "containerd://0b225bdea6b28bda2e3f1c0c9b84b76f6d73fefc9c1ffa2e8b04581e011e7686",
          Started: (*bool)(true),
          AllocatedResources: (v1.ResourceList) <nil>,
          Resources: (*v1.ResourceRequirements)(<nil>)
        }
      },
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }

  Aug 24 12:55:21.196: INFO: Pod "webserver-deployment-557759b7c7-l2btd" is not available:
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=37) "webserver-deployment-557759b7c7-l2btd",
      GenerateName: (string) (len=32) "webserver-deployment-557759b7c7-",
      Namespace: (string) (len=15) "deployment-5781",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "e33f140c-da2e-4f19-8a54-00830095ebdd",
      ResourceVersion: (string) (len=10) "3405091372",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63828478519,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=17) "pod-template-hash": (string) (len=10) "557759b7c7",
        (string) (len=4) "name": (string) (len=5) "httpd"
      },
      Annotations: (map[string]string) <nil>,
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=31) "webserver-deployment-557759b7c7",
          UID: (types.UID) (len=36) "ceac2027-4ce2-4f1d-9406-345bec3d538b",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828478519,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=537) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |.":{},"f:name":{|
              00000040  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              00000050  65 2d 68 61 73 68 22 3a  7b 7d 7d 2c 22 66 3a 6f  |e-hash":{}},"f:o|
              00000060  77 6e 65 72 52 65 66 65  72 65 6e 63 65 73 22 3a  |wnerReferences":|
              00000070  7b 22 2e 22 3a 7b 7d 2c  22 6b 3a 7b 5c 22 75 69  |{".":{},"k:{\"ui|
              00000080  64 5c 22 3a 5c 22 63 65  61 63 32 30 32 37 2d 34  |d\":\"ceac2027-4|
              00000090  63 65 32 2d 34 66 31 64  2d 39 34 30 36 2d 33 34  |ce2-4f1d-9406-34|
              000000a0  35 62 65 63 33 64 35 33  38 62 5c 22 7d 22 3a 7b  |5bec3d538b\"}":{|
              000000b0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000000c0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              000000d0  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 68 74 74  |:{\"name\":\"htt|
              000000e0  70 64 5c 22 7d 22 3a 7b  22 2e 22 3a 7b 7d 2c 22  |pd\"}":{".":{},"|
              000000f0  66 3a 69 6d 61 67 65 22  3a 7b 7d 2c 22 66 3a 69  |f:image":{},"f:i|
              00000100  6d 61 67 65 50 75 6c 6c  50 6f 6c 69 63 79 22 3a  |magePullPolicy":|
              00000110  7b 7d 2c 22 66 3a 6e 61  6d 65 22 3a 7b 7d 2c 22  |{},"f:name":{},"|
              00000120  66 3a 72 65 73 6f 75 72  63 65 73 22 3a 7b 7d 2c  |f:resources":{},|
              00000130  22 66 3a 73 65 63 75 72  69 74 79 43 6f 6e 74 65  |"f:securityConte|
              00000140  78 74 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |xt":{},"f:termin|
              00000150  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 61 74 68  |ationMessagePath|
              00000160  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000170  69 6f 6e 4d 65 73 73 61  67 65 50 6f 6c 69 63 79  |ionMessagePolicy|
              00000180  22 3a 7b 7d 7d 7d 2c 22  66 3a 64 6e 73 50 6f 6c  |":{}}},"f:dnsPol|
              00000190  69 63 79 22 3a 7b 7d 2c  22 66 3a 65 6e 61 62 6c  |icy":{},"f:enabl|
              000001a0  65 53 65 72 76 69 63 65  4c 69 6e 6b 73 22 3a 7b  |eServiceLinks":{|
              000001b0  7d 2c 22 66 3a 72 65 73  74 61 72 74 50 6f 6c 69  |},"f:restartPoli|
              000001c0  63 79 22 3a 7b 7d 2c 22  66 3a 73 63 68 65 64 75  |cy":{},"f:schedu|
              000001d0  6c 65 72 4e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 73  |lerName":{},"f:s|
              000001e0  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              000001f0  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000200  6e 47 72 61 63 65 50 65  72 69 6f 64 53 65 63 6f  |nGracePeriodSeco|
              00000210  6e 64 73 22 3a 7b 7d 7d  7d                       |nds":{}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=7) "kubelet",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828478520,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=482) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  63 6f 6e 64 69 74 69 6f  6e 73 22 3a 7b 22 6b 3a  |conditions":{"k:|
              00000020  7b 5c 22 74 79 70 65 5c  22 3a 5c 22 43 6f 6e 74  |{\"type\":\"Cont|
              00000030  61 69 6e 65 72 73 52 65  61 64 79 5c 22 7d 22 3a  |ainersReady\"}":|
              00000040  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000050  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000060  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000070  6d 65 22 3a 7b 7d 2c 22  66 3a 6d 65 73 73 61 67  |me":{},"f:messag|
              00000080  65 22 3a 7b 7d 2c 22 66  3a 72 65 61 73 6f 6e 22  |e":{},"f:reason"|
              00000090  3a 7b 7d 2c 22 66 3a 73  74 61 74 75 73 22 3a 7b  |:{},"f:status":{|
              000000a0  7d 2c 22 66 3a 74 79 70  65 22 3a 7b 7d 7d 2c 22  |},"f:type":{}},"|
              000000b0  6b 3a 7b 5c 22 74 79 70  65 5c 22 3a 5c 22 49 6e  |k:{\"type\":\"In|
              000000c0  69 74 69 61 6c 69 7a 65  64 5c 22 7d 22 3a 7b 22  |itialized\"}":{"|
              000000d0  2e 22 3a 7b 7d 2c 22 66  3a 6c 61 73 74 50 72 6f  |.":{},"f:lastPro|
              000000e0  62 65 54 69 6d 65 22 3a  7b 7d 2c 22 66 3a 6c 61  |beTime":{},"f:la|
              000000f0  73 74 54 72 61 6e 73 69  74 69 6f 6e 54 69 6d 65  |stTransitionTime|
              00000100  22 3a 7b 7d 2c 22 66 3a  73 74 61 74 75 73 22 3a  |":{},"f:status":|
              00000110  7b 7d 2c 22 66 3a 74 79  70 65 22 3a 7b 7d 7d 2c  |{},"f:type":{}},|
              00000120  22 6b 3a 7b 5c 22 74 79  70 65 5c 22 3a 5c 22 52  |"k:{\"type\":\"R|
              00000130  65 61 64 79 5c 22 7d 22  3a 7b 22 2e 22 3a 7b 7d  |eady\"}":{".":{}|
              00000140  2c 22 66 3a 6c 61 73 74  50 72 6f 62 65 54 69 6d  |,"f:lastProbeTim|
              00000150  65 22 3a 7b 7d 2c 22 66  3a 6c 61 73 74 54 72 61  |e":{},"f:lastTra|
              00000160  6e 73 69 74 69 6f 6e 54  69 6d 65 22 3a 7b 7d 2c  |nsitionTime":{},|
              00000170  22 66 3a 6d 65 73 73 61  67 65 22 3a 7b 7d 2c 22  |"f:message":{},"|
              00000180  66 3a 72 65 61 73 6f 6e  22 3a 7b 7d 2c 22 66 3a  |f:reason":{},"f:|
              00000190  73 74 61 74 75 73 22 3a  7b 7d 2c 22 66 3a 74 79  |status":{},"f:ty|
              000001a0  70 65 22 3a 7b 7d 7d 7d  2c 22 66 3a 63 6f 6e 74  |pe":{}}},"f:cont|
              000001b0  61 69 6e 65 72 53 74 61  74 75 73 65 73 22 3a 7b  |ainerStatuses":{|
              000001c0  7d 2c 22 66 3a 68 6f 73  74 49 50 22 3a 7b 7d 2c  |},"f:hostIP":{},|
              000001d0  22 66 3a 73 74 61 72 74  54 69 6d 65 22 3a 7b 7d  |"f:startTime":{}|
              000001e0  7d 7d                                             |}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-gjw4w",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  })
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=5) "httpd",
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-gjw4w",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(0),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=46) "scw-conformance-default-ecf11ec729064adba7e270",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Pending",
      Conditions: ([]v1.PodCondition) (len=4) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=11) "Initialized",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828478519,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=5) "Ready",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828478519,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=18) "ContainersNotReady",
          Message: (string) (len=39) "containers with unready status: [httpd]"
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=15) "ContainersReady",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828478519,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=18) "ContainersNotReady",
          Message: (string) (len=39) "containers with unready status: [httpd]"
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828478519,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) (len=11) "172.16.36.2",
      HostIPs: ([]v1.HostIP) <nil>,
      PodIP: (string) "",
      PodIPs: ([]v1.PodIP) <nil>,
      StartTime: (*v1.Time)({
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63828478519,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      }),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) (len=1) {
        (v1.ContainerStatus) {
          Name: (string) (len=5) "httpd",
          State: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)({
              Reason: (string) (len=17) "ContainerCreating",
              Message: (string) ""
            }),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          LastTerminationState: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          Ready: (bool) false,
          RestartCount: (int32) 0,
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          ImageID: (string) "",
          ContainerID: (string) "",
          Started: (*bool)(false),
          AllocatedResources: (v1.ResourceList) <nil>,
          Resources: (*v1.ResourceRequirements)(<nil>)
        }
      },
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }

  Aug 24 12:55:21.197: INFO: Pod "webserver-deployment-557759b7c7-lxq6x" is not available:
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=37) "webserver-deployment-557759b7c7-lxq6x",
      GenerateName: (string) (len=32) "webserver-deployment-557759b7c7-",
      Namespace: (string) (len=15) "deployment-5781",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "ce54638b-8937-4a1b-860f-db381b9fff1b",
      ResourceVersion: (string) (len=10) "3405091397",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63828478519,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=5) "httpd",
        (string) (len=17) "pod-template-hash": (string) (len=10) "557759b7c7"
      },
      Annotations: (map[string]string) <nil>,
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=31) "webserver-deployment-557759b7c7",
          UID: (types.UID) (len=36) "ceac2027-4ce2-4f1d-9406-345bec3d538b",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828478519,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=537) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |.":{},"f:name":{|
              00000040  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              00000050  65 2d 68 61 73 68 22 3a  7b 7d 7d 2c 22 66 3a 6f  |e-hash":{}},"f:o|
              00000060  77 6e 65 72 52 65 66 65  72 65 6e 63 65 73 22 3a  |wnerReferences":|
              00000070  7b 22 2e 22 3a 7b 7d 2c  22 6b 3a 7b 5c 22 75 69  |{".":{},"k:{\"ui|
              00000080  64 5c 22 3a 5c 22 63 65  61 63 32 30 32 37 2d 34  |d\":\"ceac2027-4|
              00000090  63 65 32 2d 34 66 31 64  2d 39 34 30 36 2d 33 34  |ce2-4f1d-9406-34|
              000000a0  35 62 65 63 33 64 35 33  38 62 5c 22 7d 22 3a 7b  |5bec3d538b\"}":{|
              000000b0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000000c0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              000000d0  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 68 74 74  |:{\"name\":\"htt|
              000000e0  70 64 5c 22 7d 22 3a 7b  22 2e 22 3a 7b 7d 2c 22  |pd\"}":{".":{},"|
              000000f0  66 3a 69 6d 61 67 65 22  3a 7b 7d 2c 22 66 3a 69  |f:image":{},"f:i|
              00000100  6d 61 67 65 50 75 6c 6c  50 6f 6c 69 63 79 22 3a  |magePullPolicy":|
              00000110  7b 7d 2c 22 66 3a 6e 61  6d 65 22 3a 7b 7d 2c 22  |{},"f:name":{},"|
              00000120  66 3a 72 65 73 6f 75 72  63 65 73 22 3a 7b 7d 2c  |f:resources":{},|
              00000130  22 66 3a 73 65 63 75 72  69 74 79 43 6f 6e 74 65  |"f:securityConte|
              00000140  78 74 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |xt":{},"f:termin|
              00000150  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 61 74 68  |ationMessagePath|
              00000160  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000170  69 6f 6e 4d 65 73 73 61  67 65 50 6f 6c 69 63 79  |ionMessagePolicy|
              00000180  22 3a 7b 7d 7d 7d 2c 22  66 3a 64 6e 73 50 6f 6c  |":{}}},"f:dnsPol|
              00000190  69 63 79 22 3a 7b 7d 2c  22 66 3a 65 6e 61 62 6c  |icy":{},"f:enabl|
              000001a0  65 53 65 72 76 69 63 65  4c 69 6e 6b 73 22 3a 7b  |eServiceLinks":{|
              000001b0  7d 2c 22 66 3a 72 65 73  74 61 72 74 50 6f 6c 69  |},"f:restartPoli|
              000001c0  63 79 22 3a 7b 7d 2c 22  66 3a 73 63 68 65 64 75  |cy":{},"f:schedu|
              000001d0  6c 65 72 4e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 73  |lerName":{},"f:s|
              000001e0  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              000001f0  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000200  6e 47 72 61 63 65 50 65  72 69 6f 64 53 65 63 6f  |nGracePeriodSeco|
              00000210  6e 64 73 22 3a 7b 7d 7d  7d                       |nds":{}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=7) "kubelet",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828478520,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=482) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  63 6f 6e 64 69 74 69 6f  6e 73 22 3a 7b 22 6b 3a  |conditions":{"k:|
              00000020  7b 5c 22 74 79 70 65 5c  22 3a 5c 22 43 6f 6e 74  |{\"type\":\"Cont|
              00000030  61 69 6e 65 72 73 52 65  61 64 79 5c 22 7d 22 3a  |ainersReady\"}":|
              00000040  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000050  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000060  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000070  6d 65 22 3a 7b 7d 2c 22  66 3a 6d 65 73 73 61 67  |me":{},"f:messag|
              00000080  65 22 3a 7b 7d 2c 22 66  3a 72 65 61 73 6f 6e 22  |e":{},"f:reason"|
              00000090  3a 7b 7d 2c 22 66 3a 73  74 61 74 75 73 22 3a 7b  |:{},"f:status":{|
              000000a0  7d 2c 22 66 3a 74 79 70  65 22 3a 7b 7d 7d 2c 22  |},"f:type":{}},"|
              000000b0  6b 3a 7b 5c 22 74 79 70  65 5c 22 3a 5c 22 49 6e  |k:{\"type\":\"In|
              000000c0  69 74 69 61 6c 69 7a 65  64 5c 22 7d 22 3a 7b 22  |itialized\"}":{"|
              000000d0  2e 22 3a 7b 7d 2c 22 66  3a 6c 61 73 74 50 72 6f  |.":{},"f:lastPro|
              000000e0  62 65 54 69 6d 65 22 3a  7b 7d 2c 22 66 3a 6c 61  |beTime":{},"f:la|
              000000f0  73 74 54 72 61 6e 73 69  74 69 6f 6e 54 69 6d 65  |stTransitionTime|
              00000100  22 3a 7b 7d 2c 22 66 3a  73 74 61 74 75 73 22 3a  |":{},"f:status":|
              00000110  7b 7d 2c 22 66 3a 74 79  70 65 22 3a 7b 7d 7d 2c  |{},"f:type":{}},|
              00000120  22 6b 3a 7b 5c 22 74 79  70 65 5c 22 3a 5c 22 52  |"k:{\"type\":\"R|
              00000130  65 61 64 79 5c 22 7d 22  3a 7b 22 2e 22 3a 7b 7d  |eady\"}":{".":{}|
              00000140  2c 22 66 3a 6c 61 73 74  50 72 6f 62 65 54 69 6d  |,"f:lastProbeTim|
              00000150  65 22 3a 7b 7d 2c 22 66  3a 6c 61 73 74 54 72 61  |e":{},"f:lastTra|
              00000160  6e 73 69 74 69 6f 6e 54  69 6d 65 22 3a 7b 7d 2c  |nsitionTime":{},|
              00000170  22 66 3a 6d 65 73 73 61  67 65 22 3a 7b 7d 2c 22  |"f:message":{},"|
              00000180  66 3a 72 65 61 73 6f 6e  22 3a 7b 7d 2c 22 66 3a  |f:reason":{},"f:|
              00000190  73 74 61 74 75 73 22 3a  7b 7d 2c 22 66 3a 74 79  |status":{},"f:ty|
              000001a0  70 65 22 3a 7b 7d 7d 7d  2c 22 66 3a 63 6f 6e 74  |pe":{}}},"f:cont|
              000001b0  61 69 6e 65 72 53 74 61  74 75 73 65 73 22 3a 7b  |ainerStatuses":{|
              000001c0  7d 2c 22 66 3a 68 6f 73  74 49 50 22 3a 7b 7d 2c  |},"f:hostIP":{},|
              000001d0  22 66 3a 73 74 61 72 74  54 69 6d 65 22 3a 7b 7d  |"f:startTime":{}|
              000001e0  7d 7d                                             |}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-pwdnh",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  })
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=5) "httpd",
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-pwdnh",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(0),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=46) "scw-conformance-default-ecf11ec729064adba7e270",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Pending",
      Conditions: ([]v1.PodCondition) (len=4) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=11) "Initialized",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828478519,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=5) "Ready",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828478519,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=18) "ContainersNotReady",
          Message: (string) (len=39) "containers with unready status: [httpd]"
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=15) "ContainersReady",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828478519,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=18) "ContainersNotReady",
          Message: (string) (len=39) "containers with unready status: [httpd]"
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828478519,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) (len=11) "172.16.36.2",
      HostIPs: ([]v1.HostIP) <nil>,
      PodIP: (string) "",
      PodIPs: ([]v1.PodIP) <nil>,
      StartTime: (*v1.Time)({
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63828478519,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      }),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) (len=1) {
        (v1.ContainerStatus) {
          Name: (string) (len=5) "httpd",
          State: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)({
              Reason: (string) (len=17) "ContainerCreating",
              Message: (string) ""
            }),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          LastTerminationState: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          Ready: (bool) false,
          RestartCount: (int32) 0,
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          ImageID: (string) "",
          ContainerID: (string) "",
          Started: (*bool)(false),
          AllocatedResources: (v1.ResourceList) <nil>,
          Resources: (*v1.ResourceRequirements)(<nil>)
        }
      },
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }

  Aug 24 12:55:21.198: INFO: Pod "webserver-deployment-557759b7c7-sk94t" is available:
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=37) "webserver-deployment-557759b7c7-sk94t",
      GenerateName: (string) (len=32) "webserver-deployment-557759b7c7-",
      Namespace: (string) (len=15) "deployment-5781",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "02e74cac-f84f-4a56-94b3-77f241ba5227",
      ResourceVersion: (string) (len=10) "3405090945",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63828478512,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=5) "httpd",
        (string) (len=17) "pod-template-hash": (string) (len=10) "557759b7c7"
      },
      Annotations: (map[string]string) <nil>,
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=31) "webserver-deployment-557759b7c7",
          UID: (types.UID) (len=36) "ceac2027-4ce2-4f1d-9406-345bec3d538b",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828478512,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=537) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |.":{},"f:name":{|
              00000040  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              00000050  65 2d 68 61 73 68 22 3a  7b 7d 7d 2c 22 66 3a 6f  |e-hash":{}},"f:o|
              00000060  77 6e 65 72 52 65 66 65  72 65 6e 63 65 73 22 3a  |wnerReferences":|
              00000070  7b 22 2e 22 3a 7b 7d 2c  22 6b 3a 7b 5c 22 75 69  |{".":{},"k:{\"ui|
              00000080  64 5c 22 3a 5c 22 63 65  61 63 32 30 32 37 2d 34  |d\":\"ceac2027-4|
              00000090  63 65 32 2d 34 66 31 64  2d 39 34 30 36 2d 33 34  |ce2-4f1d-9406-34|
              000000a0  35 62 65 63 33 64 35 33  38 62 5c 22 7d 22 3a 7b  |5bec3d538b\"}":{|
              000000b0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000000c0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              000000d0  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 68 74 74  |:{\"name\":\"htt|
              000000e0  70 64 5c 22 7d 22 3a 7b  22 2e 22 3a 7b 7d 2c 22  |pd\"}":{".":{},"|
              000000f0  66 3a 69 6d 61 67 65 22  3a 7b 7d 2c 22 66 3a 69  |f:image":{},"f:i|
              00000100  6d 61 67 65 50 75 6c 6c  50 6f 6c 69 63 79 22 3a  |magePullPolicy":|
              00000110  7b 7d 2c 22 66 3a 6e 61  6d 65 22 3a 7b 7d 2c 22  |{},"f:name":{},"|
              00000120  66 3a 72 65 73 6f 75 72  63 65 73 22 3a 7b 7d 2c  |f:resources":{},|
              00000130  22 66 3a 73 65 63 75 72  69 74 79 43 6f 6e 74 65  |"f:securityConte|
              00000140  78 74 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |xt":{},"f:termin|
              00000150  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 61 74 68  |ationMessagePath|
              00000160  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000170  69 6f 6e 4d 65 73 73 61  67 65 50 6f 6c 69 63 79  |ionMessagePolicy|
              00000180  22 3a 7b 7d 7d 7d 2c 22  66 3a 64 6e 73 50 6f 6c  |":{}}},"f:dnsPol|
              00000190  69 63 79 22 3a 7b 7d 2c  22 66 3a 65 6e 61 62 6c  |icy":{},"f:enabl|
              000001a0  65 53 65 72 76 69 63 65  4c 69 6e 6b 73 22 3a 7b  |eServiceLinks":{|
              000001b0  7d 2c 22 66 3a 72 65 73  74 61 72 74 50 6f 6c 69  |},"f:restartPoli|
              000001c0  63 79 22 3a 7b 7d 2c 22  66 3a 73 63 68 65 64 75  |cy":{},"f:schedu|
              000001d0  6c 65 72 4e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 73  |lerName":{},"f:s|
              000001e0  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              000001f0  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000200  6e 47 72 61 63 65 50 65  72 69 6f 64 53 65 63 6f  |nGracePeriodSeco|
              00000210  6e 64 73 22 3a 7b 7d 7d  7d                       |nds":{}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=7) "kubelet",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828478514,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=518) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  63 6f 6e 64 69 74 69 6f  6e 73 22 3a 7b 22 6b 3a  |conditions":{"k:|
              00000020  7b 5c 22 74 79 70 65 5c  22 3a 5c 22 43 6f 6e 74  |{\"type\":\"Cont|
              00000030  61 69 6e 65 72 73 52 65  61 64 79 5c 22 7d 22 3a  |ainersReady\"}":|
              00000040  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000050  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000060  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000070  6d 65 22 3a 7b 7d 2c 22  66 3a 73 74 61 74 75 73  |me":{},"f:status|
              00000080  22 3a 7b 7d 2c 22 66 3a  74 79 70 65 22 3a 7b 7d  |":{},"f:type":{}|
              00000090  7d 2c 22 6b 3a 7b 5c 22  74 79 70 65 5c 22 3a 5c  |},"k:{\"type\":\|
              000000a0  22 49 6e 69 74 69 61 6c  69 7a 65 64 5c 22 7d 22  |"Initialized\"}"|
              000000b0  3a 7b 22 2e 22 3a 7b 7d  2c 22 66 3a 6c 61 73 74  |:{".":{},"f:last|
              000000c0  50 72 6f 62 65 54 69 6d  65 22 3a 7b 7d 2c 22 66  |ProbeTime":{},"f|
              000000d0  3a 6c 61 73 74 54 72 61  6e 73 69 74 69 6f 6e 54  |:lastTransitionT|
              000000e0  69 6d 65 22 3a 7b 7d 2c  22 66 3a 73 74 61 74 75  |ime":{},"f:statu|
              000000f0  73 22 3a 7b 7d 2c 22 66  3a 74 79 70 65 22 3a 7b  |s":{},"f:type":{|
              00000100  7d 7d 2c 22 6b 3a 7b 5c  22 74 79 70 65 5c 22 3a  |}},"k:{\"type\":|
              00000110  5c 22 52 65 61 64 79 5c  22 7d 22 3a 7b 22 2e 22  |\"Ready\"}":{"."|
              00000120  3a 7b 7d 2c 22 66 3a 6c  61 73 74 50 72 6f 62 65  |:{},"f:lastProbe|
              00000130  54 69 6d 65 22 3a 7b 7d  2c 22 66 3a 6c 61 73 74  |Time":{},"f:last|
              00000140  54 72 61 6e 73 69 74 69  6f 6e 54 69 6d 65 22 3a  |TransitionTime":|
              00000150  7b 7d 2c 22 66 3a 73 74  61 74 75 73 22 3a 7b 7d  |{},"f:status":{}|
              00000160  2c 22 66 3a 74 79 70 65  22 3a 7b 7d 7d 7d 2c 22  |,"f:type":{}}},"|
              00000170  66 3a 63 6f 6e 74 61 69  6e 65 72 53 74 61 74 75  |f:containerStatu|
              00000180  73 65 73 22 3a 7b 7d 2c  22 66 3a 68 6f 73 74 49  |ses":{},"f:hostI|
              00000190  50 22 3a 7b 7d 2c 22 66  3a 70 68 61 73 65 22 3a  |P":{},"f:phase":|
              000001a0  7b 7d 2c 22 66 3a 70 6f  64 49 50 22 3a 7b 7d 2c  |{},"f:podIP":{},|
              000001b0  22 66 3a 70 6f 64 49 50  73 22 3a 7b 22 2e 22 3a  |"f:podIPs":{".":|
              000001c0  7b 7d 2c 22 6b 3a 7b 5c  22 69 70 5c 22 3a 5c 22  |{},"k:{\"ip\":\"|
              000001d0  31 30 2e 31 30 30 2e 30  2e 31 32 5c 22 7d 22 3a  |10.100.0.12\"}":|
              000001e0  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 69 70 22 3a 7b  |{".":{},"f:ip":{|
              000001f0  7d 7d 7d 2c 22 66 3a 73  74 61 72 74 54 69 6d 65  |}}},"f:startTime|
              00000200  22 3a 7b 7d 7d 7d                                 |":{}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-zn9gv",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  })
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=5) "httpd",
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-zn9gv",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(0),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=46) "scw-conformance-default-2af6d8b4c6264cc5b9e5e6",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Running",
      Conditions: ([]v1.PodCondition) (len=4) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=11) "Initialized",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828478512,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=5) "Ready",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828478513,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=15) "ContainersReady",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828478513,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828478512,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) (len=11) "172.16.36.3",
      HostIPs: ([]v1.HostIP) <nil>,
      PodIP: (string) (len=11) "10.100.0.12",
      PodIPs: ([]v1.PodIP) (len=1) {
        (v1.PodIP) {
          IP: (string) (len=11) "10.100.0.12"
        }
      },
      StartTime: (*v1.Time)({
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63828478512,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      }),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) (len=1) {
        (v1.ContainerStatus) {
          Name: (string) (len=5) "httpd",
          State: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)({
              StartedAt: (v1.Time) {
                Time: (time.Time) {
                  wall: (uint64) 0,
                  ext: (int64) 63828478513,
                  loc: (*time.Location)(<already shown>)
                }
              }
            }),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          LastTerminationState: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          Ready: (bool) true,
          RestartCount: (int32) 0,
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          ImageID: (string) (len=109) "registry.k8s.io/e2e-test-images/httpd@sha256:148b022f5c5da426fc2f3c14b5c0867e58ef05961510c84749ac1fddcb0fef22",
          ContainerID: (string) (len=77) "containerd://43ee9175b3ad62d11af28bedb901e3128bd7980488ae5420ed0894c9204e433c",
          Started: (*bool)(true),
          AllocatedResources: (v1.ResourceList) <nil>,
          Resources: (*v1.ResourceRequirements)(<nil>)
        }
      },
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }

  Aug 24 12:55:21.199: INFO: Pod "webserver-deployment-557759b7c7-sxjgw" is available:
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=37) "webserver-deployment-557759b7c7-sxjgw",
      GenerateName: (string) (len=32) "webserver-deployment-557759b7c7-",
      Namespace: (string) (len=15) "deployment-5781",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "b79591b9-2646-4a32-a6e9-cc6f8372f068",
      ResourceVersion: (string) (len=10) "3405090974",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63828478512,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=5) "httpd",
        (string) (len=17) "pod-template-hash": (string) (len=10) "557759b7c7"
      },
      Annotations: (map[string]string) <nil>,
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=31) "webserver-deployment-557759b7c7",
          UID: (types.UID) (len=36) "ceac2027-4ce2-4f1d-9406-345bec3d538b",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828478512,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=537) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |.":{},"f:name":{|
              00000040  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              00000050  65 2d 68 61 73 68 22 3a  7b 7d 7d 2c 22 66 3a 6f  |e-hash":{}},"f:o|
              00000060  77 6e 65 72 52 65 66 65  72 65 6e 63 65 73 22 3a  |wnerReferences":|
              00000070  7b 22 2e 22 3a 7b 7d 2c  22 6b 3a 7b 5c 22 75 69  |{".":{},"k:{\"ui|
              00000080  64 5c 22 3a 5c 22 63 65  61 63 32 30 32 37 2d 34  |d\":\"ceac2027-4|
              00000090  63 65 32 2d 34 66 31 64  2d 39 34 30 36 2d 33 34  |ce2-4f1d-9406-34|
              000000a0  35 62 65 63 33 64 35 33  38 62 5c 22 7d 22 3a 7b  |5bec3d538b\"}":{|
              000000b0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000000c0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              000000d0  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 68 74 74  |:{\"name\":\"htt|
              000000e0  70 64 5c 22 7d 22 3a 7b  22 2e 22 3a 7b 7d 2c 22  |pd\"}":{".":{},"|
              000000f0  66 3a 69 6d 61 67 65 22  3a 7b 7d 2c 22 66 3a 69  |f:image":{},"f:i|
              00000100  6d 61 67 65 50 75 6c 6c  50 6f 6c 69 63 79 22 3a  |magePullPolicy":|
              00000110  7b 7d 2c 22 66 3a 6e 61  6d 65 22 3a 7b 7d 2c 22  |{},"f:name":{},"|
              00000120  66 3a 72 65 73 6f 75 72  63 65 73 22 3a 7b 7d 2c  |f:resources":{},|
              00000130  22 66 3a 73 65 63 75 72  69 74 79 43 6f 6e 74 65  |"f:securityConte|
              00000140  78 74 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |xt":{},"f:termin|
              00000150  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 61 74 68  |ationMessagePath|
              00000160  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000170  69 6f 6e 4d 65 73 73 61  67 65 50 6f 6c 69 63 79  |ionMessagePolicy|
              00000180  22 3a 7b 7d 7d 7d 2c 22  66 3a 64 6e 73 50 6f 6c  |":{}}},"f:dnsPol|
              00000190  69 63 79 22 3a 7b 7d 2c  22 66 3a 65 6e 61 62 6c  |icy":{},"f:enabl|
              000001a0  65 53 65 72 76 69 63 65  4c 69 6e 6b 73 22 3a 7b  |eServiceLinks":{|
              000001b0  7d 2c 22 66 3a 72 65 73  74 61 72 74 50 6f 6c 69  |},"f:restartPoli|
              000001c0  63 79 22 3a 7b 7d 2c 22  66 3a 73 63 68 65 64 75  |cy":{},"f:schedu|
              000001d0  6c 65 72 4e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 73  |lerName":{},"f:s|
              000001e0  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              000001f0  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000200  6e 47 72 61 63 65 50 65  72 69 6f 64 53 65 63 6f  |nGracePeriodSeco|
              00000210  6e 64 73 22 3a 7b 7d 7d  7d                       |nds":{}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=7) "kubelet",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828478515,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=517) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  63 6f 6e 64 69 74 69 6f  6e 73 22 3a 7b 22 6b 3a  |conditions":{"k:|
              00000020  7b 5c 22 74 79 70 65 5c  22 3a 5c 22 43 6f 6e 74  |{\"type\":\"Cont|
              00000030  61 69 6e 65 72 73 52 65  61 64 79 5c 22 7d 22 3a  |ainersReady\"}":|
              00000040  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000050  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000060  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000070  6d 65 22 3a 7b 7d 2c 22  66 3a 73 74 61 74 75 73  |me":{},"f:status|
              00000080  22 3a 7b 7d 2c 22 66 3a  74 79 70 65 22 3a 7b 7d  |":{},"f:type":{}|
              00000090  7d 2c 22 6b 3a 7b 5c 22  74 79 70 65 5c 22 3a 5c  |},"k:{\"type\":\|
              000000a0  22 49 6e 69 74 69 61 6c  69 7a 65 64 5c 22 7d 22  |"Initialized\"}"|
              000000b0  3a 7b 22 2e 22 3a 7b 7d  2c 22 66 3a 6c 61 73 74  |:{".":{},"f:last|
              000000c0  50 72 6f 62 65 54 69 6d  65 22 3a 7b 7d 2c 22 66  |ProbeTime":{},"f|
              000000d0  3a 6c 61 73 74 54 72 61  6e 73 69 74 69 6f 6e 54  |:lastTransitionT|
              000000e0  69 6d 65 22 3a 7b 7d 2c  22 66 3a 73 74 61 74 75  |ime":{},"f:statu|
              000000f0  73 22 3a 7b 7d 2c 22 66  3a 74 79 70 65 22 3a 7b  |s":{},"f:type":{|
              00000100  7d 7d 2c 22 6b 3a 7b 5c  22 74 79 70 65 5c 22 3a  |}},"k:{\"type\":|
              00000110  5c 22 52 65 61 64 79 5c  22 7d 22 3a 7b 22 2e 22  |\"Ready\"}":{"."|
              00000120  3a 7b 7d 2c 22 66 3a 6c  61 73 74 50 72 6f 62 65  |:{},"f:lastProbe|
              00000130  54 69 6d 65 22 3a 7b 7d  2c 22 66 3a 6c 61 73 74  |Time":{},"f:last|
              00000140  54 72 61 6e 73 69 74 69  6f 6e 54 69 6d 65 22 3a  |TransitionTime":|
              00000150  7b 7d 2c 22 66 3a 73 74  61 74 75 73 22 3a 7b 7d  |{},"f:status":{}|
              00000160  2c 22 66 3a 74 79 70 65  22 3a 7b 7d 7d 7d 2c 22  |,"f:type":{}}},"|
              00000170  66 3a 63 6f 6e 74 61 69  6e 65 72 53 74 61 74 75  |f:containerStatu|
              00000180  73 65 73 22 3a 7b 7d 2c  22 66 3a 68 6f 73 74 49  |ses":{},"f:hostI|
              00000190  50 22 3a 7b 7d 2c 22 66  3a 70 68 61 73 65 22 3a  |P":{},"f:phase":|
              000001a0  7b 7d 2c 22 66 3a 70 6f  64 49 50 22 3a 7b 7d 2c  |{},"f:podIP":{},|
              000001b0  22 66 3a 70 6f 64 49 50  73 22 3a 7b 22 2e 22 3a  |"f:podIPs":{".":|
              000001c0  7b 7d 2c 22 6b 3a 7b 5c  22 69 70 5c 22 3a 5c 22  |{},"k:{\"ip\":\"|
              000001d0  31 30 2e 31 30 30 2e 31  2e 37 5c 22 7d 22 3a 7b  |10.100.1.7\"}":{|
              000001e0  22 2e 22 3a 7b 7d 2c 22  66 3a 69 70 22 3a 7b 7d  |".":{},"f:ip":{}|
              000001f0  7d 7d 2c 22 66 3a 73 74  61 72 74 54 69 6d 65 22  |}},"f:startTime"|
              00000200  3a 7b 7d 7d 7d                                    |:{}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-xkxsv",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  })
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=5) "httpd",
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-xkxsv",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(0),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=46) "scw-conformance-default-ecf11ec729064adba7e270",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Running",
      Conditions: ([]v1.PodCondition) (len=4) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=11) "Initialized",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828478512,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=5) "Ready",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828478514,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=15) "ContainersReady",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828478514,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828478512,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) (len=11) "172.16.36.2",
      HostIPs: ([]v1.HostIP) <nil>,
      PodIP: (string) (len=10) "10.100.1.7",
      PodIPs: ([]v1.PodIP) (len=1) {
        (v1.PodIP) {
          IP: (string) (len=10) "10.100.1.7"
        }
      },
      StartTime: (*v1.Time)({
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63828478512,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      }),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) (len=1) {
        (v1.ContainerStatus) {
          Name: (string) (len=5) "httpd",
          State: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)({
              StartedAt: (v1.Time) {
                Time: (time.Time) {
                  wall: (uint64) 0,
                  ext: (int64) 63828478513,
                  loc: (*time.Location)(<already shown>)
                }
              }
            }),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          LastTerminationState: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          Ready: (bool) true,
          RestartCount: (int32) 0,
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          ImageID: (string) (len=109) "registry.k8s.io/e2e-test-images/httpd@sha256:148b022f5c5da426fc2f3c14b5c0867e58ef05961510c84749ac1fddcb0fef22",
          ContainerID: (string) (len=77) "containerd://50feb55417a4fd16c30b49c3610cab1642552a70e081546a7a1a480996ac8b23",
          Started: (*bool)(true),
          AllocatedResources: (v1.ResourceList) <nil>,
          Resources: (*v1.ResourceRequirements)(<nil>)
        }
      },
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }

  Aug 24 12:55:21.200: INFO: Pod "webserver-deployment-557759b7c7-tw7b9" is not available:
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=37) "webserver-deployment-557759b7c7-tw7b9",
      GenerateName: (string) (len=32) "webserver-deployment-557759b7c7-",
      Namespace: (string) (len=15) "deployment-5781",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "2225d2ba-f08f-4d4b-9e83-c2b40e354065",
      ResourceVersion: (string) (len=10) "3405091378",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63828478519,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=5) "httpd",
        (string) (len=17) "pod-template-hash": (string) (len=10) "557759b7c7"
      },
      Annotations: (map[string]string) <nil>,
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=31) "webserver-deployment-557759b7c7",
          UID: (types.UID) (len=36) "ceac2027-4ce2-4f1d-9406-345bec3d538b",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828478519,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=537) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |.":{},"f:name":{|
              00000040  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              00000050  65 2d 68 61 73 68 22 3a  7b 7d 7d 2c 22 66 3a 6f  |e-hash":{}},"f:o|
              00000060  77 6e 65 72 52 65 66 65  72 65 6e 63 65 73 22 3a  |wnerReferences":|
              00000070  7b 22 2e 22 3a 7b 7d 2c  22 6b 3a 7b 5c 22 75 69  |{".":{},"k:{\"ui|
              00000080  64 5c 22 3a 5c 22 63 65  61 63 32 30 32 37 2d 34  |d\":\"ceac2027-4|
              00000090  63 65 32 2d 34 66 31 64  2d 39 34 30 36 2d 33 34  |ce2-4f1d-9406-34|
              000000a0  35 62 65 63 33 64 35 33  38 62 5c 22 7d 22 3a 7b  |5bec3d538b\"}":{|
              000000b0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000000c0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              000000d0  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 68 74 74  |:{\"name\":\"htt|
              000000e0  70 64 5c 22 7d 22 3a 7b  22 2e 22 3a 7b 7d 2c 22  |pd\"}":{".":{},"|
              000000f0  66 3a 69 6d 61 67 65 22  3a 7b 7d 2c 22 66 3a 69  |f:image":{},"f:i|
              00000100  6d 61 67 65 50 75 6c 6c  50 6f 6c 69 63 79 22 3a  |magePullPolicy":|
              00000110  7b 7d 2c 22 66 3a 6e 61  6d 65 22 3a 7b 7d 2c 22  |{},"f:name":{},"|
              00000120  66 3a 72 65 73 6f 75 72  63 65 73 22 3a 7b 7d 2c  |f:resources":{},|
              00000130  22 66 3a 73 65 63 75 72  69 74 79 43 6f 6e 74 65  |"f:securityConte|
              00000140  78 74 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |xt":{},"f:termin|
              00000150  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 61 74 68  |ationMessagePath|
              00000160  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000170  69 6f 6e 4d 65 73 73 61  67 65 50 6f 6c 69 63 79  |ionMessagePolicy|
              00000180  22 3a 7b 7d 7d 7d 2c 22  66 3a 64 6e 73 50 6f 6c  |":{}}},"f:dnsPol|
              00000190  69 63 79 22 3a 7b 7d 2c  22 66 3a 65 6e 61 62 6c  |icy":{},"f:enabl|
              000001a0  65 53 65 72 76 69 63 65  4c 69 6e 6b 73 22 3a 7b  |eServiceLinks":{|
              000001b0  7d 2c 22 66 3a 72 65 73  74 61 72 74 50 6f 6c 69  |},"f:restartPoli|
              000001c0  63 79 22 3a 7b 7d 2c 22  66 3a 73 63 68 65 64 75  |cy":{},"f:schedu|
              000001d0  6c 65 72 4e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 73  |lerName":{},"f:s|
              000001e0  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              000001f0  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000200  6e 47 72 61 63 65 50 65  72 69 6f 64 53 65 63 6f  |nGracePeriodSeco|
              00000210  6e 64 73 22 3a 7b 7d 7d  7d                       |nds":{}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=7) "kubelet",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828478520,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=482) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  63 6f 6e 64 69 74 69 6f  6e 73 22 3a 7b 22 6b 3a  |conditions":{"k:|
              00000020  7b 5c 22 74 79 70 65 5c  22 3a 5c 22 43 6f 6e 74  |{\"type\":\"Cont|
              00000030  61 69 6e 65 72 73 52 65  61 64 79 5c 22 7d 22 3a  |ainersReady\"}":|
              00000040  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000050  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000060  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000070  6d 65 22 3a 7b 7d 2c 22  66 3a 6d 65 73 73 61 67  |me":{},"f:messag|
              00000080  65 22 3a 7b 7d 2c 22 66  3a 72 65 61 73 6f 6e 22  |e":{},"f:reason"|
              00000090  3a 7b 7d 2c 22 66 3a 73  74 61 74 75 73 22 3a 7b  |:{},"f:status":{|
              000000a0  7d 2c 22 66 3a 74 79 70  65 22 3a 7b 7d 7d 2c 22  |},"f:type":{}},"|
              000000b0  6b 3a 7b 5c 22 74 79 70  65 5c 22 3a 5c 22 49 6e  |k:{\"type\":\"In|
              000000c0  69 74 69 61 6c 69 7a 65  64 5c 22 7d 22 3a 7b 22  |itialized\"}":{"|
              000000d0  2e 22 3a 7b 7d 2c 22 66  3a 6c 61 73 74 50 72 6f  |.":{},"f:lastPro|
              000000e0  62 65 54 69 6d 65 22 3a  7b 7d 2c 22 66 3a 6c 61  |beTime":{},"f:la|
              000000f0  73 74 54 72 61 6e 73 69  74 69 6f 6e 54 69 6d 65  |stTransitionTime|
              00000100  22 3a 7b 7d 2c 22 66 3a  73 74 61 74 75 73 22 3a  |":{},"f:status":|
              00000110  7b 7d 2c 22 66 3a 74 79  70 65 22 3a 7b 7d 7d 2c  |{},"f:type":{}},|
              00000120  22 6b 3a 7b 5c 22 74 79  70 65 5c 22 3a 5c 22 52  |"k:{\"type\":\"R|
              00000130  65 61 64 79 5c 22 7d 22  3a 7b 22 2e 22 3a 7b 7d  |eady\"}":{".":{}|
              00000140  2c 22 66 3a 6c 61 73 74  50 72 6f 62 65 54 69 6d  |,"f:lastProbeTim|
              00000150  65 22 3a 7b 7d 2c 22 66  3a 6c 61 73 74 54 72 61  |e":{},"f:lastTra|
              00000160  6e 73 69 74 69 6f 6e 54  69 6d 65 22 3a 7b 7d 2c  |nsitionTime":{},|
              00000170  22 66 3a 6d 65 73 73 61  67 65 22 3a 7b 7d 2c 22  |"f:message":{},"|
              00000180  66 3a 72 65 61 73 6f 6e  22 3a 7b 7d 2c 22 66 3a  |f:reason":{},"f:|
              00000190  73 74 61 74 75 73 22 3a  7b 7d 2c 22 66 3a 74 79  |status":{},"f:ty|
              000001a0  70 65 22 3a 7b 7d 7d 7d  2c 22 66 3a 63 6f 6e 74  |pe":{}}},"f:cont|
              000001b0  61 69 6e 65 72 53 74 61  74 75 73 65 73 22 3a 7b  |ainerStatuses":{|
              000001c0  7d 2c 22 66 3a 68 6f 73  74 49 50 22 3a 7b 7d 2c  |},"f:hostIP":{},|
              000001d0  22 66 3a 73 74 61 72 74  54 69 6d 65 22 3a 7b 7d  |"f:startTime":{}|
              000001e0  7d 7d                                             |}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-pcz9v",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  })
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=5) "httpd",
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-pcz9v",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(0),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=46) "scw-conformance-default-ecf11ec729064adba7e270",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Pending",
      Conditions: ([]v1.PodCondition) (len=4) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=11) "Initialized",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828478519,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=5) "Ready",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828478519,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=18) "ContainersNotReady",
          Message: (string) (len=39) "containers with unready status: [httpd]"
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=15) "ContainersReady",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828478519,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=18) "ContainersNotReady",
          Message: (string) (len=39) "containers with unready status: [httpd]"
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828478519,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) (len=11) "172.16.36.2",
      HostIPs: ([]v1.HostIP) <nil>,
      PodIP: (string) "",
      PodIPs: ([]v1.PodIP) <nil>,
      StartTime: (*v1.Time)({
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63828478519,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      }),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) (len=1) {
        (v1.ContainerStatus) {
          Name: (string) (len=5) "httpd",
          State: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)({
              Reason: (string) (len=17) "ContainerCreating",
              Message: (string) ""
            }),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          LastTerminationState: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          Ready: (bool) false,
          RestartCount: (int32) 0,
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          ImageID: (string) "",
          ContainerID: (string) "",
          Started: (*bool)(false),
          AllocatedResources: (v1.ResourceList) <nil>,
          Resources: (*v1.ResourceRequirements)(<nil>)
        }
      },
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }

  Aug 24 12:55:21.201: INFO: Pod "webserver-deployment-557759b7c7-vr69j" is not available:
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=37) "webserver-deployment-557759b7c7-vr69j",
      GenerateName: (string) (len=32) "webserver-deployment-557759b7c7-",
      Namespace: (string) (len=15) "deployment-5781",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "d2750b24-6306-44f5-8e92-1845f3cdd848",
      ResourceVersion: (string) (len=10) "3405091400",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63828478519,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=5) "httpd",
        (string) (len=17) "pod-template-hash": (string) (len=10) "557759b7c7"
      },
      Annotations: (map[string]string) <nil>,
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=31) "webserver-deployment-557759b7c7",
          UID: (types.UID) (len=36) "ceac2027-4ce2-4f1d-9406-345bec3d538b",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828478519,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=537) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |.":{},"f:name":{|
              00000040  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              00000050  65 2d 68 61 73 68 22 3a  7b 7d 7d 2c 22 66 3a 6f  |e-hash":{}},"f:o|
              00000060  77 6e 65 72 52 65 66 65  72 65 6e 63 65 73 22 3a  |wnerReferences":|
              00000070  7b 22 2e 22 3a 7b 7d 2c  22 6b 3a 7b 5c 22 75 69  |{".":{},"k:{\"ui|
              00000080  64 5c 22 3a 5c 22 63 65  61 63 32 30 32 37 2d 34  |d\":\"ceac2027-4|
              00000090  63 65 32 2d 34 66 31 64  2d 39 34 30 36 2d 33 34  |ce2-4f1d-9406-34|
              000000a0  35 62 65 63 33 64 35 33  38 62 5c 22 7d 22 3a 7b  |5bec3d538b\"}":{|
              000000b0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000000c0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              000000d0  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 68 74 74  |:{\"name\":\"htt|
              000000e0  70 64 5c 22 7d 22 3a 7b  22 2e 22 3a 7b 7d 2c 22  |pd\"}":{".":{},"|
              000000f0  66 3a 69 6d 61 67 65 22  3a 7b 7d 2c 22 66 3a 69  |f:image":{},"f:i|
              00000100  6d 61 67 65 50 75 6c 6c  50 6f 6c 69 63 79 22 3a  |magePullPolicy":|
              00000110  7b 7d 2c 22 66 3a 6e 61  6d 65 22 3a 7b 7d 2c 22  |{},"f:name":{},"|
              00000120  66 3a 72 65 73 6f 75 72  63 65 73 22 3a 7b 7d 2c  |f:resources":{},|
              00000130  22 66 3a 73 65 63 75 72  69 74 79 43 6f 6e 74 65  |"f:securityConte|
              00000140  78 74 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |xt":{},"f:termin|
              00000150  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 61 74 68  |ationMessagePath|
              00000160  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000170  69 6f 6e 4d 65 73 73 61  67 65 50 6f 6c 69 63 79  |ionMessagePolicy|
              00000180  22 3a 7b 7d 7d 7d 2c 22  66 3a 64 6e 73 50 6f 6c  |":{}}},"f:dnsPol|
              00000190  69 63 79 22 3a 7b 7d 2c  22 66 3a 65 6e 61 62 6c  |icy":{},"f:enabl|
              000001a0  65 53 65 72 76 69 63 65  4c 69 6e 6b 73 22 3a 7b  |eServiceLinks":{|
              000001b0  7d 2c 22 66 3a 72 65 73  74 61 72 74 50 6f 6c 69  |},"f:restartPoli|
              000001c0  63 79 22 3a 7b 7d 2c 22  66 3a 73 63 68 65 64 75  |cy":{},"f:schedu|
              000001d0  6c 65 72 4e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 73  |lerName":{},"f:s|
              000001e0  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              000001f0  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000200  6e 47 72 61 63 65 50 65  72 69 6f 64 53 65 63 6f  |nGracePeriodSeco|
              00000210  6e 64 73 22 3a 7b 7d 7d  7d                       |nds":{}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=7) "kubelet",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828478520,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=482) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  63 6f 6e 64 69 74 69 6f  6e 73 22 3a 7b 22 6b 3a  |conditions":{"k:|
              00000020  7b 5c 22 74 79 70 65 5c  22 3a 5c 22 43 6f 6e 74  |{\"type\":\"Cont|
              00000030  61 69 6e 65 72 73 52 65  61 64 79 5c 22 7d 22 3a  |ainersReady\"}":|
              00000040  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000050  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000060  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000070  6d 65 22 3a 7b 7d 2c 22  66 3a 6d 65 73 73 61 67  |me":{},"f:messag|
              00000080  65 22 3a 7b 7d 2c 22 66  3a 72 65 61 73 6f 6e 22  |e":{},"f:reason"|
              00000090  3a 7b 7d 2c 22 66 3a 73  74 61 74 75 73 22 3a 7b  |:{},"f:status":{|
              000000a0  7d 2c 22 66 3a 74 79 70  65 22 3a 7b 7d 7d 2c 22  |},"f:type":{}},"|
              000000b0  6b 3a 7b 5c 22 74 79 70  65 5c 22 3a 5c 22 49 6e  |k:{\"type\":\"In|
              000000c0  69 74 69 61 6c 69 7a 65  64 5c 22 7d 22 3a 7b 22  |itialized\"}":{"|
              000000d0  2e 22 3a 7b 7d 2c 22 66  3a 6c 61 73 74 50 72 6f  |.":{},"f:lastPro|
              000000e0  62 65 54 69 6d 65 22 3a  7b 7d 2c 22 66 3a 6c 61  |beTime":{},"f:la|
              000000f0  73 74 54 72 61 6e 73 69  74 69 6f 6e 54 69 6d 65  |stTransitionTime|
              00000100  22 3a 7b 7d 2c 22 66 3a  73 74 61 74 75 73 22 3a  |":{},"f:status":|
              00000110  7b 7d 2c 22 66 3a 74 79  70 65 22 3a 7b 7d 7d 2c  |{},"f:type":{}},|
              00000120  22 6b 3a 7b 5c 22 74 79  70 65 5c 22 3a 5c 22 52  |"k:{\"type\":\"R|
              00000130  65 61 64 79 5c 22 7d 22  3a 7b 22 2e 22 3a 7b 7d  |eady\"}":{".":{}|
              00000140  2c 22 66 3a 6c 61 73 74  50 72 6f 62 65 54 69 6d  |,"f:lastProbeTim|
              00000150  65 22 3a 7b 7d 2c 22 66  3a 6c 61 73 74 54 72 61  |e":{},"f:lastTra|
              00000160  6e 73 69 74 69 6f 6e 54  69 6d 65 22 3a 7b 7d 2c  |nsitionTime":{},|
              00000170  22 66 3a 6d 65 73 73 61  67 65 22 3a 7b 7d 2c 22  |"f:message":{},"|
              00000180  66 3a 72 65 61 73 6f 6e  22 3a 7b 7d 2c 22 66 3a  |f:reason":{},"f:|
              00000190  73 74 61 74 75 73 22 3a  7b 7d 2c 22 66 3a 74 79  |status":{},"f:ty|
              000001a0  70 65 22 3a 7b 7d 7d 7d  2c 22 66 3a 63 6f 6e 74  |pe":{}}},"f:cont|
              000001b0  61 69 6e 65 72 53 74 61  74 75 73 65 73 22 3a 7b  |ainerStatuses":{|
              000001c0  7d 2c 22 66 3a 68 6f 73  74 49 50 22 3a 7b 7d 2c  |},"f:hostIP":{},|
              000001d0  22 66 3a 73 74 61 72 74  54 69 6d 65 22 3a 7b 7d  |"f:startTime":{}|
              000001e0  7d 7d                                             |}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-x2cgb",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  })
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=5) "httpd",
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-x2cgb",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(0),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=46) "scw-conformance-default-2af6d8b4c6264cc5b9e5e6",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Pending",
      Conditions: ([]v1.PodCondition) (len=4) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=11) "Initialized",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828478519,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=5) "Ready",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828478519,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=18) "ContainersNotReady",
          Message: (string) (len=39) "containers with unready status: [httpd]"
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=15) "ContainersReady",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828478519,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=18) "ContainersNotReady",
          Message: (string) (len=39) "containers with unready status: [httpd]"
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828478519,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) (len=11) "172.16.36.3",
      HostIPs: ([]v1.HostIP) <nil>,
      PodIP: (string) "",
      PodIPs: ([]v1.PodIP) <nil>,
      StartTime: (*v1.Time)({
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63828478519,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      }),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) (len=1) {
        (v1.ContainerStatus) {
          Name: (string) (len=5) "httpd",
          State: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)({
              Reason: (string) (len=17) "ContainerCreating",
              Message: (string) ""
            }),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          LastTerminationState: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          Ready: (bool) false,
          RestartCount: (int32) 0,
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          ImageID: (string) "",
          ContainerID: (string) "",
          Started: (*bool)(false),
          AllocatedResources: (v1.ResourceList) <nil>,
          Resources: (*v1.ResourceRequirements)(<nil>)
        }
      },
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }

  Aug 24 12:55:21.202: INFO: Pod "webserver-deployment-557759b7c7-wqnml" is not available:
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=37) "webserver-deployment-557759b7c7-wqnml",
      GenerateName: (string) (len=32) "webserver-deployment-557759b7c7-",
      Namespace: (string) (len=15) "deployment-5781",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "2a9a07a1-92e8-4601-81a5-ea12112d662d",
      ResourceVersion: (string) (len=10) "3405091268",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63828478519,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=5) "httpd",
        (string) (len=17) "pod-template-hash": (string) (len=10) "557759b7c7"
      },
      Annotations: (map[string]string) <nil>,
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=31) "webserver-deployment-557759b7c7",
          UID: (types.UID) (len=36) "ceac2027-4ce2-4f1d-9406-345bec3d538b",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828478519,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=537) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |.":{},"f:name":{|
              00000040  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              00000050  65 2d 68 61 73 68 22 3a  7b 7d 7d 2c 22 66 3a 6f  |e-hash":{}},"f:o|
              00000060  77 6e 65 72 52 65 66 65  72 65 6e 63 65 73 22 3a  |wnerReferences":|
              00000070  7b 22 2e 22 3a 7b 7d 2c  22 6b 3a 7b 5c 22 75 69  |{".":{},"k:{\"ui|
              00000080  64 5c 22 3a 5c 22 63 65  61 63 32 30 32 37 2d 34  |d\":\"ceac2027-4|
              00000090  63 65 32 2d 34 66 31 64  2d 39 34 30 36 2d 33 34  |ce2-4f1d-9406-34|
              000000a0  35 62 65 63 33 64 35 33  38 62 5c 22 7d 22 3a 7b  |5bec3d538b\"}":{|
              000000b0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000000c0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              000000d0  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 68 74 74  |:{\"name\":\"htt|
              000000e0  70 64 5c 22 7d 22 3a 7b  22 2e 22 3a 7b 7d 2c 22  |pd\"}":{".":{},"|
              000000f0  66 3a 69 6d 61 67 65 22  3a 7b 7d 2c 22 66 3a 69  |f:image":{},"f:i|
              00000100  6d 61 67 65 50 75 6c 6c  50 6f 6c 69 63 79 22 3a  |magePullPolicy":|
              00000110  7b 7d 2c 22 66 3a 6e 61  6d 65 22 3a 7b 7d 2c 22  |{},"f:name":{},"|
              00000120  66 3a 72 65 73 6f 75 72  63 65 73 22 3a 7b 7d 2c  |f:resources":{},|
              00000130  22 66 3a 73 65 63 75 72  69 74 79 43 6f 6e 74 65  |"f:securityConte|
              00000140  78 74 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |xt":{},"f:termin|
              00000150  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 61 74 68  |ationMessagePath|
              00000160  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000170  69 6f 6e 4d 65 73 73 61  67 65 50 6f 6c 69 63 79  |ionMessagePolicy|
              00000180  22 3a 7b 7d 7d 7d 2c 22  66 3a 64 6e 73 50 6f 6c  |":{}}},"f:dnsPol|
              00000190  69 63 79 22 3a 7b 7d 2c  22 66 3a 65 6e 61 62 6c  |icy":{},"f:enabl|
              000001a0  65 53 65 72 76 69 63 65  4c 69 6e 6b 73 22 3a 7b  |eServiceLinks":{|
              000001b0  7d 2c 22 66 3a 72 65 73  74 61 72 74 50 6f 6c 69  |},"f:restartPoli|
              000001c0  63 79 22 3a 7b 7d 2c 22  66 3a 73 63 68 65 64 75  |cy":{},"f:schedu|
              000001d0  6c 65 72 4e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 73  |lerName":{},"f:s|
              000001e0  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              000001f0  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000200  6e 47 72 61 63 65 50 65  72 69 6f 64 53 65 63 6f  |nGracePeriodSeco|
              00000210  6e 64 73 22 3a 7b 7d 7d  7d                       |nds":{}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=7) "kubelet",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828478519,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=482) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  63 6f 6e 64 69 74 69 6f  6e 73 22 3a 7b 22 6b 3a  |conditions":{"k:|
              00000020  7b 5c 22 74 79 70 65 5c  22 3a 5c 22 43 6f 6e 74  |{\"type\":\"Cont|
              00000030  61 69 6e 65 72 73 52 65  61 64 79 5c 22 7d 22 3a  |ainersReady\"}":|
              00000040  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000050  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000060  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000070  6d 65 22 3a 7b 7d 2c 22  66 3a 6d 65 73 73 61 67  |me":{},"f:messag|
              00000080  65 22 3a 7b 7d 2c 22 66  3a 72 65 61 73 6f 6e 22  |e":{},"f:reason"|
              00000090  3a 7b 7d 2c 22 66 3a 73  74 61 74 75 73 22 3a 7b  |:{},"f:status":{|
              000000a0  7d 2c 22 66 3a 74 79 70  65 22 3a 7b 7d 7d 2c 22  |},"f:type":{}},"|
              000000b0  6b 3a 7b 5c 22 74 79 70  65 5c 22 3a 5c 22 49 6e  |k:{\"type\":\"In|
              000000c0  69 74 69 61 6c 69 7a 65  64 5c 22 7d 22 3a 7b 22  |itialized\"}":{"|
              000000d0  2e 22 3a 7b 7d 2c 22 66  3a 6c 61 73 74 50 72 6f  |.":{},"f:lastPro|
              000000e0  62 65 54 69 6d 65 22 3a  7b 7d 2c 22 66 3a 6c 61  |beTime":{},"f:la|
              000000f0  73 74 54 72 61 6e 73 69  74 69 6f 6e 54 69 6d 65  |stTransitionTime|
              00000100  22 3a 7b 7d 2c 22 66 3a  73 74 61 74 75 73 22 3a  |":{},"f:status":|
              00000110  7b 7d 2c 22 66 3a 74 79  70 65 22 3a 7b 7d 7d 2c  |{},"f:type":{}},|
              00000120  22 6b 3a 7b 5c 22 74 79  70 65 5c 22 3a 5c 22 52  |"k:{\"type\":\"R|
              00000130  65 61 64 79 5c 22 7d 22  3a 7b 22 2e 22 3a 7b 7d  |eady\"}":{".":{}|
              00000140  2c 22 66 3a 6c 61 73 74  50 72 6f 62 65 54 69 6d  |,"f:lastProbeTim|
              00000150  65 22 3a 7b 7d 2c 22 66  3a 6c 61 73 74 54 72 61  |e":{},"f:lastTra|
              00000160  6e 73 69 74 69 6f 6e 54  69 6d 65 22 3a 7b 7d 2c  |nsitionTime":{},|
              00000170  22 66 3a 6d 65 73 73 61  67 65 22 3a 7b 7d 2c 22  |"f:message":{},"|
              00000180  66 3a 72 65 61 73 6f 6e  22 3a 7b 7d 2c 22 66 3a  |f:reason":{},"f:|
              00000190  73 74 61 74 75 73 22 3a  7b 7d 2c 22 66 3a 74 79  |status":{},"f:ty|
              000001a0  70 65 22 3a 7b 7d 7d 7d  2c 22 66 3a 63 6f 6e 74  |pe":{}}},"f:cont|
              000001b0  61 69 6e 65 72 53 74 61  74 75 73 65 73 22 3a 7b  |ainerStatuses":{|
              000001c0  7d 2c 22 66 3a 68 6f 73  74 49 50 22 3a 7b 7d 2c  |},"f:hostIP":{},|
              000001d0  22 66 3a 73 74 61 72 74  54 69 6d 65 22 3a 7b 7d  |"f:startTime":{}|
              000001e0  7d 7d                                             |}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-k4psh",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  })
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=5) "httpd",
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-k4psh",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(0),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=46) "scw-conformance-default-2af6d8b4c6264cc5b9e5e6",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Pending",
      Conditions: ([]v1.PodCondition) (len=4) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=11) "Initialized",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828478519,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=5) "Ready",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828478519,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=18) "ContainersNotReady",
          Message: (string) (len=39) "containers with unready status: [httpd]"
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=15) "ContainersReady",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828478519,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=18) "ContainersNotReady",
          Message: (string) (len=39) "containers with unready status: [httpd]"
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828478519,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) (len=11) "172.16.36.3",
      HostIPs: ([]v1.HostIP) <nil>,
      PodIP: (string) "",
      PodIPs: ([]v1.PodIP) <nil>,
      StartTime: (*v1.Time)({
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63828478519,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      }),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) (len=1) {
        (v1.ContainerStatus) {
          Name: (string) (len=5) "httpd",
          State: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)({
              Reason: (string) (len=17) "ContainerCreating",
              Message: (string) ""
            }),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          LastTerminationState: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          Ready: (bool) false,
          RestartCount: (int32) 0,
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          ImageID: (string) "",
          ContainerID: (string) "",
          Started: (*bool)(false),
          AllocatedResources: (v1.ResourceList) <nil>,
          Resources: (*v1.ResourceRequirements)(<nil>)
        }
      },
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }

  Aug 24 12:55:21.204: INFO: Pod "webserver-deployment-557759b7c7-z2qh9" is available:
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=37) "webserver-deployment-557759b7c7-z2qh9",
      GenerateName: (string) (len=32) "webserver-deployment-557759b7c7-",
      Namespace: (string) (len=15) "deployment-5781",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "e5ff73f0-4137-4f24-8e57-c44bdefb612f",
      ResourceVersion: (string) (len=10) "3405090970",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63828478512,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=5) "httpd",
        (string) (len=17) "pod-template-hash": (string) (len=10) "557759b7c7"
      },
      Annotations: (map[string]string) <nil>,
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=31) "webserver-deployment-557759b7c7",
          UID: (types.UID) (len=36) "ceac2027-4ce2-4f1d-9406-345bec3d538b",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828478512,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=537) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |.":{},"f:name":{|
              00000040  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              00000050  65 2d 68 61 73 68 22 3a  7b 7d 7d 2c 22 66 3a 6f  |e-hash":{}},"f:o|
              00000060  77 6e 65 72 52 65 66 65  72 65 6e 63 65 73 22 3a  |wnerReferences":|
              00000070  7b 22 2e 22 3a 7b 7d 2c  22 6b 3a 7b 5c 22 75 69  |{".":{},"k:{\"ui|
              00000080  64 5c 22 3a 5c 22 63 65  61 63 32 30 32 37 2d 34  |d\":\"ceac2027-4|
              00000090  63 65 32 2d 34 66 31 64  2d 39 34 30 36 2d 33 34  |ce2-4f1d-9406-34|
              000000a0  35 62 65 63 33 64 35 33  38 62 5c 22 7d 22 3a 7b  |5bec3d538b\"}":{|
              000000b0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000000c0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              000000d0  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 68 74 74  |:{\"name\":\"htt|
              000000e0  70 64 5c 22 7d 22 3a 7b  22 2e 22 3a 7b 7d 2c 22  |pd\"}":{".":{},"|
              000000f0  66 3a 69 6d 61 67 65 22  3a 7b 7d 2c 22 66 3a 69  |f:image":{},"f:i|
              00000100  6d 61 67 65 50 75 6c 6c  50 6f 6c 69 63 79 22 3a  |magePullPolicy":|
              00000110  7b 7d 2c 22 66 3a 6e 61  6d 65 22 3a 7b 7d 2c 22  |{},"f:name":{},"|
              00000120  66 3a 72 65 73 6f 75 72  63 65 73 22 3a 7b 7d 2c  |f:resources":{},|
              00000130  22 66 3a 73 65 63 75 72  69 74 79 43 6f 6e 74 65  |"f:securityConte|
              00000140  78 74 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |xt":{},"f:termin|
              00000150  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 61 74 68  |ationMessagePath|
              00000160  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000170  69 6f 6e 4d 65 73 73 61  67 65 50 6f 6c 69 63 79  |ionMessagePolicy|
              00000180  22 3a 7b 7d 7d 7d 2c 22  66 3a 64 6e 73 50 6f 6c  |":{}}},"f:dnsPol|
              00000190  69 63 79 22 3a 7b 7d 2c  22 66 3a 65 6e 61 62 6c  |icy":{},"f:enabl|
              000001a0  65 53 65 72 76 69 63 65  4c 69 6e 6b 73 22 3a 7b  |eServiceLinks":{|
              000001b0  7d 2c 22 66 3a 72 65 73  74 61 72 74 50 6f 6c 69  |},"f:restartPoli|
              000001c0  63 79 22 3a 7b 7d 2c 22  66 3a 73 63 68 65 64 75  |cy":{},"f:schedu|
              000001d0  6c 65 72 4e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 73  |lerName":{},"f:s|
              000001e0  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              000001f0  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000200  6e 47 72 61 63 65 50 65  72 69 6f 64 53 65 63 6f  |nGracePeriodSeco|
              00000210  6e 64 73 22 3a 7b 7d 7d  7d                       |nds":{}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=7) "kubelet",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828478515,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=518) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  63 6f 6e 64 69 74 69 6f  6e 73 22 3a 7b 22 6b 3a  |conditions":{"k:|
              00000020  7b 5c 22 74 79 70 65 5c  22 3a 5c 22 43 6f 6e 74  |{\"type\":\"Cont|
              00000030  61 69 6e 65 72 73 52 65  61 64 79 5c 22 7d 22 3a  |ainersReady\"}":|
              00000040  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000050  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000060  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000070  6d 65 22 3a 7b 7d 2c 22  66 3a 73 74 61 74 75 73  |me":{},"f:status|
              00000080  22 3a 7b 7d 2c 22 66 3a  74 79 70 65 22 3a 7b 7d  |":{},"f:type":{}|
              00000090  7d 2c 22 6b 3a 7b 5c 22  74 79 70 65 5c 22 3a 5c  |},"k:{\"type\":\|
              000000a0  22 49 6e 69 74 69 61 6c  69 7a 65 64 5c 22 7d 22  |"Initialized\"}"|
              000000b0  3a 7b 22 2e 22 3a 7b 7d  2c 22 66 3a 6c 61 73 74  |:{".":{},"f:last|
              000000c0  50 72 6f 62 65 54 69 6d  65 22 3a 7b 7d 2c 22 66  |ProbeTime":{},"f|
              000000d0  3a 6c 61 73 74 54 72 61  6e 73 69 74 69 6f 6e 54  |:lastTransitionT|
              000000e0  69 6d 65 22 3a 7b 7d 2c  22 66 3a 73 74 61 74 75  |ime":{},"f:statu|
              000000f0  73 22 3a 7b 7d 2c 22 66  3a 74 79 70 65 22 3a 7b  |s":{},"f:type":{|
              00000100  7d 7d 2c 22 6b 3a 7b 5c  22 74 79 70 65 5c 22 3a  |}},"k:{\"type\":|
              00000110  5c 22 52 65 61 64 79 5c  22 7d 22 3a 7b 22 2e 22  |\"Ready\"}":{"."|
              00000120  3a 7b 7d 2c 22 66 3a 6c  61 73 74 50 72 6f 62 65  |:{},"f:lastProbe|
              00000130  54 69 6d 65 22 3a 7b 7d  2c 22 66 3a 6c 61 73 74  |Time":{},"f:last|
              00000140  54 72 61 6e 73 69 74 69  6f 6e 54 69 6d 65 22 3a  |TransitionTime":|
              00000150  7b 7d 2c 22 66 3a 73 74  61 74 75 73 22 3a 7b 7d  |{},"f:status":{}|
              00000160  2c 22 66 3a 74 79 70 65  22 3a 7b 7d 7d 7d 2c 22  |,"f:type":{}}},"|
              00000170  66 3a 63 6f 6e 74 61 69  6e 65 72 53 74 61 74 75  |f:containerStatu|
              00000180  73 65 73 22 3a 7b 7d 2c  22 66 3a 68 6f 73 74 49  |ses":{},"f:hostI|
              00000190  50 22 3a 7b 7d 2c 22 66  3a 70 68 61 73 65 22 3a  |P":{},"f:phase":|
              000001a0  7b 7d 2c 22 66 3a 70 6f  64 49 50 22 3a 7b 7d 2c  |{},"f:podIP":{},|
              000001b0  22 66 3a 70 6f 64 49 50  73 22 3a 7b 22 2e 22 3a  |"f:podIPs":{".":|
              000001c0  7b 7d 2c 22 6b 3a 7b 5c  22 69 70 5c 22 3a 5c 22  |{},"k:{\"ip\":\"|
              000001d0  31 30 2e 31 30 30 2e 30  2e 36 30 5c 22 7d 22 3a  |10.100.0.60\"}":|
              000001e0  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 69 70 22 3a 7b  |{".":{},"f:ip":{|
              000001f0  7d 7d 7d 2c 22 66 3a 73  74 61 72 74 54 69 6d 65  |}}},"f:startTime|
              00000200  22 3a 7b 7d 7d 7d                                 |":{}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-pxk7g",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  })
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=5) "httpd",
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-pxk7g",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(0),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=46) "scw-conformance-default-2af6d8b4c6264cc5b9e5e6",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Running",
      Conditions: ([]v1.PodCondition) (len=4) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=11) "Initialized",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828478512,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=5) "Ready",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828478513,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=15) "ContainersReady",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828478513,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828478512,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) (len=11) "172.16.36.3",
      HostIPs: ([]v1.HostIP) <nil>,
      PodIP: (string) (len=11) "10.100.0.60",
      PodIPs: ([]v1.PodIP) (len=1) {
        (v1.PodIP) {
          IP: (string) (len=11) "10.100.0.60"
        }
      },
      StartTime: (*v1.Time)({
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63828478512,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      }),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) (len=1) {
        (v1.ContainerStatus) {
          Name: (string) (len=5) "httpd",
          State: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)({
              StartedAt: (v1.Time) {
                Time: (time.Time) {
                  wall: (uint64) 0,
                  ext: (int64) 63828478513,
                  loc: (*time.Location)(<already shown>)
                }
              }
            }),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          LastTerminationState: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          Ready: (bool) true,
          RestartCount: (int32) 0,
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          ImageID: (string) (len=109) "registry.k8s.io/e2e-test-images/httpd@sha256:148b022f5c5da426fc2f3c14b5c0867e58ef05961510c84749ac1fddcb0fef22",
          ContainerID: (string) (len=77) "containerd://b5f7e4efa7f7d6a4ed79d9520f42c8b12c0bd44ffdfac9cb1841b6dcc5c9204f",
          Started: (*bool)(true),
          AllocatedResources: (v1.ResourceList) <nil>,
          Resources: (*v1.ResourceRequirements)(<nil>)
        }
      },
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }

  Aug 24 12:55:21.213: INFO: Pod "webserver-deployment-557759b7c7-zbntp" is not available:
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=37) "webserver-deployment-557759b7c7-zbntp",
      GenerateName: (string) (len=32) "webserver-deployment-557759b7c7-",
      Namespace: (string) (len=15) "deployment-5781",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "69d230a5-340c-418e-b31c-c29e702b337c",
      ResourceVersion: (string) (len=10) "3405091384",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63828478519,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=17) "pod-template-hash": (string) (len=10) "557759b7c7",
        (string) (len=4) "name": (string) (len=5) "httpd"
      },
      Annotations: (map[string]string) <nil>,
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=31) "webserver-deployment-557759b7c7",
          UID: (types.UID) (len=36) "ceac2027-4ce2-4f1d-9406-345bec3d538b",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828478519,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=537) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |.":{},"f:name":{|
              00000040  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              00000050  65 2d 68 61 73 68 22 3a  7b 7d 7d 2c 22 66 3a 6f  |e-hash":{}},"f:o|
              00000060  77 6e 65 72 52 65 66 65  72 65 6e 63 65 73 22 3a  |wnerReferences":|
              00000070  7b 22 2e 22 3a 7b 7d 2c  22 6b 3a 7b 5c 22 75 69  |{".":{},"k:{\"ui|
              00000080  64 5c 22 3a 5c 22 63 65  61 63 32 30 32 37 2d 34  |d\":\"ceac2027-4|
              00000090  63 65 32 2d 34 66 31 64  2d 39 34 30 36 2d 33 34  |ce2-4f1d-9406-34|
              000000a0  35 62 65 63 33 64 35 33  38 62 5c 22 7d 22 3a 7b  |5bec3d538b\"}":{|
              000000b0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000000c0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              000000d0  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 68 74 74  |:{\"name\":\"htt|
              000000e0  70 64 5c 22 7d 22 3a 7b  22 2e 22 3a 7b 7d 2c 22  |pd\"}":{".":{},"|
              000000f0  66 3a 69 6d 61 67 65 22  3a 7b 7d 2c 22 66 3a 69  |f:image":{},"f:i|
              00000100  6d 61 67 65 50 75 6c 6c  50 6f 6c 69 63 79 22 3a  |magePullPolicy":|
              00000110  7b 7d 2c 22 66 3a 6e 61  6d 65 22 3a 7b 7d 2c 22  |{},"f:name":{},"|
              00000120  66 3a 72 65 73 6f 75 72  63 65 73 22 3a 7b 7d 2c  |f:resources":{},|
              00000130  22 66 3a 73 65 63 75 72  69 74 79 43 6f 6e 74 65  |"f:securityConte|
              00000140  78 74 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |xt":{},"f:termin|
              00000150  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 61 74 68  |ationMessagePath|
              00000160  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000170  69 6f 6e 4d 65 73 73 61  67 65 50 6f 6c 69 63 79  |ionMessagePolicy|
              00000180  22 3a 7b 7d 7d 7d 2c 22  66 3a 64 6e 73 50 6f 6c  |":{}}},"f:dnsPol|
              00000190  69 63 79 22 3a 7b 7d 2c  22 66 3a 65 6e 61 62 6c  |icy":{},"f:enabl|
              000001a0  65 53 65 72 76 69 63 65  4c 69 6e 6b 73 22 3a 7b  |eServiceLinks":{|
              000001b0  7d 2c 22 66 3a 72 65 73  74 61 72 74 50 6f 6c 69  |},"f:restartPoli|
              000001c0  63 79 22 3a 7b 7d 2c 22  66 3a 73 63 68 65 64 75  |cy":{},"f:schedu|
              000001d0  6c 65 72 4e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 73  |lerName":{},"f:s|
              000001e0  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              000001f0  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000200  6e 47 72 61 63 65 50 65  72 69 6f 64 53 65 63 6f  |nGracePeriodSeco|
              00000210  6e 64 73 22 3a 7b 7d 7d  7d                       |nds":{}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=7) "kubelet",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828478520,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=482) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  63 6f 6e 64 69 74 69 6f  6e 73 22 3a 7b 22 6b 3a  |conditions":{"k:|
              00000020  7b 5c 22 74 79 70 65 5c  22 3a 5c 22 43 6f 6e 74  |{\"type\":\"Cont|
              00000030  61 69 6e 65 72 73 52 65  61 64 79 5c 22 7d 22 3a  |ainersReady\"}":|
              00000040  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000050  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000060  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000070  6d 65 22 3a 7b 7d 2c 22  66 3a 6d 65 73 73 61 67  |me":{},"f:messag|
              00000080  65 22 3a 7b 7d 2c 22 66  3a 72 65 61 73 6f 6e 22  |e":{},"f:reason"|
              00000090  3a 7b 7d 2c 22 66 3a 73  74 61 74 75 73 22 3a 7b  |:{},"f:status":{|
              000000a0  7d 2c 22 66 3a 74 79 70  65 22 3a 7b 7d 7d 2c 22  |},"f:type":{}},"|
              000000b0  6b 3a 7b 5c 22 74 79 70  65 5c 22 3a 5c 22 49 6e  |k:{\"type\":\"In|
              000000c0  69 74 69 61 6c 69 7a 65  64 5c 22 7d 22 3a 7b 22  |itialized\"}":{"|
              000000d0  2e 22 3a 7b 7d 2c 22 66  3a 6c 61 73 74 50 72 6f  |.":{},"f:lastPro|
              000000e0  62 65 54 69 6d 65 22 3a  7b 7d 2c 22 66 3a 6c 61  |beTime":{},"f:la|
              000000f0  73 74 54 72 61 6e 73 69  74 69 6f 6e 54 69 6d 65  |stTransitionTime|
              00000100  22 3a 7b 7d 2c 22 66 3a  73 74 61 74 75 73 22 3a  |":{},"f:status":|
              00000110  7b 7d 2c 22 66 3a 74 79  70 65 22 3a 7b 7d 7d 2c  |{},"f:type":{}},|
              00000120  22 6b 3a 7b 5c 22 74 79  70 65 5c 22 3a 5c 22 52  |"k:{\"type\":\"R|
              00000130  65 61 64 79 5c 22 7d 22  3a 7b 22 2e 22 3a 7b 7d  |eady\"}":{".":{}|
              00000140  2c 22 66 3a 6c 61 73 74  50 72 6f 62 65 54 69 6d  |,"f:lastProbeTim|
              00000150  65 22 3a 7b 7d 2c 22 66  3a 6c 61 73 74 54 72 61  |e":{},"f:lastTra|
              00000160  6e 73 69 74 69 6f 6e 54  69 6d 65 22 3a 7b 7d 2c  |nsitionTime":{},|
              00000170  22 66 3a 6d 65 73 73 61  67 65 22 3a 7b 7d 2c 22  |"f:message":{},"|
              00000180  66 3a 72 65 61 73 6f 6e  22 3a 7b 7d 2c 22 66 3a  |f:reason":{},"f:|
              00000190  73 74 61 74 75 73 22 3a  7b 7d 2c 22 66 3a 74 79  |status":{},"f:ty|
              000001a0  70 65 22 3a 7b 7d 7d 7d  2c 22 66 3a 63 6f 6e 74  |pe":{}}},"f:cont|
              000001b0  61 69 6e 65 72 53 74 61  74 75 73 65 73 22 3a 7b  |ainerStatuses":{|
              000001c0  7d 2c 22 66 3a 68 6f 73  74 49 50 22 3a 7b 7d 2c  |},"f:hostIP":{},|
              000001d0  22 66 3a 73 74 61 72 74  54 69 6d 65 22 3a 7b 7d  |"f:startTime":{}|
              000001e0  7d 7d                                             |}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-b9c94",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  })
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=5) "httpd",
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-b9c94",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(0),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=46) "scw-conformance-default-ecf11ec729064adba7e270",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Pending",
      Conditions: ([]v1.PodCondition) (len=4) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=11) "Initialized",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828478519,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=5) "Ready",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828478519,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=18) "ContainersNotReady",
          Message: (string) (len=39) "containers with unready status: [httpd]"
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=15) "ContainersReady",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828478519,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=18) "ContainersNotReady",
          Message: (string) (len=39) "containers with unready status: [httpd]"
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828478519,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) (len=11) "172.16.36.2",
      HostIPs: ([]v1.HostIP) <nil>,
      PodIP: (string) "",
      PodIPs: ([]v1.PodIP) <nil>,
      StartTime: (*v1.Time)({
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63828478519,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      }),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) (len=1) {
        (v1.ContainerStatus) {
          Name: (string) (len=5) "httpd",
          State: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)({
              Reason: (string) (len=17) "ContainerCreating",
              Message: (string) ""
            }),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          LastTerminationState: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          Ready: (bool) false,
          RestartCount: (int32) 0,
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          ImageID: (string) "",
          ContainerID: (string) "",
          Started: (*bool)(false),
          AllocatedResources: (v1.ResourceList) <nil>,
          Resources: (*v1.ResourceRequirements)(<nil>)
        }
      },
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }

  Aug 24 12:55:21.215: INFO: Pod "webserver-deployment-9b4f5bf69-4sdcx" is not available:
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=36) "webserver-deployment-9b4f5bf69-4sdcx",
      GenerateName: (string) (len=31) "webserver-deployment-9b4f5bf69-",
      Namespace: (string) (len=15) "deployment-5781",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "08751e7e-c03c-4705-9870-14b02e97ab60",
      ResourceVersion: (string) (len=10) "3405091382",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63828478519,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=5) "httpd",
        (string) (len=17) "pod-template-hash": (string) (len=9) "9b4f5bf69"
      },
      Annotations: (map[string]string) <nil>,
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=30) "webserver-deployment-9b4f5bf69",
          UID: (types.UID) (len=36) "8f9cf3fc-39b0-4eeb-9d09-cdbacc73e4e2",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828478519,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=537) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |.":{},"f:name":{|
              00000040  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              00000050  65 2d 68 61 73 68 22 3a  7b 7d 7d 2c 22 66 3a 6f  |e-hash":{}},"f:o|
              00000060  77 6e 65 72 52 65 66 65  72 65 6e 63 65 73 22 3a  |wnerReferences":|
              00000070  7b 22 2e 22 3a 7b 7d 2c  22 6b 3a 7b 5c 22 75 69  |{".":{},"k:{\"ui|
              00000080  64 5c 22 3a 5c 22 38 66  39 63 66 33 66 63 2d 33  |d\":\"8f9cf3fc-3|
              00000090  39 62 30 2d 34 65 65 62  2d 39 64 30 39 2d 63 64  |9b0-4eeb-9d09-cd|
              000000a0  62 61 63 63 37 33 65 34  65 32 5c 22 7d 22 3a 7b  |bacc73e4e2\"}":{|
              000000b0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000000c0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              000000d0  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 68 74 74  |:{\"name\":\"htt|
              000000e0  70 64 5c 22 7d 22 3a 7b  22 2e 22 3a 7b 7d 2c 22  |pd\"}":{".":{},"|
              000000f0  66 3a 69 6d 61 67 65 22  3a 7b 7d 2c 22 66 3a 69  |f:image":{},"f:i|
              00000100  6d 61 67 65 50 75 6c 6c  50 6f 6c 69 63 79 22 3a  |magePullPolicy":|
              00000110  7b 7d 2c 22 66 3a 6e 61  6d 65 22 3a 7b 7d 2c 22  |{},"f:name":{},"|
              00000120  66 3a 72 65 73 6f 75 72  63 65 73 22 3a 7b 7d 2c  |f:resources":{},|
              00000130  22 66 3a 73 65 63 75 72  69 74 79 43 6f 6e 74 65  |"f:securityConte|
              00000140  78 74 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |xt":{},"f:termin|
              00000150  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 61 74 68  |ationMessagePath|
              00000160  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000170  69 6f 6e 4d 65 73 73 61  67 65 50 6f 6c 69 63 79  |ionMessagePolicy|
              00000180  22 3a 7b 7d 7d 7d 2c 22  66 3a 64 6e 73 50 6f 6c  |":{}}},"f:dnsPol|
              00000190  69 63 79 22 3a 7b 7d 2c  22 66 3a 65 6e 61 62 6c  |icy":{},"f:enabl|
              000001a0  65 53 65 72 76 69 63 65  4c 69 6e 6b 73 22 3a 7b  |eServiceLinks":{|
              000001b0  7d 2c 22 66 3a 72 65 73  74 61 72 74 50 6f 6c 69  |},"f:restartPoli|
              000001c0  63 79 22 3a 7b 7d 2c 22  66 3a 73 63 68 65 64 75  |cy":{},"f:schedu|
              000001d0  6c 65 72 4e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 73  |lerName":{},"f:s|
              000001e0  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              000001f0  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000200  6e 47 72 61 63 65 50 65  72 69 6f 64 53 65 63 6f  |nGracePeriodSeco|
              00000210  6e 64 73 22 3a 7b 7d 7d  7d                       |nds":{}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=7) "kubelet",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828478520,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=482) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  63 6f 6e 64 69 74 69 6f  6e 73 22 3a 7b 22 6b 3a  |conditions":{"k:|
              00000020  7b 5c 22 74 79 70 65 5c  22 3a 5c 22 43 6f 6e 74  |{\"type\":\"Cont|
              00000030  61 69 6e 65 72 73 52 65  61 64 79 5c 22 7d 22 3a  |ainersReady\"}":|
              00000040  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000050  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000060  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000070  6d 65 22 3a 7b 7d 2c 22  66 3a 6d 65 73 73 61 67  |me":{},"f:messag|
              00000080  65 22 3a 7b 7d 2c 22 66  3a 72 65 61 73 6f 6e 22  |e":{},"f:reason"|
              00000090  3a 7b 7d 2c 22 66 3a 73  74 61 74 75 73 22 3a 7b  |:{},"f:status":{|
              000000a0  7d 2c 22 66 3a 74 79 70  65 22 3a 7b 7d 7d 2c 22  |},"f:type":{}},"|
              000000b0  6b 3a 7b 5c 22 74 79 70  65 5c 22 3a 5c 22 49 6e  |k:{\"type\":\"In|
              000000c0  69 74 69 61 6c 69 7a 65  64 5c 22 7d 22 3a 7b 22  |itialized\"}":{"|
              000000d0  2e 22 3a 7b 7d 2c 22 66  3a 6c 61 73 74 50 72 6f  |.":{},"f:lastPro|
              000000e0  62 65 54 69 6d 65 22 3a  7b 7d 2c 22 66 3a 6c 61  |beTime":{},"f:la|
              000000f0  73 74 54 72 61 6e 73 69  74 69 6f 6e 54 69 6d 65  |stTransitionTime|
              00000100  22 3a 7b 7d 2c 22 66 3a  73 74 61 74 75 73 22 3a  |":{},"f:status":|
              00000110  7b 7d 2c 22 66 3a 74 79  70 65 22 3a 7b 7d 7d 2c  |{},"f:type":{}},|
              00000120  22 6b 3a 7b 5c 22 74 79  70 65 5c 22 3a 5c 22 52  |"k:{\"type\":\"R|
              00000130  65 61 64 79 5c 22 7d 22  3a 7b 22 2e 22 3a 7b 7d  |eady\"}":{".":{}|
              00000140  2c 22 66 3a 6c 61 73 74  50 72 6f 62 65 54 69 6d  |,"f:lastProbeTim|
              00000150  65 22 3a 7b 7d 2c 22 66  3a 6c 61 73 74 54 72 61  |e":{},"f:lastTra|
              00000160  6e 73 69 74 69 6f 6e 54  69 6d 65 22 3a 7b 7d 2c  |nsitionTime":{},|
              00000170  22 66 3a 6d 65 73 73 61  67 65 22 3a 7b 7d 2c 22  |"f:message":{},"|
              00000180  66 3a 72 65 61 73 6f 6e  22 3a 7b 7d 2c 22 66 3a  |f:reason":{},"f:|
              00000190  73 74 61 74 75 73 22 3a  7b 7d 2c 22 66 3a 74 79  |status":{},"f:ty|
              000001a0  70 65 22 3a 7b 7d 7d 7d  2c 22 66 3a 63 6f 6e 74  |pe":{}}},"f:cont|
              000001b0  61 69 6e 65 72 53 74 61  74 75 73 65 73 22 3a 7b  |ainerStatuses":{|
              000001c0  7d 2c 22 66 3a 68 6f 73  74 49 50 22 3a 7b 7d 2c  |},"f:hostIP":{},|
              000001d0  22 66 3a 73 74 61 72 74  54 69 6d 65 22 3a 7b 7d  |"f:startTime":{}|
              000001e0  7d 7d                                             |}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-n9ztf",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  })
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=5) "httpd",
          Image: (string) (len=13) "webserver:404",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-n9ztf",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(0),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=46) "scw-conformance-default-2af6d8b4c6264cc5b9e5e6",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Pending",
      Conditions: ([]v1.PodCondition) (len=4) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=11) "Initialized",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828478519,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=5) "Ready",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828478519,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=18) "ContainersNotReady",
          Message: (string) (len=39) "containers with unready status: [httpd]"
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=15) "ContainersReady",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828478519,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=18) "ContainersNotReady",
          Message: (string) (len=39) "containers with unready status: [httpd]"
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828478519,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) (len=11) "172.16.36.3",
      HostIPs: ([]v1.HostIP) <nil>,
      PodIP: (string) "",
      PodIPs: ([]v1.PodIP) <nil>,
      StartTime: (*v1.Time)({
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63828478519,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      }),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) (len=1) {
        (v1.ContainerStatus) {
          Name: (string) (len=5) "httpd",
          State: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)({
              Reason: (string) (len=17) "ContainerCreating",
              Message: (string) ""
            }),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          LastTerminationState: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          Ready: (bool) false,
          RestartCount: (int32) 0,
          Image: (string) (len=13) "webserver:404",
          ImageID: (string) "",
          ContainerID: (string) "",
          Started: (*bool)(false),
          AllocatedResources: (v1.ResourceList) <nil>,
          Resources: (*v1.ResourceRequirements)(<nil>)
        }
      },
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }

  Aug 24 12:55:21.224: INFO: Pod "webserver-deployment-9b4f5bf69-5q94z" is not available:
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=36) "webserver-deployment-9b4f5bf69-5q94z",
      GenerateName: (string) (len=31) "webserver-deployment-9b4f5bf69-",
      Namespace: (string) (len=15) "deployment-5781",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "00e933f7-75e2-4af0-9739-93b53c61a614",
      ResourceVersion: (string) (len=10) "3405091298",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63828478517,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=5) "httpd",
        (string) (len=17) "pod-template-hash": (string) (len=9) "9b4f5bf69"
      },
      Annotations: (map[string]string) <nil>,
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=30) "webserver-deployment-9b4f5bf69",
          UID: (types.UID) (len=36) "8f9cf3fc-39b0-4eeb-9d09-cdbacc73e4e2",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828478517,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=537) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |.":{},"f:name":{|
              00000040  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              00000050  65 2d 68 61 73 68 22 3a  7b 7d 7d 2c 22 66 3a 6f  |e-hash":{}},"f:o|
              00000060  77 6e 65 72 52 65 66 65  72 65 6e 63 65 73 22 3a  |wnerReferences":|
              00000070  7b 22 2e 22 3a 7b 7d 2c  22 6b 3a 7b 5c 22 75 69  |{".":{},"k:{\"ui|
              00000080  64 5c 22 3a 5c 22 38 66  39 63 66 33 66 63 2d 33  |d\":\"8f9cf3fc-3|
              00000090  39 62 30 2d 34 65 65 62  2d 39 64 30 39 2d 63 64  |9b0-4eeb-9d09-cd|
              000000a0  62 61 63 63 37 33 65 34  65 32 5c 22 7d 22 3a 7b  |bacc73e4e2\"}":{|
              000000b0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000000c0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              000000d0  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 68 74 74  |:{\"name\":\"htt|
              000000e0  70 64 5c 22 7d 22 3a 7b  22 2e 22 3a 7b 7d 2c 22  |pd\"}":{".":{},"|
              000000f0  66 3a 69 6d 61 67 65 22  3a 7b 7d 2c 22 66 3a 69  |f:image":{},"f:i|
              00000100  6d 61 67 65 50 75 6c 6c  50 6f 6c 69 63 79 22 3a  |magePullPolicy":|
              00000110  7b 7d 2c 22 66 3a 6e 61  6d 65 22 3a 7b 7d 2c 22  |{},"f:name":{},"|
              00000120  66 3a 72 65 73 6f 75 72  63 65 73 22 3a 7b 7d 2c  |f:resources":{},|
              00000130  22 66 3a 73 65 63 75 72  69 74 79 43 6f 6e 74 65  |"f:securityConte|
              00000140  78 74 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |xt":{},"f:termin|
              00000150  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 61 74 68  |ationMessagePath|
              00000160  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000170  69 6f 6e 4d 65 73 73 61  67 65 50 6f 6c 69 63 79  |ionMessagePolicy|
              00000180  22 3a 7b 7d 7d 7d 2c 22  66 3a 64 6e 73 50 6f 6c  |":{}}},"f:dnsPol|
              00000190  69 63 79 22 3a 7b 7d 2c  22 66 3a 65 6e 61 62 6c  |icy":{},"f:enabl|
              000001a0  65 53 65 72 76 69 63 65  4c 69 6e 6b 73 22 3a 7b  |eServiceLinks":{|
              000001b0  7d 2c 22 66 3a 72 65 73  74 61 72 74 50 6f 6c 69  |},"f:restartPoli|
              000001c0  63 79 22 3a 7b 7d 2c 22  66 3a 73 63 68 65 64 75  |cy":{},"f:schedu|
              000001d0  6c 65 72 4e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 73  |lerName":{},"f:s|
              000001e0  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              000001f0  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000200  6e 47 72 61 63 65 50 65  72 69 6f 64 53 65 63 6f  |nGracePeriodSeco|
              00000210  6e 64 73 22 3a 7b 7d 7d  7d                       |nds":{}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=7) "kubelet",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828478519,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=563) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  63 6f 6e 64 69 74 69 6f  6e 73 22 3a 7b 22 6b 3a  |conditions":{"k:|
              00000020  7b 5c 22 74 79 70 65 5c  22 3a 5c 22 43 6f 6e 74  |{\"type\":\"Cont|
              00000030  61 69 6e 65 72 73 52 65  61 64 79 5c 22 7d 22 3a  |ainersReady\"}":|
              00000040  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000050  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000060  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000070  6d 65 22 3a 7b 7d 2c 22  66 3a 6d 65 73 73 61 67  |me":{},"f:messag|
              00000080  65 22 3a 7b 7d 2c 22 66  3a 72 65 61 73 6f 6e 22  |e":{},"f:reason"|
              00000090  3a 7b 7d 2c 22 66 3a 73  74 61 74 75 73 22 3a 7b  |:{},"f:status":{|
              000000a0  7d 2c 22 66 3a 74 79 70  65 22 3a 7b 7d 7d 2c 22  |},"f:type":{}},"|
              000000b0  6b 3a 7b 5c 22 74 79 70  65 5c 22 3a 5c 22 49 6e  |k:{\"type\":\"In|
              000000c0  69 74 69 61 6c 69 7a 65  64 5c 22 7d 22 3a 7b 22  |itialized\"}":{"|
              000000d0  2e 22 3a 7b 7d 2c 22 66  3a 6c 61 73 74 50 72 6f  |.":{},"f:lastPro|
              000000e0  62 65 54 69 6d 65 22 3a  7b 7d 2c 22 66 3a 6c 61  |beTime":{},"f:la|
              000000f0  73 74 54 72 61 6e 73 69  74 69 6f 6e 54 69 6d 65  |stTransitionTime|
              00000100  22 3a 7b 7d 2c 22 66 3a  73 74 61 74 75 73 22 3a  |":{},"f:status":|
              00000110  7b 7d 2c 22 66 3a 74 79  70 65 22 3a 7b 7d 7d 2c  |{},"f:type":{}},|
              00000120  22 6b 3a 7b 5c 22 74 79  70 65 5c 22 3a 5c 22 52  |"k:{\"type\":\"R|
              00000130  65 61 64 79 5c 22 7d 22  3a 7b 22 2e 22 3a 7b 7d  |eady\"}":{".":{}|
              00000140  2c 22 66 3a 6c 61 73 74  50 72 6f 62 65 54 69 6d  |,"f:lastProbeTim|
              00000150  65 22 3a 7b 7d 2c 22 66  3a 6c 61 73 74 54 72 61  |e":{},"f:lastTra|
              00000160  6e 73 69 74 69 6f 6e 54  69 6d 65 22 3a 7b 7d 2c  |nsitionTime":{},|
              00000170  22 66 3a 6d 65 73 73 61  67 65 22 3a 7b 7d 2c 22  |"f:message":{},"|
              00000180  66 3a 72 65 61 73 6f 6e  22 3a 7b 7d 2c 22 66 3a  |f:reason":{},"f:|
              00000190  73 74 61 74 75 73 22 3a  7b 7d 2c 22 66 3a 74 79  |status":{},"f:ty|
              000001a0  70 65 22 3a 7b 7d 7d 7d  2c 22 66 3a 63 6f 6e 74  |pe":{}}},"f:cont|
              000001b0  61 69 6e 65 72 53 74 61  74 75 73 65 73 22 3a 7b  |ainerStatuses":{|
              000001c0  7d 2c 22 66 3a 68 6f 73  74 49 50 22 3a 7b 7d 2c  |},"f:hostIP":{},|
              000001d0  22 66 3a 70 6f 64 49 50  22 3a 7b 7d 2c 22 66 3a  |"f:podIP":{},"f:|
              000001e0  70 6f 64 49 50 73 22 3a  7b 22 2e 22 3a 7b 7d 2c  |podIPs":{".":{},|
              000001f0  22 6b 3a 7b 5c 22 69 70  5c 22 3a 5c 22 31 30 2e  |"k:{\"ip\":\"10.|
              00000200  31 30 30 2e 31 2e 39 38  5c 22 7d 22 3a 7b 22 2e  |100.1.98\"}":{".|
              00000210  22 3a 7b 7d 2c 22 66 3a  69 70 22 3a 7b 7d 7d 7d  |":{},"f:ip":{}}}|
              00000220  2c 22 66 3a 73 74 61 72  74 54 69 6d 65 22 3a 7b  |,"f:startTime":{|
              00000230  7d 7d 7d                                          |}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-gcmm6",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  })
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=5) "httpd",
          Image: (string) (len=13) "webserver:404",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-gcmm6",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(0),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=46) "scw-conformance-default-ecf11ec729064adba7e270",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Pending",
      Conditions: ([]v1.PodCondition) (len=4) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=11) "Initialized",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828478517,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=5) "Ready",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828478517,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=18) "ContainersNotReady",
          Message: (string) (len=39) "containers with unready status: [httpd]"
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=15) "ContainersReady",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828478517,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=18) "ContainersNotReady",
          Message: (string) (len=39) "containers with unready status: [httpd]"
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828478517,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) (len=11) "172.16.36.2",
      HostIPs: ([]v1.HostIP) <nil>,
      PodIP: (string) (len=11) "10.100.1.98",
      PodIPs: ([]v1.PodIP) (len=1) {
        (v1.PodIP) {
          IP: (string) (len=11) "10.100.1.98"
        }
      },
      StartTime: (*v1.Time)({
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63828478517,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      }),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) (len=1) {
        (v1.ContainerStatus) {
          Name: (string) (len=5) "httpd",
          State: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)({
              Reason: (string) (len=12) "ErrImagePull",
              Message: (string) (len=262) "failed to pull and unpack image \"docker.io/library/webserver:404\": failed to resolve reference \"docker.io/library/webserver:404\": pull access denied, repository does not exist or may require authorization: server message: insufficient_scope: authorization failed"
            }),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          LastTerminationState: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          Ready: (bool) false,
          RestartCount: (int32) 0,
          Image: (string) (len=13) "webserver:404",
          ImageID: (string) "",
          ContainerID: (string) "",
          Started: (*bool)(false),
          AllocatedResources: (v1.ResourceList) <nil>,
          Resources: (*v1.ResourceRequirements)(<nil>)
        }
      },
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }

  Aug 24 12:55:21.225: INFO: Pod "webserver-deployment-9b4f5bf69-fjls5" is not available:
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=36) "webserver-deployment-9b4f5bf69-fjls5",
      GenerateName: (string) (len=31) "webserver-deployment-9b4f5bf69-",
      Namespace: (string) (len=15) "deployment-5781",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "14ddca52-9d9d-4a0b-b0bf-8f2addcbe9cd",
      ResourceVersion: (string) (len=10) "3405091398",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63828478519,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=5) "httpd",
        (string) (len=17) "pod-template-hash": (string) (len=9) "9b4f5bf69"
      },
      Annotations: (map[string]string) <nil>,
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=30) "webserver-deployment-9b4f5bf69",
          UID: (types.UID) (len=36) "8f9cf3fc-39b0-4eeb-9d09-cdbacc73e4e2",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828478519,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=537) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |.":{},"f:name":{|
              00000040  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              00000050  65 2d 68 61 73 68 22 3a  7b 7d 7d 2c 22 66 3a 6f  |e-hash":{}},"f:o|
              00000060  77 6e 65 72 52 65 66 65  72 65 6e 63 65 73 22 3a  |wnerReferences":|
              00000070  7b 22 2e 22 3a 7b 7d 2c  22 6b 3a 7b 5c 22 75 69  |{".":{},"k:{\"ui|
              00000080  64 5c 22 3a 5c 22 38 66  39 63 66 33 66 63 2d 33  |d\":\"8f9cf3fc-3|
              00000090  39 62 30 2d 34 65 65 62  2d 39 64 30 39 2d 63 64  |9b0-4eeb-9d09-cd|
              000000a0  62 61 63 63 37 33 65 34  65 32 5c 22 7d 22 3a 7b  |bacc73e4e2\"}":{|
              000000b0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000000c0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              000000d0  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 68 74 74  |:{\"name\":\"htt|
              000000e0  70 64 5c 22 7d 22 3a 7b  22 2e 22 3a 7b 7d 2c 22  |pd\"}":{".":{},"|
              000000f0  66 3a 69 6d 61 67 65 22  3a 7b 7d 2c 22 66 3a 69  |f:image":{},"f:i|
              00000100  6d 61 67 65 50 75 6c 6c  50 6f 6c 69 63 79 22 3a  |magePullPolicy":|
              00000110  7b 7d 2c 22 66 3a 6e 61  6d 65 22 3a 7b 7d 2c 22  |{},"f:name":{},"|
              00000120  66 3a 72 65 73 6f 75 72  63 65 73 22 3a 7b 7d 2c  |f:resources":{},|
              00000130  22 66 3a 73 65 63 75 72  69 74 79 43 6f 6e 74 65  |"f:securityConte|
              00000140  78 74 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |xt":{},"f:termin|
              00000150  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 61 74 68  |ationMessagePath|
              00000160  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000170  69 6f 6e 4d 65 73 73 61  67 65 50 6f 6c 69 63 79  |ionMessagePolicy|
              00000180  22 3a 7b 7d 7d 7d 2c 22  66 3a 64 6e 73 50 6f 6c  |":{}}},"f:dnsPol|
              00000190  69 63 79 22 3a 7b 7d 2c  22 66 3a 65 6e 61 62 6c  |icy":{},"f:enabl|
              000001a0  65 53 65 72 76 69 63 65  4c 69 6e 6b 73 22 3a 7b  |eServiceLinks":{|
              000001b0  7d 2c 22 66 3a 72 65 73  74 61 72 74 50 6f 6c 69  |},"f:restartPoli|
              000001c0  63 79 22 3a 7b 7d 2c 22  66 3a 73 63 68 65 64 75  |cy":{},"f:schedu|
              000001d0  6c 65 72 4e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 73  |lerName":{},"f:s|
              000001e0  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              000001f0  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000200  6e 47 72 61 63 65 50 65  72 69 6f 64 53 65 63 6f  |nGracePeriodSeco|
              00000210  6e 64 73 22 3a 7b 7d 7d  7d                       |nds":{}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=7) "kubelet",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828478520,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=482) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  63 6f 6e 64 69 74 69 6f  6e 73 22 3a 7b 22 6b 3a  |conditions":{"k:|
              00000020  7b 5c 22 74 79 70 65 5c  22 3a 5c 22 43 6f 6e 74  |{\"type\":\"Cont|
              00000030  61 69 6e 65 72 73 52 65  61 64 79 5c 22 7d 22 3a  |ainersReady\"}":|
              00000040  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000050  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000060  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000070  6d 65 22 3a 7b 7d 2c 22  66 3a 6d 65 73 73 61 67  |me":{},"f:messag|
              00000080  65 22 3a 7b 7d 2c 22 66  3a 72 65 61 73 6f 6e 22  |e":{},"f:reason"|
              00000090  3a 7b 7d 2c 22 66 3a 73  74 61 74 75 73 22 3a 7b  |:{},"f:status":{|
              000000a0  7d 2c 22 66 3a 74 79 70  65 22 3a 7b 7d 7d 2c 22  |},"f:type":{}},"|
              000000b0  6b 3a 7b 5c 22 74 79 70  65 5c 22 3a 5c 22 49 6e  |k:{\"type\":\"In|
              000000c0  69 74 69 61 6c 69 7a 65  64 5c 22 7d 22 3a 7b 22  |itialized\"}":{"|
              000000d0  2e 22 3a 7b 7d 2c 22 66  3a 6c 61 73 74 50 72 6f  |.":{},"f:lastPro|
              000000e0  62 65 54 69 6d 65 22 3a  7b 7d 2c 22 66 3a 6c 61  |beTime":{},"f:la|
              000000f0  73 74 54 72 61 6e 73 69  74 69 6f 6e 54 69 6d 65  |stTransitionTime|
              00000100  22 3a 7b 7d 2c 22 66 3a  73 74 61 74 75 73 22 3a  |":{},"f:status":|
              00000110  7b 7d 2c 22 66 3a 74 79  70 65 22 3a 7b 7d 7d 2c  |{},"f:type":{}},|
              00000120  22 6b 3a 7b 5c 22 74 79  70 65 5c 22 3a 5c 22 52  |"k:{\"type\":\"R|
              00000130  65 61 64 79 5c 22 7d 22  3a 7b 22 2e 22 3a 7b 7d  |eady\"}":{".":{}|
              00000140  2c 22 66 3a 6c 61 73 74  50 72 6f 62 65 54 69 6d  |,"f:lastProbeTim|
              00000150  65 22 3a 7b 7d 2c 22 66  3a 6c 61 73 74 54 72 61  |e":{},"f:lastTra|
              00000160  6e 73 69 74 69 6f 6e 54  69 6d 65 22 3a 7b 7d 2c  |nsitionTime":{},|
              00000170  22 66 3a 6d 65 73 73 61  67 65 22 3a 7b 7d 2c 22  |"f:message":{},"|
              00000180  66 3a 72 65 61 73 6f 6e  22 3a 7b 7d 2c 22 66 3a  |f:reason":{},"f:|
              00000190  73 74 61 74 75 73 22 3a  7b 7d 2c 22 66 3a 74 79  |status":{},"f:ty|
              000001a0  70 65 22 3a 7b 7d 7d 7d  2c 22 66 3a 63 6f 6e 74  |pe":{}}},"f:cont|
              000001b0  61 69 6e 65 72 53 74 61  74 75 73 65 73 22 3a 7b  |ainerStatuses":{|
              000001c0  7d 2c 22 66 3a 68 6f 73  74 49 50 22 3a 7b 7d 2c  |},"f:hostIP":{},|
              000001d0  22 66 3a 73 74 61 72 74  54 69 6d 65 22 3a 7b 7d  |"f:startTime":{}|
              000001e0  7d 7d                                             |}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-z5d4s",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  })
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=5) "httpd",
          Image: (string) (len=13) "webserver:404",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-z5d4s",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(0),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=46) "scw-conformance-default-2af6d8b4c6264cc5b9e5e6",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Pending",
      Conditions: ([]v1.PodCondition) (len=4) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=11) "Initialized",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828478519,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=5) "Ready",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828478519,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=18) "ContainersNotReady",
          Message: (string) (len=39) "containers with unready status: [httpd]"
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=15) "ContainersReady",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828478519,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=18) "ContainersNotReady",
          Message: (string) (len=39) "containers with unready status: [httpd]"
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828478519,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) (len=11) "172.16.36.3",
      HostIPs: ([]v1.HostIP) <nil>,
      PodIP: (string) "",
      PodIPs: ([]v1.PodIP) <nil>,
      StartTime: (*v1.Time)({
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63828478519,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      }),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) (len=1) {
        (v1.ContainerStatus) {
          Name: (string) (len=5) "httpd",
          State: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)({
              Reason: (string) (len=17) "ContainerCreating",
              Message: (string) ""
            }),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          LastTerminationState: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          Ready: (bool) false,
          RestartCount: (int32) 0,
          Image: (string) (len=13) "webserver:404",
          ImageID: (string) "",
          ContainerID: (string) "",
          Started: (*bool)(false),
          AllocatedResources: (v1.ResourceList) <nil>,
          Resources: (*v1.ResourceRequirements)(<nil>)
        }
      },
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }

  Aug 24 12:55:21.227: INFO: Pod "webserver-deployment-9b4f5bf69-h4pg5" is not available:
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=36) "webserver-deployment-9b4f5bf69-h4pg5",
      GenerateName: (string) (len=31) "webserver-deployment-9b4f5bf69-",
      Namespace: (string) (len=15) "deployment-5781",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "cf712f6d-c109-4d9a-af9b-d0f4d9d043a3",
      ResourceVersion: (string) (len=10) "3405091377",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63828478519,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=5) "httpd",
        (string) (len=17) "pod-template-hash": (string) (len=9) "9b4f5bf69"
      },
      Annotations: (map[string]string) <nil>,
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=30) "webserver-deployment-9b4f5bf69",
          UID: (types.UID) (len=36) "8f9cf3fc-39b0-4eeb-9d09-cdbacc73e4e2",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828478519,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=537) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |.":{},"f:name":{|
              00000040  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              00000050  65 2d 68 61 73 68 22 3a  7b 7d 7d 2c 22 66 3a 6f  |e-hash":{}},"f:o|
              00000060  77 6e 65 72 52 65 66 65  72 65 6e 63 65 73 22 3a  |wnerReferences":|
              00000070  7b 22 2e 22 3a 7b 7d 2c  22 6b 3a 7b 5c 22 75 69  |{".":{},"k:{\"ui|
              00000080  64 5c 22 3a 5c 22 38 66  39 63 66 33 66 63 2d 33  |d\":\"8f9cf3fc-3|
              00000090  39 62 30 2d 34 65 65 62  2d 39 64 30 39 2d 63 64  |9b0-4eeb-9d09-cd|
              000000a0  62 61 63 63 37 33 65 34  65 32 5c 22 7d 22 3a 7b  |bacc73e4e2\"}":{|
              000000b0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000000c0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              000000d0  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 68 74 74  |:{\"name\":\"htt|
              000000e0  70 64 5c 22 7d 22 3a 7b  22 2e 22 3a 7b 7d 2c 22  |pd\"}":{".":{},"|
              000000f0  66 3a 69 6d 61 67 65 22  3a 7b 7d 2c 22 66 3a 69  |f:image":{},"f:i|
              00000100  6d 61 67 65 50 75 6c 6c  50 6f 6c 69 63 79 22 3a  |magePullPolicy":|
              00000110  7b 7d 2c 22 66 3a 6e 61  6d 65 22 3a 7b 7d 2c 22  |{},"f:name":{},"|
              00000120  66 3a 72 65 73 6f 75 72  63 65 73 22 3a 7b 7d 2c  |f:resources":{},|
              00000130  22 66 3a 73 65 63 75 72  69 74 79 43 6f 6e 74 65  |"f:securityConte|
              00000140  78 74 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |xt":{},"f:termin|
              00000150  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 61 74 68  |ationMessagePath|
              00000160  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000170  69 6f 6e 4d 65 73 73 61  67 65 50 6f 6c 69 63 79  |ionMessagePolicy|
              00000180  22 3a 7b 7d 7d 7d 2c 22  66 3a 64 6e 73 50 6f 6c  |":{}}},"f:dnsPol|
              00000190  69 63 79 22 3a 7b 7d 2c  22 66 3a 65 6e 61 62 6c  |icy":{},"f:enabl|
              000001a0  65 53 65 72 76 69 63 65  4c 69 6e 6b 73 22 3a 7b  |eServiceLinks":{|
              000001b0  7d 2c 22 66 3a 72 65 73  74 61 72 74 50 6f 6c 69  |},"f:restartPoli|
              000001c0  63 79 22 3a 7b 7d 2c 22  66 3a 73 63 68 65 64 75  |cy":{},"f:schedu|
              000001d0  6c 65 72 4e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 73  |lerName":{},"f:s|
              000001e0  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              000001f0  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000200  6e 47 72 61 63 65 50 65  72 69 6f 64 53 65 63 6f  |nGracePeriodSeco|
              00000210  6e 64 73 22 3a 7b 7d 7d  7d                       |nds":{}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=7) "kubelet",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828478520,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=482) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  63 6f 6e 64 69 74 69 6f  6e 73 22 3a 7b 22 6b 3a  |conditions":{"k:|
              00000020  7b 5c 22 74 79 70 65 5c  22 3a 5c 22 43 6f 6e 74  |{\"type\":\"Cont|
              00000030  61 69 6e 65 72 73 52 65  61 64 79 5c 22 7d 22 3a  |ainersReady\"}":|
              00000040  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000050  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000060  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000070  6d 65 22 3a 7b 7d 2c 22  66 3a 6d 65 73 73 61 67  |me":{},"f:messag|
              00000080  65 22 3a 7b 7d 2c 22 66  3a 72 65 61 73 6f 6e 22  |e":{},"f:reason"|
              00000090  3a 7b 7d 2c 22 66 3a 73  74 61 74 75 73 22 3a 7b  |:{},"f:status":{|
              000000a0  7d 2c 22 66 3a 74 79 70  65 22 3a 7b 7d 7d 2c 22  |},"f:type":{}},"|
              000000b0  6b 3a 7b 5c 22 74 79 70  65 5c 22 3a 5c 22 49 6e  |k:{\"type\":\"In|
              000000c0  69 74 69 61 6c 69 7a 65  64 5c 22 7d 22 3a 7b 22  |itialized\"}":{"|
              000000d0  2e 22 3a 7b 7d 2c 22 66  3a 6c 61 73 74 50 72 6f  |.":{},"f:lastPro|
              000000e0  62 65 54 69 6d 65 22 3a  7b 7d 2c 22 66 3a 6c 61  |beTime":{},"f:la|
              000000f0  73 74 54 72 61 6e 73 69  74 69 6f 6e 54 69 6d 65  |stTransitionTime|
              00000100  22 3a 7b 7d 2c 22 66 3a  73 74 61 74 75 73 22 3a  |":{},"f:status":|
              00000110  7b 7d 2c 22 66 3a 74 79  70 65 22 3a 7b 7d 7d 2c  |{},"f:type":{}},|
              00000120  22 6b 3a 7b 5c 22 74 79  70 65 5c 22 3a 5c 22 52  |"k:{\"type\":\"R|
              00000130  65 61 64 79 5c 22 7d 22  3a 7b 22 2e 22 3a 7b 7d  |eady\"}":{".":{}|
              00000140  2c 22 66 3a 6c 61 73 74  50 72 6f 62 65 54 69 6d  |,"f:lastProbeTim|
              00000150  65 22 3a 7b 7d 2c 22 66  3a 6c 61 73 74 54 72 61  |e":{},"f:lastTra|
              00000160  6e 73 69 74 69 6f 6e 54  69 6d 65 22 3a 7b 7d 2c  |nsitionTime":{},|
              00000170  22 66 3a 6d 65 73 73 61  67 65 22 3a 7b 7d 2c 22  |"f:message":{},"|
              00000180  66 3a 72 65 61 73 6f 6e  22 3a 7b 7d 2c 22 66 3a  |f:reason":{},"f:|
              00000190  73 74 61 74 75 73 22 3a  7b 7d 2c 22 66 3a 74 79  |status":{},"f:ty|
              000001a0  70 65 22 3a 7b 7d 7d 7d  2c 22 66 3a 63 6f 6e 74  |pe":{}}},"f:cont|
              000001b0  61 69 6e 65 72 53 74 61  74 75 73 65 73 22 3a 7b  |ainerStatuses":{|
              000001c0  7d 2c 22 66 3a 68 6f 73  74 49 50 22 3a 7b 7d 2c  |},"f:hostIP":{},|
              000001d0  22 66 3a 73 74 61 72 74  54 69 6d 65 22 3a 7b 7d  |"f:startTime":{}|
              000001e0  7d 7d                                             |}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-x674c",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  })
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=5) "httpd",
          Image: (string) (len=13) "webserver:404",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-x674c",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(0),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=46) "scw-conformance-default-2af6d8b4c6264cc5b9e5e6",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Pending",
      Conditions: ([]v1.PodCondition) (len=4) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=11) "Initialized",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828478519,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=5) "Ready",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828478519,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=18) "ContainersNotReady",
          Message: (string) (len=39) "containers with unready status: [httpd]"
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=15) "ContainersReady",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828478519,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=18) "ContainersNotReady",
          Message: (string) (len=39) "containers with unready status: [httpd]"
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828478519,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) (len=11) "172.16.36.3",
      HostIPs: ([]v1.HostIP) <nil>,
      PodIP: (string) "",
      PodIPs: ([]v1.PodIP) <nil>,
      StartTime: (*v1.Time)({
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63828478519,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      }),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) (len=1) {
        (v1.ContainerStatus) {
          Name: (string) (len=5) "httpd",
          State: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)({
              Reason: (string) (len=17) "ContainerCreating",
              Message: (string) ""
            }),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          LastTerminationState: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          Ready: (bool) false,
          RestartCount: (int32) 0,
          Image: (string) (len=13) "webserver:404",
          ImageID: (string) "",
          ContainerID: (string) "",
          Started: (*bool)(false),
          AllocatedResources: (v1.ResourceList) <nil>,
          Resources: (*v1.ResourceRequirements)(<nil>)
        }
      },
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }

  Aug 24 12:55:21.236: INFO: Pod "webserver-deployment-9b4f5bf69-mtwk6" is not available:
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=36) "webserver-deployment-9b4f5bf69-mtwk6",
      GenerateName: (string) (len=31) "webserver-deployment-9b4f5bf69-",
      Namespace: (string) (len=15) "deployment-5781",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "7dcd48d2-60d9-4fef-b68d-c477421168bc",
      ResourceVersion: (string) (len=10) "3405091388",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63828478517,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=17) "pod-template-hash": (string) (len=9) "9b4f5bf69",
        (string) (len=4) "name": (string) (len=5) "httpd"
      },
      Annotations: (map[string]string) <nil>,
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=30) "webserver-deployment-9b4f5bf69",
          UID: (types.UID) (len=36) "8f9cf3fc-39b0-4eeb-9d09-cdbacc73e4e2",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828478517,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=537) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |.":{},"f:name":{|
              00000040  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              00000050  65 2d 68 61 73 68 22 3a  7b 7d 7d 2c 22 66 3a 6f  |e-hash":{}},"f:o|
              00000060  77 6e 65 72 52 65 66 65  72 65 6e 63 65 73 22 3a  |wnerReferences":|
              00000070  7b 22 2e 22 3a 7b 7d 2c  22 6b 3a 7b 5c 22 75 69  |{".":{},"k:{\"ui|
              00000080  64 5c 22 3a 5c 22 38 66  39 63 66 33 66 63 2d 33  |d\":\"8f9cf3fc-3|
              00000090  39 62 30 2d 34 65 65 62  2d 39 64 30 39 2d 63 64  |9b0-4eeb-9d09-cd|
              000000a0  62 61 63 63 37 33 65 34  65 32 5c 22 7d 22 3a 7b  |bacc73e4e2\"}":{|
              000000b0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000000c0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              000000d0  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 68 74 74  |:{\"name\":\"htt|
              000000e0  70 64 5c 22 7d 22 3a 7b  22 2e 22 3a 7b 7d 2c 22  |pd\"}":{".":{},"|
              000000f0  66 3a 69 6d 61 67 65 22  3a 7b 7d 2c 22 66 3a 69  |f:image":{},"f:i|
              00000100  6d 61 67 65 50 75 6c 6c  50 6f 6c 69 63 79 22 3a  |magePullPolicy":|
              00000110  7b 7d 2c 22 66 3a 6e 61  6d 65 22 3a 7b 7d 2c 22  |{},"f:name":{},"|
              00000120  66 3a 72 65 73 6f 75 72  63 65 73 22 3a 7b 7d 2c  |f:resources":{},|
              00000130  22 66 3a 73 65 63 75 72  69 74 79 43 6f 6e 74 65  |"f:securityConte|
              00000140  78 74 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |xt":{},"f:termin|
              00000150  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 61 74 68  |ationMessagePath|
              00000160  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000170  69 6f 6e 4d 65 73 73 61  67 65 50 6f 6c 69 63 79  |ionMessagePolicy|
              00000180  22 3a 7b 7d 7d 7d 2c 22  66 3a 64 6e 73 50 6f 6c  |":{}}},"f:dnsPol|
              00000190  69 63 79 22 3a 7b 7d 2c  22 66 3a 65 6e 61 62 6c  |icy":{},"f:enabl|
              000001a0  65 53 65 72 76 69 63 65  4c 69 6e 6b 73 22 3a 7b  |eServiceLinks":{|
              000001b0  7d 2c 22 66 3a 72 65 73  74 61 72 74 50 6f 6c 69  |},"f:restartPoli|
              000001c0  63 79 22 3a 7b 7d 2c 22  66 3a 73 63 68 65 64 75  |cy":{},"f:schedu|
              000001d0  6c 65 72 4e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 73  |lerName":{},"f:s|
              000001e0  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              000001f0  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000200  6e 47 72 61 63 65 50 65  72 69 6f 64 53 65 63 6f  |nGracePeriodSeco|
              00000210  6e 64 73 22 3a 7b 7d 7d  7d                       |nds":{}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=7) "kubelet",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828478520,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=563) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  63 6f 6e 64 69 74 69 6f  6e 73 22 3a 7b 22 6b 3a  |conditions":{"k:|
              00000020  7b 5c 22 74 79 70 65 5c  22 3a 5c 22 43 6f 6e 74  |{\"type\":\"Cont|
              00000030  61 69 6e 65 72 73 52 65  61 64 79 5c 22 7d 22 3a  |ainersReady\"}":|
              00000040  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000050  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000060  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000070  6d 65 22 3a 7b 7d 2c 22  66 3a 6d 65 73 73 61 67  |me":{},"f:messag|
              00000080  65 22 3a 7b 7d 2c 22 66  3a 72 65 61 73 6f 6e 22  |e":{},"f:reason"|
              00000090  3a 7b 7d 2c 22 66 3a 73  74 61 74 75 73 22 3a 7b  |:{},"f:status":{|
              000000a0  7d 2c 22 66 3a 74 79 70  65 22 3a 7b 7d 7d 2c 22  |},"f:type":{}},"|
              000000b0  6b 3a 7b 5c 22 74 79 70  65 5c 22 3a 5c 22 49 6e  |k:{\"type\":\"In|
              000000c0  69 74 69 61 6c 69 7a 65  64 5c 22 7d 22 3a 7b 22  |itialized\"}":{"|
              000000d0  2e 22 3a 7b 7d 2c 22 66  3a 6c 61 73 74 50 72 6f  |.":{},"f:lastPro|
              000000e0  62 65 54 69 6d 65 22 3a  7b 7d 2c 22 66 3a 6c 61  |beTime":{},"f:la|
              000000f0  73 74 54 72 61 6e 73 69  74 69 6f 6e 54 69 6d 65  |stTransitionTime|
              00000100  22 3a 7b 7d 2c 22 66 3a  73 74 61 74 75 73 22 3a  |":{},"f:status":|
              00000110  7b 7d 2c 22 66 3a 74 79  70 65 22 3a 7b 7d 7d 2c  |{},"f:type":{}},|
              00000120  22 6b 3a 7b 5c 22 74 79  70 65 5c 22 3a 5c 22 52  |"k:{\"type\":\"R|
              00000130  65 61 64 79 5c 22 7d 22  3a 7b 22 2e 22 3a 7b 7d  |eady\"}":{".":{}|
              00000140  2c 22 66 3a 6c 61 73 74  50 72 6f 62 65 54 69 6d  |,"f:lastProbeTim|
              00000150  65 22 3a 7b 7d 2c 22 66  3a 6c 61 73 74 54 72 61  |e":{},"f:lastTra|
              00000160  6e 73 69 74 69 6f 6e 54  69 6d 65 22 3a 7b 7d 2c  |nsitionTime":{},|
              00000170  22 66 3a 6d 65 73 73 61  67 65 22 3a 7b 7d 2c 22  |"f:message":{},"|
              00000180  66 3a 72 65 61 73 6f 6e  22 3a 7b 7d 2c 22 66 3a  |f:reason":{},"f:|
              00000190  73 74 61 74 75 73 22 3a  7b 7d 2c 22 66 3a 74 79  |status":{},"f:ty|
              000001a0  70 65 22 3a 7b 7d 7d 7d  2c 22 66 3a 63 6f 6e 74  |pe":{}}},"f:cont|
              000001b0  61 69 6e 65 72 53 74 61  74 75 73 65 73 22 3a 7b  |ainerStatuses":{|
              000001c0  7d 2c 22 66 3a 68 6f 73  74 49 50 22 3a 7b 7d 2c  |},"f:hostIP":{},|
              000001d0  22 66 3a 70 6f 64 49 50  22 3a 7b 7d 2c 22 66 3a  |"f:podIP":{},"f:|
              000001e0  70 6f 64 49 50 73 22 3a  7b 22 2e 22 3a 7b 7d 2c  |podIPs":{".":{},|
              000001f0  22 6b 3a 7b 5c 22 69 70  5c 22 3a 5c 22 31 30 2e  |"k:{\"ip\":\"10.|
              00000200  31 30 30 2e 30 2e 32 30  5c 22 7d 22 3a 7b 22 2e  |100.0.20\"}":{".|
              00000210  22 3a 7b 7d 2c 22 66 3a  69 70 22 3a 7b 7d 7d 7d  |":{},"f:ip":{}}}|
              00000220  2c 22 66 3a 73 74 61 72  74 54 69 6d 65 22 3a 7b  |,"f:startTime":{|
              00000230  7d 7d 7d                                          |}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-vs8n8",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  })
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=5) "httpd",
          Image: (string) (len=13) "webserver:404",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-vs8n8",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(0),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=46) "scw-conformance-default-2af6d8b4c6264cc5b9e5e6",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Pending",
      Conditions: ([]v1.PodCondition) (len=4) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=11) "Initialized",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828478517,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=5) "Ready",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828478517,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=18) "ContainersNotReady",
          Message: (string) (len=39) "containers with unready status: [httpd]"
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=15) "ContainersReady",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828478517,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=18) "ContainersNotReady",
          Message: (string) (len=39) "containers with unready status: [httpd]"
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828478517,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) (len=11) "172.16.36.3",
      HostIPs: ([]v1.HostIP) <nil>,
      PodIP: (string) (len=11) "10.100.0.20",
      PodIPs: ([]v1.PodIP) (len=1) {
        (v1.PodIP) {
          IP: (string) (len=11) "10.100.0.20"
        }
      },
      StartTime: (*v1.Time)({
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63828478517,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      }),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) (len=1) {
        (v1.ContainerStatus) {
          Name: (string) (len=5) "httpd",
          State: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)({
              Reason: (string) (len=12) "ErrImagePull",
              Message: (string) (len=262) "failed to pull and unpack image \"docker.io/library/webserver:404\": failed to resolve reference \"docker.io/library/webserver:404\": pull access denied, repository does not exist or may require authorization: server message: insufficient_scope: authorization failed"
            }),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          LastTerminationState: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          Ready: (bool) false,
          RestartCount: (int32) 0,
          Image: (string) (len=13) "webserver:404",
          ImageID: (string) "",
          ContainerID: (string) "",
          Started: (*bool)(false),
          AllocatedResources: (v1.ResourceList) <nil>,
          Resources: (*v1.ResourceRequirements)(<nil>)
        }
      },
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }

  Aug 24 12:55:21.237: INFO: Pod "webserver-deployment-9b4f5bf69-n7nlv" is not available:
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=36) "webserver-deployment-9b4f5bf69-n7nlv",
      GenerateName: (string) (len=31) "webserver-deployment-9b4f5bf69-",
      Namespace: (string) (len=15) "deployment-5781",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "d94e0869-5403-46c2-8cb7-675fbbef0869",
      ResourceVersion: (string) (len=10) "3405091389",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63828478519,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=5) "httpd",
        (string) (len=17) "pod-template-hash": (string) (len=9) "9b4f5bf69"
      },
      Annotations: (map[string]string) <nil>,
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=30) "webserver-deployment-9b4f5bf69",
          UID: (types.UID) (len=36) "8f9cf3fc-39b0-4eeb-9d09-cdbacc73e4e2",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828478519,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=537) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |.":{},"f:name":{|
              00000040  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              00000050  65 2d 68 61 73 68 22 3a  7b 7d 7d 2c 22 66 3a 6f  |e-hash":{}},"f:o|
              00000060  77 6e 65 72 52 65 66 65  72 65 6e 63 65 73 22 3a  |wnerReferences":|
              00000070  7b 22 2e 22 3a 7b 7d 2c  22 6b 3a 7b 5c 22 75 69  |{".":{},"k:{\"ui|
              00000080  64 5c 22 3a 5c 22 38 66  39 63 66 33 66 63 2d 33  |d\":\"8f9cf3fc-3|
              00000090  39 62 30 2d 34 65 65 62  2d 39 64 30 39 2d 63 64  |9b0-4eeb-9d09-cd|
              000000a0  62 61 63 63 37 33 65 34  65 32 5c 22 7d 22 3a 7b  |bacc73e4e2\"}":{|
              000000b0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000000c0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              000000d0  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 68 74 74  |:{\"name\":\"htt|
              000000e0  70 64 5c 22 7d 22 3a 7b  22 2e 22 3a 7b 7d 2c 22  |pd\"}":{".":{},"|
              000000f0  66 3a 69 6d 61 67 65 22  3a 7b 7d 2c 22 66 3a 69  |f:image":{},"f:i|
              00000100  6d 61 67 65 50 75 6c 6c  50 6f 6c 69 63 79 22 3a  |magePullPolicy":|
              00000110  7b 7d 2c 22 66 3a 6e 61  6d 65 22 3a 7b 7d 2c 22  |{},"f:name":{},"|
              00000120  66 3a 72 65 73 6f 75 72  63 65 73 22 3a 7b 7d 2c  |f:resources":{},|
              00000130  22 66 3a 73 65 63 75 72  69 74 79 43 6f 6e 74 65  |"f:securityConte|
              00000140  78 74 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |xt":{},"f:termin|
              00000150  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 61 74 68  |ationMessagePath|
              00000160  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000170  69 6f 6e 4d 65 73 73 61  67 65 50 6f 6c 69 63 79  |ionMessagePolicy|
              00000180  22 3a 7b 7d 7d 7d 2c 22  66 3a 64 6e 73 50 6f 6c  |":{}}},"f:dnsPol|
              00000190  69 63 79 22 3a 7b 7d 2c  22 66 3a 65 6e 61 62 6c  |icy":{},"f:enabl|
              000001a0  65 53 65 72 76 69 63 65  4c 69 6e 6b 73 22 3a 7b  |eServiceLinks":{|
              000001b0  7d 2c 22 66 3a 72 65 73  74 61 72 74 50 6f 6c 69  |},"f:restartPoli|
              000001c0  63 79 22 3a 7b 7d 2c 22  66 3a 73 63 68 65 64 75  |cy":{},"f:schedu|
              000001d0  6c 65 72 4e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 73  |lerName":{},"f:s|
              000001e0  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              000001f0  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000200  6e 47 72 61 63 65 50 65  72 69 6f 64 53 65 63 6f  |nGracePeriodSeco|
              00000210  6e 64 73 22 3a 7b 7d 7d  7d                       |nds":{}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=7) "kubelet",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828478520,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=482) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  63 6f 6e 64 69 74 69 6f  6e 73 22 3a 7b 22 6b 3a  |conditions":{"k:|
              00000020  7b 5c 22 74 79 70 65 5c  22 3a 5c 22 43 6f 6e 74  |{\"type\":\"Cont|
              00000030  61 69 6e 65 72 73 52 65  61 64 79 5c 22 7d 22 3a  |ainersReady\"}":|
              00000040  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000050  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000060  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000070  6d 65 22 3a 7b 7d 2c 22  66 3a 6d 65 73 73 61 67  |me":{},"f:messag|
              00000080  65 22 3a 7b 7d 2c 22 66  3a 72 65 61 73 6f 6e 22  |e":{},"f:reason"|
              00000090  3a 7b 7d 2c 22 66 3a 73  74 61 74 75 73 22 3a 7b  |:{},"f:status":{|
              000000a0  7d 2c 22 66 3a 74 79 70  65 22 3a 7b 7d 7d 2c 22  |},"f:type":{}},"|
              000000b0  6b 3a 7b 5c 22 74 79 70  65 5c 22 3a 5c 22 49 6e  |k:{\"type\":\"In|
              000000c0  69 74 69 61 6c 69 7a 65  64 5c 22 7d 22 3a 7b 22  |itialized\"}":{"|
              000000d0  2e 22 3a 7b 7d 2c 22 66  3a 6c 61 73 74 50 72 6f  |.":{},"f:lastPro|
              000000e0  62 65 54 69 6d 65 22 3a  7b 7d 2c 22 66 3a 6c 61  |beTime":{},"f:la|
              000000f0  73 74 54 72 61 6e 73 69  74 69 6f 6e 54 69 6d 65  |stTransitionTime|
              00000100  22 3a 7b 7d 2c 22 66 3a  73 74 61 74 75 73 22 3a  |":{},"f:status":|
              00000110  7b 7d 2c 22 66 3a 74 79  70 65 22 3a 7b 7d 7d 2c  |{},"f:type":{}},|
              00000120  22 6b 3a 7b 5c 22 74 79  70 65 5c 22 3a 5c 22 52  |"k:{\"type\":\"R|
              00000130  65 61 64 79 5c 22 7d 22  3a 7b 22 2e 22 3a 7b 7d  |eady\"}":{".":{}|
              00000140  2c 22 66 3a 6c 61 73 74  50 72 6f 62 65 54 69 6d  |,"f:lastProbeTim|
              00000150  65 22 3a 7b 7d 2c 22 66  3a 6c 61 73 74 54 72 61  |e":{},"f:lastTra|
              00000160  6e 73 69 74 69 6f 6e 54  69 6d 65 22 3a 7b 7d 2c  |nsitionTime":{},|
              00000170  22 66 3a 6d 65 73 73 61  67 65 22 3a 7b 7d 2c 22  |"f:message":{},"|
              00000180  66 3a 72 65 61 73 6f 6e  22 3a 7b 7d 2c 22 66 3a  |f:reason":{},"f:|
              00000190  73 74 61 74 75 73 22 3a  7b 7d 2c 22 66 3a 74 79  |status":{},"f:ty|
              000001a0  70 65 22 3a 7b 7d 7d 7d  2c 22 66 3a 63 6f 6e 74  |pe":{}}},"f:cont|
              000001b0  61 69 6e 65 72 53 74 61  74 75 73 65 73 22 3a 7b  |ainerStatuses":{|
              000001c0  7d 2c 22 66 3a 68 6f 73  74 49 50 22 3a 7b 7d 2c  |},"f:hostIP":{},|
              000001d0  22 66 3a 73 74 61 72 74  54 69 6d 65 22 3a 7b 7d  |"f:startTime":{}|
              000001e0  7d 7d                                             |}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-kcxfd",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  })
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=5) "httpd",
          Image: (string) (len=13) "webserver:404",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-kcxfd",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(0),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=46) "scw-conformance-default-ecf11ec729064adba7e270",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Pending",
      Conditions: ([]v1.PodCondition) (len=4) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=11) "Initialized",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828478519,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=5) "Ready",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828478519,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=18) "ContainersNotReady",
          Message: (string) (len=39) "containers with unready status: [httpd]"
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=15) "ContainersReady",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828478519,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=18) "ContainersNotReady",
          Message: (string) (len=39) "containers with unready status: [httpd]"
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828478519,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) (len=11) "172.16.36.2",
      HostIPs: ([]v1.HostIP) <nil>,
      PodIP: (string) "",
      PodIPs: ([]v1.PodIP) <nil>,
      StartTime: (*v1.Time)({
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63828478519,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      }),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) (len=1) {
        (v1.ContainerStatus) {
          Name: (string) (len=5) "httpd",
          State: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)({
              Reason: (string) (len=17) "ContainerCreating",
              Message: (string) ""
            }),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          LastTerminationState: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          Ready: (bool) false,
          RestartCount: (int32) 0,
          Image: (string) (len=13) "webserver:404",
          ImageID: (string) "",
          ContainerID: (string) "",
          Started: (*bool)(false),
          AllocatedResources: (v1.ResourceList) <nil>,
          Resources: (*v1.ResourceRequirements)(<nil>)
        }
      },
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }

  Aug 24 12:55:21.238: INFO: Pod "webserver-deployment-9b4f5bf69-pvnlh" is not available:
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=36) "webserver-deployment-9b4f5bf69-pvnlh",
      GenerateName: (string) (len=31) "webserver-deployment-9b4f5bf69-",
      Namespace: (string) (len=15) "deployment-5781",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "28a31f42-1ca8-4c46-9a15-993ebf200cfe",
      ResourceVersion: (string) (len=10) "3405091362",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63828478516,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=5) "httpd",
        (string) (len=17) "pod-template-hash": (string) (len=9) "9b4f5bf69"
      },
      Annotations: (map[string]string) <nil>,
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=30) "webserver-deployment-9b4f5bf69",
          UID: (types.UID) (len=36) "8f9cf3fc-39b0-4eeb-9d09-cdbacc73e4e2",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828478516,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=537) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |.":{},"f:name":{|
              00000040  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              00000050  65 2d 68 61 73 68 22 3a  7b 7d 7d 2c 22 66 3a 6f  |e-hash":{}},"f:o|
              00000060  77 6e 65 72 52 65 66 65  72 65 6e 63 65 73 22 3a  |wnerReferences":|
              00000070  7b 22 2e 22 3a 7b 7d 2c  22 6b 3a 7b 5c 22 75 69  |{".":{},"k:{\"ui|
              00000080  64 5c 22 3a 5c 22 38 66  39 63 66 33 66 63 2d 33  |d\":\"8f9cf3fc-3|
              00000090  39 62 30 2d 34 65 65 62  2d 39 64 30 39 2d 63 64  |9b0-4eeb-9d09-cd|
              000000a0  62 61 63 63 37 33 65 34  65 32 5c 22 7d 22 3a 7b  |bacc73e4e2\"}":{|
              000000b0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000000c0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              000000d0  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 68 74 74  |:{\"name\":\"htt|
              000000e0  70 64 5c 22 7d 22 3a 7b  22 2e 22 3a 7b 7d 2c 22  |pd\"}":{".":{},"|
              000000f0  66 3a 69 6d 61 67 65 22  3a 7b 7d 2c 22 66 3a 69  |f:image":{},"f:i|
              00000100  6d 61 67 65 50 75 6c 6c  50 6f 6c 69 63 79 22 3a  |magePullPolicy":|
              00000110  7b 7d 2c 22 66 3a 6e 61  6d 65 22 3a 7b 7d 2c 22  |{},"f:name":{},"|
              00000120  66 3a 72 65 73 6f 75 72  63 65 73 22 3a 7b 7d 2c  |f:resources":{},|
              00000130  22 66 3a 73 65 63 75 72  69 74 79 43 6f 6e 74 65  |"f:securityConte|
              00000140  78 74 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |xt":{},"f:termin|
              00000150  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 61 74 68  |ationMessagePath|
              00000160  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000170  69 6f 6e 4d 65 73 73 61  67 65 50 6f 6c 69 63 79  |ionMessagePolicy|
              00000180  22 3a 7b 7d 7d 7d 2c 22  66 3a 64 6e 73 50 6f 6c  |":{}}},"f:dnsPol|
              00000190  69 63 79 22 3a 7b 7d 2c  22 66 3a 65 6e 61 62 6c  |icy":{},"f:enabl|
              000001a0  65 53 65 72 76 69 63 65  4c 69 6e 6b 73 22 3a 7b  |eServiceLinks":{|
              000001b0  7d 2c 22 66 3a 72 65 73  74 61 72 74 50 6f 6c 69  |},"f:restartPoli|
              000001c0  63 79 22 3a 7b 7d 2c 22  66 3a 73 63 68 65 64 75  |cy":{},"f:schedu|
              000001d0  6c 65 72 4e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 73  |lerName":{},"f:s|
              000001e0  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              000001f0  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000200  6e 47 72 61 63 65 50 65  72 69 6f 64 53 65 63 6f  |nGracePeriodSeco|
              00000210  6e 64 73 22 3a 7b 7d 7d  7d                       |nds":{}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=7) "kubelet",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828478520,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=563) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  63 6f 6e 64 69 74 69 6f  6e 73 22 3a 7b 22 6b 3a  |conditions":{"k:|
              00000020  7b 5c 22 74 79 70 65 5c  22 3a 5c 22 43 6f 6e 74  |{\"type\":\"Cont|
              00000030  61 69 6e 65 72 73 52 65  61 64 79 5c 22 7d 22 3a  |ainersReady\"}":|
              00000040  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000050  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000060  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000070  6d 65 22 3a 7b 7d 2c 22  66 3a 6d 65 73 73 61 67  |me":{},"f:messag|
              00000080  65 22 3a 7b 7d 2c 22 66  3a 72 65 61 73 6f 6e 22  |e":{},"f:reason"|
              00000090  3a 7b 7d 2c 22 66 3a 73  74 61 74 75 73 22 3a 7b  |:{},"f:status":{|
              000000a0  7d 2c 22 66 3a 74 79 70  65 22 3a 7b 7d 7d 2c 22  |},"f:type":{}},"|
              000000b0  6b 3a 7b 5c 22 74 79 70  65 5c 22 3a 5c 22 49 6e  |k:{\"type\":\"In|
              000000c0  69 74 69 61 6c 69 7a 65  64 5c 22 7d 22 3a 7b 22  |itialized\"}":{"|
              000000d0  2e 22 3a 7b 7d 2c 22 66  3a 6c 61 73 74 50 72 6f  |.":{},"f:lastPro|
              000000e0  62 65 54 69 6d 65 22 3a  7b 7d 2c 22 66 3a 6c 61  |beTime":{},"f:la|
              000000f0  73 74 54 72 61 6e 73 69  74 69 6f 6e 54 69 6d 65  |stTransitionTime|
              00000100  22 3a 7b 7d 2c 22 66 3a  73 74 61 74 75 73 22 3a  |":{},"f:status":|
              00000110  7b 7d 2c 22 66 3a 74 79  70 65 22 3a 7b 7d 7d 2c  |{},"f:type":{}},|
              00000120  22 6b 3a 7b 5c 22 74 79  70 65 5c 22 3a 5c 22 52  |"k:{\"type\":\"R|
              00000130  65 61 64 79 5c 22 7d 22  3a 7b 22 2e 22 3a 7b 7d  |eady\"}":{".":{}|
              00000140  2c 22 66 3a 6c 61 73 74  50 72 6f 62 65 54 69 6d  |,"f:lastProbeTim|
              00000150  65 22 3a 7b 7d 2c 22 66  3a 6c 61 73 74 54 72 61  |e":{},"f:lastTra|
              00000160  6e 73 69 74 69 6f 6e 54  69 6d 65 22 3a 7b 7d 2c  |nsitionTime":{},|
              00000170  22 66 3a 6d 65 73 73 61  67 65 22 3a 7b 7d 2c 22  |"f:message":{},"|
              00000180  66 3a 72 65 61 73 6f 6e  22 3a 7b 7d 2c 22 66 3a  |f:reason":{},"f:|
              00000190  73 74 61 74 75 73 22 3a  7b 7d 2c 22 66 3a 74 79  |status":{},"f:ty|
              000001a0  70 65 22 3a 7b 7d 7d 7d  2c 22 66 3a 63 6f 6e 74  |pe":{}}},"f:cont|
              000001b0  61 69 6e 65 72 53 74 61  74 75 73 65 73 22 3a 7b  |ainerStatuses":{|
              000001c0  7d 2c 22 66 3a 68 6f 73  74 49 50 22 3a 7b 7d 2c  |},"f:hostIP":{},|
              000001d0  22 66 3a 70 6f 64 49 50  22 3a 7b 7d 2c 22 66 3a  |"f:podIP":{},"f:|
              000001e0  70 6f 64 49 50 73 22 3a  7b 22 2e 22 3a 7b 7d 2c  |podIPs":{".":{},|
              000001f0  22 6b 3a 7b 5c 22 69 70  5c 22 3a 5c 22 31 30 2e  |"k:{\"ip\":\"10.|
              00000200  31 30 30 2e 31 2e 38 32  5c 22 7d 22 3a 7b 22 2e  |100.1.82\"}":{".|
              00000210  22 3a 7b 7d 2c 22 66 3a  69 70 22 3a 7b 7d 7d 7d  |":{},"f:ip":{}}}|
              00000220  2c 22 66 3a 73 74 61 72  74 54 69 6d 65 22 3a 7b  |,"f:startTime":{|
              00000230  7d 7d 7d                                          |}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-lrbn6",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  })
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=5) "httpd",
          Image: (string) (len=13) "webserver:404",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-lrbn6",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(0),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=46) "scw-conformance-default-ecf11ec729064adba7e270",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Pending",
      Conditions: ([]v1.PodCondition) (len=4) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=11) "Initialized",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828478516,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=5) "Ready",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828478516,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=18) "ContainersNotReady",
          Message: (string) (len=39) "containers with unready status: [httpd]"
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=15) "ContainersReady",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828478516,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=18) "ContainersNotReady",
          Message: (string) (len=39) "containers with unready status: [httpd]"
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828478516,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) (len=11) "172.16.36.2",
      HostIPs: ([]v1.HostIP) <nil>,
      PodIP: (string) (len=11) "10.100.1.82",
      PodIPs: ([]v1.PodIP) (len=1) {
        (v1.PodIP) {
          IP: (string) (len=11) "10.100.1.82"
        }
      },
      StartTime: (*v1.Time)({
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63828478516,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      }),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) (len=1) {
        (v1.ContainerStatus) {
          Name: (string) (len=5) "httpd",
          State: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)({
              Reason: (string) (len=12) "ErrImagePull",
              Message: (string) (len=262) "failed to pull and unpack image \"docker.io/library/webserver:404\": failed to resolve reference \"docker.io/library/webserver:404\": pull access denied, repository does not exist or may require authorization: server message: insufficient_scope: authorization failed"
            }),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          LastTerminationState: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          Ready: (bool) false,
          RestartCount: (int32) 0,
          Image: (string) (len=13) "webserver:404",
          ImageID: (string) "",
          ContainerID: (string) "",
          Started: (*bool)(false),
          AllocatedResources: (v1.ResourceList) <nil>,
          Resources: (*v1.ResourceRequirements)(<nil>)
        }
      },
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }

  Aug 24 12:55:21.240: INFO: Pod "webserver-deployment-9b4f5bf69-qv6nb" is not available:
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=36) "webserver-deployment-9b4f5bf69-qv6nb",
      GenerateName: (string) (len=31) "webserver-deployment-9b4f5bf69-",
      Namespace: (string) (len=15) "deployment-5781",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "3cba476a-7e03-4103-a312-f2c9dd2575f1",
      ResourceVersion: (string) (len=10) "3405091392",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63828478519,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=5) "httpd",
        (string) (len=17) "pod-template-hash": (string) (len=9) "9b4f5bf69"
      },
      Annotations: (map[string]string) <nil>,
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=30) "webserver-deployment-9b4f5bf69",
          UID: (types.UID) (len=36) "8f9cf3fc-39b0-4eeb-9d09-cdbacc73e4e2",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828478519,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=537) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |.":{},"f:name":{|
              00000040  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              00000050  65 2d 68 61 73 68 22 3a  7b 7d 7d 2c 22 66 3a 6f  |e-hash":{}},"f:o|
              00000060  77 6e 65 72 52 65 66 65  72 65 6e 63 65 73 22 3a  |wnerReferences":|
              00000070  7b 22 2e 22 3a 7b 7d 2c  22 6b 3a 7b 5c 22 75 69  |{".":{},"k:{\"ui|
              00000080  64 5c 22 3a 5c 22 38 66  39 63 66 33 66 63 2d 33  |d\":\"8f9cf3fc-3|
              00000090  39 62 30 2d 34 65 65 62  2d 39 64 30 39 2d 63 64  |9b0-4eeb-9d09-cd|
              000000a0  62 61 63 63 37 33 65 34  65 32 5c 22 7d 22 3a 7b  |bacc73e4e2\"}":{|
              000000b0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000000c0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              000000d0  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 68 74 74  |:{\"name\":\"htt|
              000000e0  70 64 5c 22 7d 22 3a 7b  22 2e 22 3a 7b 7d 2c 22  |pd\"}":{".":{},"|
              000000f0  66 3a 69 6d 61 67 65 22  3a 7b 7d 2c 22 66 3a 69  |f:image":{},"f:i|
              00000100  6d 61 67 65 50 75 6c 6c  50 6f 6c 69 63 79 22 3a  |magePullPolicy":|
              00000110  7b 7d 2c 22 66 3a 6e 61  6d 65 22 3a 7b 7d 2c 22  |{},"f:name":{},"|
              00000120  66 3a 72 65 73 6f 75 72  63 65 73 22 3a 7b 7d 2c  |f:resources":{},|
              00000130  22 66 3a 73 65 63 75 72  69 74 79 43 6f 6e 74 65  |"f:securityConte|
              00000140  78 74 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |xt":{},"f:termin|
              00000150  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 61 74 68  |ationMessagePath|
              00000160  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000170  69 6f 6e 4d 65 73 73 61  67 65 50 6f 6c 69 63 79  |ionMessagePolicy|
              00000180  22 3a 7b 7d 7d 7d 2c 22  66 3a 64 6e 73 50 6f 6c  |":{}}},"f:dnsPol|
              00000190  69 63 79 22 3a 7b 7d 2c  22 66 3a 65 6e 61 62 6c  |icy":{},"f:enabl|
              000001a0  65 53 65 72 76 69 63 65  4c 69 6e 6b 73 22 3a 7b  |eServiceLinks":{|
              000001b0  7d 2c 22 66 3a 72 65 73  74 61 72 74 50 6f 6c 69  |},"f:restartPoli|
              000001c0  63 79 22 3a 7b 7d 2c 22  66 3a 73 63 68 65 64 75  |cy":{},"f:schedu|
              000001d0  6c 65 72 4e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 73  |lerName":{},"f:s|
              000001e0  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              000001f0  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000200  6e 47 72 61 63 65 50 65  72 69 6f 64 53 65 63 6f  |nGracePeriodSeco|
              00000210  6e 64 73 22 3a 7b 7d 7d  7d                       |nds":{}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=7) "kubelet",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828478520,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=482) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  63 6f 6e 64 69 74 69 6f  6e 73 22 3a 7b 22 6b 3a  |conditions":{"k:|
              00000020  7b 5c 22 74 79 70 65 5c  22 3a 5c 22 43 6f 6e 74  |{\"type\":\"Cont|
              00000030  61 69 6e 65 72 73 52 65  61 64 79 5c 22 7d 22 3a  |ainersReady\"}":|
              00000040  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000050  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000060  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000070  6d 65 22 3a 7b 7d 2c 22  66 3a 6d 65 73 73 61 67  |me":{},"f:messag|
              00000080  65 22 3a 7b 7d 2c 22 66  3a 72 65 61 73 6f 6e 22  |e":{},"f:reason"|
              00000090  3a 7b 7d 2c 22 66 3a 73  74 61 74 75 73 22 3a 7b  |:{},"f:status":{|
              000000a0  7d 2c 22 66 3a 74 79 70  65 22 3a 7b 7d 7d 2c 22  |},"f:type":{}},"|
              000000b0  6b 3a 7b 5c 22 74 79 70  65 5c 22 3a 5c 22 49 6e  |k:{\"type\":\"In|
              000000c0  69 74 69 61 6c 69 7a 65  64 5c 22 7d 22 3a 7b 22  |itialized\"}":{"|
              000000d0  2e 22 3a 7b 7d 2c 22 66  3a 6c 61 73 74 50 72 6f  |.":{},"f:lastPro|
              000000e0  62 65 54 69 6d 65 22 3a  7b 7d 2c 22 66 3a 6c 61  |beTime":{},"f:la|
              000000f0  73 74 54 72 61 6e 73 69  74 69 6f 6e 54 69 6d 65  |stTransitionTime|
              00000100  22 3a 7b 7d 2c 22 66 3a  73 74 61 74 75 73 22 3a  |":{},"f:status":|
              00000110  7b 7d 2c 22 66 3a 74 79  70 65 22 3a 7b 7d 7d 2c  |{},"f:type":{}},|
              00000120  22 6b 3a 7b 5c 22 74 79  70 65 5c 22 3a 5c 22 52  |"k:{\"type\":\"R|
              00000130  65 61 64 79 5c 22 7d 22  3a 7b 22 2e 22 3a 7b 7d  |eady\"}":{".":{}|
              00000140  2c 22 66 3a 6c 61 73 74  50 72 6f 62 65 54 69 6d  |,"f:lastProbeTim|
              00000150  65 22 3a 7b 7d 2c 22 66  3a 6c 61 73 74 54 72 61  |e":{},"f:lastTra|
              00000160  6e 73 69 74 69 6f 6e 54  69 6d 65 22 3a 7b 7d 2c  |nsitionTime":{},|
              00000170  22 66 3a 6d 65 73 73 61  67 65 22 3a 7b 7d 2c 22  |"f:message":{},"|
              00000180  66 3a 72 65 61 73 6f 6e  22 3a 7b 7d 2c 22 66 3a  |f:reason":{},"f:|
              00000190  73 74 61 74 75 73 22 3a  7b 7d 2c 22 66 3a 74 79  |status":{},"f:ty|
              000001a0  70 65 22 3a 7b 7d 7d 7d  2c 22 66 3a 63 6f 6e 74  |pe":{}}},"f:cont|
              000001b0  61 69 6e 65 72 53 74 61  74 75 73 65 73 22 3a 7b  |ainerStatuses":{|
              000001c0  7d 2c 22 66 3a 68 6f 73  74 49 50 22 3a 7b 7d 2c  |},"f:hostIP":{},|
              000001d0  22 66 3a 73 74 61 72 74  54 69 6d 65 22 3a 7b 7d  |"f:startTime":{}|
              000001e0  7d 7d                                             |}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-6b24f",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  })
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=5) "httpd",
          Image: (string) (len=13) "webserver:404",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-6b24f",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(0),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=46) "scw-conformance-default-ecf11ec729064adba7e270",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Pending",
      Conditions: ([]v1.PodCondition) (len=4) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=11) "Initialized",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828478519,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=5) "Ready",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828478519,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=18) "ContainersNotReady",
          Message: (string) (len=39) "containers with unready status: [httpd]"
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=15) "ContainersReady",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828478519,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=18) "ContainersNotReady",
          Message: (string) (len=39) "containers with unready status: [httpd]"
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828478519,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) (len=11) "172.16.36.2",
      HostIPs: ([]v1.HostIP) <nil>,
      PodIP: (string) "",
      PodIPs: ([]v1.PodIP) <nil>,
      StartTime: (*v1.Time)({
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63828478519,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      }),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) (len=1) {
        (v1.ContainerStatus) {
          Name: (string) (len=5) "httpd",
          State: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)({
              Reason: (string) (len=17) "ContainerCreating",
              Message: (string) ""
            }),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          LastTerminationState: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          Ready: (bool) false,
          RestartCount: (int32) 0,
          Image: (string) (len=13) "webserver:404",
          ImageID: (string) "",
          ContainerID: (string) "",
          Started: (*bool)(false),
          AllocatedResources: (v1.ResourceList) <nil>,
          Resources: (*v1.ResourceRequirements)(<nil>)
        }
      },
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }

  Aug 24 12:55:21.248: INFO: Pod "webserver-deployment-9b4f5bf69-r2pt4" is not available:
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=36) "webserver-deployment-9b4f5bf69-r2pt4",
      GenerateName: (string) (len=31) "webserver-deployment-9b4f5bf69-",
      Namespace: (string) (len=15) "deployment-5781",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "859230b8-2218-4d2c-8559-321a0df79b3d",
      ResourceVersion: (string) (len=10) "3405091353",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63828478519,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=5) "httpd",
        (string) (len=17) "pod-template-hash": (string) (len=9) "9b4f5bf69"
      },
      Annotations: (map[string]string) <nil>,
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=30) "webserver-deployment-9b4f5bf69",
          UID: (types.UID) (len=36) "8f9cf3fc-39b0-4eeb-9d09-cdbacc73e4e2",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828478519,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=537) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |.":{},"f:name":{|
              00000040  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              00000050  65 2d 68 61 73 68 22 3a  7b 7d 7d 2c 22 66 3a 6f  |e-hash":{}},"f:o|
              00000060  77 6e 65 72 52 65 66 65  72 65 6e 63 65 73 22 3a  |wnerReferences":|
              00000070  7b 22 2e 22 3a 7b 7d 2c  22 6b 3a 7b 5c 22 75 69  |{".":{},"k:{\"ui|
              00000080  64 5c 22 3a 5c 22 38 66  39 63 66 33 66 63 2d 33  |d\":\"8f9cf3fc-3|
              00000090  39 62 30 2d 34 65 65 62  2d 39 64 30 39 2d 63 64  |9b0-4eeb-9d09-cd|
              000000a0  62 61 63 63 37 33 65 34  65 32 5c 22 7d 22 3a 7b  |bacc73e4e2\"}":{|
              000000b0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000000c0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              000000d0  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 68 74 74  |:{\"name\":\"htt|
              000000e0  70 64 5c 22 7d 22 3a 7b  22 2e 22 3a 7b 7d 2c 22  |pd\"}":{".":{},"|
              000000f0  66 3a 69 6d 61 67 65 22  3a 7b 7d 2c 22 66 3a 69  |f:image":{},"f:i|
              00000100  6d 61 67 65 50 75 6c 6c  50 6f 6c 69 63 79 22 3a  |magePullPolicy":|
              00000110  7b 7d 2c 22 66 3a 6e 61  6d 65 22 3a 7b 7d 2c 22  |{},"f:name":{},"|
              00000120  66 3a 72 65 73 6f 75 72  63 65 73 22 3a 7b 7d 2c  |f:resources":{},|
              00000130  22 66 3a 73 65 63 75 72  69 74 79 43 6f 6e 74 65  |"f:securityConte|
              00000140  78 74 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |xt":{},"f:termin|
              00000150  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 61 74 68  |ationMessagePath|
              00000160  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000170  69 6f 6e 4d 65 73 73 61  67 65 50 6f 6c 69 63 79  |ionMessagePolicy|
              00000180  22 3a 7b 7d 7d 7d 2c 22  66 3a 64 6e 73 50 6f 6c  |":{}}},"f:dnsPol|
              00000190  69 63 79 22 3a 7b 7d 2c  22 66 3a 65 6e 61 62 6c  |icy":{},"f:enabl|
              000001a0  65 53 65 72 76 69 63 65  4c 69 6e 6b 73 22 3a 7b  |eServiceLinks":{|
              000001b0  7d 2c 22 66 3a 72 65 73  74 61 72 74 50 6f 6c 69  |},"f:restartPoli|
              000001c0  63 79 22 3a 7b 7d 2c 22  66 3a 73 63 68 65 64 75  |cy":{},"f:schedu|
              000001d0  6c 65 72 4e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 73  |lerName":{},"f:s|
              000001e0  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              000001f0  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000200  6e 47 72 61 63 65 50 65  72 69 6f 64 53 65 63 6f  |nGracePeriodSeco|
              00000210  6e 64 73 22 3a 7b 7d 7d  7d                       |nds":{}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=7) "kubelet",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828478520,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=482) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  63 6f 6e 64 69 74 69 6f  6e 73 22 3a 7b 22 6b 3a  |conditions":{"k:|
              00000020  7b 5c 22 74 79 70 65 5c  22 3a 5c 22 43 6f 6e 74  |{\"type\":\"Cont|
              00000030  61 69 6e 65 72 73 52 65  61 64 79 5c 22 7d 22 3a  |ainersReady\"}":|
              00000040  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000050  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000060  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000070  6d 65 22 3a 7b 7d 2c 22  66 3a 6d 65 73 73 61 67  |me":{},"f:messag|
              00000080  65 22 3a 7b 7d 2c 22 66  3a 72 65 61 73 6f 6e 22  |e":{},"f:reason"|
              00000090  3a 7b 7d 2c 22 66 3a 73  74 61 74 75 73 22 3a 7b  |:{},"f:status":{|
              000000a0  7d 2c 22 66 3a 74 79 70  65 22 3a 7b 7d 7d 2c 22  |},"f:type":{}},"|
              000000b0  6b 3a 7b 5c 22 74 79 70  65 5c 22 3a 5c 22 49 6e  |k:{\"type\":\"In|
              000000c0  69 74 69 61 6c 69 7a 65  64 5c 22 7d 22 3a 7b 22  |itialized\"}":{"|
              000000d0  2e 22 3a 7b 7d 2c 22 66  3a 6c 61 73 74 50 72 6f  |.":{},"f:lastPro|
              000000e0  62 65 54 69 6d 65 22 3a  7b 7d 2c 22 66 3a 6c 61  |beTime":{},"f:la|
              000000f0  73 74 54 72 61 6e 73 69  74 69 6f 6e 54 69 6d 65  |stTransitionTime|
              00000100  22 3a 7b 7d 2c 22 66 3a  73 74 61 74 75 73 22 3a  |":{},"f:status":|
              00000110  7b 7d 2c 22 66 3a 74 79  70 65 22 3a 7b 7d 7d 2c  |{},"f:type":{}},|
              00000120  22 6b 3a 7b 5c 22 74 79  70 65 5c 22 3a 5c 22 52  |"k:{\"type\":\"R|
              00000130  65 61 64 79 5c 22 7d 22  3a 7b 22 2e 22 3a 7b 7d  |eady\"}":{".":{}|
              00000140  2c 22 66 3a 6c 61 73 74  50 72 6f 62 65 54 69 6d  |,"f:lastProbeTim|
              00000150  65 22 3a 7b 7d 2c 22 66  3a 6c 61 73 74 54 72 61  |e":{},"f:lastTra|
              00000160  6e 73 69 74 69 6f 6e 54  69 6d 65 22 3a 7b 7d 2c  |nsitionTime":{},|
              00000170  22 66 3a 6d 65 73 73 61  67 65 22 3a 7b 7d 2c 22  |"f:message":{},"|
              00000180  66 3a 72 65 61 73 6f 6e  22 3a 7b 7d 2c 22 66 3a  |f:reason":{},"f:|
              00000190  73 74 61 74 75 73 22 3a  7b 7d 2c 22 66 3a 74 79  |status":{},"f:ty|
              000001a0  70 65 22 3a 7b 7d 7d 7d  2c 22 66 3a 63 6f 6e 74  |pe":{}}},"f:cont|
              000001b0  61 69 6e 65 72 53 74 61  74 75 73 65 73 22 3a 7b  |ainerStatuses":{|
              000001c0  7d 2c 22 66 3a 68 6f 73  74 49 50 22 3a 7b 7d 2c  |},"f:hostIP":{},|
              000001d0  22 66 3a 73 74 61 72 74  54 69 6d 65 22 3a 7b 7d  |"f:startTime":{}|
              000001e0  7d 7d                                             |}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-khgz9",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  })
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=5) "httpd",
          Image: (string) (len=13) "webserver:404",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-khgz9",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(0),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=46) "scw-conformance-default-ecf11ec729064adba7e270",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Pending",
      Conditions: ([]v1.PodCondition) (len=4) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=11) "Initialized",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828478519,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=5) "Ready",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828478519,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=18) "ContainersNotReady",
          Message: (string) (len=39) "containers with unready status: [httpd]"
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=15) "ContainersReady",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828478519,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=18) "ContainersNotReady",
          Message: (string) (len=39) "containers with unready status: [httpd]"
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828478519,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) (len=11) "172.16.36.2",
      HostIPs: ([]v1.HostIP) <nil>,
      PodIP: (string) "",
      PodIPs: ([]v1.PodIP) <nil>,
      StartTime: (*v1.Time)({
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63828478519,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      }),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) (len=1) {
        (v1.ContainerStatus) {
          Name: (string) (len=5) "httpd",
          State: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)({
              Reason: (string) (len=17) "ContainerCreating",
              Message: (string) ""
            }),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          LastTerminationState: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          Ready: (bool) false,
          RestartCount: (int32) 0,
          Image: (string) (len=13) "webserver:404",
          ImageID: (string) "",
          ContainerID: (string) "",
          Started: (*bool)(false),
          AllocatedResources: (v1.ResourceList) <nil>,
          Resources: (*v1.ResourceRequirements)(<nil>)
        }
      },
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }

  Aug 24 12:55:21.249: INFO: Pod "webserver-deployment-9b4f5bf69-t56tr" is not available:
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=36) "webserver-deployment-9b4f5bf69-t56tr",
      GenerateName: (string) (len=31) "webserver-deployment-9b4f5bf69-",
      Namespace: (string) (len=15) "deployment-5781",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "cc60a882-5c73-4ece-87e9-71ea0c91d88e",
      ResourceVersion: (string) (len=10) "3405091393",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63828478516,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=5) "httpd",
        (string) (len=17) "pod-template-hash": (string) (len=9) "9b4f5bf69"
      },
      Annotations: (map[string]string) <nil>,
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=30) "webserver-deployment-9b4f5bf69",
          UID: (types.UID) (len=36) "8f9cf3fc-39b0-4eeb-9d09-cdbacc73e4e2",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828478516,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=537) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |.":{},"f:name":{|
              00000040  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              00000050  65 2d 68 61 73 68 22 3a  7b 7d 7d 2c 22 66 3a 6f  |e-hash":{}},"f:o|
              00000060  77 6e 65 72 52 65 66 65  72 65 6e 63 65 73 22 3a  |wnerReferences":|
              00000070  7b 22 2e 22 3a 7b 7d 2c  22 6b 3a 7b 5c 22 75 69  |{".":{},"k:{\"ui|
              00000080  64 5c 22 3a 5c 22 38 66  39 63 66 33 66 63 2d 33  |d\":\"8f9cf3fc-3|
              00000090  39 62 30 2d 34 65 65 62  2d 39 64 30 39 2d 63 64  |9b0-4eeb-9d09-cd|
              000000a0  62 61 63 63 37 33 65 34  65 32 5c 22 7d 22 3a 7b  |bacc73e4e2\"}":{|
              000000b0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000000c0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              000000d0  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 68 74 74  |:{\"name\":\"htt|
              000000e0  70 64 5c 22 7d 22 3a 7b  22 2e 22 3a 7b 7d 2c 22  |pd\"}":{".":{},"|
              000000f0  66 3a 69 6d 61 67 65 22  3a 7b 7d 2c 22 66 3a 69  |f:image":{},"f:i|
              00000100  6d 61 67 65 50 75 6c 6c  50 6f 6c 69 63 79 22 3a  |magePullPolicy":|
              00000110  7b 7d 2c 22 66 3a 6e 61  6d 65 22 3a 7b 7d 2c 22  |{},"f:name":{},"|
              00000120  66 3a 72 65 73 6f 75 72  63 65 73 22 3a 7b 7d 2c  |f:resources":{},|
              00000130  22 66 3a 73 65 63 75 72  69 74 79 43 6f 6e 74 65  |"f:securityConte|
              00000140  78 74 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |xt":{},"f:termin|
              00000150  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 61 74 68  |ationMessagePath|
              00000160  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000170  69 6f 6e 4d 65 73 73 61  67 65 50 6f 6c 69 63 79  |ionMessagePolicy|
              00000180  22 3a 7b 7d 7d 7d 2c 22  66 3a 64 6e 73 50 6f 6c  |":{}}},"f:dnsPol|
              00000190  69 63 79 22 3a 7b 7d 2c  22 66 3a 65 6e 61 62 6c  |icy":{},"f:enabl|
              000001a0  65 53 65 72 76 69 63 65  4c 69 6e 6b 73 22 3a 7b  |eServiceLinks":{|
              000001b0  7d 2c 22 66 3a 72 65 73  74 61 72 74 50 6f 6c 69  |},"f:restartPoli|
              000001c0  63 79 22 3a 7b 7d 2c 22  66 3a 73 63 68 65 64 75  |cy":{},"f:schedu|
              000001d0  6c 65 72 4e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 73  |lerName":{},"f:s|
              000001e0  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              000001f0  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000200  6e 47 72 61 63 65 50 65  72 69 6f 64 53 65 63 6f  |nGracePeriodSeco|
              00000210  6e 64 73 22 3a 7b 7d 7d  7d                       |nds":{}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=7) "kubelet",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828478520,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=564) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  63 6f 6e 64 69 74 69 6f  6e 73 22 3a 7b 22 6b 3a  |conditions":{"k:|
              00000020  7b 5c 22 74 79 70 65 5c  22 3a 5c 22 43 6f 6e 74  |{\"type\":\"Cont|
              00000030  61 69 6e 65 72 73 52 65  61 64 79 5c 22 7d 22 3a  |ainersReady\"}":|
              00000040  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000050  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000060  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000070  6d 65 22 3a 7b 7d 2c 22  66 3a 6d 65 73 73 61 67  |me":{},"f:messag|
              00000080  65 22 3a 7b 7d 2c 22 66  3a 72 65 61 73 6f 6e 22  |e":{},"f:reason"|
              00000090  3a 7b 7d 2c 22 66 3a 73  74 61 74 75 73 22 3a 7b  |:{},"f:status":{|
              000000a0  7d 2c 22 66 3a 74 79 70  65 22 3a 7b 7d 7d 2c 22  |},"f:type":{}},"|
              000000b0  6b 3a 7b 5c 22 74 79 70  65 5c 22 3a 5c 22 49 6e  |k:{\"type\":\"In|
              000000c0  69 74 69 61 6c 69 7a 65  64 5c 22 7d 22 3a 7b 22  |itialized\"}":{"|
              000000d0  2e 22 3a 7b 7d 2c 22 66  3a 6c 61 73 74 50 72 6f  |.":{},"f:lastPro|
              000000e0  62 65 54 69 6d 65 22 3a  7b 7d 2c 22 66 3a 6c 61  |beTime":{},"f:la|
              000000f0  73 74 54 72 61 6e 73 69  74 69 6f 6e 54 69 6d 65  |stTransitionTime|
              00000100  22 3a 7b 7d 2c 22 66 3a  73 74 61 74 75 73 22 3a  |":{},"f:status":|
              00000110  7b 7d 2c 22 66 3a 74 79  70 65 22 3a 7b 7d 7d 2c  |{},"f:type":{}},|
              00000120  22 6b 3a 7b 5c 22 74 79  70 65 5c 22 3a 5c 22 52  |"k:{\"type\":\"R|
              00000130  65 61 64 79 5c 22 7d 22  3a 7b 22 2e 22 3a 7b 7d  |eady\"}":{".":{}|
              00000140  2c 22 66 3a 6c 61 73 74  50 72 6f 62 65 54 69 6d  |,"f:lastProbeTim|
              00000150  65 22 3a 7b 7d 2c 22 66  3a 6c 61 73 74 54 72 61  |e":{},"f:lastTra|
              00000160  6e 73 69 74 69 6f 6e 54  69 6d 65 22 3a 7b 7d 2c  |nsitionTime":{},|
              00000170  22 66 3a 6d 65 73 73 61  67 65 22 3a 7b 7d 2c 22  |"f:message":{},"|
              00000180  66 3a 72 65 61 73 6f 6e  22 3a 7b 7d 2c 22 66 3a  |f:reason":{},"f:|
              00000190  73 74 61 74 75 73 22 3a  7b 7d 2c 22 66 3a 74 79  |status":{},"f:ty|
              000001a0  70 65 22 3a 7b 7d 7d 7d  2c 22 66 3a 63 6f 6e 74  |pe":{}}},"f:cont|
              000001b0  61 69 6e 65 72 53 74 61  74 75 73 65 73 22 3a 7b  |ainerStatuses":{|
              000001c0  7d 2c 22 66 3a 68 6f 73  74 49 50 22 3a 7b 7d 2c  |},"f:hostIP":{},|
              000001d0  22 66 3a 70 6f 64 49 50  22 3a 7b 7d 2c 22 66 3a  |"f:podIP":{},"f:|
              000001e0  70 6f 64 49 50 73 22 3a  7b 22 2e 22 3a 7b 7d 2c  |podIPs":{".":{},|
              000001f0  22 6b 3a 7b 5c 22 69 70  5c 22 3a 5c 22 31 30 2e  |"k:{\"ip\":\"10.|
              00000200  31 30 30 2e 30 2e 32 33  33 5c 22 7d 22 3a 7b 22  |100.0.233\"}":{"|
              00000210  2e 22 3a 7b 7d 2c 22 66  3a 69 70 22 3a 7b 7d 7d  |.":{},"f:ip":{}}|
              00000220  7d 2c 22 66 3a 73 74 61  72 74 54 69 6d 65 22 3a  |},"f:startTime":|
              00000230  7b 7d 7d 7d                                       |{}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-jwsvq",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  })
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=5) "httpd",
          Image: (string) (len=13) "webserver:404",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-jwsvq",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(0),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=46) "scw-conformance-default-2af6d8b4c6264cc5b9e5e6",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Pending",
      Conditions: ([]v1.PodCondition) (len=4) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=11) "Initialized",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828478517,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=5) "Ready",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828478517,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=18) "ContainersNotReady",
          Message: (string) (len=39) "containers with unready status: [httpd]"
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=15) "ContainersReady",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828478517,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=18) "ContainersNotReady",
          Message: (string) (len=39) "containers with unready status: [httpd]"
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828478516,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) (len=11) "172.16.36.3",
      HostIPs: ([]v1.HostIP) <nil>,
      PodIP: (string) (len=12) "10.100.0.233",
      PodIPs: ([]v1.PodIP) (len=1) {
        (v1.PodIP) {
          IP: (string) (len=12) "10.100.0.233"
        }
      },
      StartTime: (*v1.Time)({
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63828478517,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      }),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) (len=1) {
        (v1.ContainerStatus) {
          Name: (string) (len=5) "httpd",
          State: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)({
              Reason: (string) (len=12) "ErrImagePull",
              Message: (string) (len=262) "failed to pull and unpack image \"docker.io/library/webserver:404\": failed to resolve reference \"docker.io/library/webserver:404\": pull access denied, repository does not exist or may require authorization: server message: insufficient_scope: authorization failed"
            }),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          LastTerminationState: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          Ready: (bool) false,
          RestartCount: (int32) 0,
          Image: (string) (len=13) "webserver:404",
          ImageID: (string) "",
          ContainerID: (string) "",
          Started: (*bool)(false),
          AllocatedResources: (v1.ResourceList) <nil>,
          Resources: (*v1.ResourceRequirements)(<nil>)
        }
      },
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }

  Aug 24 12:55:21.250: INFO: Pod "webserver-deployment-9b4f5bf69-vjg7b" is not available:
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=36) "webserver-deployment-9b4f5bf69-vjg7b",
      GenerateName: (string) (len=31) "webserver-deployment-9b4f5bf69-",
      Namespace: (string) (len=15) "deployment-5781",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "62a1f6c9-1af1-4b80-98b3-c5345d883a1b",
      ResourceVersion: (string) (len=10) "3405091356",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63828478519,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=5) "httpd",
        (string) (len=17) "pod-template-hash": (string) (len=9) "9b4f5bf69"
      },
      Annotations: (map[string]string) <nil>,
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=30) "webserver-deployment-9b4f5bf69",
          UID: (types.UID) (len=36) "8f9cf3fc-39b0-4eeb-9d09-cdbacc73e4e2",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828478519,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=537) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |.":{},"f:name":{|
              00000040  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              00000050  65 2d 68 61 73 68 22 3a  7b 7d 7d 2c 22 66 3a 6f  |e-hash":{}},"f:o|
              00000060  77 6e 65 72 52 65 66 65  72 65 6e 63 65 73 22 3a  |wnerReferences":|
              00000070  7b 22 2e 22 3a 7b 7d 2c  22 6b 3a 7b 5c 22 75 69  |{".":{},"k:{\"ui|
              00000080  64 5c 22 3a 5c 22 38 66  39 63 66 33 66 63 2d 33  |d\":\"8f9cf3fc-3|
              00000090  39 62 30 2d 34 65 65 62  2d 39 64 30 39 2d 63 64  |9b0-4eeb-9d09-cd|
              000000a0  62 61 63 63 37 33 65 34  65 32 5c 22 7d 22 3a 7b  |bacc73e4e2\"}":{|
              000000b0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000000c0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              000000d0  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 68 74 74  |:{\"name\":\"htt|
              000000e0  70 64 5c 22 7d 22 3a 7b  22 2e 22 3a 7b 7d 2c 22  |pd\"}":{".":{},"|
              000000f0  66 3a 69 6d 61 67 65 22  3a 7b 7d 2c 22 66 3a 69  |f:image":{},"f:i|
              00000100  6d 61 67 65 50 75 6c 6c  50 6f 6c 69 63 79 22 3a  |magePullPolicy":|
              00000110  7b 7d 2c 22 66 3a 6e 61  6d 65 22 3a 7b 7d 2c 22  |{},"f:name":{},"|
              00000120  66 3a 72 65 73 6f 75 72  63 65 73 22 3a 7b 7d 2c  |f:resources":{},|
              00000130  22 66 3a 73 65 63 75 72  69 74 79 43 6f 6e 74 65  |"f:securityConte|
              00000140  78 74 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |xt":{},"f:termin|
              00000150  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 61 74 68  |ationMessagePath|
              00000160  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000170  69 6f 6e 4d 65 73 73 61  67 65 50 6f 6c 69 63 79  |ionMessagePolicy|
              00000180  22 3a 7b 7d 7d 7d 2c 22  66 3a 64 6e 73 50 6f 6c  |":{}}},"f:dnsPol|
              00000190  69 63 79 22 3a 7b 7d 2c  22 66 3a 65 6e 61 62 6c  |icy":{},"f:enabl|
              000001a0  65 53 65 72 76 69 63 65  4c 69 6e 6b 73 22 3a 7b  |eServiceLinks":{|
              000001b0  7d 2c 22 66 3a 72 65 73  74 61 72 74 50 6f 6c 69  |},"f:restartPoli|
              000001c0  63 79 22 3a 7b 7d 2c 22  66 3a 73 63 68 65 64 75  |cy":{},"f:schedu|
              000001d0  6c 65 72 4e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 73  |lerName":{},"f:s|
              000001e0  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              000001f0  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000200  6e 47 72 61 63 65 50 65  72 69 6f 64 53 65 63 6f  |nGracePeriodSeco|
              00000210  6e 64 73 22 3a 7b 7d 7d  7d                       |nds":{}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=7) "kubelet",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828478520,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=482) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  63 6f 6e 64 69 74 69 6f  6e 73 22 3a 7b 22 6b 3a  |conditions":{"k:|
              00000020  7b 5c 22 74 79 70 65 5c  22 3a 5c 22 43 6f 6e 74  |{\"type\":\"Cont|
              00000030  61 69 6e 65 72 73 52 65  61 64 79 5c 22 7d 22 3a  |ainersReady\"}":|
              00000040  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000050  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000060  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000070  6d 65 22 3a 7b 7d 2c 22  66 3a 6d 65 73 73 61 67  |me":{},"f:messag|
              00000080  65 22 3a 7b 7d 2c 22 66  3a 72 65 61 73 6f 6e 22  |e":{},"f:reason"|
              00000090  3a 7b 7d 2c 22 66 3a 73  74 61 74 75 73 22 3a 7b  |:{},"f:status":{|
              000000a0  7d 2c 22 66 3a 74 79 70  65 22 3a 7b 7d 7d 2c 22  |},"f:type":{}},"|
              000000b0  6b 3a 7b 5c 22 74 79 70  65 5c 22 3a 5c 22 49 6e  |k:{\"type\":\"In|
              000000c0  69 74 69 61 6c 69 7a 65  64 5c 22 7d 22 3a 7b 22  |itialized\"}":{"|
              000000d0  2e 22 3a 7b 7d 2c 22 66  3a 6c 61 73 74 50 72 6f  |.":{},"f:lastPro|
              000000e0  62 65 54 69 6d 65 22 3a  7b 7d 2c 22 66 3a 6c 61  |beTime":{},"f:la|
              000000f0  73 74 54 72 61 6e 73 69  74 69 6f 6e 54 69 6d 65  |stTransitionTime|
              00000100  22 3a 7b 7d 2c 22 66 3a  73 74 61 74 75 73 22 3a  |":{},"f:status":|
              00000110  7b 7d 2c 22 66 3a 74 79  70 65 22 3a 7b 7d 7d 2c  |{},"f:type":{}},|
              00000120  22 6b 3a 7b 5c 22 74 79  70 65 5c 22 3a 5c 22 52  |"k:{\"type\":\"R|
              00000130  65 61 64 79 5c 22 7d 22  3a 7b 22 2e 22 3a 7b 7d  |eady\"}":{".":{}|
              00000140  2c 22 66 3a 6c 61 73 74  50 72 6f 62 65 54 69 6d  |,"f:lastProbeTim|
              00000150  65 22 3a 7b 7d 2c 22 66  3a 6c 61 73 74 54 72 61  |e":{},"f:lastTra|
              00000160  6e 73 69 74 69 6f 6e 54  69 6d 65 22 3a 7b 7d 2c  |nsitionTime":{},|
              00000170  22 66 3a 6d 65 73 73 61  67 65 22 3a 7b 7d 2c 22  |"f:message":{},"|
              00000180  66 3a 72 65 61 73 6f 6e  22 3a 7b 7d 2c 22 66 3a  |f:reason":{},"f:|
              00000190  73 74 61 74 75 73 22 3a  7b 7d 2c 22 66 3a 74 79  |status":{},"f:ty|
              000001a0  70 65 22 3a 7b 7d 7d 7d  2c 22 66 3a 63 6f 6e 74  |pe":{}}},"f:cont|
              000001b0  61 69 6e 65 72 53 74 61  74 75 73 65 73 22 3a 7b  |ainerStatuses":{|
              000001c0  7d 2c 22 66 3a 68 6f 73  74 49 50 22 3a 7b 7d 2c  |},"f:hostIP":{},|
              000001d0  22 66 3a 73 74 61 72 74  54 69 6d 65 22 3a 7b 7d  |"f:startTime":{}|
              000001e0  7d 7d                                             |}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-nbmzv",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  })
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=5) "httpd",
          Image: (string) (len=13) "webserver:404",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-nbmzv",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(0),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=46) "scw-conformance-default-2af6d8b4c6264cc5b9e5e6",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Pending",
      Conditions: ([]v1.PodCondition) (len=4) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=11) "Initialized",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828478519,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=5) "Ready",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828478519,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=18) "ContainersNotReady",
          Message: (string) (len=39) "containers with unready status: [httpd]"
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=15) "ContainersReady",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828478519,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=18) "ContainersNotReady",
          Message: (string) (len=39) "containers with unready status: [httpd]"
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828478519,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) (len=11) "172.16.36.3",
      HostIPs: ([]v1.HostIP) <nil>,
      PodIP: (string) "",
      PodIPs: ([]v1.PodIP) <nil>,
      StartTime: (*v1.Time)({
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63828478519,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      }),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) (len=1) {
        (v1.ContainerStatus) {
          Name: (string) (len=5) "httpd",
          State: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)({
              Reason: (string) (len=17) "ContainerCreating",
              Message: (string) ""
            }),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          LastTerminationState: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          Ready: (bool) false,
          RestartCount: (int32) 0,
          Image: (string) (len=13) "webserver:404",
          ImageID: (string) "",
          ContainerID: (string) "",
          Started: (*bool)(false),
          AllocatedResources: (v1.ResourceList) <nil>,
          Resources: (*v1.ResourceRequirements)(<nil>)
        }
      },
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }

  Aug 24 12:55:21.251: INFO: Pod "webserver-deployment-9b4f5bf69-vk45v" is not available:
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=36) "webserver-deployment-9b4f5bf69-vk45v",
      GenerateName: (string) (len=31) "webserver-deployment-9b4f5bf69-",
      Namespace: (string) (len=15) "deployment-5781",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "03b94995-aa87-461f-9e98-5b6cafb31104",
      ResourceVersion: (string) (len=10) "3405091221",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63828478516,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=5) "httpd",
        (string) (len=17) "pod-template-hash": (string) (len=9) "9b4f5bf69"
      },
      Annotations: (map[string]string) <nil>,
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=30) "webserver-deployment-9b4f5bf69",
          UID: (types.UID) (len=36) "8f9cf3fc-39b0-4eeb-9d09-cdbacc73e4e2",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828478516,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=537) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |.":{},"f:name":{|
              00000040  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              00000050  65 2d 68 61 73 68 22 3a  7b 7d 7d 2c 22 66 3a 6f  |e-hash":{}},"f:o|
              00000060  77 6e 65 72 52 65 66 65  72 65 6e 63 65 73 22 3a  |wnerReferences":|
              00000070  7b 22 2e 22 3a 7b 7d 2c  22 6b 3a 7b 5c 22 75 69  |{".":{},"k:{\"ui|
              00000080  64 5c 22 3a 5c 22 38 66  39 63 66 33 66 63 2d 33  |d\":\"8f9cf3fc-3|
              00000090  39 62 30 2d 34 65 65 62  2d 39 64 30 39 2d 63 64  |9b0-4eeb-9d09-cd|
              000000a0  62 61 63 63 37 33 65 34  65 32 5c 22 7d 22 3a 7b  |bacc73e4e2\"}":{|
              000000b0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000000c0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              000000d0  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 68 74 74  |:{\"name\":\"htt|
              000000e0  70 64 5c 22 7d 22 3a 7b  22 2e 22 3a 7b 7d 2c 22  |pd\"}":{".":{},"|
              000000f0  66 3a 69 6d 61 67 65 22  3a 7b 7d 2c 22 66 3a 69  |f:image":{},"f:i|
              00000100  6d 61 67 65 50 75 6c 6c  50 6f 6c 69 63 79 22 3a  |magePullPolicy":|
              00000110  7b 7d 2c 22 66 3a 6e 61  6d 65 22 3a 7b 7d 2c 22  |{},"f:name":{},"|
              00000120  66 3a 72 65 73 6f 75 72  63 65 73 22 3a 7b 7d 2c  |f:resources":{},|
              00000130  22 66 3a 73 65 63 75 72  69 74 79 43 6f 6e 74 65  |"f:securityConte|
              00000140  78 74 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |xt":{},"f:termin|
              00000150  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 61 74 68  |ationMessagePath|
              00000160  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000170  69 6f 6e 4d 65 73 73 61  67 65 50 6f 6c 69 63 79  |ionMessagePolicy|
              00000180  22 3a 7b 7d 7d 7d 2c 22  66 3a 64 6e 73 50 6f 6c  |":{}}},"f:dnsPol|
              00000190  69 63 79 22 3a 7b 7d 2c  22 66 3a 65 6e 61 62 6c  |icy":{},"f:enabl|
              000001a0  65 53 65 72 76 69 63 65  4c 69 6e 6b 73 22 3a 7b  |eServiceLinks":{|
              000001b0  7d 2c 22 66 3a 72 65 73  74 61 72 74 50 6f 6c 69  |},"f:restartPoli|
              000001c0  63 79 22 3a 7b 7d 2c 22  66 3a 73 63 68 65 64 75  |cy":{},"f:schedu|
              000001d0  6c 65 72 4e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 73  |lerName":{},"f:s|
              000001e0  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              000001f0  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000200  6e 47 72 61 63 65 50 65  72 69 6f 64 53 65 63 6f  |nGracePeriodSeco|
              00000210  6e 64 73 22 3a 7b 7d 7d  7d                       |nds":{}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=7) "kubelet",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828478519,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=563) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  63 6f 6e 64 69 74 69 6f  6e 73 22 3a 7b 22 6b 3a  |conditions":{"k:|
              00000020  7b 5c 22 74 79 70 65 5c  22 3a 5c 22 43 6f 6e 74  |{\"type\":\"Cont|
              00000030  61 69 6e 65 72 73 52 65  61 64 79 5c 22 7d 22 3a  |ainersReady\"}":|
              00000040  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000050  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000060  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000070  6d 65 22 3a 7b 7d 2c 22  66 3a 6d 65 73 73 61 67  |me":{},"f:messag|
              00000080  65 22 3a 7b 7d 2c 22 66  3a 72 65 61 73 6f 6e 22  |e":{},"f:reason"|
              00000090  3a 7b 7d 2c 22 66 3a 73  74 61 74 75 73 22 3a 7b  |:{},"f:status":{|
              000000a0  7d 2c 22 66 3a 74 79 70  65 22 3a 7b 7d 7d 2c 22  |},"f:type":{}},"|
              000000b0  6b 3a 7b 5c 22 74 79 70  65 5c 22 3a 5c 22 49 6e  |k:{\"type\":\"In|
              000000c0  69 74 69 61 6c 69 7a 65  64 5c 22 7d 22 3a 7b 22  |itialized\"}":{"|
              000000d0  2e 22 3a 7b 7d 2c 22 66  3a 6c 61 73 74 50 72 6f  |.":{},"f:lastPro|
              000000e0  62 65 54 69 6d 65 22 3a  7b 7d 2c 22 66 3a 6c 61  |beTime":{},"f:la|
              000000f0  73 74 54 72 61 6e 73 69  74 69 6f 6e 54 69 6d 65  |stTransitionTime|
              00000100  22 3a 7b 7d 2c 22 66 3a  73 74 61 74 75 73 22 3a  |":{},"f:status":|
              00000110  7b 7d 2c 22 66 3a 74 79  70 65 22 3a 7b 7d 7d 2c  |{},"f:type":{}},|
              00000120  22 6b 3a 7b 5c 22 74 79  70 65 5c 22 3a 5c 22 52  |"k:{\"type\":\"R|
              00000130  65 61 64 79 5c 22 7d 22  3a 7b 22 2e 22 3a 7b 7d  |eady\"}":{".":{}|
              00000140  2c 22 66 3a 6c 61 73 74  50 72 6f 62 65 54 69 6d  |,"f:lastProbeTim|
              00000150  65 22 3a 7b 7d 2c 22 66  3a 6c 61 73 74 54 72 61  |e":{},"f:lastTra|
              00000160  6e 73 69 74 69 6f 6e 54  69 6d 65 22 3a 7b 7d 2c  |nsitionTime":{},|
              00000170  22 66 3a 6d 65 73 73 61  67 65 22 3a 7b 7d 2c 22  |"f:message":{},"|
              00000180  66 3a 72 65 61 73 6f 6e  22 3a 7b 7d 2c 22 66 3a  |f:reason":{},"f:|
              00000190  73 74 61 74 75 73 22 3a  7b 7d 2c 22 66 3a 74 79  |status":{},"f:ty|
              000001a0  70 65 22 3a 7b 7d 7d 7d  2c 22 66 3a 63 6f 6e 74  |pe":{}}},"f:cont|
              000001b0  61 69 6e 65 72 53 74 61  74 75 73 65 73 22 3a 7b  |ainerStatuses":{|
              000001c0  7d 2c 22 66 3a 68 6f 73  74 49 50 22 3a 7b 7d 2c  |},"f:hostIP":{},|
              000001d0  22 66 3a 70 6f 64 49 50  22 3a 7b 7d 2c 22 66 3a  |"f:podIP":{},"f:|
              000001e0  70 6f 64 49 50 73 22 3a  7b 22 2e 22 3a 7b 7d 2c  |podIPs":{".":{},|
              000001f0  22 6b 3a 7b 5c 22 69 70  5c 22 3a 5c 22 31 30 2e  |"k:{\"ip\":\"10.|
              00000200  31 30 30 2e 30 2e 32 37  5c 22 7d 22 3a 7b 22 2e  |100.0.27\"}":{".|
              00000210  22 3a 7b 7d 2c 22 66 3a  69 70 22 3a 7b 7d 7d 7d  |":{},"f:ip":{}}}|
              00000220  2c 22 66 3a 73 74 61 72  74 54 69 6d 65 22 3a 7b  |,"f:startTime":{|
              00000230  7d 7d 7d                                          |}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-mfdvt",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  })
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=5) "httpd",
          Image: (string) (len=13) "webserver:404",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-mfdvt",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(0),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=46) "scw-conformance-default-2af6d8b4c6264cc5b9e5e6",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Pending",
      Conditions: ([]v1.PodCondition) (len=4) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=11) "Initialized",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828478516,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=5) "Ready",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828478516,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=18) "ContainersNotReady",
          Message: (string) (len=39) "containers with unready status: [httpd]"
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=15) "ContainersReady",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828478516,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=18) "ContainersNotReady",
          Message: (string) (len=39) "containers with unready status: [httpd]"
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828478516,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) (len=11) "172.16.36.3",
      HostIPs: ([]v1.HostIP) <nil>,
      PodIP: (string) (len=11) "10.100.0.27",
      PodIPs: ([]v1.PodIP) (len=1) {
        (v1.PodIP) {
          IP: (string) (len=11) "10.100.0.27"
        }
      },
      StartTime: (*v1.Time)({
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63828478516,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      }),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) (len=1) {
        (v1.ContainerStatus) {
          Name: (string) (len=5) "httpd",
          State: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)({
              Reason: (string) (len=12) "ErrImagePull",
              Message: (string) (len=262) "failed to pull and unpack image \"docker.io/library/webserver:404\": failed to resolve reference \"docker.io/library/webserver:404\": pull access denied, repository does not exist or may require authorization: server message: insufficient_scope: authorization failed"
            }),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          LastTerminationState: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          Ready: (bool) false,
          RestartCount: (int32) 0,
          Image: (string) (len=13) "webserver:404",
          ImageID: (string) "",
          ContainerID: (string) "",
          Started: (*bool)(false),
          AllocatedResources: (v1.ResourceList) <nil>,
          Resources: (*v1.ResourceRequirements)(<nil>)
        }
      },
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }

  Aug 24 12:55:21.252: INFO: Pod "webserver-deployment-9b4f5bf69-vn2pm" is not available:
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=36) "webserver-deployment-9b4f5bf69-vn2pm",
      GenerateName: (string) (len=31) "webserver-deployment-9b4f5bf69-",
      Namespace: (string) (len=15) "deployment-5781",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "b2f972b1-3dd2-4a77-a718-ff05c9d18625",
      ResourceVersion: (string) (len=10) "3405091339",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63828478519,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=5) "httpd",
        (string) (len=17) "pod-template-hash": (string) (len=9) "9b4f5bf69"
      },
      Annotations: (map[string]string) <nil>,
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=30) "webserver-deployment-9b4f5bf69",
          UID: (types.UID) (len=36) "8f9cf3fc-39b0-4eeb-9d09-cdbacc73e4e2",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828478519,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=537) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |.":{},"f:name":{|
              00000040  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              00000050  65 2d 68 61 73 68 22 3a  7b 7d 7d 2c 22 66 3a 6f  |e-hash":{}},"f:o|
              00000060  77 6e 65 72 52 65 66 65  72 65 6e 63 65 73 22 3a  |wnerReferences":|
              00000070  7b 22 2e 22 3a 7b 7d 2c  22 6b 3a 7b 5c 22 75 69  |{".":{},"k:{\"ui|
              00000080  64 5c 22 3a 5c 22 38 66  39 63 66 33 66 63 2d 33  |d\":\"8f9cf3fc-3|
              00000090  39 62 30 2d 34 65 65 62  2d 39 64 30 39 2d 63 64  |9b0-4eeb-9d09-cd|
              000000a0  62 61 63 63 37 33 65 34  65 32 5c 22 7d 22 3a 7b  |bacc73e4e2\"}":{|
              000000b0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000000c0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              000000d0  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 68 74 74  |:{\"name\":\"htt|
              000000e0  70 64 5c 22 7d 22 3a 7b  22 2e 22 3a 7b 7d 2c 22  |pd\"}":{".":{},"|
              000000f0  66 3a 69 6d 61 67 65 22  3a 7b 7d 2c 22 66 3a 69  |f:image":{},"f:i|
              00000100  6d 61 67 65 50 75 6c 6c  50 6f 6c 69 63 79 22 3a  |magePullPolicy":|
              00000110  7b 7d 2c 22 66 3a 6e 61  6d 65 22 3a 7b 7d 2c 22  |{},"f:name":{},"|
              00000120  66 3a 72 65 73 6f 75 72  63 65 73 22 3a 7b 7d 2c  |f:resources":{},|
              00000130  22 66 3a 73 65 63 75 72  69 74 79 43 6f 6e 74 65  |"f:securityConte|
              00000140  78 74 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |xt":{},"f:termin|
              00000150  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 61 74 68  |ationMessagePath|
              00000160  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000170  69 6f 6e 4d 65 73 73 61  67 65 50 6f 6c 69 63 79  |ionMessagePolicy|
              00000180  22 3a 7b 7d 7d 7d 2c 22  66 3a 64 6e 73 50 6f 6c  |":{}}},"f:dnsPol|
              00000190  69 63 79 22 3a 7b 7d 2c  22 66 3a 65 6e 61 62 6c  |icy":{},"f:enabl|
              000001a0  65 53 65 72 76 69 63 65  4c 69 6e 6b 73 22 3a 7b  |eServiceLinks":{|
              000001b0  7d 2c 22 66 3a 72 65 73  74 61 72 74 50 6f 6c 69  |},"f:restartPoli|
              000001c0  63 79 22 3a 7b 7d 2c 22  66 3a 73 63 68 65 64 75  |cy":{},"f:schedu|
              000001d0  6c 65 72 4e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 73  |lerName":{},"f:s|
              000001e0  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              000001f0  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000200  6e 47 72 61 63 65 50 65  72 69 6f 64 53 65 63 6f  |nGracePeriodSeco|
              00000210  6e 64 73 22 3a 7b 7d 7d  7d                       |nds":{}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=7) "kubelet",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828478519,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=482) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  63 6f 6e 64 69 74 69 6f  6e 73 22 3a 7b 22 6b 3a  |conditions":{"k:|
              00000020  7b 5c 22 74 79 70 65 5c  22 3a 5c 22 43 6f 6e 74  |{\"type\":\"Cont|
              00000030  61 69 6e 65 72 73 52 65  61 64 79 5c 22 7d 22 3a  |ainersReady\"}":|
              00000040  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000050  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000060  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000070  6d 65 22 3a 7b 7d 2c 22  66 3a 6d 65 73 73 61 67  |me":{},"f:messag|
              00000080  65 22 3a 7b 7d 2c 22 66  3a 72 65 61 73 6f 6e 22  |e":{},"f:reason"|
              00000090  3a 7b 7d 2c 22 66 3a 73  74 61 74 75 73 22 3a 7b  |:{},"f:status":{|
              000000a0  7d 2c 22 66 3a 74 79 70  65 22 3a 7b 7d 7d 2c 22  |},"f:type":{}},"|
              000000b0  6b 3a 7b 5c 22 74 79 70  65 5c 22 3a 5c 22 49 6e  |k:{\"type\":\"In|
              000000c0  69 74 69 61 6c 69 7a 65  64 5c 22 7d 22 3a 7b 22  |itialized\"}":{"|
              000000d0  2e 22 3a 7b 7d 2c 22 66  3a 6c 61 73 74 50 72 6f  |.":{},"f:lastPro|
              000000e0  62 65 54 69 6d 65 22 3a  7b 7d 2c 22 66 3a 6c 61  |beTime":{},"f:la|
              000000f0  73 74 54 72 61 6e 73 69  74 69 6f 6e 54 69 6d 65  |stTransitionTime|
              00000100  22 3a 7b 7d 2c 22 66 3a  73 74 61 74 75 73 22 3a  |":{},"f:status":|
              00000110  7b 7d 2c 22 66 3a 74 79  70 65 22 3a 7b 7d 7d 2c  |{},"f:type":{}},|
              00000120  22 6b 3a 7b 5c 22 74 79  70 65 5c 22 3a 5c 22 52  |"k:{\"type\":\"R|
              00000130  65 61 64 79 5c 22 7d 22  3a 7b 22 2e 22 3a 7b 7d  |eady\"}":{".":{}|
              00000140  2c 22 66 3a 6c 61 73 74  50 72 6f 62 65 54 69 6d  |,"f:lastProbeTim|
              00000150  65 22 3a 7b 7d 2c 22 66  3a 6c 61 73 74 54 72 61  |e":{},"f:lastTra|
              00000160  6e 73 69 74 69 6f 6e 54  69 6d 65 22 3a 7b 7d 2c  |nsitionTime":{},|
              00000170  22 66 3a 6d 65 73 73 61  67 65 22 3a 7b 7d 2c 22  |"f:message":{},"|
              00000180  66 3a 72 65 61 73 6f 6e  22 3a 7b 7d 2c 22 66 3a  |f:reason":{},"f:|
              00000190  73 74 61 74 75 73 22 3a  7b 7d 2c 22 66 3a 74 79  |status":{},"f:ty|
              000001a0  70 65 22 3a 7b 7d 7d 7d  2c 22 66 3a 63 6f 6e 74  |pe":{}}},"f:cont|
              000001b0  61 69 6e 65 72 53 74 61  74 75 73 65 73 22 3a 7b  |ainerStatuses":{|
              000001c0  7d 2c 22 66 3a 68 6f 73  74 49 50 22 3a 7b 7d 2c  |},"f:hostIP":{},|
              000001d0  22 66 3a 73 74 61 72 74  54 69 6d 65 22 3a 7b 7d  |"f:startTime":{}|
              000001e0  7d 7d                                             |}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-vnxd2",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  })
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=5) "httpd",
          Image: (string) (len=13) "webserver:404",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-vnxd2",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(0),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=46) "scw-conformance-default-ecf11ec729064adba7e270",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Pending",
      Conditions: ([]v1.PodCondition) (len=4) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=11) "Initialized",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828478519,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=5) "Ready",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828478519,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=18) "ContainersNotReady",
          Message: (string) (len=39) "containers with unready status: [httpd]"
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=15) "ContainersReady",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828478519,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=18) "ContainersNotReady",
          Message: (string) (len=39) "containers with unready status: [httpd]"
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63828478519,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) (len=11) "172.16.36.2",
      HostIPs: ([]v1.HostIP) <nil>,
      PodIP: (string) "",
      PodIPs: ([]v1.PodIP) <nil>,
      StartTime: (*v1.Time)({
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63828478519,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      }),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) (len=1) {
        (v1.ContainerStatus) {
          Name: (string) (len=5) "httpd",
          State: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)({
              Reason: (string) (len=17) "ContainerCreating",
              Message: (string) ""
            }),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          LastTerminationState: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          Ready: (bool) false,
          RestartCount: (int32) 0,
          Image: (string) (len=13) "webserver:404",
          ImageID: (string) "",
          ContainerID: (string) "",
          Started: (*bool)(false),
          AllocatedResources: (v1.ResourceList) <nil>,
          Resources: (*v1.ResourceRequirements)(<nil>)
        }
      },
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }

  Aug 24 12:55:21.256: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "deployment-5781" for this suite. @ 08/24/23 12:55:21.269
• [9.396 seconds]
------------------------------
SSSSSS
------------------------------
[sig-apps] Job should create pods for an Indexed job with completion indexes and specified hostname [Conformance]
test/e2e/apps/job.go:370
  STEP: Creating a kubernetes client @ 08/24/23 12:55:21.354
  Aug 24 12:55:21.354: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename job @ 08/24/23 12:55:21.354
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 12:55:21.464
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 12:55:21.56
  STEP: Creating Indexed job @ 08/24/23 12:55:21.652
  STEP: Ensuring job reaches completions @ 08/24/23 12:55:21.685
  E0824 12:55:22.105297      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:55:23.105512      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:55:24.105624      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:55:25.106327      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:55:26.106944      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:55:27.108017      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:55:28.108165      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:55:29.108775      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Ensuring pods with index for job exist @ 08/24/23 12:55:29.695
  Aug 24 12:55:29.706: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "job-9255" for this suite. @ 08/24/23 12:55:29.717
• [8.377 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-node] Variable Expansion should allow substituting values in a container's args [NodeConformance] [Conformance]
test/e2e/common/node/expansion.go:95
  STEP: Creating a kubernetes client @ 08/24/23 12:55:29.734
  Aug 24 12:55:29.734: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename var-expansion @ 08/24/23 12:55:29.735
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 12:55:29.77
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 12:55:29.778
  STEP: Creating a pod to test substitution in container's args @ 08/24/23 12:55:29.785
  E0824 12:55:30.109375      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:55:31.109678      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:55:32.110459      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:55:33.110943      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Saw pod success @ 08/24/23 12:55:33.859
  Aug 24 12:55:33.959: INFO: Trying to get logs from node scw-conformance-default-ecf11ec729064adba7e270 pod var-expansion-91d6a26b-f0e6-40da-b123-5beabdac8e7d container dapi-container: <nil>
  E0824 12:55:34.110841      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: delete the pod @ 08/24/23 12:55:34.152
  Aug 24 12:55:34.555: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "var-expansion-6041" for this suite. @ 08/24/23 12:55:34.753
• [5.222 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-network] EndpointSlice should have Endpoints and EndpointSlices pointing to API Server [Conformance]
test/e2e/network/endpointslice.go:68
  STEP: Creating a kubernetes client @ 08/24/23 12:55:34.956
  Aug 24 12:55:34.956: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename endpointslice @ 08/24/23 12:55:34.956
  E0824 12:55:35.111185      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 12:55:35.453
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 12:55:35.461
  Aug 24 12:55:35.851: INFO: Endpoints addresses: [195.154.96.136] , ports: [6443]
  Aug 24 12:55:35.852: INFO: EndpointSlices addresses: [195.154.96.136] , ports: [6443]
  Aug 24 12:55:35.852: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "endpointslice-3617" for this suite. @ 08/24/23 12:55:35.87
• [1.097 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-api-machinery] ResourceQuota should be able to update and delete ResourceQuota. [Conformance]
test/e2e/apimachinery/resource_quota.go:887
  STEP: Creating a kubernetes client @ 08/24/23 12:55:36.053
  Aug 24 12:55:36.053: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename resourcequota @ 08/24/23 12:55:36.054
  E0824 12:55:36.111869      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 12:55:36.259
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 12:55:36.266
  STEP: Creating a ResourceQuota @ 08/24/23 12:55:36.353
  STEP: Getting a ResourceQuota @ 08/24/23 12:55:36.453
  STEP: Updating a ResourceQuota @ 08/24/23 12:55:36.46
  STEP: Verifying a ResourceQuota was modified @ 08/24/23 12:55:36.562
  STEP: Deleting a ResourceQuota @ 08/24/23 12:55:36.657
  STEP: Verifying the deleted ResourceQuota @ 08/24/23 12:55:36.783
  Aug 24 12:55:36.858: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "resourcequota-4011" for this suite. @ 08/24/23 12:55:36.952
• [1.005 seconds]
------------------------------
SSSSS
------------------------------
[sig-network] DNS should resolve DNS of partial qualified names for services [LinuxOnly] [Conformance]
test/e2e/network/dns.go:191
  STEP: Creating a kubernetes client @ 08/24/23 12:55:37.059
  Aug 24 12:55:37.059: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename dns @ 08/24/23 12:55:37.06
  E0824 12:55:37.112622      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 12:55:37.352
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 12:55:37.452
  STEP: Creating a test headless service @ 08/24/23 12:55:37.459
  STEP: Running these commands on wheezy: for i in `seq 1 600`; do check="$$(dig +notcp +noall +answer +search dns-test-service A)" && test -n "$$check" && echo OK > /results/wheezy_udp@dns-test-service;check="$$(dig +tcp +noall +answer +search dns-test-service A)" && test -n "$$check" && echo OK > /results/wheezy_tcp@dns-test-service;check="$$(dig +notcp +noall +answer +search dns-test-service.dns-1324 A)" && test -n "$$check" && echo OK > /results/wheezy_udp@dns-test-service.dns-1324;check="$$(dig +tcp +noall +answer +search dns-test-service.dns-1324 A)" && test -n "$$check" && echo OK > /results/wheezy_tcp@dns-test-service.dns-1324;check="$$(dig +notcp +noall +answer +search dns-test-service.dns-1324.svc A)" && test -n "$$check" && echo OK > /results/wheezy_udp@dns-test-service.dns-1324.svc;check="$$(dig +tcp +noall +answer +search dns-test-service.dns-1324.svc A)" && test -n "$$check" && echo OK > /results/wheezy_tcp@dns-test-service.dns-1324.svc;check="$$(dig +notcp +noall +answer +search _http._tcp.dns-test-service.dns-1324.svc SRV)" && test -n "$$check" && echo OK > /results/wheezy_udp@_http._tcp.dns-test-service.dns-1324.svc;check="$$(dig +tcp +noall +answer +search _http._tcp.dns-test-service.dns-1324.svc SRV)" && test -n "$$check" && echo OK > /results/wheezy_tcp@_http._tcp.dns-test-service.dns-1324.svc;check="$$(dig +notcp +noall +answer +search _http._tcp.test-service-2.dns-1324.svc SRV)" && test -n "$$check" && echo OK > /results/wheezy_udp@_http._tcp.test-service-2.dns-1324.svc;check="$$(dig +tcp +noall +answer +search _http._tcp.test-service-2.dns-1324.svc SRV)" && test -n "$$check" && echo OK > /results/wheezy_tcp@_http._tcp.test-service-2.dns-1324.svc;check="$$(dig +notcp +noall +answer +search 72.67.96.10.in-addr.arpa. PTR)" && test -n "$$check" && echo OK > /results/10.96.67.72_udp@PTR;check="$$(dig +tcp +noall +answer +search 72.67.96.10.in-addr.arpa. PTR)" && test -n "$$check" && echo OK > /results/10.96.67.72_tcp@PTR;sleep 1; done
   @ 08/24/23 12:55:37.854
  STEP: Running these commands on jessie: for i in `seq 1 600`; do check="$$(dig +notcp +noall +answer +search dns-test-service A)" && test -n "$$check" && echo OK > /results/jessie_udp@dns-test-service;check="$$(dig +tcp +noall +answer +search dns-test-service A)" && test -n "$$check" && echo OK > /results/jessie_tcp@dns-test-service;check="$$(dig +notcp +noall +answer +search dns-test-service.dns-1324 A)" && test -n "$$check" && echo OK > /results/jessie_udp@dns-test-service.dns-1324;check="$$(dig +tcp +noall +answer +search dns-test-service.dns-1324 A)" && test -n "$$check" && echo OK > /results/jessie_tcp@dns-test-service.dns-1324;check="$$(dig +notcp +noall +answer +search dns-test-service.dns-1324.svc A)" && test -n "$$check" && echo OK > /results/jessie_udp@dns-test-service.dns-1324.svc;check="$$(dig +tcp +noall +answer +search dns-test-service.dns-1324.svc A)" && test -n "$$check" && echo OK > /results/jessie_tcp@dns-test-service.dns-1324.svc;check="$$(dig +notcp +noall +answer +search _http._tcp.dns-test-service.dns-1324.svc SRV)" && test -n "$$check" && echo OK > /results/jessie_udp@_http._tcp.dns-test-service.dns-1324.svc;check="$$(dig +tcp +noall +answer +search _http._tcp.dns-test-service.dns-1324.svc SRV)" && test -n "$$check" && echo OK > /results/jessie_tcp@_http._tcp.dns-test-service.dns-1324.svc;check="$$(dig +notcp +noall +answer +search _http._tcp.test-service-2.dns-1324.svc SRV)" && test -n "$$check" && echo OK > /results/jessie_udp@_http._tcp.test-service-2.dns-1324.svc;check="$$(dig +tcp +noall +answer +search _http._tcp.test-service-2.dns-1324.svc SRV)" && test -n "$$check" && echo OK > /results/jessie_tcp@_http._tcp.test-service-2.dns-1324.svc;check="$$(dig +notcp +noall +answer +search 72.67.96.10.in-addr.arpa. PTR)" && test -n "$$check" && echo OK > /results/10.96.67.72_udp@PTR;check="$$(dig +tcp +noall +answer +search 72.67.96.10.in-addr.arpa. PTR)" && test -n "$$check" && echo OK > /results/10.96.67.72_tcp@PTR;sleep 1; done
   @ 08/24/23 12:55:37.854
  STEP: creating a pod to probe DNS @ 08/24/23 12:55:37.854
  STEP: submitting the pod to kubernetes @ 08/24/23 12:55:37.854
  E0824 12:55:38.113230      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:55:39.113370      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:55:40.113771      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:55:41.113841      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:55:42.114467      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: retrieving the pod @ 08/24/23 12:55:42.176
  STEP: looking for the results for each expected name from probers @ 08/24/23 12:55:42.185
  Aug 24 12:55:42.261: INFO: Unable to read wheezy_udp@dns-test-service from pod dns-1324/dns-test-888bfef3-7e84-478e-9454-be0c624d81cf: the server could not find the requested resource (get pods dns-test-888bfef3-7e84-478e-9454-be0c624d81cf)
  Aug 24 12:55:42.271: INFO: Unable to read wheezy_tcp@dns-test-service from pod dns-1324/dns-test-888bfef3-7e84-478e-9454-be0c624d81cf: the server could not find the requested resource (get pods dns-test-888bfef3-7e84-478e-9454-be0c624d81cf)
  Aug 24 12:55:42.281: INFO: Unable to read wheezy_udp@dns-test-service.dns-1324 from pod dns-1324/dns-test-888bfef3-7e84-478e-9454-be0c624d81cf: the server could not find the requested resource (get pods dns-test-888bfef3-7e84-478e-9454-be0c624d81cf)
  Aug 24 12:55:42.291: INFO: Unable to read wheezy_tcp@dns-test-service.dns-1324 from pod dns-1324/dns-test-888bfef3-7e84-478e-9454-be0c624d81cf: the server could not find the requested resource (get pods dns-test-888bfef3-7e84-478e-9454-be0c624d81cf)
  Aug 24 12:55:42.357: INFO: Unable to read wheezy_udp@dns-test-service.dns-1324.svc from pod dns-1324/dns-test-888bfef3-7e84-478e-9454-be0c624d81cf: the server could not find the requested resource (get pods dns-test-888bfef3-7e84-478e-9454-be0c624d81cf)
  Aug 24 12:55:42.371: INFO: Unable to read wheezy_tcp@dns-test-service.dns-1324.svc from pod dns-1324/dns-test-888bfef3-7e84-478e-9454-be0c624d81cf: the server could not find the requested resource (get pods dns-test-888bfef3-7e84-478e-9454-be0c624d81cf)
  Aug 24 12:55:42.382: INFO: Unable to read wheezy_udp@_http._tcp.dns-test-service.dns-1324.svc from pod dns-1324/dns-test-888bfef3-7e84-478e-9454-be0c624d81cf: the server could not find the requested resource (get pods dns-test-888bfef3-7e84-478e-9454-be0c624d81cf)
  Aug 24 12:55:42.393: INFO: Unable to read wheezy_tcp@_http._tcp.dns-test-service.dns-1324.svc from pod dns-1324/dns-test-888bfef3-7e84-478e-9454-be0c624d81cf: the server could not find the requested resource (get pods dns-test-888bfef3-7e84-478e-9454-be0c624d81cf)
  Aug 24 12:55:42.556: INFO: Unable to read jessie_udp@dns-test-service from pod dns-1324/dns-test-888bfef3-7e84-478e-9454-be0c624d81cf: the server could not find the requested resource (get pods dns-test-888bfef3-7e84-478e-9454-be0c624d81cf)
  Aug 24 12:55:42.567: INFO: Unable to read jessie_tcp@dns-test-service from pod dns-1324/dns-test-888bfef3-7e84-478e-9454-be0c624d81cf: the server could not find the requested resource (get pods dns-test-888bfef3-7e84-478e-9454-be0c624d81cf)
  Aug 24 12:55:42.580: INFO: Unable to read jessie_udp@dns-test-service.dns-1324 from pod dns-1324/dns-test-888bfef3-7e84-478e-9454-be0c624d81cf: the server could not find the requested resource (get pods dns-test-888bfef3-7e84-478e-9454-be0c624d81cf)
  Aug 24 12:55:42.590: INFO: Unable to read jessie_tcp@dns-test-service.dns-1324 from pod dns-1324/dns-test-888bfef3-7e84-478e-9454-be0c624d81cf: the server could not find the requested resource (get pods dns-test-888bfef3-7e84-478e-9454-be0c624d81cf)
  Aug 24 12:55:42.602: INFO: Unable to read jessie_udp@dns-test-service.dns-1324.svc from pod dns-1324/dns-test-888bfef3-7e84-478e-9454-be0c624d81cf: the server could not find the requested resource (get pods dns-test-888bfef3-7e84-478e-9454-be0c624d81cf)
  Aug 24 12:55:42.612: INFO: Unable to read jessie_tcp@dns-test-service.dns-1324.svc from pod dns-1324/dns-test-888bfef3-7e84-478e-9454-be0c624d81cf: the server could not find the requested resource (get pods dns-test-888bfef3-7e84-478e-9454-be0c624d81cf)
  Aug 24 12:55:42.656: INFO: Unable to read jessie_udp@_http._tcp.dns-test-service.dns-1324.svc from pod dns-1324/dns-test-888bfef3-7e84-478e-9454-be0c624d81cf: the server could not find the requested resource (get pods dns-test-888bfef3-7e84-478e-9454-be0c624d81cf)
  Aug 24 12:55:42.667: INFO: Unable to read jessie_tcp@_http._tcp.dns-test-service.dns-1324.svc from pod dns-1324/dns-test-888bfef3-7e84-478e-9454-be0c624d81cf: the server could not find the requested resource (get pods dns-test-888bfef3-7e84-478e-9454-be0c624d81cf)
  Aug 24 12:55:42.714: INFO: Lookups using dns-1324/dns-test-888bfef3-7e84-478e-9454-be0c624d81cf failed for: [wheezy_udp@dns-test-service wheezy_tcp@dns-test-service wheezy_udp@dns-test-service.dns-1324 wheezy_tcp@dns-test-service.dns-1324 wheezy_udp@dns-test-service.dns-1324.svc wheezy_tcp@dns-test-service.dns-1324.svc wheezy_udp@_http._tcp.dns-test-service.dns-1324.svc wheezy_tcp@_http._tcp.dns-test-service.dns-1324.svc jessie_udp@dns-test-service jessie_tcp@dns-test-service jessie_udp@dns-test-service.dns-1324 jessie_tcp@dns-test-service.dns-1324 jessie_udp@dns-test-service.dns-1324.svc jessie_tcp@dns-test-service.dns-1324.svc jessie_udp@_http._tcp.dns-test-service.dns-1324.svc jessie_tcp@_http._tcp.dns-test-service.dns-1324.svc]

  Aug 24 12:55:42.770: INFO: Pod client logs for webserver: 
  Aug 24 12:55:42.797: INFO: Pod client logs for querier: 
  Aug 24 12:55:42.852: INFO: Pod client logs for jessie-querier: 
  E0824 12:55:43.114693      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:55:44.115624      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:55:45.115995      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:55:46.116546      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:55:47.117502      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:55:48.117631      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 12:55:48.129: INFO: DNS probes using dns-1324/dns-test-888bfef3-7e84-478e-9454-be0c624d81cf succeeded

  Aug 24 12:55:48.129: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: deleting the pod @ 08/24/23 12:55:48.14
  STEP: deleting the test service @ 08/24/23 12:55:48.17
  STEP: deleting the test headless service @ 08/24/23 12:55:48.268
  STEP: Destroying namespace "dns-1324" for this suite. @ 08/24/23 12:55:48.296
• [11.300 seconds]
------------------------------
SSSS
------------------------------
[sig-storage] Secrets optional updates should be reflected in volume [NodeConformance] [Conformance]
test/e2e/common/storage/secrets_volume.go:205
  STEP: Creating a kubernetes client @ 08/24/23 12:55:48.359
  Aug 24 12:55:48.360: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename secrets @ 08/24/23 12:55:48.361
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 12:55:48.388
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 12:55:48.395
  STEP: Creating secret with name s-test-opt-del-88a97aac-f226-4490-85a5-afa6bb5a3107 @ 08/24/23 12:55:48.412
  STEP: Creating secret with name s-test-opt-upd-fbd76e8a-4cb7-4b4d-bced-36a580ff2fad @ 08/24/23 12:55:48.422
  STEP: Creating the pod @ 08/24/23 12:55:48.433
  E0824 12:55:49.117802      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:55:50.117928      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Deleting secret s-test-opt-del-88a97aac-f226-4490-85a5-afa6bb5a3107 @ 08/24/23 12:55:50.531
  STEP: Updating secret s-test-opt-upd-fbd76e8a-4cb7-4b4d-bced-36a580ff2fad @ 08/24/23 12:55:50.547
  STEP: Creating secret with name s-test-opt-create-2e43dbdc-b49e-4ee5-bd03-5a97d8b3aa6d @ 08/24/23 12:55:50.558
  STEP: waiting to observe update in volume @ 08/24/23 12:55:50.568
  E0824 12:55:51.118938      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:55:52.119709      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:55:53.120369      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:55:54.120586      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:55:55.120742      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:55:56.120902      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:55:57.121903      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:55:58.122063      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:55:59.122945      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:56:00.123287      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:56:01.123422      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:56:02.123879      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:56:03.124676      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:56:04.124976      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:56:05.125182      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:56:06.125302      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:56:07.127356      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:56:08.127547      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:56:09.128178      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:56:10.128368      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:56:11.129189      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:56:12.129799      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:56:13.130270      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:56:14.130384      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:56:15.130569      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:56:16.130811      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:56:17.131596      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:56:18.132525      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:56:19.133169      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:56:20.133673      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:56:21.134425      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:56:22.135054      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:56:23.135632      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:56:24.136029      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:56:25.136906      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:56:26.137183      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:56:27.138176      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:56:28.138327      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:56:29.139092      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:56:30.139895      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:56:31.140399      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:56:32.140514      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:56:33.140559      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:56:34.141025      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:56:35.141972      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:56:36.142014      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:56:37.142877      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:56:38.143794      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:56:39.144771      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:56:40.144908      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:56:41.145028      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:56:42.145695      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:56:43.146162      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:56:44.146384      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:56:45.147530      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:56:46.147576      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:56:47.148418      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:56:48.148664      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:56:49.149074      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:56:50.149139      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:56:51.149620      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:56:52.150338      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:56:53.150620      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:56:54.150984      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:56:55.151546      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:56:56.152453      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:56:57.153263      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:56:58.154362      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:56:59.154761      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 12:56:59.352: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "secrets-6582" for this suite. @ 08/24/23 12:56:59.361
• [71.017 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] listing validating webhooks should work [Conformance]
test/e2e/apimachinery/webhook.go:572
  STEP: Creating a kubernetes client @ 08/24/23 12:56:59.377
  Aug 24 12:56:59.377: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename webhook @ 08/24/23 12:56:59.378
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 12:56:59.402
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 12:56:59.41
  STEP: Setting up server cert @ 08/24/23 12:56:59.472
  STEP: Create role binding to let webhook read extension-apiserver-authentication @ 08/24/23 12:56:59.633
  STEP: Deploying the webhook pod @ 08/24/23 12:56:59.649
  STEP: Wait for the deployment to be ready @ 08/24/23 12:56:59.67
  Aug 24 12:56:59.685: INFO: deployment "sample-webhook-deployment" doesn't have the required revision set
  E0824 12:57:00.155577      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:57:01.155840      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Deploying the webhook service @ 08/24/23 12:57:01.712
  STEP: Verifying the service has paired with the endpoint @ 08/24/23 12:57:01.739
  E0824 12:57:02.156729      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 12:57:02.740: INFO: Waiting for amount of service:e2e-test-webhook endpoints to be 1
  STEP: Listing all of the created validation webhooks @ 08/24/23 12:57:02.88
  STEP: Creating a configMap that does not comply to the validation webhook rules @ 08/24/23 12:57:02.971
  STEP: Deleting the collection of validation webhooks @ 08/24/23 12:57:03.07
  E0824 12:57:03.156992      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Creating a configMap that does not comply to the validation webhook rules @ 08/24/23 12:57:03.175
  Aug 24 12:57:03.197: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "webhook-2211" for this suite. @ 08/24/23 12:57:03.285
  STEP: Destroying namespace "webhook-markers-3263" for this suite. @ 08/24/23 12:57:03.298
• [3.935 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-scheduling] SchedulerPreemption [Serial] validates basic preemption works [Conformance]
test/e2e/scheduling/preemption.go:130
  STEP: Creating a kubernetes client @ 08/24/23 12:57:03.313
  Aug 24 12:57:03.313: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename sched-preemption @ 08/24/23 12:57:03.314
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 12:57:03.375
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 12:57:03.381
  Aug 24 12:57:03.469: INFO: Waiting up to 1m0s for all nodes to be ready
  E0824 12:57:04.157843      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:57:05.158217      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:57:06.159168      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:57:07.160007      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:57:08.160225      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:57:09.160787      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:57:10.161689      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:57:11.161994      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:57:12.162606      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:57:13.162705      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:57:14.163238      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:57:15.163331      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:57:16.164186      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:57:17.164890      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:57:18.164993      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:57:19.165140      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:57:20.166218      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:57:21.166604      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:57:22.167563      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:57:23.167903      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:57:24.168085      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:57:25.168403      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:57:26.168819      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:57:27.169026      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:57:28.170042      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:57:29.170493      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:57:30.170737      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:57:31.171265      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:57:32.171385      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:57:33.172107      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:57:34.172368      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:57:35.172548      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:57:36.172741      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:57:37.173585      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:57:38.173595      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:57:39.173886      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:57:40.174466      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:57:41.174768      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:57:42.174909      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:57:43.175475      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:57:44.175887      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:57:45.176281      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:57:46.176395      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:57:47.177326      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:57:48.178164      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:57:49.178515      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:57:50.179128      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:57:51.179328      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:57:52.180436      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:57:53.180898      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:57:54.180909      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:57:55.181093      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:57:56.181214      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:57:57.182133      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:57:58.183185      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:57:59.183304      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:58:00.184292      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:58:01.184467      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:58:02.185597      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:58:03.185772      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 12:58:03.514: INFO: Waiting for terminating namespaces to be deleted...
  STEP: Create pods that use 4/5 of node resources. @ 08/24/23 12:58:03.523
  Aug 24 12:58:03.576: INFO: Created pod: pod0-0-sched-preemption-low-priority
  Aug 24 12:58:03.589: INFO: Created pod: pod0-1-sched-preemption-medium-priority
  Aug 24 12:58:03.673: INFO: Created pod: pod1-0-sched-preemption-medium-priority
  Aug 24 12:58:03.686: INFO: Created pod: pod1-1-sched-preemption-medium-priority
  STEP: Wait for pods to be scheduled. @ 08/24/23 12:58:03.686
  E0824 12:58:04.186012      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:58:05.186739      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Run a high priority pod that has same requirements as that of lower priority pod @ 08/24/23 12:58:05.797
  E0824 12:58:06.187519      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:58:07.188366      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:58:08.188668      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:58:09.188849      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 12:58:09.891: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "sched-preemption-5784" for this suite. @ 08/24/23 12:58:10.001
• [66.745 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-architecture] Conformance Tests should have at least two untainted nodes [Conformance]
test/e2e/architecture/conformance.go:39
  STEP: Creating a kubernetes client @ 08/24/23 12:58:10.06
  Aug 24 12:58:10.060: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename conformance-tests @ 08/24/23 12:58:10.061
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 12:58:10.155
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 12:58:10.162
  STEP: Getting node addresses @ 08/24/23 12:58:10.168
  Aug 24 12:58:10.168: INFO: Waiting up to 10m0s for all (but 0) nodes to be schedulable
  Aug 24 12:58:10.180: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  E0824 12:58:10.189753      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Destroying namespace "conformance-tests-7295" for this suite. @ 08/24/23 12:58:10.257
• [0.213 seconds]
------------------------------
SSS
------------------------------
[sig-cli] Kubectl client Update Demo should create and stop a replication controller  [Conformance]
test/e2e/kubectl/kubectl.go:341
  STEP: Creating a kubernetes client @ 08/24/23 12:58:10.273
  Aug 24 12:58:10.273: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename kubectl @ 08/24/23 12:58:10.274
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 12:58:10.303
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 12:58:10.31
  STEP: creating a replication controller @ 08/24/23 12:58:10.316
  Aug 24 12:58:10.316: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1002171096 --namespace=kubectl-2692 create -f -'
  Aug 24 12:58:10.668: INFO: stderr: ""
  Aug 24 12:58:10.668: INFO: stdout: "replicationcontroller/update-demo-nautilus created\n"
  STEP: waiting for all containers in name=update-demo pods to come up. @ 08/24/23 12:58:10.668
  Aug 24 12:58:10.669: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1002171096 --namespace=kubectl-2692 get pods -o template --template={{range.items}}{{.metadata.name}} {{end}} -l name=update-demo'
  Aug 24 12:58:10.783: INFO: stderr: ""
  Aug 24 12:58:10.783: INFO: stdout: "update-demo-nautilus-7hdh6 update-demo-nautilus-zdbbb "
  Aug 24 12:58:10.783: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1002171096 --namespace=kubectl-2692 get pods update-demo-nautilus-7hdh6 -o template --template={{if (exists . "status" "containerStatuses")}}{{range .status.containerStatuses}}{{if (and (eq .name "update-demo") (exists . "state" "running"))}}true{{end}}{{end}}{{end}}'
  Aug 24 12:58:10.884: INFO: stderr: ""
  Aug 24 12:58:10.884: INFO: stdout: ""
  Aug 24 12:58:10.884: INFO: update-demo-nautilus-7hdh6 is created but not running
  E0824 12:58:11.189912      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:58:12.190826      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:58:13.191076      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:58:14.191213      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:58:15.191394      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 12:58:15.885: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1002171096 --namespace=kubectl-2692 get pods -o template --template={{range.items}}{{.metadata.name}} {{end}} -l name=update-demo'
  Aug 24 12:58:16.011: INFO: stderr: ""
  Aug 24 12:58:16.011: INFO: stdout: "update-demo-nautilus-7hdh6 update-demo-nautilus-zdbbb "
  Aug 24 12:58:16.011: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1002171096 --namespace=kubectl-2692 get pods update-demo-nautilus-7hdh6 -o template --template={{if (exists . "status" "containerStatuses")}}{{range .status.containerStatuses}}{{if (and (eq .name "update-demo") (exists . "state" "running"))}}true{{end}}{{end}}{{end}}'
  Aug 24 12:58:16.122: INFO: stderr: ""
  Aug 24 12:58:16.122: INFO: stdout: "true"
  Aug 24 12:58:16.122: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1002171096 --namespace=kubectl-2692 get pods update-demo-nautilus-7hdh6 -o template --template={{if (exists . "spec" "containers")}}{{range .spec.containers}}{{if eq .name "update-demo"}}{{.image}}{{end}}{{end}}{{end}}'
  E0824 12:58:16.192130      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 12:58:16.230: INFO: stderr: ""
  Aug 24 12:58:16.230: INFO: stdout: "registry.k8s.io/e2e-test-images/nautilus:1.7"
  Aug 24 12:58:16.230: INFO: validating pod update-demo-nautilus-7hdh6
  Aug 24 12:58:16.250: INFO: got data: {
    "image": "nautilus.jpg"
  }

  Aug 24 12:58:16.250: INFO: Unmarshalled json jpg/img => {nautilus.jpg} , expecting nautilus.jpg .
  Aug 24 12:58:16.250: INFO: update-demo-nautilus-7hdh6 is verified up and running
  Aug 24 12:58:16.250: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1002171096 --namespace=kubectl-2692 get pods update-demo-nautilus-zdbbb -o template --template={{if (exists . "status" "containerStatuses")}}{{range .status.containerStatuses}}{{if (and (eq .name "update-demo") (exists . "state" "running"))}}true{{end}}{{end}}{{end}}'
  Aug 24 12:58:16.366: INFO: stderr: ""
  Aug 24 12:58:16.366: INFO: stdout: "true"
  Aug 24 12:58:16.366: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1002171096 --namespace=kubectl-2692 get pods update-demo-nautilus-zdbbb -o template --template={{if (exists . "spec" "containers")}}{{range .spec.containers}}{{if eq .name "update-demo"}}{{.image}}{{end}}{{end}}{{end}}'
  Aug 24 12:58:16.492: INFO: stderr: ""
  Aug 24 12:58:16.492: INFO: stdout: "registry.k8s.io/e2e-test-images/nautilus:1.7"
  Aug 24 12:58:16.492: INFO: validating pod update-demo-nautilus-zdbbb
  Aug 24 12:58:16.509: INFO: got data: {
    "image": "nautilus.jpg"
  }

  Aug 24 12:58:16.509: INFO: Unmarshalled json jpg/img => {nautilus.jpg} , expecting nautilus.jpg .
  Aug 24 12:58:16.509: INFO: update-demo-nautilus-zdbbb is verified up and running
  STEP: using delete to clean up resources @ 08/24/23 12:58:16.509
  Aug 24 12:58:16.509: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1002171096 --namespace=kubectl-2692 delete --grace-period=0 --force -f -'
  Aug 24 12:58:16.642: INFO: stderr: "Warning: Immediate deletion does not wait for confirmation that the running resource has been terminated. The resource may continue to run on the cluster indefinitely.\n"
  Aug 24 12:58:16.642: INFO: stdout: "replicationcontroller \"update-demo-nautilus\" force deleted\n"
  Aug 24 12:58:16.642: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1002171096 --namespace=kubectl-2692 get rc,svc -l name=update-demo --no-headers'
  Aug 24 12:58:16.783: INFO: stderr: "No resources found in kubectl-2692 namespace.\n"
  Aug 24 12:58:16.783: INFO: stdout: ""
  Aug 24 12:58:16.783: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1002171096 --namespace=kubectl-2692 get pods -l name=update-demo -o go-template={{ range .items }}{{ if not .metadata.deletionTimestamp }}{{ .metadata.name }}{{ "\n" }}{{ end }}{{ end }}'
  Aug 24 12:58:16.889: INFO: stderr: ""
  Aug 24 12:58:16.889: INFO: stdout: ""
  Aug 24 12:58:16.890: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "kubectl-2692" for this suite. @ 08/24/23 12:58:16.899
• [6.640 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-node] Pods should get a host IP [NodeConformance] [Conformance]
test/e2e/common/node/pods.go:205
  STEP: Creating a kubernetes client @ 08/24/23 12:58:16.915
  Aug 24 12:58:16.915: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename pods @ 08/24/23 12:58:16.916
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 12:58:16.959
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 12:58:16.965
  STEP: creating pod @ 08/24/23 12:58:16.97
  E0824 12:58:17.192502      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:58:18.193247      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 12:58:19.083: INFO: Pod pod-hostip-d3d14ce2-bb07-45a8-b6d7-0957ddf36dd0 has hostIP: 172.16.36.3
  Aug 24 12:58:19.083: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "pods-7186" for this suite. @ 08/24/23 12:58:19.095
• [2.196 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-api-machinery] Discovery should locate the groupVersion and a resource within each APIGroup [Conformance]
test/e2e/apimachinery/discovery.go:169
  STEP: Creating a kubernetes client @ 08/24/23 12:58:19.112
  Aug 24 12:58:19.112: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename discovery @ 08/24/23 12:58:19.113
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 12:58:19.144
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 12:58:19.151
  STEP: Setting up server cert @ 08/24/23 12:58:19.161
  E0824 12:58:19.193197      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Requesting APIResourceList from "/api/v1" @ 08/24/23 12:58:19.531
  STEP: Requesting APIResourceList from "/apis/admissionregistration.k8s.io/v1" @ 08/24/23 12:58:19.536
  STEP: Requesting APIResourceList from "/apis/apiextensions.k8s.io/v1" @ 08/24/23 12:58:19.539
  STEP: Requesting APIResourceList from "/apis/apiregistration.k8s.io/v1" @ 08/24/23 12:58:19.541
  STEP: Requesting APIResourceList from "/apis/apps/v1" @ 08/24/23 12:58:19.544
  STEP: Requesting APIResourceList from "/apis/authentication.k8s.io/v1" @ 08/24/23 12:58:19.547
  STEP: Requesting APIResourceList from "/apis/authorization.k8s.io/v1" @ 08/24/23 12:58:19.55
  STEP: Requesting APIResourceList from "/apis/autoscaling/v1" @ 08/24/23 12:58:19.552
  STEP: Requesting APIResourceList from "/apis/autoscaling/v2" @ 08/24/23 12:58:19.555
  STEP: Requesting APIResourceList from "/apis/batch/v1" @ 08/24/23 12:58:19.557
  STEP: Requesting APIResourceList from "/apis/certificates.k8s.io/v1" @ 08/24/23 12:58:19.56
  STEP: Requesting APIResourceList from "/apis/coordination.k8s.io/v1" @ 08/24/23 12:58:19.562
  STEP: Requesting APIResourceList from "/apis/discovery.k8s.io/v1" @ 08/24/23 12:58:19.565
  STEP: Requesting APIResourceList from "/apis/events.k8s.io/v1" @ 08/24/23 12:58:19.567
  STEP: Requesting APIResourceList from "/apis/networking.k8s.io/v1" @ 08/24/23 12:58:19.57
  STEP: Requesting APIResourceList from "/apis/node.k8s.io/v1" @ 08/24/23 12:58:19.572
  STEP: Requesting APIResourceList from "/apis/policy/v1" @ 08/24/23 12:58:19.575
  STEP: Requesting APIResourceList from "/apis/scheduling.k8s.io/v1" @ 08/24/23 12:58:19.577
  STEP: Requesting APIResourceList from "/apis/storage.k8s.io/v1" @ 08/24/23 12:58:19.58
  Aug 24 12:58:19.583: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "discovery-4199" for this suite. @ 08/24/23 12:58:19.592
• [0.502 seconds]
------------------------------
SSS
------------------------------
[sig-node] Probing container should *not* be restarted with a exec "cat /tmp/health" liveness probe [NodeConformance] [Conformance]
test/e2e/common/node/container_probe.go:151
  STEP: Creating a kubernetes client @ 08/24/23 12:58:19.614
  Aug 24 12:58:19.614: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename container-probe @ 08/24/23 12:58:19.615
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 12:58:19.646
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 12:58:19.653
  STEP: Creating pod busybox-6d75c045-4e6d-48c4-991b-af2399cf670e in namespace container-probe-4425 @ 08/24/23 12:58:19.659
  E0824 12:58:20.193854      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:58:21.194682      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: checking the pod's current state and verifying that restartCount is present @ 08/24/23 12:58:21.7
  Aug 24 12:58:21.709: INFO: Initial restart count of pod busybox-6d75c045-4e6d-48c4-991b-af2399cf670e is 0
  Aug 24 12:58:21.716: INFO: Get pod busybox-6d75c045-4e6d-48c4-991b-af2399cf670e in namespace container-probe-4425
  E0824 12:58:22.195329      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:58:23.195875      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 12:58:23.738: INFO: Get pod busybox-6d75c045-4e6d-48c4-991b-af2399cf670e in namespace container-probe-4425
  E0824 12:58:24.196046      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:58:25.196165      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 12:58:25.752: INFO: Get pod busybox-6d75c045-4e6d-48c4-991b-af2399cf670e in namespace container-probe-4425
  E0824 12:58:26.196960      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:58:27.197855      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 12:58:27.763: INFO: Get pod busybox-6d75c045-4e6d-48c4-991b-af2399cf670e in namespace container-probe-4425
  E0824 12:58:28.198552      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:58:29.198934      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 12:58:29.774: INFO: Get pod busybox-6d75c045-4e6d-48c4-991b-af2399cf670e in namespace container-probe-4425
  E0824 12:58:30.199406      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:58:31.199784      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 12:58:31.786: INFO: Get pod busybox-6d75c045-4e6d-48c4-991b-af2399cf670e in namespace container-probe-4425
  E0824 12:58:32.200253      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:58:33.200398      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 12:58:33.797: INFO: Get pod busybox-6d75c045-4e6d-48c4-991b-af2399cf670e in namespace container-probe-4425
  E0824 12:58:34.200520      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:58:35.201107      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 12:58:35.808: INFO: Get pod busybox-6d75c045-4e6d-48c4-991b-af2399cf670e in namespace container-probe-4425
  E0824 12:58:36.201327      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:58:37.202038      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 12:58:37.818: INFO: Get pod busybox-6d75c045-4e6d-48c4-991b-af2399cf670e in namespace container-probe-4425
  E0824 12:58:38.202802      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:58:39.203039      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 12:58:39.828: INFO: Get pod busybox-6d75c045-4e6d-48c4-991b-af2399cf670e in namespace container-probe-4425
  E0824 12:58:40.203361      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:58:41.203545      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 12:58:41.837: INFO: Get pod busybox-6d75c045-4e6d-48c4-991b-af2399cf670e in namespace container-probe-4425
  E0824 12:58:42.204172      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:58:43.204682      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 12:58:43.848: INFO: Get pod busybox-6d75c045-4e6d-48c4-991b-af2399cf670e in namespace container-probe-4425
  E0824 12:58:44.204809      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:58:45.205040      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 12:58:45.858: INFO: Get pod busybox-6d75c045-4e6d-48c4-991b-af2399cf670e in namespace container-probe-4425
  E0824 12:58:46.206083      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:58:47.207056      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 12:58:47.868: INFO: Get pod busybox-6d75c045-4e6d-48c4-991b-af2399cf670e in namespace container-probe-4425
  E0824 12:58:48.207927      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:58:49.208360      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 12:58:49.880: INFO: Get pod busybox-6d75c045-4e6d-48c4-991b-af2399cf670e in namespace container-probe-4425
  E0824 12:58:50.208529      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:58:51.208998      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 12:58:51.889: INFO: Get pod busybox-6d75c045-4e6d-48c4-991b-af2399cf670e in namespace container-probe-4425
  E0824 12:58:52.209824      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:58:53.210055      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 12:58:53.901: INFO: Get pod busybox-6d75c045-4e6d-48c4-991b-af2399cf670e in namespace container-probe-4425
  E0824 12:58:54.210644      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:58:55.211075      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 12:58:55.911: INFO: Get pod busybox-6d75c045-4e6d-48c4-991b-af2399cf670e in namespace container-probe-4425
  E0824 12:58:56.211870      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:58:57.212567      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 12:58:57.922: INFO: Get pod busybox-6d75c045-4e6d-48c4-991b-af2399cf670e in namespace container-probe-4425
  E0824 12:58:58.213374      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:58:59.213721      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 12:58:59.933: INFO: Get pod busybox-6d75c045-4e6d-48c4-991b-af2399cf670e in namespace container-probe-4425
  E0824 12:59:00.214544      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:59:01.214695      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 12:59:01.942: INFO: Get pod busybox-6d75c045-4e6d-48c4-991b-af2399cf670e in namespace container-probe-4425
  E0824 12:59:02.214939      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:59:03.215117      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 12:59:03.953: INFO: Get pod busybox-6d75c045-4e6d-48c4-991b-af2399cf670e in namespace container-probe-4425
  E0824 12:59:04.215328      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:59:05.215563      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 12:59:05.965: INFO: Get pod busybox-6d75c045-4e6d-48c4-991b-af2399cf670e in namespace container-probe-4425
  E0824 12:59:06.216475      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:59:07.217238      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 12:59:07.976: INFO: Get pod busybox-6d75c045-4e6d-48c4-991b-af2399cf670e in namespace container-probe-4425
  E0824 12:59:08.217782      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:59:09.218016      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 12:59:09.986: INFO: Get pod busybox-6d75c045-4e6d-48c4-991b-af2399cf670e in namespace container-probe-4425
  E0824 12:59:10.219115      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:59:11.219649      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 12:59:11.998: INFO: Get pod busybox-6d75c045-4e6d-48c4-991b-af2399cf670e in namespace container-probe-4425
  E0824 12:59:12.220371      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:59:13.220650      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 12:59:14.011: INFO: Get pod busybox-6d75c045-4e6d-48c4-991b-af2399cf670e in namespace container-probe-4425
  E0824 12:59:14.221078      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:59:15.221410      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 12:59:16.153: INFO: Get pod busybox-6d75c045-4e6d-48c4-991b-af2399cf670e in namespace container-probe-4425
  E0824 12:59:16.221535      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:59:17.222425      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 12:59:18.164: INFO: Get pod busybox-6d75c045-4e6d-48c4-991b-af2399cf670e in namespace container-probe-4425
  E0824 12:59:18.222804      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:59:19.223437      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 12:59:20.173: INFO: Get pod busybox-6d75c045-4e6d-48c4-991b-af2399cf670e in namespace container-probe-4425
  E0824 12:59:20.224158      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:59:21.224376      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 12:59:22.186: INFO: Get pod busybox-6d75c045-4e6d-48c4-991b-af2399cf670e in namespace container-probe-4425
  E0824 12:59:22.225158      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:59:23.225319      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 12:59:24.203: INFO: Get pod busybox-6d75c045-4e6d-48c4-991b-af2399cf670e in namespace container-probe-4425
  E0824 12:59:24.225652      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:59:25.225997      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 12:59:26.216: INFO: Get pod busybox-6d75c045-4e6d-48c4-991b-af2399cf670e in namespace container-probe-4425
  E0824 12:59:26.226404      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:59:27.227461      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 12:59:28.226: INFO: Get pod busybox-6d75c045-4e6d-48c4-991b-af2399cf670e in namespace container-probe-4425
  E0824 12:59:28.227908      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:59:29.228156      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:59:30.228488      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 12:59:30.235: INFO: Get pod busybox-6d75c045-4e6d-48c4-991b-af2399cf670e in namespace container-probe-4425
  E0824 12:59:31.228733      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:59:32.229210      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 12:59:32.245: INFO: Get pod busybox-6d75c045-4e6d-48c4-991b-af2399cf670e in namespace container-probe-4425
  E0824 12:59:33.229291      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:59:34.229431      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 12:59:34.255: INFO: Get pod busybox-6d75c045-4e6d-48c4-991b-af2399cf670e in namespace container-probe-4425
  E0824 12:59:35.229574      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:59:36.229743      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 12:59:36.266: INFO: Get pod busybox-6d75c045-4e6d-48c4-991b-af2399cf670e in namespace container-probe-4425
  E0824 12:59:37.229891      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:59:38.230049      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 12:59:38.277: INFO: Get pod busybox-6d75c045-4e6d-48c4-991b-af2399cf670e in namespace container-probe-4425
  E0824 12:59:39.230378      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:59:40.230769      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 12:59:40.286: INFO: Get pod busybox-6d75c045-4e6d-48c4-991b-af2399cf670e in namespace container-probe-4425
  E0824 12:59:41.230952      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:59:42.231713      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 12:59:42.296: INFO: Get pod busybox-6d75c045-4e6d-48c4-991b-af2399cf670e in namespace container-probe-4425
  E0824 12:59:43.231851      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:59:44.232193      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 12:59:44.308: INFO: Get pod busybox-6d75c045-4e6d-48c4-991b-af2399cf670e in namespace container-probe-4425
  E0824 12:59:45.232350      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:59:46.232876      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 12:59:46.319: INFO: Get pod busybox-6d75c045-4e6d-48c4-991b-af2399cf670e in namespace container-probe-4425
  E0824 12:59:47.233048      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:59:48.233114      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 12:59:48.330: INFO: Get pod busybox-6d75c045-4e6d-48c4-991b-af2399cf670e in namespace container-probe-4425
  E0824 12:59:49.233250      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:59:50.233525      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 12:59:50.341: INFO: Get pod busybox-6d75c045-4e6d-48c4-991b-af2399cf670e in namespace container-probe-4425
  E0824 12:59:51.233959      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:59:52.234550      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 12:59:52.352: INFO: Get pod busybox-6d75c045-4e6d-48c4-991b-af2399cf670e in namespace container-probe-4425
  E0824 12:59:53.234602      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:59:54.234793      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 12:59:54.360: INFO: Get pod busybox-6d75c045-4e6d-48c4-991b-af2399cf670e in namespace container-probe-4425
  E0824 12:59:55.234874      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:59:56.235105      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 12:59:56.372: INFO: Get pod busybox-6d75c045-4e6d-48c4-991b-af2399cf670e in namespace container-probe-4425
  E0824 12:59:57.235866      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 12:59:58.235966      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 12:59:58.381: INFO: Get pod busybox-6d75c045-4e6d-48c4-991b-af2399cf670e in namespace container-probe-4425
  E0824 12:59:59.236150      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:00:00.236266      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 13:00:00.390: INFO: Get pod busybox-6d75c045-4e6d-48c4-991b-af2399cf670e in namespace container-probe-4425
  E0824 13:00:01.237297      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:00:02.238362      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 13:00:02.400: INFO: Get pod busybox-6d75c045-4e6d-48c4-991b-af2399cf670e in namespace container-probe-4425
  E0824 13:00:03.238553      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:00:04.239003      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 13:00:04.408: INFO: Get pod busybox-6d75c045-4e6d-48c4-991b-af2399cf670e in namespace container-probe-4425
  E0824 13:00:05.239257      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:00:06.239365      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 13:00:06.418: INFO: Get pod busybox-6d75c045-4e6d-48c4-991b-af2399cf670e in namespace container-probe-4425
  E0824 13:00:07.239915      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:00:08.240727      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 13:00:08.427: INFO: Get pod busybox-6d75c045-4e6d-48c4-991b-af2399cf670e in namespace container-probe-4425
  E0824 13:00:09.241474      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:00:10.241796      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 13:00:10.437: INFO: Get pod busybox-6d75c045-4e6d-48c4-991b-af2399cf670e in namespace container-probe-4425
  E0824 13:00:11.242149      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:00:12.242822      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 13:00:12.447: INFO: Get pod busybox-6d75c045-4e6d-48c4-991b-af2399cf670e in namespace container-probe-4425
  E0824 13:00:13.243644      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:00:14.244274      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 13:00:14.460: INFO: Get pod busybox-6d75c045-4e6d-48c4-991b-af2399cf670e in namespace container-probe-4425
  E0824 13:00:15.244405      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:00:16.244821      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 13:00:16.469: INFO: Get pod busybox-6d75c045-4e6d-48c4-991b-af2399cf670e in namespace container-probe-4425
  E0824 13:00:17.245902      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:00:18.246173      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 13:00:18.482: INFO: Get pod busybox-6d75c045-4e6d-48c4-991b-af2399cf670e in namespace container-probe-4425
  E0824 13:00:19.246452      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:00:20.247307      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 13:00:20.493: INFO: Get pod busybox-6d75c045-4e6d-48c4-991b-af2399cf670e in namespace container-probe-4425
  E0824 13:00:21.248282      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:00:22.248829      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 13:00:22.504: INFO: Get pod busybox-6d75c045-4e6d-48c4-991b-af2399cf670e in namespace container-probe-4425
  E0824 13:00:23.249046      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:00:24.249200      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 13:00:24.517: INFO: Get pod busybox-6d75c045-4e6d-48c4-991b-af2399cf670e in namespace container-probe-4425
  E0824 13:00:25.249382      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:00:26.249582      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 13:00:26.529: INFO: Get pod busybox-6d75c045-4e6d-48c4-991b-af2399cf670e in namespace container-probe-4425
  E0824 13:00:27.250577      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:00:28.251192      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 13:00:28.542: INFO: Get pod busybox-6d75c045-4e6d-48c4-991b-af2399cf670e in namespace container-probe-4425
  E0824 13:00:29.251275      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:00:30.251467      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 13:00:30.552: INFO: Get pod busybox-6d75c045-4e6d-48c4-991b-af2399cf670e in namespace container-probe-4425
  E0824 13:00:31.252437      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:00:32.252983      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 13:00:32.563: INFO: Get pod busybox-6d75c045-4e6d-48c4-991b-af2399cf670e in namespace container-probe-4425
  E0824 13:00:33.253900      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:00:34.254473      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 13:00:34.574: INFO: Get pod busybox-6d75c045-4e6d-48c4-991b-af2399cf670e in namespace container-probe-4425
  E0824 13:00:35.254596      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:00:36.254732      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 13:00:36.585: INFO: Get pod busybox-6d75c045-4e6d-48c4-991b-af2399cf670e in namespace container-probe-4425
  E0824 13:00:37.254905      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:00:38.255418      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 13:00:38.595: INFO: Get pod busybox-6d75c045-4e6d-48c4-991b-af2399cf670e in namespace container-probe-4425
  E0824 13:00:39.255575      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:00:40.255804      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 13:00:40.606: INFO: Get pod busybox-6d75c045-4e6d-48c4-991b-af2399cf670e in namespace container-probe-4425
  E0824 13:00:41.256795      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:00:42.257613      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 13:00:42.619: INFO: Get pod busybox-6d75c045-4e6d-48c4-991b-af2399cf670e in namespace container-probe-4425
  E0824 13:00:43.257748      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:00:44.258178      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 13:00:44.628: INFO: Get pod busybox-6d75c045-4e6d-48c4-991b-af2399cf670e in namespace container-probe-4425
  E0824 13:00:45.258377      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:00:46.258556      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 13:00:46.639: INFO: Get pod busybox-6d75c045-4e6d-48c4-991b-af2399cf670e in namespace container-probe-4425
  E0824 13:00:47.259526      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:00:48.259733      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 13:00:48.650: INFO: Get pod busybox-6d75c045-4e6d-48c4-991b-af2399cf670e in namespace container-probe-4425
  E0824 13:00:49.260498      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:00:50.261050      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 13:00:50.663: INFO: Get pod busybox-6d75c045-4e6d-48c4-991b-af2399cf670e in namespace container-probe-4425
  E0824 13:00:51.261164      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:00:52.261749      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 13:00:52.674: INFO: Get pod busybox-6d75c045-4e6d-48c4-991b-af2399cf670e in namespace container-probe-4425
  E0824 13:00:53.262736      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:00:54.262904      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 13:00:54.685: INFO: Get pod busybox-6d75c045-4e6d-48c4-991b-af2399cf670e in namespace container-probe-4425
  E0824 13:00:55.263050      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:00:56.263211      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 13:00:56.696: INFO: Get pod busybox-6d75c045-4e6d-48c4-991b-af2399cf670e in namespace container-probe-4425
  E0824 13:00:57.263328      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:00:58.263758      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 13:00:58.710: INFO: Get pod busybox-6d75c045-4e6d-48c4-991b-af2399cf670e in namespace container-probe-4425
  E0824 13:00:59.264603      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:01:00.265591      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 13:01:00.720: INFO: Get pod busybox-6d75c045-4e6d-48c4-991b-af2399cf670e in namespace container-probe-4425
  E0824 13:01:01.266425      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:01:02.267290      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 13:01:02.730: INFO: Get pod busybox-6d75c045-4e6d-48c4-991b-af2399cf670e in namespace container-probe-4425
  E0824 13:01:03.267275      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:01:04.267566      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 13:01:04.739: INFO: Get pod busybox-6d75c045-4e6d-48c4-991b-af2399cf670e in namespace container-probe-4425
  E0824 13:01:05.268403      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:01:06.268997      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 13:01:06.749: INFO: Get pod busybox-6d75c045-4e6d-48c4-991b-af2399cf670e in namespace container-probe-4425
  E0824 13:01:07.269043      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:01:08.269653      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 13:01:08.758: INFO: Get pod busybox-6d75c045-4e6d-48c4-991b-af2399cf670e in namespace container-probe-4425
  E0824 13:01:09.269741      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:01:10.269936      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 13:01:10.768: INFO: Get pod busybox-6d75c045-4e6d-48c4-991b-af2399cf670e in namespace container-probe-4425
  E0824 13:01:11.270948      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:01:12.271598      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 13:01:12.777: INFO: Get pod busybox-6d75c045-4e6d-48c4-991b-af2399cf670e in namespace container-probe-4425
  E0824 13:01:13.271788      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:01:14.272293      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 13:01:14.788: INFO: Get pod busybox-6d75c045-4e6d-48c4-991b-af2399cf670e in namespace container-probe-4425
  E0824 13:01:15.273066      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:01:16.273744      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 13:01:16.861: INFO: Get pod busybox-6d75c045-4e6d-48c4-991b-af2399cf670e in namespace container-probe-4425
  E0824 13:01:17.273898      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:01:18.273999      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 13:01:18.879: INFO: Get pod busybox-6d75c045-4e6d-48c4-991b-af2399cf670e in namespace container-probe-4425
  E0824 13:01:19.275065      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:01:20.275396      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 13:01:20.889: INFO: Get pod busybox-6d75c045-4e6d-48c4-991b-af2399cf670e in namespace container-probe-4425
  E0824 13:01:21.276105      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:01:22.276282      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 13:01:22.899: INFO: Get pod busybox-6d75c045-4e6d-48c4-991b-af2399cf670e in namespace container-probe-4425
  E0824 13:01:23.277410      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:01:24.277535      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 13:01:24.911: INFO: Get pod busybox-6d75c045-4e6d-48c4-991b-af2399cf670e in namespace container-probe-4425
  E0824 13:01:25.278475      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:01:26.278611      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 13:01:26.922: INFO: Get pod busybox-6d75c045-4e6d-48c4-991b-af2399cf670e in namespace container-probe-4425
  E0824 13:01:27.279002      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:01:28.279476      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 13:01:28.932: INFO: Get pod busybox-6d75c045-4e6d-48c4-991b-af2399cf670e in namespace container-probe-4425
  E0824 13:01:29.279685      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:01:30.279812      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 13:01:30.941: INFO: Get pod busybox-6d75c045-4e6d-48c4-991b-af2399cf670e in namespace container-probe-4425
  E0824 13:01:31.280808      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:01:32.281746      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 13:01:32.952: INFO: Get pod busybox-6d75c045-4e6d-48c4-991b-af2399cf670e in namespace container-probe-4425
  E0824 13:01:33.282909      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:01:34.283297      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 13:01:34.966: INFO: Get pod busybox-6d75c045-4e6d-48c4-991b-af2399cf670e in namespace container-probe-4425
  E0824 13:01:35.283441      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:01:36.283714      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 13:01:36.978: INFO: Get pod busybox-6d75c045-4e6d-48c4-991b-af2399cf670e in namespace container-probe-4425
  E0824 13:01:37.284714      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:01:38.285073      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 13:01:38.992: INFO: Get pod busybox-6d75c045-4e6d-48c4-991b-af2399cf670e in namespace container-probe-4425
  E0824 13:01:39.285690      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:01:40.286085      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 13:01:41.003: INFO: Get pod busybox-6d75c045-4e6d-48c4-991b-af2399cf670e in namespace container-probe-4425
  E0824 13:01:41.286401      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:01:42.286526      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 13:01:43.013: INFO: Get pod busybox-6d75c045-4e6d-48c4-991b-af2399cf670e in namespace container-probe-4425
  E0824 13:01:43.287640      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:01:44.288227      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 13:01:45.024: INFO: Get pod busybox-6d75c045-4e6d-48c4-991b-af2399cf670e in namespace container-probe-4425
  E0824 13:01:45.288417      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:01:46.288526      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 13:01:47.038: INFO: Get pod busybox-6d75c045-4e6d-48c4-991b-af2399cf670e in namespace container-probe-4425
  E0824 13:01:47.288986      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:01:48.289560      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 13:01:49.046: INFO: Get pod busybox-6d75c045-4e6d-48c4-991b-af2399cf670e in namespace container-probe-4425
  E0824 13:01:49.289647      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:01:50.289787      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 13:01:51.056: INFO: Get pod busybox-6d75c045-4e6d-48c4-991b-af2399cf670e in namespace container-probe-4425
  E0824 13:01:51.290902      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:01:52.291499      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 13:01:53.067: INFO: Get pod busybox-6d75c045-4e6d-48c4-991b-af2399cf670e in namespace container-probe-4425
  E0824 13:01:53.291806      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:01:54.292099      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 13:01:55.077: INFO: Get pod busybox-6d75c045-4e6d-48c4-991b-af2399cf670e in namespace container-probe-4425
  E0824 13:01:55.292506      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:01:56.292919      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 13:01:57.089: INFO: Get pod busybox-6d75c045-4e6d-48c4-991b-af2399cf670e in namespace container-probe-4425
  E0824 13:01:57.293756      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:01:58.294076      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 13:01:59.099: INFO: Get pod busybox-6d75c045-4e6d-48c4-991b-af2399cf670e in namespace container-probe-4425
  E0824 13:01:59.294235      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:02:00.294469      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 13:02:01.108: INFO: Get pod busybox-6d75c045-4e6d-48c4-991b-af2399cf670e in namespace container-probe-4425
  E0824 13:02:01.294537      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:02:02.295272      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 13:02:03.118: INFO: Get pod busybox-6d75c045-4e6d-48c4-991b-af2399cf670e in namespace container-probe-4425
  E0824 13:02:03.295917      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:02:04.296314      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 13:02:05.130: INFO: Get pod busybox-6d75c045-4e6d-48c4-991b-af2399cf670e in namespace container-probe-4425
  E0824 13:02:05.297348      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:02:06.297506      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 13:02:07.142: INFO: Get pod busybox-6d75c045-4e6d-48c4-991b-af2399cf670e in namespace container-probe-4425
  E0824 13:02:07.297926      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:02:08.299079      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 13:02:09.151: INFO: Get pod busybox-6d75c045-4e6d-48c4-991b-af2399cf670e in namespace container-probe-4425
  E0824 13:02:09.299367      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:02:10.299735      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 13:02:11.160: INFO: Get pod busybox-6d75c045-4e6d-48c4-991b-af2399cf670e in namespace container-probe-4425
  E0824 13:02:11.300179      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:02:12.300870      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 13:02:13.171: INFO: Get pod busybox-6d75c045-4e6d-48c4-991b-af2399cf670e in namespace container-probe-4425
  E0824 13:02:13.301135      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:02:14.302044      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 13:02:15.182: INFO: Get pod busybox-6d75c045-4e6d-48c4-991b-af2399cf670e in namespace container-probe-4425
  E0824 13:02:15.302755      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:02:16.303028      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 13:02:17.193: INFO: Get pod busybox-6d75c045-4e6d-48c4-991b-af2399cf670e in namespace container-probe-4425
  E0824 13:02:17.303736      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:02:18.304202      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 13:02:19.202: INFO: Get pod busybox-6d75c045-4e6d-48c4-991b-af2399cf670e in namespace container-probe-4425
  E0824 13:02:19.305282      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:02:20.305915      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 13:02:21.212: INFO: Get pod busybox-6d75c045-4e6d-48c4-991b-af2399cf670e in namespace container-probe-4425
  E0824 13:02:21.306894      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:02:22.307722      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 13:02:23.212: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: deleting the pod @ 08/24/23 13:02:23.226
  STEP: Destroying namespace "container-probe-4425" for this suite. @ 08/24/23 13:02:23.255
• [243.655 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-storage] Projected configMap should be consumable from pods in volume as non-root [NodeConformance] [Conformance]
test/e2e/common/storage/projected_configmap.go:74
  STEP: Creating a kubernetes client @ 08/24/23 13:02:23.278
  Aug 24 13:02:23.278: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename projected @ 08/24/23 13:02:23.28
  E0824 13:02:23.308250      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 13:02:23.351
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 13:02:23.358
  STEP: Creating configMap with name projected-configmap-test-volume-d4322387-ab7b-4a99-b972-b50b84899577 @ 08/24/23 13:02:23.366
  STEP: Creating a pod to test consume configMaps @ 08/24/23 13:02:23.377
  E0824 13:02:24.308457      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:02:25.309261      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:02:26.309496      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:02:27.310269      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Saw pod success @ 08/24/23 13:02:27.423
  Aug 24 13:02:27.430: INFO: Trying to get logs from node scw-conformance-default-2af6d8b4c6264cc5b9e5e6 pod pod-projected-configmaps-c4ec58a0-2471-463a-808d-955a4874e199 container agnhost-container: <nil>
  STEP: delete the pod @ 08/24/23 13:02:27.483
  Aug 24 13:02:27.515: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "projected-7434" for this suite. @ 08/24/23 13:02:27.523
• [4.260 seconds]
------------------------------
SSSSSSSSSSSSSSSS
------------------------------
[sig-node] Probing container should *not* be restarted with a /healthz http liveness probe [NodeConformance] [Conformance]
test/e2e/common/node/container_probe.go:214
  STEP: Creating a kubernetes client @ 08/24/23 13:02:27.539
  Aug 24 13:02:27.539: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename container-probe @ 08/24/23 13:02:27.539
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 13:02:27.579
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 13:02:27.587
  STEP: Creating pod test-webserver-4162f7d4-1500-4ab5-a7b6-fde9d76ccc39 in namespace container-probe-1530 @ 08/24/23 13:02:27.594
  E0824 13:02:28.310480      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:02:29.310579      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: checking the pod's current state and verifying that restartCount is present @ 08/24/23 13:02:29.631
  Aug 24 13:02:29.639: INFO: Initial restart count of pod test-webserver-4162f7d4-1500-4ab5-a7b6-fde9d76ccc39 is 0
  Aug 24 13:02:29.647: INFO: Get pod test-webserver-4162f7d4-1500-4ab5-a7b6-fde9d76ccc39 in namespace container-probe-1530
  E0824 13:02:30.310792      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:02:31.310906      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 13:02:31.661: INFO: Get pod test-webserver-4162f7d4-1500-4ab5-a7b6-fde9d76ccc39 in namespace container-probe-1530
  E0824 13:02:32.311101      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:02:33.311402      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 13:02:33.672: INFO: Get pod test-webserver-4162f7d4-1500-4ab5-a7b6-fde9d76ccc39 in namespace container-probe-1530
  E0824 13:02:34.312361      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:02:35.312697      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 13:02:35.683: INFO: Get pod test-webserver-4162f7d4-1500-4ab5-a7b6-fde9d76ccc39 in namespace container-probe-1530
  E0824 13:02:36.313149      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:02:37.314088      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 13:02:37.692: INFO: Get pod test-webserver-4162f7d4-1500-4ab5-a7b6-fde9d76ccc39 in namespace container-probe-1530
  E0824 13:02:38.314628      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:02:39.314870      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 13:02:39.704: INFO: Get pod test-webserver-4162f7d4-1500-4ab5-a7b6-fde9d76ccc39 in namespace container-probe-1530
  E0824 13:02:40.315261      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:02:41.315581      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 13:02:41.715: INFO: Get pod test-webserver-4162f7d4-1500-4ab5-a7b6-fde9d76ccc39 in namespace container-probe-1530
  E0824 13:02:42.315868      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:02:43.316358      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 13:02:43.725: INFO: Get pod test-webserver-4162f7d4-1500-4ab5-a7b6-fde9d76ccc39 in namespace container-probe-1530
  E0824 13:02:44.316455      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:02:45.316614      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 13:02:45.736: INFO: Get pod test-webserver-4162f7d4-1500-4ab5-a7b6-fde9d76ccc39 in namespace container-probe-1530
  E0824 13:02:46.317523      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:02:47.318245      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 13:02:47.749: INFO: Get pod test-webserver-4162f7d4-1500-4ab5-a7b6-fde9d76ccc39 in namespace container-probe-1530
  E0824 13:02:48.318344      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:02:49.318498      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 13:02:49.762: INFO: Get pod test-webserver-4162f7d4-1500-4ab5-a7b6-fde9d76ccc39 in namespace container-probe-1530
  E0824 13:02:50.318882      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:02:51.319277      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 13:02:51.771: INFO: Get pod test-webserver-4162f7d4-1500-4ab5-a7b6-fde9d76ccc39 in namespace container-probe-1530
  E0824 13:02:52.319819      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:02:53.320322      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 13:02:53.782: INFO: Get pod test-webserver-4162f7d4-1500-4ab5-a7b6-fde9d76ccc39 in namespace container-probe-1530
  E0824 13:02:54.320393      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:02:55.320921      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 13:02:55.800: INFO: Get pod test-webserver-4162f7d4-1500-4ab5-a7b6-fde9d76ccc39 in namespace container-probe-1530
  E0824 13:02:56.321123      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:02:57.321805      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 13:02:57.811: INFO: Get pod test-webserver-4162f7d4-1500-4ab5-a7b6-fde9d76ccc39 in namespace container-probe-1530
  E0824 13:02:58.322164      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:02:59.322626      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 13:02:59.823: INFO: Get pod test-webserver-4162f7d4-1500-4ab5-a7b6-fde9d76ccc39 in namespace container-probe-1530
  E0824 13:03:00.322724      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:03:01.322858      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 13:03:01.832: INFO: Get pod test-webserver-4162f7d4-1500-4ab5-a7b6-fde9d76ccc39 in namespace container-probe-1530
  E0824 13:03:02.323032      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:03:03.323188      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 13:03:03.843: INFO: Get pod test-webserver-4162f7d4-1500-4ab5-a7b6-fde9d76ccc39 in namespace container-probe-1530
  E0824 13:03:04.323256      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:03:05.323690      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 13:03:05.854: INFO: Get pod test-webserver-4162f7d4-1500-4ab5-a7b6-fde9d76ccc39 in namespace container-probe-1530
  E0824 13:03:06.324696      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:03:07.325620      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 13:03:07.866: INFO: Get pod test-webserver-4162f7d4-1500-4ab5-a7b6-fde9d76ccc39 in namespace container-probe-1530
  E0824 13:03:08.326649      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:03:09.327182      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 13:03:09.878: INFO: Get pod test-webserver-4162f7d4-1500-4ab5-a7b6-fde9d76ccc39 in namespace container-probe-1530
  E0824 13:03:10.327191      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:03:11.327555      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 13:03:11.888: INFO: Get pod test-webserver-4162f7d4-1500-4ab5-a7b6-fde9d76ccc39 in namespace container-probe-1530
  E0824 13:03:12.328294      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:03:13.328467      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 13:03:13.897: INFO: Get pod test-webserver-4162f7d4-1500-4ab5-a7b6-fde9d76ccc39 in namespace container-probe-1530
  E0824 13:03:14.329337      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:03:15.329527      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 13:03:15.908: INFO: Get pod test-webserver-4162f7d4-1500-4ab5-a7b6-fde9d76ccc39 in namespace container-probe-1530
  E0824 13:03:16.330506      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:03:17.331509      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 13:03:17.922: INFO: Get pod test-webserver-4162f7d4-1500-4ab5-a7b6-fde9d76ccc39 in namespace container-probe-1530
  E0824 13:03:18.332413      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:03:19.332587      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 13:03:19.932: INFO: Get pod test-webserver-4162f7d4-1500-4ab5-a7b6-fde9d76ccc39 in namespace container-probe-1530
  E0824 13:03:20.333242      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:03:21.333804      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 13:03:21.943: INFO: Get pod test-webserver-4162f7d4-1500-4ab5-a7b6-fde9d76ccc39 in namespace container-probe-1530
  E0824 13:03:22.334902      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:03:23.335387      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 13:03:23.954: INFO: Get pod test-webserver-4162f7d4-1500-4ab5-a7b6-fde9d76ccc39 in namespace container-probe-1530
  E0824 13:03:24.335904      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:03:25.336283      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 13:03:25.964: INFO: Get pod test-webserver-4162f7d4-1500-4ab5-a7b6-fde9d76ccc39 in namespace container-probe-1530
  E0824 13:03:26.336981      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:03:27.337184      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 13:03:27.976: INFO: Get pod test-webserver-4162f7d4-1500-4ab5-a7b6-fde9d76ccc39 in namespace container-probe-1530
  E0824 13:03:28.337369      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:03:29.337655      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 13:03:29.986: INFO: Get pod test-webserver-4162f7d4-1500-4ab5-a7b6-fde9d76ccc39 in namespace container-probe-1530
  E0824 13:03:30.338316      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:03:31.338718      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 13:03:31.995: INFO: Get pod test-webserver-4162f7d4-1500-4ab5-a7b6-fde9d76ccc39 in namespace container-probe-1530
  E0824 13:03:32.339524      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:03:33.339610      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 13:03:34.005: INFO: Get pod test-webserver-4162f7d4-1500-4ab5-a7b6-fde9d76ccc39 in namespace container-probe-1530
  E0824 13:03:34.340348      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:03:35.340446      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 13:03:36.015: INFO: Get pod test-webserver-4162f7d4-1500-4ab5-a7b6-fde9d76ccc39 in namespace container-probe-1530
  E0824 13:03:36.341297      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:03:37.341951      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 13:03:38.027: INFO: Get pod test-webserver-4162f7d4-1500-4ab5-a7b6-fde9d76ccc39 in namespace container-probe-1530
  E0824 13:03:38.342702      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:03:39.343166      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 13:03:40.036: INFO: Get pod test-webserver-4162f7d4-1500-4ab5-a7b6-fde9d76ccc39 in namespace container-probe-1530
  E0824 13:03:40.343389      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:03:41.343914      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 13:03:42.046: INFO: Get pod test-webserver-4162f7d4-1500-4ab5-a7b6-fde9d76ccc39 in namespace container-probe-1530
  E0824 13:03:42.343965      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:03:43.344301      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 13:03:44.056: INFO: Get pod test-webserver-4162f7d4-1500-4ab5-a7b6-fde9d76ccc39 in namespace container-probe-1530
  E0824 13:03:44.344434      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:03:45.344948      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 13:03:46.066: INFO: Get pod test-webserver-4162f7d4-1500-4ab5-a7b6-fde9d76ccc39 in namespace container-probe-1530
  E0824 13:03:46.345546      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:03:47.346436      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 13:03:48.078: INFO: Get pod test-webserver-4162f7d4-1500-4ab5-a7b6-fde9d76ccc39 in namespace container-probe-1530
  E0824 13:03:48.346876      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:03:49.347312      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 13:03:50.089: INFO: Get pod test-webserver-4162f7d4-1500-4ab5-a7b6-fde9d76ccc39 in namespace container-probe-1530
  E0824 13:03:50.347423      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:03:51.347605      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 13:03:52.100: INFO: Get pod test-webserver-4162f7d4-1500-4ab5-a7b6-fde9d76ccc39 in namespace container-probe-1530
  E0824 13:03:52.348706      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:03:53.348851      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 13:03:54.109: INFO: Get pod test-webserver-4162f7d4-1500-4ab5-a7b6-fde9d76ccc39 in namespace container-probe-1530
  E0824 13:03:54.349731      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:03:55.350507      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 13:03:56.119: INFO: Get pod test-webserver-4162f7d4-1500-4ab5-a7b6-fde9d76ccc39 in namespace container-probe-1530
  E0824 13:03:56.351668      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:03:57.352487      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 13:03:58.131: INFO: Get pod test-webserver-4162f7d4-1500-4ab5-a7b6-fde9d76ccc39 in namespace container-probe-1530
  E0824 13:03:58.353488      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:03:59.353672      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 13:04:00.140: INFO: Get pod test-webserver-4162f7d4-1500-4ab5-a7b6-fde9d76ccc39 in namespace container-probe-1530
  E0824 13:04:00.353984      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:04:01.354216      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 13:04:02.151: INFO: Get pod test-webserver-4162f7d4-1500-4ab5-a7b6-fde9d76ccc39 in namespace container-probe-1530
  E0824 13:04:02.355268      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:04:03.355364      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 13:04:04.160: INFO: Get pod test-webserver-4162f7d4-1500-4ab5-a7b6-fde9d76ccc39 in namespace container-probe-1530
  E0824 13:04:04.355445      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:04:05.355613      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 13:04:06.170: INFO: Get pod test-webserver-4162f7d4-1500-4ab5-a7b6-fde9d76ccc39 in namespace container-probe-1530
  E0824 13:04:06.356210      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:04:07.356644      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 13:04:08.181: INFO: Get pod test-webserver-4162f7d4-1500-4ab5-a7b6-fde9d76ccc39 in namespace container-probe-1530
  E0824 13:04:08.356892      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:04:09.357412      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 13:04:10.192: INFO: Get pod test-webserver-4162f7d4-1500-4ab5-a7b6-fde9d76ccc39 in namespace container-probe-1530
  E0824 13:04:10.357942      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:04:11.358068      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 13:04:12.202: INFO: Get pod test-webserver-4162f7d4-1500-4ab5-a7b6-fde9d76ccc39 in namespace container-probe-1530
  E0824 13:04:12.358525      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:04:13.359031      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 13:04:14.213: INFO: Get pod test-webserver-4162f7d4-1500-4ab5-a7b6-fde9d76ccc39 in namespace container-probe-1530
  E0824 13:04:14.359598      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:04:15.360162      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 13:04:16.224: INFO: Get pod test-webserver-4162f7d4-1500-4ab5-a7b6-fde9d76ccc39 in namespace container-probe-1530
  E0824 13:04:16.360931      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:04:17.362076      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 13:04:18.235: INFO: Get pod test-webserver-4162f7d4-1500-4ab5-a7b6-fde9d76ccc39 in namespace container-probe-1530
  E0824 13:04:18.362726      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:04:19.363033      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 13:04:20.247: INFO: Get pod test-webserver-4162f7d4-1500-4ab5-a7b6-fde9d76ccc39 in namespace container-probe-1530
  E0824 13:04:20.363424      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:04:21.363806      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 13:04:22.257: INFO: Get pod test-webserver-4162f7d4-1500-4ab5-a7b6-fde9d76ccc39 in namespace container-probe-1530
  E0824 13:04:22.363959      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:04:23.364137      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 13:04:24.267: INFO: Get pod test-webserver-4162f7d4-1500-4ab5-a7b6-fde9d76ccc39 in namespace container-probe-1530
  E0824 13:04:24.364169      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:04:25.364370      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 13:04:26.277: INFO: Get pod test-webserver-4162f7d4-1500-4ab5-a7b6-fde9d76ccc39 in namespace container-probe-1530
  E0824 13:04:26.365112      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:04:27.365350      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 13:04:28.289: INFO: Get pod test-webserver-4162f7d4-1500-4ab5-a7b6-fde9d76ccc39 in namespace container-probe-1530
  E0824 13:04:28.365566      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:04:29.365717      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 13:04:30.299: INFO: Get pod test-webserver-4162f7d4-1500-4ab5-a7b6-fde9d76ccc39 in namespace container-probe-1530
  E0824 13:04:30.366252      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:04:31.366673      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 13:04:32.309: INFO: Get pod test-webserver-4162f7d4-1500-4ab5-a7b6-fde9d76ccc39 in namespace container-probe-1530
  E0824 13:04:32.366978      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:04:33.367361      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 13:04:34.319: INFO: Get pod test-webserver-4162f7d4-1500-4ab5-a7b6-fde9d76ccc39 in namespace container-probe-1530
  E0824 13:04:34.367733      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:04:35.368240      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 13:04:36.330: INFO: Get pod test-webserver-4162f7d4-1500-4ab5-a7b6-fde9d76ccc39 in namespace container-probe-1530
  E0824 13:04:36.369068      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:04:37.369256      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 13:04:38.342: INFO: Get pod test-webserver-4162f7d4-1500-4ab5-a7b6-fde9d76ccc39 in namespace container-probe-1530
  E0824 13:04:38.370015      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:04:39.370300      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 13:04:40.354: INFO: Get pod test-webserver-4162f7d4-1500-4ab5-a7b6-fde9d76ccc39 in namespace container-probe-1530
  E0824 13:04:40.370989      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:04:41.371413      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 13:04:42.365: INFO: Get pod test-webserver-4162f7d4-1500-4ab5-a7b6-fde9d76ccc39 in namespace container-probe-1530
  E0824 13:04:42.372226      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:04:43.372548      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:04:44.372766      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 13:04:44.376: INFO: Get pod test-webserver-4162f7d4-1500-4ab5-a7b6-fde9d76ccc39 in namespace container-probe-1530
  E0824 13:04:45.372858      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:04:46.372962      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 13:04:46.385: INFO: Get pod test-webserver-4162f7d4-1500-4ab5-a7b6-fde9d76ccc39 in namespace container-probe-1530
  E0824 13:04:47.373846      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:04:48.374168      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 13:04:48.395: INFO: Get pod test-webserver-4162f7d4-1500-4ab5-a7b6-fde9d76ccc39 in namespace container-probe-1530
  E0824 13:04:49.375019      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:04:50.375443      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 13:04:50.406: INFO: Get pod test-webserver-4162f7d4-1500-4ab5-a7b6-fde9d76ccc39 in namespace container-probe-1530
  E0824 13:04:51.375574      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:04:52.376047      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 13:04:52.414: INFO: Get pod test-webserver-4162f7d4-1500-4ab5-a7b6-fde9d76ccc39 in namespace container-probe-1530
  E0824 13:04:53.376210      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:04:54.376641      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 13:04:54.424: INFO: Get pod test-webserver-4162f7d4-1500-4ab5-a7b6-fde9d76ccc39 in namespace container-probe-1530
  E0824 13:04:55.376794      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:04:56.376951      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 13:04:56.436: INFO: Get pod test-webserver-4162f7d4-1500-4ab5-a7b6-fde9d76ccc39 in namespace container-probe-1530
  E0824 13:04:57.377156      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:04:58.377353      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 13:04:58.448: INFO: Get pod test-webserver-4162f7d4-1500-4ab5-a7b6-fde9d76ccc39 in namespace container-probe-1530
  E0824 13:04:59.377462      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:05:00.377535      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 13:05:00.456: INFO: Get pod test-webserver-4162f7d4-1500-4ab5-a7b6-fde9d76ccc39 in namespace container-probe-1530
  E0824 13:05:01.377720      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:05:02.378494      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 13:05:02.467: INFO: Get pod test-webserver-4162f7d4-1500-4ab5-a7b6-fde9d76ccc39 in namespace container-probe-1530
  E0824 13:05:03.379172      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:05:04.379549      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 13:05:04.476: INFO: Get pod test-webserver-4162f7d4-1500-4ab5-a7b6-fde9d76ccc39 in namespace container-probe-1530
  E0824 13:05:05.379731      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:05:06.380115      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 13:05:06.485: INFO: Get pod test-webserver-4162f7d4-1500-4ab5-a7b6-fde9d76ccc39 in namespace container-probe-1530
  E0824 13:05:07.380209      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:05:08.380395      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 13:05:08.497: INFO: Get pod test-webserver-4162f7d4-1500-4ab5-a7b6-fde9d76ccc39 in namespace container-probe-1530
  E0824 13:05:09.380546      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:05:10.381556      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 13:05:10.505: INFO: Get pod test-webserver-4162f7d4-1500-4ab5-a7b6-fde9d76ccc39 in namespace container-probe-1530
  E0824 13:05:11.381634      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:05:12.381836      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 13:05:12.516: INFO: Get pod test-webserver-4162f7d4-1500-4ab5-a7b6-fde9d76ccc39 in namespace container-probe-1530
  E0824 13:05:13.381881      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:05:14.382176      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 13:05:14.525: INFO: Get pod test-webserver-4162f7d4-1500-4ab5-a7b6-fde9d76ccc39 in namespace container-probe-1530
  E0824 13:05:15.382294      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:05:16.382597      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 13:05:16.536: INFO: Get pod test-webserver-4162f7d4-1500-4ab5-a7b6-fde9d76ccc39 in namespace container-probe-1530
  E0824 13:05:17.383470      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:05:18.383675      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 13:05:18.548: INFO: Get pod test-webserver-4162f7d4-1500-4ab5-a7b6-fde9d76ccc39 in namespace container-probe-1530
  E0824 13:05:19.383768      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:05:20.384128      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 13:05:20.558: INFO: Get pod test-webserver-4162f7d4-1500-4ab5-a7b6-fde9d76ccc39 in namespace container-probe-1530
  E0824 13:05:21.384376      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:05:22.385302      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 13:05:22.569: INFO: Get pod test-webserver-4162f7d4-1500-4ab5-a7b6-fde9d76ccc39 in namespace container-probe-1530
  E0824 13:05:23.385650      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:05:24.385851      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 13:05:24.581: INFO: Get pod test-webserver-4162f7d4-1500-4ab5-a7b6-fde9d76ccc39 in namespace container-probe-1530
  E0824 13:05:25.386378      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:05:26.386658      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 13:05:26.591: INFO: Get pod test-webserver-4162f7d4-1500-4ab5-a7b6-fde9d76ccc39 in namespace container-probe-1530
  E0824 13:05:27.386733      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:05:28.386890      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 13:05:28.602: INFO: Get pod test-webserver-4162f7d4-1500-4ab5-a7b6-fde9d76ccc39 in namespace container-probe-1530
  E0824 13:05:29.387090      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:05:30.387311      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 13:05:30.616: INFO: Get pod test-webserver-4162f7d4-1500-4ab5-a7b6-fde9d76ccc39 in namespace container-probe-1530
  E0824 13:05:31.387495      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:05:32.387637      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 13:05:32.625: INFO: Get pod test-webserver-4162f7d4-1500-4ab5-a7b6-fde9d76ccc39 in namespace container-probe-1530
  E0824 13:05:33.387754      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:05:34.388304      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 13:05:34.637: INFO: Get pod test-webserver-4162f7d4-1500-4ab5-a7b6-fde9d76ccc39 in namespace container-probe-1530
  E0824 13:05:35.388999      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:05:36.389466      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 13:05:36.647: INFO: Get pod test-webserver-4162f7d4-1500-4ab5-a7b6-fde9d76ccc39 in namespace container-probe-1530
  E0824 13:05:37.389700      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:05:38.389942      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 13:05:38.656: INFO: Get pod test-webserver-4162f7d4-1500-4ab5-a7b6-fde9d76ccc39 in namespace container-probe-1530
  E0824 13:05:39.390673      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:05:40.391099      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 13:05:40.665: INFO: Get pod test-webserver-4162f7d4-1500-4ab5-a7b6-fde9d76ccc39 in namespace container-probe-1530
  E0824 13:05:41.391371      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:05:42.392217      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 13:05:42.675: INFO: Get pod test-webserver-4162f7d4-1500-4ab5-a7b6-fde9d76ccc39 in namespace container-probe-1530
  E0824 13:05:43.392385      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:05:44.393002      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 13:05:44.703: INFO: Get pod test-webserver-4162f7d4-1500-4ab5-a7b6-fde9d76ccc39 in namespace container-probe-1530
  E0824 13:05:45.393117      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:05:46.393283      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 13:05:46.712: INFO: Get pod test-webserver-4162f7d4-1500-4ab5-a7b6-fde9d76ccc39 in namespace container-probe-1530
  E0824 13:05:47.393383      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:05:48.393634      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 13:05:48.722: INFO: Get pod test-webserver-4162f7d4-1500-4ab5-a7b6-fde9d76ccc39 in namespace container-probe-1530
  E0824 13:05:49.394655      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:05:50.394854      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 13:05:50.733: INFO: Get pod test-webserver-4162f7d4-1500-4ab5-a7b6-fde9d76ccc39 in namespace container-probe-1530
  E0824 13:05:51.395453      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:05:52.395962      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 13:05:52.742: INFO: Get pod test-webserver-4162f7d4-1500-4ab5-a7b6-fde9d76ccc39 in namespace container-probe-1530
  E0824 13:05:53.396127      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:05:54.396333      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 13:05:54.753: INFO: Get pod test-webserver-4162f7d4-1500-4ab5-a7b6-fde9d76ccc39 in namespace container-probe-1530
  E0824 13:05:55.396409      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:05:56.396702      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 13:05:56.765: INFO: Get pod test-webserver-4162f7d4-1500-4ab5-a7b6-fde9d76ccc39 in namespace container-probe-1530
  E0824 13:05:57.397412      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:05:58.397556      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 13:05:58.779: INFO: Get pod test-webserver-4162f7d4-1500-4ab5-a7b6-fde9d76ccc39 in namespace container-probe-1530
  E0824 13:05:59.398093      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:06:00.398187      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 13:06:00.788: INFO: Get pod test-webserver-4162f7d4-1500-4ab5-a7b6-fde9d76ccc39 in namespace container-probe-1530
  E0824 13:06:01.398443      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:06:02.399236      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 13:06:02.799: INFO: Get pod test-webserver-4162f7d4-1500-4ab5-a7b6-fde9d76ccc39 in namespace container-probe-1530
  E0824 13:06:03.400254      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:06:04.400807      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 13:06:04.810: INFO: Get pod test-webserver-4162f7d4-1500-4ab5-a7b6-fde9d76ccc39 in namespace container-probe-1530
  E0824 13:06:05.400917      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:06:06.401176      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 13:06:06.821: INFO: Get pod test-webserver-4162f7d4-1500-4ab5-a7b6-fde9d76ccc39 in namespace container-probe-1530
  E0824 13:06:07.401397      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:06:08.401506      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 13:06:08.835: INFO: Get pod test-webserver-4162f7d4-1500-4ab5-a7b6-fde9d76ccc39 in namespace container-probe-1530
  E0824 13:06:09.401996      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:06:10.402077      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 13:06:10.845: INFO: Get pod test-webserver-4162f7d4-1500-4ab5-a7b6-fde9d76ccc39 in namespace container-probe-1530
  E0824 13:06:11.402257      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:06:12.402674      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 13:06:12.857: INFO: Get pod test-webserver-4162f7d4-1500-4ab5-a7b6-fde9d76ccc39 in namespace container-probe-1530
  E0824 13:06:13.403073      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:06:14.403387      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 13:06:14.867: INFO: Get pod test-webserver-4162f7d4-1500-4ab5-a7b6-fde9d76ccc39 in namespace container-probe-1530
  E0824 13:06:15.403548      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:06:16.403886      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 13:06:16.877: INFO: Get pod test-webserver-4162f7d4-1500-4ab5-a7b6-fde9d76ccc39 in namespace container-probe-1530
  E0824 13:06:17.404465      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:06:18.404880      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 13:06:18.890: INFO: Get pod test-webserver-4162f7d4-1500-4ab5-a7b6-fde9d76ccc39 in namespace container-probe-1530
  E0824 13:06:19.404957      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:06:20.405299      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 13:06:20.901: INFO: Get pod test-webserver-4162f7d4-1500-4ab5-a7b6-fde9d76ccc39 in namespace container-probe-1530
  E0824 13:06:21.406069      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:06:22.406191      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 13:06:22.910: INFO: Get pod test-webserver-4162f7d4-1500-4ab5-a7b6-fde9d76ccc39 in namespace container-probe-1530
  E0824 13:06:23.407030      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:06:24.407302      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 13:06:24.917: INFO: Get pod test-webserver-4162f7d4-1500-4ab5-a7b6-fde9d76ccc39 in namespace container-probe-1530
  E0824 13:06:25.407514      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:06:26.408061      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 13:06:26.930: INFO: Get pod test-webserver-4162f7d4-1500-4ab5-a7b6-fde9d76ccc39 in namespace container-probe-1530
  E0824 13:06:27.408835      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:06:28.409019      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 13:06:28.941: INFO: Get pod test-webserver-4162f7d4-1500-4ab5-a7b6-fde9d76ccc39 in namespace container-probe-1530
  E0824 13:06:29.409549      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:06:30.409874      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 13:06:30.942: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: deleting the pod @ 08/24/23 13:06:30.954
  STEP: Destroying namespace "container-probe-1530" for this suite. @ 08/24/23 13:06:30.981
• [243.458 seconds]
------------------------------
SSSSSSSSSSS
------------------------------
[sig-api-machinery] ResourceQuota should apply changes to a resourcequota status [Conformance]
test/e2e/apimachinery/resource_quota.go:1013
  STEP: Creating a kubernetes client @ 08/24/23 13:06:30.997
  Aug 24 13:06:30.997: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename resourcequota @ 08/24/23 13:06:30.999
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 13:06:31.063
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 13:06:31.07
  STEP: Creating resourceQuota "e2e-rq-status-2w52q" @ 08/24/23 13:06:31.085
  Aug 24 13:06:31.101: INFO: Resource quota "e2e-rq-status-2w52q" reports spec: hard cpu limit of 500m
  Aug 24 13:06:31.101: INFO: Resource quota "e2e-rq-status-2w52q" reports spec: hard memory limit of 500Mi
  STEP: Updating resourceQuota "e2e-rq-status-2w52q" /status @ 08/24/23 13:06:31.101
  STEP: Confirm /status for "e2e-rq-status-2w52q" resourceQuota via watch @ 08/24/23 13:06:31.148
  Aug 24 13:06:31.152: INFO: observed resourceQuota "e2e-rq-status-2w52q" in namespace "resourcequota-3990" with hard status: v1.ResourceList(nil)
  Aug 24 13:06:31.152: INFO: Found resourceQuota "e2e-rq-status-2w52q" in namespace "resourcequota-3990" with hard status: v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:500, scale:-3}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"500m", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:524288000, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"500Mi", Format:"BinarySI"}}
  Aug 24 13:06:31.152: INFO: ResourceQuota "e2e-rq-status-2w52q" /status was updated
  STEP: Patching hard spec values for cpu & memory @ 08/24/23 13:06:31.161
  Aug 24 13:06:31.174: INFO: Resource quota "e2e-rq-status-2w52q" reports spec: hard cpu limit of 1
  Aug 24 13:06:31.174: INFO: Resource quota "e2e-rq-status-2w52q" reports spec: hard memory limit of 1Gi
  STEP: Patching "e2e-rq-status-2w52q" /status @ 08/24/23 13:06:31.174
  STEP: Confirm /status for "e2e-rq-status-2w52q" resourceQuota via watch @ 08/24/23 13:06:31.186
  Aug 24 13:06:31.189: INFO: observed resourceQuota "e2e-rq-status-2w52q" in namespace "resourcequota-3990" with hard status: v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:500, scale:-3}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"500m", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:524288000, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"500Mi", Format:"BinarySI"}}
  Aug 24 13:06:31.189: INFO: Found resourceQuota "e2e-rq-status-2w52q" in namespace "resourcequota-3990" with hard status: v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:1, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"1", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:1073741824, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"1Gi", Format:"BinarySI"}}
  Aug 24 13:06:31.190: INFO: ResourceQuota "e2e-rq-status-2w52q" /status was patched
  STEP: Get "e2e-rq-status-2w52q" /status @ 08/24/23 13:06:31.19
  Aug 24 13:06:31.200: INFO: Resourcequota "e2e-rq-status-2w52q" reports status: hard cpu of 1
  Aug 24 13:06:31.200: INFO: Resourcequota "e2e-rq-status-2w52q" reports status: hard memory of 1Gi
  STEP: Repatching "e2e-rq-status-2w52q" /status before checking Spec is unchanged @ 08/24/23 13:06:31.208
  Aug 24 13:06:31.222: INFO: Resourcequota "e2e-rq-status-2w52q" reports status: hard cpu of 2
  Aug 24 13:06:31.223: INFO: Resourcequota "e2e-rq-status-2w52q" reports status: hard memory of 2Gi
  Aug 24 13:06:31.226: INFO: Found resourceQuota "e2e-rq-status-2w52q" in namespace "resourcequota-3990" with hard status: v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:2, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"2", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:2147483648, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"2Gi", Format:"BinarySI"}}
  E0824 13:06:31.410730      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:06:32.411655      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:06:33.412144      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:06:34.412635      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:06:35.413290      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:06:36.413925      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:06:37.414757      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:06:38.414981      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:06:39.415291      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:06:40.415403      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:06:41.416375      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:06:42.417206      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:06:43.417565      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:06:44.417820      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:06:45.418142      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:06:46.418270      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:06:47.419299      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:06:48.419392      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:06:49.419611      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:06:50.419951      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:06:51.420966      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:06:52.421980      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:06:53.422256      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:06:54.422431      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:06:55.422727      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:06:56.423258      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:06:57.424135      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:06:58.424464      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:06:59.424816      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:07:00.425119      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:07:01.425882      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:07:02.426534      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:07:03.426585      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:07:04.426752      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:07:05.426910      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:07:06.427384      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:07:07.428344      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:07:08.428529      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:07:09.428663      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:07:10.428786      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:07:11.428999      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:07:12.430050      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:07:13.430465      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:07:14.430817      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:07:15.431541      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:07:16.431988      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:07:17.432316      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:07:18.432623      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:07:19.432911      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:07:20.433157      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:07:21.433333      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:07:22.433861      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:07:23.434301      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:07:24.434992      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:07:25.435307      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:07:26.435966      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:07:27.436124      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:07:28.436511      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:07:29.436803      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:07:30.437255      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:07:31.437435      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:07:32.437992      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:07:33.438356      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:07:34.438589      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:07:35.439253      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:07:36.439969      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:07:37.440444      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:07:38.443000      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:07:39.443335      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:07:40.443545      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:07:41.444280      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:07:42.445096      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:07:43.445750      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:07:44.446157      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:07:45.446541      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:07:46.447534      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:07:47.448538      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:07:48.448915      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:07:49.449234      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:07:50.449810      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:07:51.449910      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:07:52.450681      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:07:53.451173      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:07:54.451467      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:07:55.451570      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:07:56.452413      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:07:57.453204      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:07:58.453409      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:07:59.453583      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:08:00.453702      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:08:01.454276      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:08:02.454861      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:08:03.455170      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:08:04.455398      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:08:05.455547      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:08:06.456168      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:08:07.456647      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:08:08.456680      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:08:09.457173      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:08:10.457475      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:08:11.458142      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:08:12.458747      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:08:13.459085      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:08:14.459291      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:08:15.459751      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:08:16.460760      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:08:17.460930      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:08:18.461110      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:08:19.461576      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:08:20.462098      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:08:21.462661      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:08:22.462869      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:08:23.463024      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:08:24.463275      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:08:25.463685      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:08:26.463809      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:08:27.464670      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:08:28.465462      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:08:29.466426      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:08:30.466534      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:08:31.467201      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:08:32.467319      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:08:33.467536      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:08:34.468054      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:08:35.468396      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:08:36.469307      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:08:37.470366      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:08:38.470658      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:08:39.470852      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:08:40.471034      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:08:41.471521      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:08:42.472133      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:08:43.472397      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:08:44.472810      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:08:45.473741      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:08:46.474471      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:08:47.475450      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:08:48.475623      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:08:49.476102      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:08:50.476478      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:08:51.477413      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:08:52.478205      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:08:53.478475      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:08:54.478577      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:08:55.478876      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:08:56.479396      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:08:57.480083      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:08:58.480196      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:08:59.480489      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:09:00.480844      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:09:01.481517      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:09:02.481660      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:09:03.481953      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:09:04.482099      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:09:05.482328      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:09:06.482749      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:09:07.483724      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:09:08.483910      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:09:09.484104      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:09:10.484348      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:09:11.484476      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:09:12.484630      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:09:13.484872      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:09:14.485032      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:09:15.485208      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:09:16.485332      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:09:17.486129      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:09:18.486635      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:09:19.486935      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:09:20.487312      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:09:21.487993      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:09:22.488165      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:09:23.488348      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:09:24.488719      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:09:25.489004      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:09:26.489668      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:09:27.489861      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:09:28.490032      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:09:29.490514      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:09:30.490812      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:09:31.490935      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:09:32.491209      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:09:33.491772      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:09:34.492185      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:09:35.492702      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:09:36.492897      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:09:37.493038      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:09:38.493225      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:09:39.493429      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:09:40.493617      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:09:41.494422      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:09:42.494650      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:09:43.495282      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:09:44.495639      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:09:45.496680      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:09:46.497167      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:09:47.498006      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:09:48.498667      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:09:49.499066      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:09:50.499268      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:09:51.500099      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:09:52.500280      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:09:53.500401      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:09:54.500534      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:09:55.500634      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:09:56.501727      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:09:57.502533      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:09:58.502924      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:09:59.503402      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:10:00.503723      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:10:01.504812      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:10:02.505110      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:10:03.505313      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:10:04.505796      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:10:05.505965      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:10:06.506681      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:10:07.506885      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:10:08.507000      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:10:09.507263      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:10:10.507407      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:10:11.507486      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:10:12.508120      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:10:13.508284      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:10:14.508382      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:10:15.508655      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:10:16.508860      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:10:17.509753      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:10:18.509918      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:10:19.510040      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:10:20.510949      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:10:21.511915      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:10:22.512430      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:10:23.512880      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:10:24.513336      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:10:25.513359      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:10:26.513513      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:10:27.514367      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:10:28.514533      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:10:29.514695      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:10:30.514868      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:10:31.515924      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:10:32.515998      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:10:33.516141      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:10:34.516390      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:10:35.516543      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:10:36.516652      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:10:37.516859      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:10:38.517032      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:10:39.517225      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:10:40.517351      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:10:41.518409      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:10:42.518764      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:10:43.518797      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:10:44.518920      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:10:45.519100      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:10:46.519692      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:10:47.520713      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:10:48.521085      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:10:49.521467      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:10:50.521635      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:10:51.521837      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:10:52.522288      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:10:53.522489      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:10:54.525801      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:10:55.526254      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:10:56.527128      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:10:57.527292      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:10:58.527494      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:10:59.527927      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:11:00.528150      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:11:01.529143      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:11:02.529356      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:11:03.529806      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:11:04.530013      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:11:05.530278      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:11:06.531096      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:11:07.531965      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:11:08.532359      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:11:09.532754      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:11:10.533072      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:11:11.533386      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:11:12.534168      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:11:13.534560      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:11:14.534928      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:11:15.535106      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:11:16.535858      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:11:17.536000      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:11:18.536133      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:11:19.536280      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:11:20.536897      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:11:21.537139      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:11:22.537221      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:11:23.537397      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:11:24.537614      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:11:25.537802      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:11:26.537887      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:11:27.538338      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:11:28.538759      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:11:29.538968      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:11:30.539643      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Aug 24 13:11:31.243: INFO: ResourceQuota "e2e-rq-status-2w52q" Spec was unchanged and /status reset
  Aug 24 13:11:31.243: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "resourcequota-3990" for this suite. @ 08/24/23 13:11:31.254
• [300.271 seconds]
------------------------------
SSSSSSSS
------------------------------
[sig-node] Downward API should provide container's limits.cpu/memory and requests.cpu/memory as env vars [NodeConformance] [Conformance]
test/e2e/common/node/downwardapi.go:167
  STEP: Creating a kubernetes client @ 08/24/23 13:11:31.269
  Aug 24 13:11:31.269: INFO: >>> kubeConfig: /tmp/kubeconfig-1002171096
  STEP: Building a namespace api object, basename downward-api @ 08/24/23 13:11:31.27
  STEP: Waiting for a default service account to be provisioned in namespace @ 08/24/23 13:11:31.304
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 08/24/23 13:11:31.312
  STEP: Creating a pod to test downward api env vars @ 08/24/23 13:11:31.32
  E0824 13:11:31.540278      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:11:32.540947      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:11:33.541172      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0824 13:11:34.541474      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Saw pod success @ 08/24/23 13:11:35.376
  Aug 24 13:11:35.386: INFO: Trying to get logs from node scw-conformance-default-2af6d8b4c6264cc5b9e5e6 pod downward-api-2fdcf0c0-4e20-4124-acd9-cd7f8a977f2f container dapi-container: <nil>
  STEP: delete the pod @ 08/24/23 13:11:35.443
  Aug 24 13:11:35.476: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "downward-api-1970" for this suite. @ 08/24/23 13:11:35.489
• [4.237 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[SynchronizedAfterSuite] 
test/e2e/e2e.go:88
  Aug 24 13:11:35.509: INFO: Running AfterSuite actions on node 1
  Aug 24 13:11:35.509: INFO: Skipping dumping logs from cluster
[SynchronizedAfterSuite] PASSED [0.000 seconds]
------------------------------
[ReportAfterSuite] Kubernetes e2e suite report
test/e2e/e2e_test.go:157
[ReportAfterSuite] PASSED [0.000 seconds]
------------------------------
[ReportAfterSuite] Kubernetes e2e JUnit report
test/e2e/framework/test_context.go:585
  E0824 13:11:35.542294      22 retrywatcher.go:129] "Watch failed" err="context canceled"
[ReportAfterSuite] PASSED [0.078 seconds]
------------------------------

Ran 380 of 7387 Specs in 6268.442 seconds
SUCCESS! -- 380 Passed | 0 Failed | 0 Pending | 7007 Skipped
PASS

Ginkgo ran 1 suite in 1h44m28.798416504s
Test Suite Passed
